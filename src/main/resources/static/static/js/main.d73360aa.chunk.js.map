{"version":3,"sources":["store/reducer.js","store/actionTypes.js","store/index.js","component/AppTabBar.jsx","api/request.js","util/httpUtils.js","api/dashboard.js","store/actionCreators.js","api/sensor.js","api/connection.js","api/config.js","util/DataConvertor.js","component/content/Dashboard.jsx","api/slot.js","component/commons/FloatButton.jsx","component/content/setting/SensorSetting.jsx","component/content/setting/SettingMenu.jsx","component/content/setting/SlotSetting.jsx","component/content/setting/ConnectionSetting.jsx","component/content/setting/SlotDetailSetting.jsx","component/content/setting/SystemSetting.jsx","api/serial.js","component/content/setting/SystemPropsSetting.jsx","component/content/Setting.jsx","component/content/Address.jsx","component/content/Logs.jsx","component/content/About.jsx","component/AppContent.jsx","component/AppHeader.jsx","util/History.js","App.js","serviceWorker.js","index.js"],"names":["defaultState","showTabBar","enableTabBar","showHeader","globalTitle","routerPath","dashboardSlots","sensors","connections","user","name","actionTable","registerReducer","type","reducer","state","action","data","sensorId","hasElable","hasElabel","sensor","id","JSON","parse","stringify","filter","connection","allEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","handler","AppTabBar","props","path","this","className","unselectedTintColor","tintColor","barTintColor","hidden","tabBarPosition","Item","title","selected","icon","selectedIcon","onPress","pushPath","setState","history","push","pathname","React","Component","withRouter","connect","hideLoading","hide","showError","msg","fail","request","options","showLoadingToast","loading","Promise","resolve","reject","axios","httpRequest","then","res","status","body","code","catch","err","errStr","toString","setTabBarState","show","setTitle","asyncFetchDashboardSlotData","dispatch","url","method","slots","key","hasOwnProperty","sort","a","b","slotNo","localeCompare","asyncFetchSensors","toggleSensorElable","asyncFetchConnection","asyncDeleteConnection","deleteConnection","fetchEnableTabBarAction","value","setEnableTabBarAction","enable","setEnableTabBar","connectionTypes","1","2","asConnectionType","stateTable","3","4","5","TabItems","Dashboard","sensorModalVisible","operationSlot","searchSkuNo","noticeSlots","renderSlotCard","bind","searchBarFocus","startFetchData","clearInterval","fetchTimer","fetchSlotData","setInterval","searchBar","focus","groupedSlots","groups","putSlot","slot","noItems","match","groupSlots","highlightSlotIds","firstNoticeSlot","onClick","tabs","onChange","tab","index","onTabChange","onSubmit","e","triggerHighlight","ref","onBlur","skuName","skuShelfLifeOpenDays","map","group","renderGroupItem","wrap","justify","sku","slotCardClassName","isWan","isDisable","isOffline","incredible","isIncredible","toleranceState","asStateString","onSlotCardClick","skuNo","count","trim","setTimeout","component","FloatButton","iconType","SensorSetting","renderHeader","Header","address","extra","deviceSn","Body","checked","toggleElabel","platform","Footer","content","showOperationActions","fetchSensors","buttons","showActionSheetWithOptions","cancelButtonIndex","length","destructiveButtonIndex","callReloadSensors","alert","text","SettingMenu","go","OperationActions","SlotSetting","fetchSlots","toSlotDetail","showOperationSheet","doZeroAll","ConnectionOperations","label","ConnectionSetting","createDialogVisible","create","target","serialPorts","fetchConnection","showConnectionOperations","showCreateDialog","visible","transparent","footer","createConnection","maskClosable","cols","setCreateType","disabled","placeholder","input","setCreateTarget","arr","setCreateTargetSerial","types","newCreate","port","serialIndexList","scanConnection","ActionButtons","SlotDetailSetting","slotId","params","fetchSlotInfo","setUpdateSlotProp","skuApw","skuTolerance","applyModify","toggleELabel","openOperation","buttonIndex","button","doZero","hasELabel","option","SystemSetting","systemInfo","killButtonState","libLoadVisible","reloadLibPath","appName","appVersion","dbVersion","pid","showLibLoadModal","libPath","killProcess","reloadLibrary","autoHeight","SystemPropsSetting","systemProps","propList","p","labelNumber","Setting","exact","Address","img","size","style","fill","message","info","Logs","About","drawerOpen","marqueeProps","loop","autoplay","infinite","backgroundColor","AppContent","AppHeader","popoverVisible","leftContent","onBackClick","rightContent","mode","mask","overlay","data-seed","whiteSpace","onSelect","onPopoverSelect","goBack","createBrowserHistory","notifyPathChanged","location","setRouterPath","search","hash","listen","App","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.d73360aa.chunk.js","sourcesContent":["import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\n\r\nconst defaultState = {\r\n    showTabBar: true,\r\n    enableTabBar: false,\r\n    showHeader: true,\r\n    globalTitle: '重力货道',\r\n    routerPath: null,\r\n    dashboardSlots: [],\r\n    sensors: [],\r\n    connections: [],\r\n    user: {\r\n        name: 'MonolithIoT'\r\n    }\r\n};\r\nconst actionTable = {};\r\nconst registerReducer = (type, reducer) => {\r\n    actionTable[type] = reducer;\r\n};\r\nregisterReducer(SET_TABBAR_STATE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showTabBar: action.data\r\n    };\r\n});\r\nregisterReducer(SET_ROUTER_PATH, (state, action) => {\r\n    return {\r\n        ...state,\r\n        routerPath: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_DASHBOARD_SLOT_DATA, (state, action) => {\r\n    return {\r\n        ...state,\r\n        dashboardSlots: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(SET_TITLE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        globalTitle: action.data,\r\n    }\r\n});\r\nregisterReducer(ASYNC_FETCH_SENSORS, (state, action) => {\r\n    return {\r\n        ...state,\r\n        sensors: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(TOGGLE_SENSOR_ELABLE, (state, action) => {\r\n    const sensors = state.sensors;\r\n    const sensorId = action.data.sensorId;\r\n    const hasElable = action.data.hasElabel;\r\n    for (let sensor of sensors) {\r\n        if (sensor.id === sensorId) {\r\n            sensor.hasElable = hasElable;\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        sensors: JSON.parse(JSON.stringify(sensors))\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_CONNECTION, (state, action) => {\r\n    return {\r\n        ...state,\r\n        connections: action.data,\r\n    };\r\n});\r\nregisterReducer(DELETE_CONNECTION, (state, action) => {\r\n    const id = action.data.id;\r\n    const connections = state.connections.filter(connection => connection.id !== id);\r\n    return {\r\n        ...state,\r\n        connections\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_TAB_BAR, (state, action) => {\r\n    return {\r\n        ...state,\r\n        enableTabBar: action.data,\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_HEADER, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showHeader: action.data\r\n    };\r\n});\r\nexport default (state = defaultState, action) => {\r\n    const type = action.type;\r\n    if (type in actionTable) {\r\n        const handler = actionTable[type];\r\n        return handler(state, action);\r\n    }\r\n    return state;\r\n}\r\n","export const SET_USER = \"user.set\";\r\n\r\nexport const SET_TABBAR_STATE = 'tabBar.set';\r\n\r\nexport const SET_ROUTER_PATH = 'router.path.set';\r\n\r\nexport const ASYNC_FETCH_DASHBOARD_SLOT_DATA = 'dashboard.slot_data.fetch.async';\r\n\r\nexport const SET_TITLE = 'title.set';\r\n\r\nexport const ASYNC_FETCH_SENSORS = 'sensors.fetch.async';\r\n\r\nexport const TOGGLE_SENSOR_ELABLE = 'sensor.elabel.toggle';\r\n\r\nexport const ASYNC_FETCH_CONNECTION = 'connections.fetch.async';\r\n\r\nexport const DELETE_CONNECTION = 'connection.delete';\r\n\r\nexport const SET_ENABLE_TAB_BAR = 'system.tabBar.set';\r\n\r\nexport const SET_ENABLE_HEADER = 'system.header.set';\r\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport reducer from './reducer';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst allEnhancers = reduxDevTools(applyMiddleware(thunk));\r\nconst store = createStore(reducer, allEnhancers);\r\n\r\nexport default store;\r\n","import React from 'react'\r\nimport {TabBar} from 'antd-mobile'\r\nimport {connect} from 'react-redux';\r\nimport './AppTabBar.sass'\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showTabBar: state.showTabBar,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass AppTabBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            path: '/',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const showTabBar = this.props.showTabBar && this.props.enableTabBar;\r\n        const {path} = this.state;\r\n        if (showTabBar) {\r\n            return (\r\n                <div className=\"appTabBar\">\r\n                    <TabBar\r\n                        unselectedTintColor=\"#949494\"\r\n                        tintColor=\"#33A3F4\"\r\n                        barTintColor=\"white\"\r\n                        hidden={!this.props.showTabBar}\r\n                        tabBarPosition=\"bottom\">\r\n                        <TabBar.Item title=\"Dashboard\"\r\n                                     selected={path === '/'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe64e;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe64e;</i>}\r\n                                     onPress={() => this.pushPath('/')}/>\r\n                        <TabBar.Item title=\"Logs\"\r\n                                     selected={path === '/logs'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe60c;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe60c;</i>}\r\n                                     onPress={() => this.pushPath('/logs')}/>\r\n                        <TabBar.Item title=\"Address\"\r\n                                     selected={path === '/address'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe61b;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe61b;</i>}\r\n                                     onPress={() => this.pushPath('/address')}/>\r\n                        <TabBar.Item title=\"Setting\"\r\n                                     selected={path === '/setting'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe660;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe660;</i>}\r\n                                     onPress={() => this.pushPath('/setting')}/>\r\n                    </TabBar>\r\n                </div>)\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    pushPath(path) {\r\n        this.setState({\r\n            path,\r\n        });\r\n        this.props.history.push({\r\n            pathname: path,\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(AppTabBar));\r\n","import {httpRequest} from '../util/httpUtils';\r\nimport {Toast} from 'antd-mobile'\r\n\r\nconst showLoading = () => {\r\n    Toast.loading('Loading', 0);\r\n};\r\nconst hideLoading = () => {\r\n    Toast.hide();\r\n};\r\nconst showError = (msg) => {\r\n    Toast.fail(msg);\r\n};\r\n\r\n\r\nexport function request(options) {\r\n    const showLoadingToast = !options.hideLoading;\r\n    if (showLoadingToast) {\r\n        showLoading();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        httpRequest(options)\r\n            .then(res => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                if (res.status !== 200) {\r\n                    showError(`Http Response Status:${res.status}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                const body = res.data;\r\n                if (body.code !== 200) {\r\n                    showError(`Error [${body.code}]:${body.msg}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                resolve(body.data);\r\n            }).catch(err => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                const errStr = err.toString();\r\n                showError(errStr);\r\n                reject(err);\r\n            }\r\n        );\r\n    })\r\n}\r\n","import axios from 'axios'\r\n\r\nexport function httpRequest(options) {\r\n    return axios(options);\r\n}\r\n","import {request} from './request';\r\n\r\nexport const fetchSlotData = () => {\r\n    return request({\r\n        url: '/api/dashboard/slot-data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchSystemInfo = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-infos',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchSystemProps = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-props',\r\n        method: 'get',\r\n    });\r\n};\r\n","import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    SET_USER,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\nimport {fetchSlotData} from '../api/dashboard';\r\nimport {fetchSensors, toggleElable} from '../api/sensor';\r\nimport {deleteConnection, fetchConnections} from '../api/connection';\r\nimport {fetchEnableTabBar, setEnableTabBar} from '../api/config';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: SET_USER,\r\n        data: user\r\n    }\r\n};\r\nexport const setTabBarState = show => {\r\n    return {\r\n        type: SET_TABBAR_STATE,\r\n        data: show\r\n    };\r\n};\r\n\r\nexport const setRouterPath = info => {\r\n    return {\r\n        type: SET_ROUTER_PATH,\r\n        data: info\r\n    };\r\n};\r\nexport const setTitle = title => {\r\n    return {\r\n        type: SET_TITLE,\r\n        data: title,\r\n    }\r\n};\r\nexport const asyncFetchDashboardSlotData = () => {\r\n    return dispatch => {\r\n        fetchSlotData().then(res => {\r\n            const slots = [];\r\n            for (const key in res) {\r\n                if (res.hasOwnProperty(key)) {\r\n                    slots.push(res[key]);\r\n                }\r\n            }\r\n            const action = {\r\n                type: ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n                data: slots.sort((a, b) => a.slotNo.localeCompare(b.slotNo)),\r\n            };\r\n            dispatch(action);\r\n        });\r\n    }\r\n};\r\n\r\nexport const asyncFetchSensors = () => {\r\n    return dispatch => {\r\n        fetchSensors().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_SENSORS,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const toggleSensorElable = (sensorId, hasElabel) => {\r\n    return dispatch => {\r\n        toggleElable().then(() => {\r\n            const action = {\r\n                type: TOGGLE_SENSOR_ELABLE,\r\n                data: {\r\n                    sensorId,\r\n                    hasElabel\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    };\r\n};\r\n\r\n\r\nexport const asyncFetchConnection = () => {\r\n    return dispatch => {\r\n        fetchConnections().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_CONNECTION,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const asyncDeleteConnection = id => {\r\n    return dispatch => {\r\n        deleteConnection(id).then(() => {\r\n            const action = {\r\n                type: DELETE_CONNECTION,\r\n                data: {\r\n                    id: id\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    }\r\n};\r\n\r\nexport const fetchEnableTabBarAction = () => {\r\n    return dispatch => {\r\n        fetchEnableTabBar().then(res => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: res.value === 'true',\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const setEnableTabBarAction = enable => {\r\n    return dispatch => {\r\n        setEnableTabBar(enable).then(() => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: enable,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const showHeader = show => {\r\n    return {\r\n        type: SET_ENABLE_HEADER,\r\n        data: show,\r\n    };\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/_with-slot',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const toggleElable = (sensorId, hasElabel) => {\r\n    return new Promise((resolve, reject) => {\r\n        resolve();\r\n    })\r\n};\r\n\r\n\r\nexport const reloadSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/reload',\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchConnections = () => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const deleteConnection = id => {\r\n    return request({\r\n        url: `/api/connection/${id}`,\r\n        method: 'delete',\r\n    });\r\n};\r\n\r\nexport const createConnection = connection => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'put',\r\n        data: connection,\r\n    });\r\n};\r\n\r\n\r\nexport const scanPort = () => {\r\n    return request({\r\n        url: '/api/serial/scan',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const scanDevice = id => {\r\n    return request({\r\n        url: `/api/connection/${id}/_scan`,\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\n\r\nexport const fetchEnableTabBar = () => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setEnableTabBar = enable => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'post',\r\n        data: {\r\n            value: enable,\r\n        },\r\n    });\r\n};\r\n","export const asKg = g => {\r\n    return (g / 1000.0).toFixed(3);\r\n};\r\n\r\nexport const isWan = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isIncredible = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isDisable = state => {\r\n    return state === 3;\r\n};\r\n\r\nexport const isOffline = state => {\r\n    return state === 2;\r\n};\r\n\r\nconst connectionTypes = {\r\n    1: 'Serial',\r\n    2: 'Network',\r\n};\r\n\r\nexport const asConnectionType = type => {\r\n    if (type in connectionTypes) {\r\n        return connectionTypes[type];\r\n    }\r\n    return `Unknown [${type}]`;\r\n};\r\n\r\nconst weightStateTable = {\r\n    1: 'stable',\r\n    2: 'dynamic',\r\n    3: 'underLoad',\r\n    4: 'overLoad',\r\n};\r\nexport const isStable = weightState => {\r\n    return weightState === 1;\r\n};\r\n\r\nexport const asWeightStateString = state => {\r\n    return state in weightStateTable ? weightStateTable[state] : state;\r\n};\r\n\r\n\r\nexport const groupSlots = slots => {\r\n    const groups = {};\r\n    const putSlot = (name, slot) => {\r\n        if (name in groups) {\r\n            groups[name].push(slot);\r\n        } else {\r\n            groups[name] = [slot];\r\n        }\r\n    };\r\n    for (let slot of slots) {\r\n        const slotNo = slot.slotNo;\r\n        const noItems = slotNo.match(/^(\\w+)-(\\d+)-(\\w+)$/);\r\n        if (noItems) {\r\n            const groupName = `${noItems[1]}货架第${noItems[2]}层`;\r\n            putSlot(groupName, slot);\r\n        } else {\r\n            putSlot('未分组货道', slot);\r\n        }\r\n    }\r\n    const res = [];\r\n    for (let name in groups) {\r\n        if (!groups.hasOwnProperty(name)) {\r\n            continue;\r\n        }\r\n        res.push({\r\n            name,\r\n            slots: groups[name],\r\n        });\r\n    }\r\n    return res;\r\n};\r\n\r\nconst stateTable = {\r\n    1: '使用中',\r\n    2: '离线',\r\n    3: '已停用',\r\n    4: '超载',\r\n    5: '欠载',\r\n};\r\nexport const asStateString = state => {\r\n    if (state in stateTable) {\r\n        return stateTable[state];\r\n    }\r\n    return 'Unknown State:' + state;\r\n};\r\n","import React, {Component} from 'react';\r\nimport {asyncFetchDashboardSlotData, setTabBarState, setTitle, showHeader} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport './Dashboard.sass'\r\nimport {Flex, NoticeBar, SearchBar, Tabs, Toast, WingBlank} from 'antd-mobile';\r\nimport {asStateString, groupSlots, isDisable, isIncredible, isOffline, isWan} from '../../util/DataConvertor';\r\nimport {highlightBySku} from '../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        slots: state.dashboardSlots\r\n    };\r\n};\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSlotData: (...args) => dispatch(asyncFetchDashboardSlotData(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        showHeader: (...args) => dispatch(showHeader(...args)),\r\n        showTabBar: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nconst TabItems = [\r\n    {\r\n        title: '重力货道数据',\r\n        key: 'dashboard',\r\n    },\r\n    {\r\n        title: '重力货道配置',\r\n        key: 'settings',\r\n    }\r\n];\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: [],\r\n            sensorModalVisible: false,\r\n            operationSlot: {},\r\n            searchSkuNo: '',\r\n            noticeSlots: [],\r\n        };\r\n        this.props.setTitle('Dashboard');\r\n        this.renderSlotCard = this.renderSlotCard.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.searchBarFocus();\r\n        this.startFetchData();\r\n        this.props.showHeader(false);\r\n        this.props.showTabBar(false);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.fetchTimer);\r\n        this.props.showHeader(true);\r\n        this.props.showTabBar(true);\r\n    }\r\n\r\n    startFetchData() {\r\n        this.props.fetchSlotData();\r\n        this.fetchTimer = setInterval(() => {\r\n            this.props.fetchSlotData();\r\n        }, 10 * 1000);\r\n    }\r\n\r\n    searchBarFocus() {\r\n        this.searchBar.focus();\r\n    }\r\n\r\n    render() {\r\n        const slots = this.props.slots;\r\n        const {searchSkuNo, noticeSlots} = this.state;\r\n        const groupedSlots = groupSlots(slots);\r\n        this.highlightSlotIds = {};\r\n        for (let slot of noticeSlots) {\r\n            this.highlightSlotIds[slot.id] = true;\r\n        }\r\n        const firstNoticeSlot = noticeSlots ? noticeSlots[0] : null;\r\n        return (\r\n            <div className=\"dashboard\" onClick={() => this.searchBarFocus()}>\r\n                <Tabs tabs={TabItems} onChange={(tab, index) => this.onTabChange(tab, index)}/>\r\n                <SearchBar\r\n                    value={searchSkuNo}\r\n                    onSubmit={e => this.triggerHighlight(e)}\r\n                    ref={ref => this.searchBar = ref}\r\n                    onBlur={() => this.searchBarFocus()}\r\n                    onChange={searchSkuNo => this.setState({searchSkuNo})}/>\r\n                <div className=\"notice-list\">\r\n                    {\r\n                        firstNoticeSlot ? (slot => (\r\n                            <NoticeBar className=\"notice\">{slot.skuName}, 开封后保质期\r\n                                <span className=\"days\">{slot.skuShelfLifeOpenDays}</span>天\r\n                            </NoticeBar>))(firstNoticeSlot) : null\r\n                    }\r\n                </div>\r\n                <div className=\"slot-groups\">\r\n                    {\r\n                        groupedSlots.map(group => this.renderGroupItem(group))\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderGroupItem(group) {\r\n        return (<div className=\"group-item\" key={group.name}>\r\n            <p className=\"group-name\">\r\n                {group.name}\r\n            </p>\r\n            <WingBlank>\r\n                <Flex className=\"slots\" wrap={\"wrap\"} justify=\"between\">\r\n                    {\r\n                        group.slots.map(slot => this.renderSlotCard(slot))\r\n                    }\r\n                </Flex>\r\n            </WingBlank>\r\n        </div>)\r\n    }\r\n\r\n    renderSlotCard(slot) {\r\n        const sku = slot.sku || {};\r\n        const data = slot.data || {};\r\n        let slotCardClassName = 'slot-card';\r\n        if (slot.id in this.highlightSlotIds) {\r\n            slotCardClassName += ' slot-card-highlight';\r\n        } else {\r\n            if (isWan(slot.state)) {\r\n                if (isDisable(slot.state)) {\r\n                    slotCardClassName += ' slot-card-disable';\r\n                } else if (isOffline(slot.state)) {\r\n                    slotCardClassName += ' slot-card-offline';\r\n                } else {\r\n                    slotCardClassName += ' slot-card-warn';\r\n                }\r\n            }\r\n        }\r\n        const incredible = isIncredible(data.toleranceState);\r\n        const state = asStateString(slot.state);\r\n        return (<div key={slot.id}\r\n                     className={slotCardClassName}\r\n                     onClick={() => this.onSlotCardClick(slot)}>\r\n            <Flex className=\"card-header\" justify=\"between\">\r\n                <div className=\"slot-no\">\r\n                    {slot.slotNo}\r\n                </div>\r\n                <div className=\"state\">\r\n                    <span className=\"dot\"/>\r\n                    <span>{state}</span>\r\n                </div>\r\n            </Flex>\r\n            <Flex className=\"card-body\" justify=\"between\">\r\n                <div className=\"left\">\r\n                    <div className=\"sku-no\">SKU:{sku.skuNo}</div>\r\n                    <div className=\"sku-name\">{sku.name}</div>\r\n                </div>\r\n                <div className=\"delimiter\"/>\r\n                <div className={`right ${incredible ? 'right-incredible' : ''}`}>\r\n                    <span className=\"pcs-value\">{data.count}</span>\r\n                    <span className=\"pcs-unit\">(数量)</span>\r\n                </div>\r\n            </Flex>\r\n        </div>);\r\n    }\r\n\r\n    onSlotCardClick(slot) {\r\n        this.setState({\r\n            operationSlot: slot,\r\n            sensors: slot.sensors,\r\n            sensorModalVisible: true,\r\n        });\r\n    }\r\n\r\n    triggerHighlight(skuNo) {\r\n        if (skuNo === '' || skuNo.trim() === '') {\r\n            Toast.show('Please Type a SkuNo!', 1, false);\r\n            return;\r\n        }\r\n        highlightBySku(skuNo).then(res => {\r\n            this.setState({\r\n                noticeSlots: res\r\n            });\r\n            setTimeout(() => this.setState({noticeSlots: [], searchSkuNo: '',}), 5000);\r\n        }).catch(() => {\r\n            this.setState({\r\n                searchSkuNo: '',\r\n            });\r\n        });\r\n    }\r\n\r\n    onTabChange(tab, index) {\r\n        switch (index) {\r\n            case 0:\r\n                // dashboard\r\n                this.props.history.push({\r\n                    pathname: '/dashboard'\r\n                });\r\n                break;\r\n            case 1:\r\n                // settings\r\n                this.props.history.push({\r\n                    pathname: '/setting/'\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nconst component = connect(mapState2Props, mapAction2Props)(Dashboard);\r\nexport default withRouter(component);\r\n","import {request} from './request';\r\n\r\nexport const doZeroAll = () => {\r\n    return request({\r\n        url: '/api/slot/zero-all',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const zeroOne = slotNo => {\r\n    return request({\r\n        url: `/api/slot/${slotNo}/zero`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllSlots = () => {\r\n    return request({\r\n        url: '/api/slot/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDetail = id => {\r\n    return request({\r\n        url: `/api/slot/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const updateSlot = slot => {\r\n    return request({\r\n        url: `/api/slot/${slot.id}`,\r\n        method: 'post',\r\n        data: slot\r\n    });\r\n};\r\n\r\n\r\nexport const toggleELabelState = option => {\r\n    return request({\r\n        url: `/api/slot/${option.id}/has-e-label`,\r\n        method: 'post',\r\n        data: {hasElabel: option.hasELabel},\r\n    });\r\n};\r\n\r\nexport const highlightBySku = sku => {\r\n    return request({\r\n        url: '/api/slot/highlight',\r\n        method: 'post',\r\n        data: {\r\n            skuNo: sku\r\n        }\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from 'antd-mobile';\r\nimport './FloatButton.sass';\r\n\r\nclass FloatButton extends Component {\r\n    static propTypes = {\r\n        iconType: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func,\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"floatButton\" onClick={() => this.onClick()}>\r\n                <Icon type={this.props.iconType} className=\"icon\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onClick() {\r\n        if (this.props.onClick) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n}\r\n\r\nexport default FloatButton;\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Card, Flex, List, Modal, Switch, Toast} from \"antd-mobile\";\r\nimport {asyncFetchSensors, setTabBarState, setTitle, toggleSensorElable} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {reloadSensors} from \"../../../api/sensor\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSensors: (...args) => dispatch(asyncFetchSensors(...args)),\r\n        toggleSensorElable: (...args) => dispatch(toggleSensorElable(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    }\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        sensors: state.sensors,\r\n    };\r\n};\r\n\r\nclass SensorSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Sensor Setting');\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.props;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <List renderHeader={() => 'Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => (<List.Item key={sensor.id}>\r\n                            <Card>\r\n                                <Card.Header title={`Address:${sensor.address}`} extra={sensor.deviceSn}/>\r\n                                <Card.Body>\r\n                                    <Flex justify=\"between\">\r\n                                        <span>ELabel</span>\r\n                                        <Switch checked={sensor.hasElabel}\r\n                                                onChange={(e) => this.toggleElabel(sensor, e)}\r\n                                                platform=\"android\"/>\r\n                                    </Flex>\r\n                                </Card.Body>\r\n                                <Card.Footer content={`Slot:[${sensor.slot && sensor.slot.slotNo}]`}\r\n                                             extra={sensor.slot && sensor.slot.id}/>\r\n                            </Card>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationActions()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchSensors();\r\n    }\r\n\r\n    toggleElabel(sensor, e) {\r\n        this.props.toggleSensorElable(sensor.id, e);\r\n    }\r\n\r\n    showOperationActions() {\r\n        const buttons = ['Reload Sensors', 'Cancel'];\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: 'Operations',\r\n            options: buttons,\r\n            cancelButtonIndex: buttons.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            if (index === 0) {\r\n                this.callReloadSensors();\r\n            }\r\n        })\r\n    }\r\n\r\n    callReloadSensors() {\r\n        Modal.alert('Reload', 'Are you sure to reload?',\r\n            [\r\n                {\r\n                    text: 'Yes', onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('Reload Success!', 1, false);\r\n                        })\r\n                    }\r\n                },\r\n                {\r\n                    text: 'Cancel', onPress: () => {\r\n                        Toast.show('Cancel', 1, false);\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(SensorSetting);\r\n","import React, {Component} from 'react';\r\nimport {Flex, Icon, List, WhiteSpace} from \"antd-mobile\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nclass SettingMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Setting');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"setting\">\r\n                <List renderHeader={() => 'Settings:'}>\r\n                    <List.Item onClick={() => this.go('/setting/sensor')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>Sensors</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/slot')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>Slots</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/connection')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>Connections</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/system')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>System</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    go(path) {\r\n        this.props.history.push({\r\n            pathname: path\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SettingMenu));\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Flex, Icon, List, Toast} from 'antd-mobile';\r\nimport {doZeroAll, fetchAllSlots} from '../../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport './SlotSetting.sass';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst OperationActions = ['Refresh', 'Do Zero All', 'Cancel'];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slots: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(false);\r\n        this.props.setTitle('Slot Settings');\r\n        this.fetchSlots();\r\n    }\r\n\r\n    render() {\r\n        const {slots} = this.state;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <List renderHeader={() => 'Slot List'}>\r\n                    {\r\n                        slots.map(slot => (\r\n                            <Item key={slot.id} extra={<Icon type=\"right\"/>} onClick={() => this.toSlotDetail(slot)}>\r\n                                <Flex justify=\"between\">\r\n                                    <span className=\"slotNo\">{slot.slotNo}</span>\r\n                                    <span className=\"name\">{slot.skuName}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationSheet()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showOperationSheet() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: OperationActions,\r\n            title: 'Operations',\r\n            cancelButtonIndex: OperationActions.length - 1,\r\n            destructiveButtonIndex: 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.fetchSlots();\r\n                    break;\r\n                case 1:\r\n                    this.doZeroAll();\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        })\r\n    }\r\n\r\n    toSlotDetail(slot) {\r\n        this.props.history.push({\r\n            pathname: `/setting/slot-detail/${slot.id}`,\r\n        });\r\n    }\r\n\r\n    doZeroAll() {\r\n        doZeroAll().then(() => {\r\n            Toast.show('All Zeroed!');\r\n        })\r\n    }\r\n\r\n    fetchSlots() {\r\n        fetchAllSlots().then(res => {\r\n            this.setState({slots: res})\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotSetting));\r\n","import React, {Component} from 'react';\r\nimport {asyncDeleteConnection, asyncFetchConnection, setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Flex, Icon, InputItem, List, Modal, Picker, Toast} from 'antd-mobile';\r\nimport {asConnectionType} from '../../../util/DataConvertor';\r\nimport './ConnectionSetting.sass'\r\nimport {createConnection, scanDevice, scanPort} from '../../../api/connection';\r\nimport {connect} from 'react-redux';\r\n\r\nconst ConnectionOperations = [\r\n    'Delete',\r\n    'Start Scan',\r\n    'Cancel',\r\n];\r\nconst connectionTypes = [\r\n    {\r\n        label: 'Serial',\r\n        value: 1,\r\n    },\r\n    {\r\n        label: 'Network',\r\n        value: 2,\r\n    }\r\n];\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchConnection: (...args) => dispatch(asyncFetchConnection(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        deleteConnection: (...args) => dispatch(asyncDeleteConnection(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        connections: state.connections,\r\n    };\r\n};\r\n\r\nclass ConnectionSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            createDialogVisible: false,\r\n            create: {\r\n                type: null,\r\n                target: ''\r\n            },\r\n            serialPorts: []\r\n        };\r\n        this.props.setTitle('Connection Setting');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchConnection();\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {connections} = this.props;\r\n        const {createDialogVisible} = this.state;\r\n        const {create} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Connections'}>\r\n                    {\r\n                        connections.map(connection => (\r\n                            <Item key={connection.id} extra={<Icon type=\"right\"/>}\r\n                                  onClick={() => this.showConnectionOperations(connection)}>\r\n                                <Flex justify=\"between\" className=\"connectionItem\">\r\n                                    <span className=\"type\">{asConnectionType(connection.type)}</span>\r\n                                    <span className=\"target\">{connection.target}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                    <Item key=\"createButton\">\r\n                        <Button type=\"primary\" onClick={() => this.showCreateDialog()}>New</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={createDialogVisible}\r\n                    transparent\r\n                    title=\"Create A Connection\"\r\n                    footer={[\r\n                        {text: 'Cancel', onPress: () => this.setState({createDialogVisible: false})},\r\n                        {text: 'Create', onPress: () => this.createConnection()},\r\n                    ]}\r\n                    maskClosable={true}>\r\n                    <List title=\"Connection\">\r\n                        <Picker data={connectionTypes} title=\"Connection Type\" cols={1}\r\n                                extra=\"Choose\"\r\n                                onChange={e => this.setCreateType(e)}>\r\n                            <List.Item>\r\n                                <InputItem value={create.type && asConnectionType(create.type)}\r\n                                           disabled={true}\r\n                                           placeholder=\"Type\"/>\r\n                            </List.Item>\r\n                        </Picker>\r\n                        {\r\n                            (() => {\r\n                                const input = (<List.Item key=\"target\"><InputItem placeholder=\"Connection Target\"\r\n                                                                                  onChange={e => this.setCreateTarget(e)}\r\n                                                                                  value={create.target}\r\n                                                                                  disabled={this.state.create.type === 1}/></List.Item>);\r\n                                if (create.type === 1) {\r\n                                    return (<Picker data={this.state.serialPorts}\r\n                                                    extra=\"Choose\"\r\n                                                    title=\"Serial Port List\"\r\n                                                    cols={1}\r\n                                                    onChange={arr => this.setCreateTargetSerial(arr)}>\r\n                                        {input}\r\n                                    </Picker>)\r\n                                } else {\r\n                                    return input;\r\n                                }\r\n                            })()\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    deleteConnection(connection) {\r\n        Modal.alert('Delete Connection!', 'Are You Sure delete this connection',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                    onPress: () => {\r\n                        Toast.show('Canceled', 1, false);\r\n                    }\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => {\r\n                        this.props.deleteConnection(connection.id);\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    scanConnection(connection) {\r\n        Modal.alert('Scan Device!', 'Scan Devices for this Connection?',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                    onPress: () => {\r\n                        Toast.show('Canceled', 1, false);\r\n                    }\r\n                },\r\n                {\r\n                    text: 'Scan',\r\n                    onPress: () => {\r\n                        scanDevice(connection.id).then(() => {\r\n                            Toast.show('Scan Success!', 2, false)\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    showCreateDialog() {\r\n        this.setState({\r\n            createDialogVisible: true\r\n        })\r\n    }\r\n\r\n    createConnection() {\r\n        createConnection(this.state.create).then(() => {\r\n            this.props.fetchConnection();\r\n            this.setState({\r\n                create: {},\r\n                createDialogVisible: false,\r\n            });\r\n        })\r\n    }\r\n\r\n    setCreateType(types) {\r\n        if (types.length < 1) {\r\n            Toast.show('Please Choose A Connection Type!');\r\n        }\r\n        const type = types[0];\r\n        const newCreate = {\r\n            type,\r\n            target: ''\r\n        };\r\n        this.setState({create: newCreate});\r\n        if (type === 1 && this.state.serialPorts.length <= 0) {\r\n            scanPort().then(res => {\r\n                const serialPorts = [];\r\n                for (const port of res) {\r\n                    serialPorts.push({\r\n                        label: port,\r\n                        value: port,\r\n                    });\r\n                }\r\n                this.setState({serialPorts});\r\n            });\r\n        }\r\n    }\r\n\r\n    setCreateTarget(e) {\r\n        const create = {\r\n            ...this.state.create,\r\n            target: e,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    setCreateTargetSerial(serialIndexList) {\r\n        if (!serialIndexList) {\r\n            Toast.show('Please Choose A Serial Port!');\r\n            return;\r\n        }\r\n        const port = serialIndexList[0];\r\n        const create = {\r\n            ...this.state.create,\r\n            target: port,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    showConnectionOperations(connection) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: `${connection.target} Operations`,\r\n            options: ConnectionOperations,\r\n            cancelButtonIndex: ConnectionOperations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.deleteConnection(connection);\r\n                    break;\r\n                case 1:\r\n                    this.scanConnection(connection);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(ConnectionSetting);\r\n","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDetail, toggleELabelState, updateSlot, zeroOne} from '../../../api/slot';\r\nimport {ActionSheet, Button, InputItem, List, Switch, Toast, WingBlank} from 'antd-mobile';\r\nimport {setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst ActionButtons = [\r\n    'Do Zero',\r\n    'Delete',\r\n    'Cancel',\r\n];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotDetailSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {}\r\n        };\r\n        this.slotId = this.props.match.params.id;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle(`${this.slotId} Settings`);\r\n        this.fetchSlotInfo();\r\n    }\r\n\r\n    fetchSlotInfo() {\r\n        fetchDetail(this.slotId).then(res => {\r\n            this.setState({slot: res});\r\n            this.props.setTitle(`${res.slotNo} Settings`);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {slot} = this.state;\r\n        return (\r\n            <div className=\"slotDetail\">\r\n                <List renderHeader={() => 'Slot Info'}>\r\n                    <Item key=\"slotNo\">\r\n                        <InputItem placeholder=\"Slot No\" value={slot.slotNo}\r\n                                   onChange={text => this.setUpdateSlotProp({slotNo: text})}>SlotNo</InputItem>\r\n                    </Item>\r\n                    <Item key=\"SkuName\">\r\n                        <InputItem placeholder=\"Sku Name\" value={slot.skuName}\r\n                                   onChange={text => this.setUpdateSlotProp({skuName: text})}>SKUName</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuNo\">\r\n                        <InputItem placeholder=\"SKU No\" value={slot.skuNo}\r\n                                   onChange={text => this.setUpdateSlotProp({skuNo: text})}>SKUNo</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuApw\">\r\n                        <InputItem placeholder=\"SKU Apw\" value={slot.skuApw}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuApw: text})}>Apw</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuTolerance\">\r\n                        <InputItem placeholder=\"SKU Tolerance\" value={slot.skuTolerance}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuTolerance: text})}>Tolerance</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuShelfLifeOpenDays\">\r\n                        <InputItem placeholder=\"SKU ShelfLifeOpenDays\" value={slot.skuShelfLifeOpenDays}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuShelfLifeOpenDays: text})}>\r\n                            SLO Days\r\n                        </InputItem>\r\n                    </Item>\r\n                    <Item key=\"applyBtn\">\r\n                        <WingBlank><Button type=\"primary\" onClick={() => this.applyModify()}>Apply\r\n                            Modify</Button></WingBlank>\r\n                    </Item>\r\n                </List>\r\n                <List renderHeader={() => 'ELabel'}>\r\n                    <List.Item\r\n                        key=\"hasELabel\"\r\n                        extra={<Switch\r\n                            checked={slot.hasElabel}\r\n                            onChange={state => this.toggleELabel(state)}\r\n                            platform=\"android\"/>}>\r\n                        Enable ELabel\r\n                    </List.Item>\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.openOperation()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    openOperation() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: 'Operations',\r\n            options: ActionButtons,\r\n            destructiveButtonIndex: 1,\r\n            cancelButtonIndex: ActionButtons.length - 1,\r\n        }, buttonIndex => {\r\n            const button = ActionButtons[buttonIndex];\r\n            if (button === 'Do Zero') {\r\n                this.doZero();\r\n            } else if (button === 'Delete') {\r\n                Toast.show('Unable To Delete!');\r\n            }\r\n        });\r\n    }\r\n\r\n    doZero() {\r\n        const {slot} = this.state;\r\n        zeroOne(slot.slotNo).then(() => {\r\n            Toast.show('Do Zero Success!');\r\n        });\r\n    }\r\n\r\n    setUpdateSlotProp(props) {\r\n        const slot = {\r\n            ...this.state.slot,\r\n            ...props\r\n        };\r\n        this.setState({slot});\r\n    }\r\n\r\n    applyModify() {\r\n        updateSlot(this.state.slot).then(() => {\r\n            Toast.show('Apply Success!');\r\n        });\r\n    }\r\n\r\n    toggleELabel(hasELabel) {\r\n        toggleELabelState({id: this.slotId, hasELabel}).then(() => {\r\n            Toast.show('Toggle ELabel Success!');\r\n            this.fetchSlotInfo();\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotDetailSetting));\r\n","import React, {Component} from 'react';\r\nimport {Button, Icon, List, Modal, Switch, TextareaItem, Toast} from 'antd-mobile';\r\nimport {setEnableTabBarAction, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {fetchSystemInfo} from '../../../api/dashboard';\r\nimport {reloadLibPath} from '../../../api/serial';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setEnableTabBar: (...args) => dispatch(setEnableTabBarAction(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass SystemSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemInfo: {},\r\n            killButtonState: true,\r\n            libLoadVisible: false,\r\n            reloadLibPath: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('System Infos');\r\n        fetchSystemInfo().then(res => {\r\n            this.setState({\r\n                systemInfo: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {systemInfo, libLoadVisible, reloadLibPath} = this.state;\r\n        const {enableTabBar} = this.props;\r\n        return (\r\n            <div className=\"systemSettings\">\r\n                <List renderHeader={() => 'System Infos'}>\r\n                    <Item key=\"appName\" extra={systemInfo.appName}>APPName</Item>\r\n                    <Item key=\"appVersion\" extra={systemInfo.appVersion}>APPVersion</Item>\r\n                    <Item key=\"dbVersion\" extra={systemInfo.dbVersion}>DBVersion</Item>\r\n                    <Item key=\"pid\" extra={systemInfo.pid}>ProcessID</Item>\r\n                    <Item key=\"libPath\" extra={<Icon type=\"right\"/>}\r\n                          onClick={() => this.showLibLoadModal()}> LibPath: {systemInfo.libPath}</Item>\r\n                    <Item key=\"kill\">\r\n                        <Button type=\"warning\" onClick={() => this.killProcess()}\r\n                                disabled={!this.state.killButtonState}>Kill Process</Button>\r\n                    </Item>\r\n                </List>\r\n                <List renderHeader={() => 'Settings'}>\r\n                    <Item\r\n                        key=\"tabBar\"\r\n                        extra={<Switch\r\n                            checked={enableTabBar}\r\n                            onChange={target => this.setEnableTabBar(target)}\r\n                            platform=\"android\"/>}>\r\n                        EnableTabBar\r\n                    </Item>\r\n                    <Item key=\"systemProps\" extra={<Icon type=\"right\"/>}\r\n                          onClick={() => this.props.history.push({pathname: '/setting/system-props'})}>\r\n                        System Props\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={libLoadVisible}\r\n                    title=\"Reload SerialPort Library\"\r\n                    transparent\r\n                    maskClosable={true}\r\n                    footer={[\r\n                        {\r\n                            text: 'Cancel',\r\n                            onPress: () => this.setState({libLoadVisible: false})\r\n                        },\r\n                        {\r\n                            text: 'Reload',\r\n                            onPress: () => this.reloadLibrary()\r\n                        },\r\n                    ]}>\r\n                    <TextareaItem\r\n                        placeholder=\"Type the SerialPort library Path!\"\r\n                        autoHeight\r\n                        value={reloadLibPath} onChange={e => this.setState({reloadLibPath: e})}/>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    killProcess() {\r\n        Toast.show('Do not kill this process!', 1, false);\r\n        this.setState({\r\n            killButtonState: false\r\n        });\r\n    }\r\n\r\n    setEnableTabBar(target) {\r\n        this.props.setEnableTabBar(target);\r\n    }\r\n\r\n    showLibLoadModal() {\r\n        const reloadLibPath = this.state.systemInfo.libPath;\r\n        this.setState({\r\n            reloadLibPath,\r\n            libLoadVisible: true\r\n        });\r\n    }\r\n\r\n    reloadLibrary() {\r\n        reloadLibPath(this.state.reloadLibPath).then(res => {\r\n            Toast.show(`Success: [${res}]`);\r\n            this.setState({\r\n                libLoadVisible: false,\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props, mapAction2Props)(SystemSetting));\r\n","import {request} from './request';\r\n\r\nexport const reloadLibPath = path => {\r\n    return request({\r\n        url: '/api/serial/load-lib',\r\n        method: 'post',\r\n        data: {\r\n            libPath: path\r\n        }\r\n    })\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchSystemProps} from '../.././../api/dashboard';\r\nimport {List, TextareaItem} from 'antd-mobile';\r\n\r\nconst {Item} = List;\r\n\r\nclass SystemPropsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemProps: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchSystemProps().then(res => {\r\n            const propList = [];\r\n            for (const name in res) {\r\n                if (res.hasOwnProperty(name)) {\r\n                    propList.push({\r\n                        name,\r\n                        value: res[name],\r\n                    });\r\n                }\r\n            }\r\n            this.setState({\r\n                systemProps: propList\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {systemProps} = this.state;\r\n        return (\r\n            <div className=\"systemProps\">\r\n                <List renderHeader={() => 'System Properties'}>\r\n                    {\r\n                        systemProps.map(p => (<Item key={p.name}>\r\n                            <div>{p.name}</div>\r\n                            <TextareaItem value={p.value} autoHeight labelNumber={5}/>\r\n                        </Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SystemPropsSetting;\r\n","import React, {Component} from 'react';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport SensorSetting from './setting/SensorSetting'\r\nimport SettingMenu from './setting/SettingMenu'\r\nimport SlotSetting from './setting/SlotSetting'\r\nimport ConnectionSetting from './setting/ConnectionSetting'\r\nimport SlotDetailSetting from './setting/SlotDetailSetting'\r\nimport SystemSetting from './setting/SystemSetting'\r\nimport SystemPropsSetting from './setting/SystemPropsSetting'\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n    };\r\n};\r\n\r\nclass Setting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/setting/\" component={SettingMenu} exact/>\r\n                    <Route path=\"/setting/sensor\" component={SensorSetting} exact/>\r\n                    <Route path=\"/setting/slot\" component={SlotSetting} exact/>\r\n                    <Route path=\"/setting/connection\" component={ConnectionSetting} exact/>\r\n                    <Route path=\"/setting/slot-detail/:id\" component={SlotDetailSetting} exact/>\r\n                    <Route path=\"/setting/system\" component={SystemSetting} exact/>\r\n                    <Route path=\"/setting/system-props\" component={SystemPropsSetting} exact/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Setting);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Result, Toast} from \"antd-mobile\";\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Address extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Config Address');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Result\r\n                    img={<Icon type=\"check-circle\" size=\"lg\" style={{fill: '#1F90E6'}}/>}\r\n                    title=\"开发中\"\r\n                    message=\"开发中\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中',1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Address);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Result, Toast} from 'antd-mobile';\r\nimport {setTitle} from \"../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Logs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Logs');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Result\r\n                    img={<Icon type=\"check-circle\" size=\"lg\" style={{fill: '#1F90E6'}}/>}\r\n                    title=\"开发中\"\r\n                    message=\"开发中\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中',1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Logs);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {Carousel, NoticeBar, WhiteSpace, WingBlank} from 'antd-mobile';\r\nimport './About.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass About extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            drawerOpen: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('About');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"about\">\r\n                <NoticeBar marqueeProps={{loop: true,}}>磐石电气（常州）有限公司：http://www.monolith-iot.com</NoticeBar>\r\n                <WhiteSpace/>\r\n                <WingBlank>\r\n                    <Carousel\r\n                        autoplay={true}\r\n                        infinite\r\n                        className=\"headerCarousel\"\r\n                    >\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#FF9808'}}>\r\n                            <div className=\"title\">\r\n                                磐石电气（常州）有限公司\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#3171FA'}}>\r\n                            <div className=\"title\">\r\n                                MonolithIoT\r\n                            </div>\r\n                        </div>\r\n                    </Carousel>\r\n                </WingBlank>\r\n                <WingBlank className=\"article\">\r\n                    <h1 className=\"title\">关于我们</h1>\r\n                    <div className=\"text\">\r\n                        <p>\r\n                            磐石电气(常州)有限公司,是一家高科技智能测量装备研发及生产企业，把传统体积，重量的测量数字化物联网化，可以与WMS,ERP，SAP等企业管理软件相结合，便于企业更直观的管理自己的仓储，物流等。磐石电气下设研发部，工程部，业务部，有较强的设计，研发和生产能力，可为客户提供嵌入式计算机系统产品设计，开发，系统集成，工程实施等服务。\r\n                        </p>\r\n                        <p>\r\n                            随着公司的发展，主要产品有自主研发的智能数字卷尺，智能手动叉车秤，安卓智能称重终端，静态/动态DWS等各种物联网类智能称重量方设备及软件定制系统,可为客户最大程度地提供智能化系统化的测量系统解决方案。产品广泛应用于快递物流、生鲜供应、港口订舱、仓储、工业离散制造及各种以长度(含面\r\n                            积、体积)测量为手段的民用、商用用途中。凭着可靠的产品质量和良好的售后服务，我公司已与顺丰、中国邮政、京东、国际快递DHL、华为等多家知名企业合作。\r\n                        </p>\r\n                        <p>\r\n                            目前公司已申请中国专利24项,美国专利1项，并拥有一支以博士、硕士为主的优秀研发团队，具有较高的研发能力和管理水平，现有多名员工曾在外企作为技术骨干，承传欧美设计制造理念，并采用先进的产品生命周期管理（PLM），重视产品质量，为公司产品的技术引领、技术创新和公司的可持续发展奠定了坚实基础。\r\n                        </p>\r\n                    </div>\r\n                </WingBlank>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(About);\r\n","import React, {Component} from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Dashboard from './content/Dashboard'\r\nimport Setting from './content/Setting';\r\nimport Address from './content/Address';\r\nimport Logs from './content/Logs';\r\nimport About from './content/About';\r\nimport './AppContent.sass';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"appContent\">\r\n                {\r\n                    this.props.showHeader ? <div className=\"headerMask\"/> : null\r\n                }\r\n                <Switch>\r\n                    <Route path=\"/\" component={Dashboard} exact/>\r\n                    <Route path=\"/setting**\" component={Setting} exact/>\r\n                    <Route path=\"/address\" component={Address} exact/>\r\n                    <Route path=\"/logs\" component={Logs} exact/>\r\n                    <Route path=\"/about\" component={About} exact/>\r\n                </Switch>\r\n                <div className=\"tabBarMask\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, null)(AppContent);\r\n","import React, {Component} from 'react';\r\nimport {Icon, NavBar, Popover} from \"antd-mobile\";\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\nimport './AppHeader.sass';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        title: state.globalTitle,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppHeader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            popoverVisible: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.showHeader) {\r\n            return null;\r\n        }\r\n        const {title} = this.props;\r\n        return (\r\n            <div className=\"appHeader\">\r\n                <NavBar\r\n                    leftContent={<Icon type=\"left\" onClick={() => this.onBackClick()}/>}\r\n                    rightContent={this.rightContent()}\r\n                    mode=\"light\"\r\n                >{title}</NavBar>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    rightContent() {\r\n        const {popoverVisible} = this.state;\r\n        const Item = Popover.Item;\r\n        return (<Popover mask\r\n                         visible={popoverVisible}\r\n                         overlay={[\r\n                             (<Item key=\"about\" value=\"about\"\r\n                                    data-seed=\"logId\">About</Item>),\r\n                             (<Item key=\"settings\" value=\"settings\"\r\n                                    style={{whiteSpace: 'nowrap'}}>Settings</Item>),\r\n                         ]}\r\n                         onSelect={e => this.onPopoverSelect(e)}\r\n        >\r\n            <Icon type=\"ellipsis\"/>\r\n        </Popover>);\r\n    }\r\n\r\n    onBackClick() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    onPopoverSelect(e) {\r\n        switch (e.key) {\r\n            case 'about':\r\n                this.props.history.push({\r\n                    pathname: '/about',\r\n                });\r\n                break;\r\n            case 'settings':\r\n                this.props.history.push({\r\n                    pathname: '/setting/',\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({\r\n            popoverVisible: false\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props)(AppHeader));\r\n","import {createBrowserHistory} from 'history';\r\nimport {setRouterPath} from '../store/actionCreators'\r\nimport store from '../store';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst notifyPathChanged = location => {\r\n    const info = {\r\n        pathname: location.pathname,\r\n        search: location.search,\r\n        hash: location.hash\r\n    };\r\n    const action = setRouterPath(info);\r\n    store.dispatch(action);\r\n};\r\nhistory.listen((action) => {\r\n    notifyPathChanged(action.location);\r\n});\r\n\r\n\r\nnotifyPathChanged(history.location);\r\nexport default history;\r\n","import React from 'react'\nimport './App.css'\nimport store from './store'\nimport {Provider} from 'react-redux'\nimport AppTabBar from './component/AppTabBar'\nimport AppContent from './component/AppContent'\nimport AppHeader from './component/AppHeader'\nimport {HashRouter as Router} from 'react-router-dom'\nimport history from './util/History'\nimport {fetchEnableTabBarAction} from './store/actionCreators';\n\nclass App extends React.Component {\n    componentDidMount() {\n        store.dispatch(fetchEnableTabBarAction());\n    }\n\n    render() {\n        return (\n            <Router history={history}>\n                <Provider store={store}>\n                    <div className=\"app-content\">\n                        <AppHeader/>\n                        <AppContent/>\n                        <AppTabBar/>\n                    </div>\n                </Provider>\n            </Router>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    /*{<React.StrictMode>}*/\n    <App/>,\n    /*</React.StrictMode>,*/\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}