{"version":3,"sources":["store/reducer.js","store/actionTypes.js","store/index.js","component/AppTabBar.jsx","api/request.js","util/httpUtils.js","api/dashboard.js","api/sensor.js","store/actionCreators.js","api/connection.js","api/config.js","util/DataConvertor.js","api/slot.js","component/content/Dashboard.jsx","component/commons/FloatButton.jsx","component/content/setting/SensorSetting.jsx","component/content/setting/SettingMenu.jsx","component/content/setting/SlotSetting.jsx","component/content/setting/ConnectionSetting.jsx","component/content/setting/SlotDetailSetting.jsx","component/content/setting/SystemSetting.jsx","api/serial.js","component/content/setting/SystemPropsSetting.jsx","component/content/setting/SlotSensorsSetting.jsx","component/content/setting/Overview.jsx","component/content/Setting.jsx","component/content/Address.jsx","component/content/Logs.jsx","component/content/About.jsx","component/AppContent.jsx","component/AppHeader.jsx","util/History.js","App.js","serviceWorker.js","index.js"],"names":["defaultState","showTabBar","enableTabBar","showHeader","globalTitle","routerPath","dashboardSlots","sensors","connections","user","name","actionTable","registerReducer","type","reducer","state","action","data","sensorId","hasElable","hasElabel","sensor","id","JSON","parse","stringify","filter","connection","allEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","handler","AppTabBar","props","path","this","className","unselectedTintColor","tintColor","barTintColor","hidden","tabBarPosition","Item","title","selected","icon","selectedIcon","onPress","pushPath","setState","history","push","pathname","React","Component","withRouter","connect","hideLoading","hide","showError","msg","fail","request","options","showLoadingToast","loading","Promise","resolve","reject","axios","httpRequest","then","res","status","body","code","catch","err","errStr","toString","reloadSensors","url","method","setTabBarState","show","setTitle","asyncFetchDashboardSlotData","dispatch","slots","key","hasOwnProperty","sort","a","b","slotNo","localeCompare","asyncFetchSensors","toggleSensorElable","asyncFetchConnection","asyncDeleteConnection","deleteConnection","fetchEnableTabBarAction","value","setEnableTabBarAction","enable","setEnableTabBar","connectionTypes","1","2","asConnectionType","stateTable","3","4","5","asStateString","fetchDetail","TabItems","Dashboard","rootEle","document","sensorModalVisible","operationSlot","searchSkuNo","noticeSlots","renderSlotCard","bind","startFetchData","listenKeyPress","onkeypress","e","target","tagName","toLowerCase","keyCode","triggerHighlight","appendSearchSku","String","fromCharCode","c","clearInterval","fetchTimer","cancelKeyPress","fetchSlotData","setInterval","groupedSlots","groups","putSlot","slot","noItems","match","groupSlots","highlightSlotIds","firstNoticeSlot","tabs","onChange","tab","index","onTabChange","onSubmit","renderNoticeBar","map","group","renderGroupItem","visible","transparent","footer","text","onClose","renderHeader","extra","deviceSn","Brief","address485","content","skuName","skuShelfLifeOpenDays","wrap","justify","sku","slotCardClassName","isWan","isDisable","isOffline","incredible","isIncredible","toleranceState","onClick","onSlotCardClick","skuNo","count","trim","setTimeout","component","FloatButton","iconType","SensorSetting","Header","address","Body","checked","toggleElabel","platform","Footer","showOperationActions","fetchSensors","buttons","showActionSheetWithOptions","cancelButtonIndex","length","destructiveButtonIndex","callReloadSensors","alert","SettingMenu","go","OperationActions","SlotSetting","fetchSlots","toSlotDetail","showOperationSheet","doZeroAll","ConnectionOperations","label","ConnectionSetting","createDialogVisible","create","serialPorts","fetchConnection","showConnectionOperations","showCreateDialog","createConnection","cols","setCreateType","disabled","placeholder","input","setCreateTarget","arr","setCreateTargetSerial","types","newCreate","port","serialIndexList","scanConnection","ActionButtons","SlotDetailSetting","slotId","params","fetchSlotInfo","setUpdateSlotProp","skuApw","skuTolerance","applyModify","toggleELabel","arrow","openOperation","buttonIndex","button","doZero","hasELabel","option","SystemSetting","systemInfo","killButtonState","libLoadVisible","reloadLibPath","appName","appVersion","dbVersion","pid","showLibLoadModal","libPath","killProcess","stopWeightService","maskClosable","reloadLibrary","autoHeight","SystemPropsSetting","systemProps","propList","p","labelNumber","SENSOR_OPERATIONS","SlotSensorsSetting","sensorRemoveMode","allSlots","sensorPickerData","changed","pickerData","children","sensorItem","openSensorOperations","v","onSelectSensor","oldSensor","selectedSensor","selectedSensors","i","renderSensorItem","addSensor","applySensors","removeSensor","newSensors","s","sensorIds","setSlotByIds","Overview","refresh","onSensorClick","list","Setting","exact","Address","img","size","style","fill","message","info","Logs","About","drawerOpen","marqueeProps","loop","autoplay","infinite","backgroundColor","AppContent","AppHeader","popoverVisible","leftContent","onBackClick","rightContent","mode","mask","overlay","data-seed","whiteSpace","onSelect","onPopoverSelect","goBack","doReloadSensors","createBrowserHistory","notifyPathChanged","location","setRouterPath","search","hash","listen","App","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"igBAaMA,EAAe,CACjBC,YAAY,EACZC,cAAc,EACdC,YAAY,EACZC,YAAa,2BACbC,WAAY,KACZC,eAAgB,GAChBC,QAAS,GACTC,YAAa,GACbC,KAAM,CACFC,KAAM,gBAGRC,EAAc,GACdC,EAAkB,SAACC,EAAMC,GAC3BH,EAAYE,GAAQC,GAExBF,EC5BgC,cD4BE,SAACG,EAAOC,GACtC,OAAO,2BACAD,GADP,IAEId,WAAYe,EAAOC,UAG3BL,EChC+B,mBDgCE,SAACG,EAAOC,GACrC,OAAO,2BACAD,GADP,IAEIV,WAAYW,EAAOC,UAI3BL,ECrC+C,mCDqCE,SAACG,EAAOC,GACrD,OAAO,2BACAD,GADP,IAEIT,eAAgBU,EAAOC,UAI/BL,EC1CyB,aD0CE,SAACG,EAAOC,GAC/B,OAAO,2BACAD,GADP,IAEIX,YAAaY,EAAOC,UAG5BL,EC9CmC,uBD8CE,SAACG,EAAOC,GACzC,OAAO,2BACAD,GADP,IAEIR,QAASS,EAAOC,UAIxBL,ECnDoC,wBDmDE,SAACG,EAAOC,GAC1C,IADqD,EAC/CT,EAAUQ,EAAMR,QAChBW,EAAWF,EAAOC,KAAKC,SACvBC,EAAYH,EAAOC,KAAKG,UAHuB,cAIlCb,GAJkC,IAIrD,2BAA4B,CAAC,IAApBc,EAAmB,QACxB,GAAIA,EAAOC,KAAOJ,EAAU,CACxBG,EAAOF,UAAYA,EACnB,QAP6C,8BAUrD,OAAO,2BACAJ,GADP,IAEIR,QAASgB,KAAKC,MAAMD,KAAKE,UAAUlB,SAI3CK,ECjEsC,2BDiEE,SAACG,EAAOC,GAC5C,OAAO,2BACAD,GADP,IAEIP,YAAaQ,EAAOC,UAG5BL,ECrEiC,qBDqEE,SAACG,EAAOC,GACvC,IAAMM,EAAKN,EAAOC,KAAKK,GACjBd,EAAcO,EAAMP,YAAYkB,QAAO,SAAAC,GAAU,OAAIA,EAAWL,KAAOA,KAC7E,OAAO,2BACAP,GADP,IAEIP,mBAGRI,EC3EkC,qBD2EE,SAACG,EAAOC,GACxC,OAAO,2BACAD,GADP,IAEIb,aAAcc,EAAOC,UAG7BL,EC/EiC,qBD+EE,SAACG,EAAOC,GACvC,OAAO,2BACAD,GADP,IAEIZ,WAAYa,EAAOC,UAGZ,I,SEpGTW,GADgBC,OAAOC,qCAAuCD,OAAOC,qCAAqC,IAAMC,KACnFC,YAAgBC,MAGpCC,EAFDC,aFmGC,WAAmC,IAAlCpB,EAAiC,uDAAzBf,EAAcgB,EAAW,uCACvCH,EAAOG,EAAOH,KACpB,GAAIA,KAAQF,EAAa,CACrB,IAAMyB,EAAUzB,EAAYE,GAC5B,OAAOuB,EAAQrB,EAAOC,GAE1B,OAAOD,IEzGwBa,G,mDCQ7BS,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,CACTwB,KAAM,KAHK,E,qDAOT,IAAD,OACCtC,EAAauC,KAAKF,MAAMrC,YAAcuC,KAAKF,MAAMpC,aAChDqC,EAAQC,KAAKzB,MAAbwB,KACP,OAAItC,EAEI,yBAAKwC,UAAU,aACX,uBACIC,oBAAoB,UACpBC,UAAU,UACVC,aAAa,QACbC,QAASL,KAAKF,MAAMrC,WACpB6C,eAAe,UACf,sBAAQC,KAAR,CAAaC,MAAM,YACNC,SAAmB,MAATV,EACVW,KAAM,uBAAGT,UAAU,uBAAb,UACNU,aAAc,uBAAGV,UAAU,yCAAb,UACdW,QAAS,kBAAM,EAAKC,SAAS,QAC1C,sBAAQN,KAAR,CAAaC,MAAM,OACNC,SAAmB,UAATV,EACVW,KAAM,uBAAGT,UAAU,uBAAb,UACNU,aAAc,uBAAGV,UAAU,yCAAb,UACdW,QAAS,kBAAM,EAAKC,SAAS,YAC1C,sBAAQN,KAAR,CAAaC,MAAM,UACNC,SAAmB,aAATV,EACVW,KAAM,uBAAGT,UAAU,uBAAb,UACNU,aAAc,uBAAGV,UAAU,yCAAb,UACdW,QAAS,kBAAM,EAAKC,SAAS,eAC1C,sBAAQN,KAAR,CAAaC,MAAM,UACNC,SAAmB,aAATV,EACVW,KAAM,uBAAGT,UAAU,uBAAb,UACNU,aAAc,uBAAGV,UAAU,yCAAb,UACdW,QAAS,kBAAM,EAAKC,SAAS,iBAI/C,O,+BAINd,GACLC,KAAKc,SAAS,CACVf,SAEJC,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAUlB,Q,GApDEmB,IAAMC,WAyDfC,cAAWC,aAjEF,SAAC9C,EAAOuB,GAC5B,OAAO,2BACAA,GADP,IAEIrC,WAAYc,EAAMd,WAClBC,aAAca,EAAMb,iBA6DF2D,CAAyBxB,I,sOCpEnD,IAGMyB,EAAc,WAChB,IAAMC,QAEJC,EAAY,SAACC,GACf,IAAMC,KAAKD,IAIR,SAASE,EAAQC,GACpB,IAAMC,GAAoBD,EAAQN,YAIlC,OAHIO,GAZJ,IAAMC,QAAQ,UAAW,GAelB,IAAIC,SAAQ,SAACC,EAASC,ICjB1B,SAAqBL,GACxB,OAAOM,IAAMN,IDiBTO,CAAYP,GACPQ,MAAK,SAAAC,GAIF,GAHIR,GACAP,IAEe,MAAfe,EAAIC,OAGJ,OAFAd,EAAU,wBAAD,OAAyBa,EAAIC,cACtCL,EAAOI,GAGX,IAAME,EAAOF,EAAI5D,KACjB,GAAkB,MAAd8D,EAAKC,KAGL,OAFAhB,EAAU,UAAD,OAAWe,EAAKC,KAAhB,aAAyBD,EAAKd,WACvCQ,EAAOI,GAGXL,EAAQO,EAAK9D,SACdgE,OAAM,SAAAC,GACDb,GACAP,IAEJ,IAAMqB,EAASD,EAAIE,WACnBpB,EAAUmB,GACVV,EAAOS,SEzChB,ICcMG,EAAgB,WACzB,OAAOlB,EAAQ,CACXmB,IAAK,qBACLC,OAAQ,UCKHC,EAAiB,SAAAC,GAC1B,MAAO,CACH5E,KPxBwB,aOyBxBI,KAAMwE,IAUDC,EAAW,SAAA1C,GACpB,MAAO,CACHnC,KP/BiB,YOgCjBI,KAAM+B,IAGD2C,EAA8B,WACvC,OAAO,SAAAC,GFzCAzB,EAAQ,CACXmB,IAAK,2BACLC,OAAQ,MACRzB,aAAa,IEuCGc,MAAK,SAAAC,GACjB,IAAMgB,EAAQ,GACd,IAAK,IAAMC,KAAOjB,EACVA,EAAIkB,eAAeD,IACnBD,EAAMrC,KAAKqB,EAAIiB,IAGvB,IAAM9E,EAAS,CACXH,KP/C+B,kCOgD/BI,KAAM4E,EAAMG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAAOC,cAAcF,EAAEC,YAExDP,EAAS5E,QAKRqF,EAAoB,WAC7B,OAAO,SAAAT,GD3DAzB,EAAQ,CACXmB,IAAK,yBACLC,OAAQ,QC0DOX,MAAK,SAAAC,GAKhBe,EAJe,CACX/E,KPvDmB,sBOwDnBI,KAAM4D,SAQTyB,EAAqB,SAACpF,EAAUE,GACzC,OAAO,SAAAwE,GDjEA,IAAIrB,SAAQ,SAACC,EAASC,GACzBD,OCiEeI,MAAK,WAQhBgB,EAPe,CACX/E,KPlEoB,uBOmEpBI,KAAM,CACFC,WACAE,oBASPmF,GAAuB,WAChC,OAAO,SAAAX,GCxFAzB,EAAQ,CACXmB,IAAK,mBACLC,OAAQ,QDuFWX,MAAK,SAAAC,GAKpBe,EAJe,CACX/E,KPhFsB,0BOiFtBI,KAAM4D,SAOT2B,GAAwB,SAAAlF,GACjC,OAAO,SAAAsE,IC9FqB,SAAAtE,GAC5B,OAAO6C,EAAQ,CACXmB,IAAI,mBAAD,OAAqBhE,GACxBiE,OAAQ,YD4FRkB,CAAiBnF,GAAIsD,MAAK,WAOtBgB,EANe,CACX/E,KP1FiB,oBO2FjBI,KAAM,CACFK,GAAIA,UAQXoF,GAA0B,WACnC,OAAO,SAAAd,GEjHAzB,EAAQ,CACXmB,IAAK,2CACLC,OAAQ,QFgHYX,MAAK,SAAAC,GACrB,IAAM7D,EAAS,CACXH,KPtGkB,oBOuGlBI,KAAoB,SAAd4D,EAAI8B,OAEdf,EAAS5E,QAKR4F,GAAwB,SAAAC,GACjC,OAAO,SAAAjB,IEvHoB,SAAAiB,GAC3B,OAAO1C,EAAQ,CACXmB,IAAK,2CACLC,OAAQ,OACRtE,KAAM,CACF0F,MAAOE,MFmHXC,CAAgBD,GAAQjC,MAAK,WAKzBgB,EAJe,CACX/E,KPlHkB,oBOmHlBI,KAAM4F,SAOT1G,GAAa,SAAAsF,GACtB,MAAO,CACH5E,KP1HyB,oBO2HzBI,KAAMwE,IG3HRsB,I,OAAkB,CACpBC,EAAG,SACHC,EAAG,YAGMC,GAAmB,SAAArG,GAC5B,OAAIA,KAAQkG,GACDA,GAAgBlG,GAErB,YAAN,OAAmBA,EAAnB,MAkDEsG,GAAa,CACfH,EAAG,qBACHC,EAAG,eACHG,EAAG,qBACHC,EAAG,eACHC,EAAG,gBAEMC,GAAgB,SAAAxG,GACzB,OAAIA,KAASoG,GACFA,GAAWpG,GAEf,iBAAmBA,GClEjByG,GAAc,SAAAlG,GACvB,OAAO6C,EAAQ,CACXmB,IAAI,aAAD,OAAehE,GAClBiE,OAAQ,SCFVkC,GAAW,CACb,CACIzE,MAAO,uCACP8C,IAAK,aAET,CACI9C,MAAO,uCACP8C,IAAK,aAIP4B,G,kDACF,WAAYpF,GAAQ,IAAD,8BACf,cAAMA,IACDqF,QAAUC,SACf,EAAK7G,MAAQ,CACTR,QAAS,GACTsH,oBAAoB,EACpBC,cAAe,GACfC,YAAa,GACbC,YAAa,IAEjB,EAAK1F,MAAMoD,SAAS,aACpB,EAAKuC,eAAiB,EAAKA,eAAeC,KAApB,gBAXP,E,gEAef1F,KAAK2F,iBACL3F,KAAKF,MAAMnC,YAAW,GACtBqC,KAAKF,MAAMrC,YAAW,GACtBuC,KAAK4F,mB,uCAGS,IAAD,OACb5F,KAAKmF,QAAQU,WAAa,SAAAC,GAEtB,GAAsB,SADAA,EAAEC,OAAOC,QAAQC,cACvC,CAGA,IAAMC,EAAUJ,EAAEI,QACF,KAAZA,EACA,EAAKC,iBAAiB,EAAK5H,MAAMgH,aAEjC,EAAKa,gBAAgBC,OAAOC,aAAaJ,Q,sCAKrCK,GAAI,IACThB,EAAevF,KAAKzB,MAApBgH,YACPvF,KAAKc,SAAS,CACVyE,YAAaA,EAAcgB,M,6CAK/BC,cAAcxG,KAAKyG,YACnBzG,KAAKF,MAAMnC,YAAW,GACtBqC,KAAKF,MAAMrC,YAAW,GACtBuC,KAAK0G,mB,uCAIL1G,KAAKmF,QAAQU,WAAa,O,uCAGZ,IAAD,OACb7F,KAAKF,MAAM6G,gBACX3G,KAAKyG,WAAaG,aAAY,WAC1B,EAAK9G,MAAM6G,kBACZ,O,+BAGG,IAAD,OACCtD,EAAQrD,KAAKF,MAAMuD,MADpB,EAE0ErD,KAAKzB,MAA7EgH,EAFF,EAEEA,YAAaC,EAFf,EAEeA,YAAaH,EAF5B,EAE4BA,mBAAoBC,EAFhD,EAEgDA,cAAevH,EAF/D,EAE+DA,QAC9D8I,EFtDY,SAAAxD,GACtB,IAD+B,EACzByD,EAAS,GACTC,EAAU,SAAC7I,EAAM8I,GACf9I,KAAQ4I,EACRA,EAAO5I,GAAM8C,KAAKgG,GAElBF,EAAO5I,GAAQ,CAAC8I,IANO,cASd3D,GATc,IAS/B,2BAAwB,CAAC,IAAhB2D,EAAe,QAEdC,EADSD,EAAKrD,OACGuD,MAAM,uBAC7B,GAAID,EAEAF,EADe,UAAME,EAAQ,GAAd,6BAAsBA,EAAQ,GAA9B,UACID,QAEnBD,EAAQ,iCAASC,IAhBM,8BAmB/B,IAAM3E,EAAM,GACZ,IAAK,IAAInE,KAAQ4I,EACRA,EAAOvD,eAAerF,IAG3BmE,EAAIrB,KAAK,CACL9C,OACAmF,MAAOyD,EAAO5I,KAGtB,OAAOmE,EEyBkB8E,CAAW9D,GAChCrD,KAAKoH,iBAAmB,GAJnB,oBAKY5B,GALZ,IAKL,2BAA8B,CAAC,IAAtBwB,EAAqB,QAC1BhH,KAAKoH,iBAAiBJ,EAAKlI,KAAM,GANhC,8BAQL,IAAMuI,EAAkB7B,EAAcA,EAAY,GAAK,KACvD,OACI,yBAAKvF,UAAU,aACX,uBAAMqH,KAAMrC,GAAUsC,SAAU,SAACC,EAAKC,GAAN,OAAgB,EAAKC,YAAYF,EAAKC,MACtE,uBACItD,MAAOoB,EACPoC,SAAU,SAAA7B,GAAC,OAAI,EAAKK,iBAAiBL,IACrCyB,SAAU,SAAAhC,GAAW,OAAI,EAAKzE,SAAS,CAACyE,mBAC5C,yBAAKtF,UAAU,eAEPD,KAAK4H,gBAAgBP,IAG7B,yBAAKpH,UAAU,eAEP4G,EAAagB,KAAI,SAAAC,GAAK,OAAI,EAAKC,gBAAgBD,OAGvD,uBAAOE,QAAS3C,EACT7E,MAAK,sBAAiB8E,EAAc3B,QACpCsE,aAAW,EACXC,OAAQ,CAAC,CAACC,KAAM,KAAMvH,QAAS,kBAAM,EAAKE,SAAS,CAACuE,oBAAoB,OACxE+C,QAAS,kBAAM,EAAKtH,SAAS,CAACuE,oBAAoB,MACrD,uBAAMgD,aAAc,iBAAM,YAElBtK,EAAUA,EAAQ8J,KAAI,SAAAhJ,GAAM,OAAK,sBAAM0B,KAAN,CACzB+H,MAAOvD,GAAclG,EAAON,OAC5B+E,IAAKzE,EAAOC,IACXD,EAAO0J,SACR,sBAAMhI,KAAKiI,MAAX,KAAkB3J,EAAO4J,gBAE7B,sBAAMlI,KAAN,wB,sCAQZyG,GACZ,GAAKA,EAAL,CAGA,IAAM0B,EAAU,GAShB,OARAA,EAAQ1H,KAAKgG,EAAK2B,SACd3B,EAAK4B,sBACLF,EAAQ1H,KAAK,8CACb0H,EAAQ1H,KAAM,0BAAMf,UAAU,QAAQ+G,EAAK4B,uBAC3CF,EAAQ1H,KAAK,WAEb0H,EAAQ1H,KAAK,sEAET,uBAAWf,UAAU,UACxByI,M,sCAIOZ,GAAQ,IAAD,OACnB,OAAQ,yBAAK7H,UAAU,aAAaqD,IAAKwE,EAAM5J,MAC3C,uBAAG+B,UAAU,cACR6H,EAAM5J,MAEX,2BACI,uBAAM+B,UAAU,QAAQ4I,KAAM,OAAQC,QAAQ,WAEtChB,EAAMzE,MAAMwE,KAAI,SAAAb,GAAI,OAAI,EAAKvB,eAAeuB,W,qCAOjDA,GAAO,IAAD,OAEjB,IADgBA,EAAKjJ,QAEjB,OAAO,KAEX,IAAMgL,EAAM/B,EAAK+B,KAAO,GAClBtK,EAAOuI,EAAKvI,MAAQ,GACtBuK,EAAoB,YACpBhC,EAAKlI,MAAMkB,KAAKoH,iBAChB4B,GAAqB,uBFvLZ,SAAAzK,GACjB,OAAiB,IAAVA,EEwLK0K,CAAMjC,EAAKzI,UFjLF,SAAAA,GACrB,OAAiB,IAAVA,EEiLS2K,CAAUlC,EAAKzI,QF9KV,SAAAA,GACrB,OAAiB,IAAVA,EE+KgB4K,CAAUnC,EAAKzI,OAGtByK,GAAqB,kBAFrBA,GAAqB,qBAFrBA,GAAqB,sBAQjC,IAAMI,EF/Lc,SAAA7K,GACxB,OAAiB,IAAVA,EE8LgB8K,CAAa5K,EAAK6K,gBAC/B/K,EAAQwG,GAAciC,EAAKzI,OACjC,OAAQ,yBAAK+E,IAAK0D,EAAKlI,GACVmB,UAAW+I,EACXO,QAAS,kBAAM,EAAKC,gBAAgBxC,KAC7C,uBAAM/G,UAAU,cAAc6I,QAAQ,WAClC,yBAAK7I,UAAU,WACV+G,EAAKrD,QAEV,yBAAK1D,UAAU,SACX,0BAAMA,UAAU,QAChB,8BAAO1B,KAGf,uBAAM0B,UAAU,YAAY6I,QAAQ,WAChC,yBAAK7I,UAAU,QACX,yBAAKA,UAAU,UAAf,OAA6B8I,EAAIU,OACjC,yBAAKxJ,UAAU,YAAY8I,EAAI7K,OAEnC,yBAAK+B,UAAU,cACf,yBAAKA,UAAS,gBAAWmJ,EAAa,mBAAqB,KACvD,0BAAMnJ,UAAU,aAAaxB,EAAKiL,OAClC,0BAAMzJ,UAAU,YAAhB,uB,sCAMA+G,GACZhH,KAAKc,SAAS,CACVwE,cAAe0B,EACfjJ,QAASiJ,EAAKjJ,QACdsH,oBAAoB,M,uCAIXoE,GAAQ,ID1LCV,EC0LF,OACN,KAAVU,GAAiC,KAAjBA,EAAME,QD3LJZ,EC+LPU,ED9LZ9H,EAAQ,CACXmB,IAAK,sBACLC,OAAQ,OACRtE,KAAM,CACFgL,MAAOV,MC0LW3G,MAAK,SAAAC,GACvB,EAAKvB,SAAS,CACV0E,YAAanD,IAEjBuH,YAAW,kBAAM,EAAK9I,SAAS,CAAC0E,YAAa,GAAID,YAAa,OAAO,QACtE9C,OAAM,WACL,EAAK3B,SAAS,CACVyE,YAAa,QAVjB,IAAMtC,KAAK,uBAAwB,GAAG,K,kCAelCuE,EAAKC,GACb,OAAQA,GACJ,KAAK,EAEDzH,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAU,eAEd,MACJ,KAAK,EAEDjB,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAU,mB,GAnONE,aA4OlB0I,GAAYxI,aAvQK,SAAC9C,EAAOuB,GAC3B,OAAO,2BACAA,GADP,IAEIuD,MAAO9E,EAAMT,oBAGG,SAACsF,EAAUtD,GAC/B,OAAO,2BACAA,GADP,IAEI6G,cAAe,kBAAavD,EAASD,EAA2B,WAA3B,eACrCD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,eAChCvF,WAAY,kBAAayF,EAASzF,GAAU,WAAV,eAClCF,WAAY,kBAAa2F,EAASJ,EAAc,WAAd,mBA2PxB3B,CAAyC6D,IAC5C9D,eAAWyI,I,0HCvPXC,I,8KAfD,IAAD,OACL,OACI,yBAAK7J,UAAU,cAAcsJ,QAAS,kBAAM,EAAKA,YAC7C,wBAAMlL,KAAM2B,KAAKF,MAAMiK,SAAU9J,UAAU,Y,gCAM/CD,KAAKF,MAAMyJ,SACXvJ,KAAKF,MAAMyJ,c,GAhBGpI,cCkBpB6I,G,kDACF,WAAYlK,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,GACb,EAAKuB,MAAMoD,SAAS,kBACpB,EAAKpD,MAAMkD,gBAAe,GAJX,E,qDAOT,IAAD,OACEjF,EAAWiC,KAAKF,MAAhB/B,QACP,OACI,yBAAKkC,UAAU,eACX,uBAAMoI,aAAc,iBAAM,YAElBtK,EAAQ8J,KAAI,SAAAhJ,GAAM,OAAK,sBAAM0B,KAAN,CAAW+C,IAAKzE,EAAOC,IAC1C,4BACI,uBAAMmL,OAAN,CAAazJ,MAAK,kBAAa3B,EAAOqL,SAAW5B,MAAOzJ,EAAO0J,WAC/D,uBAAM4B,KAAN,KACI,uBAAMrB,QAAQ,WACV,wCACA,wBAAQsB,QAASvL,EAAOD,UAChB2I,SAAU,SAACzB,GAAD,OAAO,EAAKuE,aAAaxL,EAAQiH,IAC3CwE,SAAS,cAGzB,uBAAMC,OAAN,CAAa7B,QAAO,gBAAW7J,EAAOmI,MAAQnI,EAAOmI,KAAKrD,OAAtC,KACP2E,MAAOzJ,EAAOmI,MAAQnI,EAAOmI,KAAKlI,WAK/D,kBAAC,GAAD,CAAaiL,SAAS,WAAWR,QAAS,kBAAM,EAAKiB,6B,0CAM7DxK,KAAKF,MAAM2K,iB,mCAGF5L,EAAQiH,GACjB9F,KAAKF,MAAMgE,mBAAmBjF,EAAOC,GAAIgH,K,6CAGrB,IAAD,OACb4E,EAAU,CAAC,iBAAkB,UACnC,KAAYC,2BAA2B,CACnCnK,MAAO,aACPoB,QAAS8I,EACTE,kBAAmBF,EAAQG,OAAS,EACpCC,uBAAwB,IACzB,SAAArD,GACe,IAAVA,GACA,EAAKsD,yB,0CAMb,IAAMC,MAAM,SAAU,0BAClB,CACI,CACI7C,KAAM,MAAOvH,QAAS,WAClBiC,IAAgBT,MAAK,WACjB,IAAMa,KAAK,kBAAmB,GAAG,QAI7C,CACIkF,KAAM,SAAUvH,QAAS,WACrB,IAAMqC,KAAK,SAAU,GAAG,W,GAtEpB9B,aA6EbE,gBApFQ,SAAC9C,EAAOuB,GAC3B,OAAO,2BACAA,GADP,IAEI/B,QAASQ,EAAMR,aAZC,SAACqF,EAAUtD,GAC/B,OAAO,2BACAA,GADP,IAEI2K,aAAc,kBAAarH,EAASS,EAAiB,WAAjB,eACpCC,mBAAoB,kBAAaV,EAASU,EAAkB,WAAlB,eAC1CZ,SAAU,kBAAaE,EAASF,EAAQ,WAAR,eAChCF,eAAgB,kBAAaI,EAASJ,EAAc,WAAd,mBAuF/B3B,CAAyC2I,I,6BCtFlDiB,G,kDACF,WAAYnL,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,GACb,EAAKuB,MAAMoD,SAAS,WAHL,E,gEAOflD,KAAKF,MAAMkD,gBAAe,K,+BAGpB,IAAD,OACL,OACI,yBAAK/C,UAAU,WACX,uBAAMoI,aAAc,iBAAM,cACtB,sBAAM9H,KAAN,CAAWgJ,QAAS,kBAAM,EAAK2B,GAAG,qBAC9B,6BACA,uBAAMpC,QAAQ,WACV,yCACA,wBAAMzK,KAAK,WAEf,8BAEJ,sBAAMkC,KAAN,CAAWgJ,QAAS,kBAAM,EAAK2B,GAAG,mBAC9B,6BACA,uBAAMpC,QAAQ,WACV,uCACA,wBAAMzK,KAAK,WAEf,8BAEJ,sBAAMkC,KAAN,CAAWgJ,QAAS,kBAAM,EAAK2B,GAAG,yBAC9B,6BACA,uBAAMpC,QAAQ,WACV,6CACA,wBAAMzK,KAAK,WAEf,8BAEJ,sBAAMkC,KAAN,CAAWgJ,QAAS,kBAAM,EAAK2B,GAAG,qBAC9B,6BACA,uBAAMpC,QAAQ,WACV,wCACA,wBAAMzK,KAAK,WAEf,8BAEJ,sBAAMkC,KAAN,CAAWgJ,QAAS,kBAAM,EAAK2B,GAAG,uBAC9B,6BACA,uBAAMpC,QAAQ,WACV,0CACA,wBAAMzK,KAAK,WAEf,kC,yBAOjB0B,GACCC,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAUlB,Q,GA9DIoB,aAmEXC,eAAWC,YAAQ,MA3EV,SAAC+B,EAAUtD,GAC/B,OAAO,2BACAA,GADP,IAEIoD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,eAChCF,eAAgB,kBAAaI,EAASJ,EAAc,WAAd,mBAuEpB3B,CAA+B4J,KCxEnDE,I,OAAmB,CAAC,UAAW,cAAe,WAC7C5K,G,IAAAA,KASD6K,G,kDACF,WAAYtL,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,CACT8E,MAAO,IAHI,E,gEAQfrD,KAAKF,MAAMkD,gBAAe,GAC1BhD,KAAKF,MAAMoD,SAAS,iBACpBlD,KAAKqL,e,+BAGC,IAAD,OACEhI,EAASrD,KAAKzB,MAAd8E,MACP,OACI,yBAAKpD,UAAU,eACX,uBAAMoI,aAAc,iBAAM,cAElBhF,EAAMwE,KAAI,SAAAb,GAAI,OACV,kBAAC,GAAD,CAAM1D,IAAK0D,EAAKlI,GAAIwJ,MAAO,wBAAMjK,KAAK,UAAWkL,QAAS,kBAAM,EAAK+B,aAAatE,KAC9E,uBAAM8B,QAAQ,WACV,0BAAM7I,UAAU,UAAU+G,EAAKrD,QAC/B,0BAAM1D,UAAU,QAAQ+G,EAAK2B,eAKjD,kBAAC,GAAD,CAAaoB,SAAS,WAAWR,QAAS,kBAAM,EAAKgC,2B,2CAK3C,IAAD,OACjB,KAAYZ,2BAA2B,CACnC/I,QAASuJ,GACT3K,MAAO,aACPoK,kBAAmBO,GAAiBN,OAAS,EAC7CC,uBAAwB,IACzB,SAAArD,GACC,OAAQA,GACJ,KAAK,EACD,EAAK4D,aACL,MACJ,KAAK,EACD,EAAKG,kB,mCAQRxE,GACThH,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAS,wBAAD,OAA0B+F,EAAKlI,Q,kCLxExC6C,EAAQ,CACXmB,IAAK,qBACLC,OAAQ,SK2EIX,MAAK,WACb,IAAMa,KAAK,oB,mCAIL,IAAD,OLnENtB,EAAQ,CACXmB,IAAK,aACLC,OAAQ,QKkEQX,MAAK,SAAAC,GACjB,EAAKvB,SAAS,CAACuC,MAAOhB,W,GApERlB,aAyEXC,eAAWC,YAAQ,MAjFV,SAAC+B,EAAUtD,GAC/B,OAAO,2BACAA,GADP,IAEIkD,eAAgB,kBAAaI,EAASJ,EAAc,WAAd,eACtCE,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBA6Ed7B,CAA+B+J,K,sFCpFnDK,I,OAAuB,CACzB,SACA,aACA,WAEElH,GAAkB,CACpB,CACImH,MAAO,SACPvH,MAAO,GAEX,CACIuH,MAAO,UACPvH,MAAO,IAmBTwH,G,kDACF,WAAY7L,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,CACTqN,qBAAqB,EACrBC,OAAQ,CACJxN,KAAM,KACN0H,OAAQ,IAEZ+F,YAAa,IAEjB,EAAKhM,MAAMoD,SAAS,sBAVL,E,gEAcflD,KAAKF,MAAMiM,kBACX/L,KAAKF,MAAMkD,gBAAe,K,+BAGpB,IAAD,OACEzC,EADF,IACEA,KACAvC,EAAegC,KAAKF,MAApB9B,YACA4N,EAAuB5L,KAAKzB,MAA5BqN,oBACAC,EAAU7L,KAAKzB,MAAfsN,OACP,OACI,6BACI,uBAAMxD,aAAc,iBAAM,gBAElBrK,EAAY6J,KAAI,SAAA1I,GAAU,OACtB,kBAACoB,EAAD,CAAM+C,IAAKnE,EAAWL,GAAIwJ,MAAO,wBAAMjK,KAAK,UACtCkL,QAAS,kBAAM,EAAKyC,yBAAyB7M,KAC/C,uBAAM2J,QAAQ,UAAU7I,UAAU,kBAC9B,0BAAMA,UAAU,QAAQyE,GAAiBvF,EAAWd,OACpD,0BAAM4B,UAAU,UAAUd,EAAW4G,aAIrD,kBAACxF,EAAD,CAAM+C,IAAI,gBACN,wBAAQjF,KAAK,UAAUkL,QAAS,kBAAM,EAAK0C,qBAA3C,SAGR,uBACIjE,QAAS4D,EACT3D,aAAW,EACXzH,MAAM,sBACN0H,OAAQ,CACJ,CAACC,KAAM,SAAUvH,QAAS,kBAAM,EAAKE,SAAS,CAAC8K,qBAAqB,MACpE,CAACzD,KAAM,SAAUvH,QAAS,kBAAM,EAAKsL,sBAEzC9D,QAAS,kBAAM,EAAKtH,SAAS,CAAC8K,qBAAqB,MACnD,uBAAMpL,MAAM,cACR,wBAAQ/B,KAAM8F,GAAiB/D,MAAM,kBAAkB2L,KAAM,EACrD7D,MAAM,SACNf,SAAU,SAAAzB,GAAC,OAAI,EAAKsG,cAActG,KACtC,sBAAMvF,KAAN,KACI,wBAAW4D,MAAO0H,EAAOxN,MAAQqG,GAAiBmH,EAAOxN,MAC9CgO,UAAU,EACVC,YAAY,WAI1B,WACG,IAAMC,EAAS,sBAAMhM,KAAN,CAAW+C,IAAI,UAAS,wBAAWgJ,YAAY,oBACZ/E,SAAU,SAAAzB,GAAC,OAAI,EAAK0G,gBAAgB1G,IACpC3B,MAAO0H,EAAO9F,OACdsG,SAAqC,IAA3B,EAAK9N,MAAMsN,OAAOxN,QAC9E,OAAoB,IAAhBwN,EAAOxN,KACC,wBAAQI,KAAM,EAAKF,MAAMuN,YACjBxD,MAAM,SACN9H,MAAM,mBACN2L,KAAM,EACN5E,SAAU,SAAAkF,GAAG,OAAI,EAAKC,sBAAsBD,KACvDF,GAGEA,EAdd,Q,uCAwBRpN,GAAa,IAAD,OACzB,IAAM6L,MAAM,qBAAsB,sCAC9B,CACI,CACI7C,KAAM,SACNvH,QAAS,WACL,IAAMqC,KAAK,WAAY,GAAG,KAGlC,CACIkF,KAAM,SACNvH,QAAS,WACL,EAAKd,MAAMmE,iBAAiB9E,EAAWL,U,qCAM5CK,GACX,IAAM6L,MAAM,eAAgB,oCACxB,CACI,CACI7C,KAAM,SACNvH,QAAS,WACL,IAAMqC,KAAK,WAAY,GAAG,KAGlC,CACIkF,KAAM,OACNvH,QAAS,WTxHH,IAAA9B,KSyHSK,EAAWL,GTxHnC6C,EAAQ,CACXmB,IAAI,mBAAD,OAAqBhE,EAArB,UACHiE,OAAQ,USsHkCX,MAAK,WAC3B,IAAMa,KAAK,gBAAiB,GAAG,Y,yCAQnDjD,KAAKc,SAAS,CACV8K,qBAAqB,M,yCAIT,ITxJQzM,ESwJT,QTxJSA,ESyJPa,KAAKzB,MAAMsN,OTxJzBlK,EAAQ,CACXmB,IAAK,mBACLC,OAAQ,MACRtE,KAAMU,KSqJ8BiD,MAAK,WACrC,EAAKtC,MAAMiM,kBACX,EAAKjL,SAAS,CACV+K,OAAQ,GACRD,qBAAqB,S,oCAKnBe,GAAQ,IAAD,OACbA,EAAM9B,OAAS,GACf,IAAM5H,KAAK,oCAEf,IAAM5E,EAAOsO,EAAM,GACbC,EAAY,CACdvO,OACA0H,OAAQ,IAEZ/F,KAAKc,SAAS,CAAC+K,OAAQe,IACV,IAATvO,GAAc2B,KAAKzB,MAAMuN,YAAYjB,QAAU,GTlKhDlJ,EAAQ,CACXmB,IAAK,mBACLC,OAAQ,QSiKOX,MAAK,SAAAC,GACZ,IADmB,EACbyJ,EAAc,GADD,cAEAzJ,GAFA,IAEnB,2BAAwB,CAAC,IAAdwK,EAAa,QACpBf,EAAY9K,KAAK,CACb0K,MAAOmB,EACP1I,MAAO0I,KALI,8BAQnB,EAAK/L,SAAS,CAACgL,qB,sCAKXhG,GACZ,IAAM+F,EAAM,2BACL7L,KAAKzB,MAAMsN,QADN,IAER9F,OAAQD,IAEZ9F,KAAKc,SAAS,CAAC+K,a,4CAGGiB,GAClB,GAAKA,EAAL,CAIA,IAAMD,EAAOC,EAAgB,GACvBjB,EAAM,2BACL7L,KAAKzB,MAAMsN,QADN,IAER9F,OAAQ8G,IAEZ7M,KAAKc,SAAS,CAAC+K,gBARX,IAAM5I,KAAK,kC,+CAWM9D,GAAa,IAAD,OACjC,KAAYwL,2BAA2B,CACnCnK,MAAM,GAAD,OAAKrB,EAAW4G,OAAhB,eACLnE,QAAS6J,GACTb,kBAAmBa,GAAqBZ,OAAS,EACjDC,uBAAwB,IACzB,SAAArD,GACC,OAAQA,GACJ,KAAK,EACD,EAAKxD,iBAAiB9E,GACtB,MACJ,KAAK,EACD,EAAK4N,eAAe5N,W,GApMRgC,aA6MjBE,gBApNQ,SAAC9C,EAAOuB,GAC3B,OAAO,2BACAA,GADP,IAEI9B,YAAaO,EAAMP,iBAZH,SAACoF,EAAUtD,GAC/B,OAAO,2BACAA,GADP,IAEIiM,gBAAiB,kBAAa3I,EAASW,GAAoB,WAApB,eACvCb,SAAU,kBAAaE,EAASF,EAAQ,WAAR,eAChCe,iBAAkB,kBAAab,EAASY,GAAqB,WAArB,eACxChB,eAAgB,kBAAaI,EAASJ,EAAc,WAAd,mBAuN/B3B,CAAyCsK,IC5OlDqB,GAAgB,CAClB,UACA,SACA,UAEGzM,G,IAAAA,KAQD0M,G,kDACF,WAAYnN,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,CACTyI,KAAM,IAEV,EAAKkG,OAAS,EAAKpN,MAAMoH,MAAMiG,OAAOrO,GALvB,E,gEASfkB,KAAKF,MAAMoD,SAAX,UAAuBlD,KAAKkN,OAA5B,cACAlN,KAAKoN,kB,sCAGQ,IAAD,OACZpI,GAAYhF,KAAKkN,QAAQ9K,MAAK,SAAAC,GAC1B,EAAKvB,SAAS,CAACkG,KAAM3E,IACrB,EAAKvC,MAAMoD,SAAX,UAAuBb,EAAIsB,OAA3B,mB,+BAIE,IAAD,OACEqD,EAAQhH,KAAKzB,MAAbyI,KACP,OACI,yBAAK/G,UAAU,cACX,uBAAMoI,aAAc,iBAAM,cACtB,kBAAC,GAAD,CAAM/E,IAAI,UACN,wBAAWgJ,YAAY,UAAUnI,MAAO6C,EAAKrD,OAClC4D,SAAU,SAAAY,GAAI,OAAI,EAAKkF,kBAAkB,CAAC1J,OAAQwE,MAD7D,WAGJ,kBAAC,GAAD,CAAM7E,IAAI,WACN,wBAAWgJ,YAAY,WAAWnI,MAAO6C,EAAK2B,QACnCpB,SAAU,SAAAY,GAAI,OAAI,EAAKkF,kBAAkB,CAAC1E,QAASR,MAD9D,YAGJ,kBAAC,GAAD,CAAM7E,IAAI,SACN,wBAAWgJ,YAAY,SAASnI,MAAO6C,EAAKyC,MACjClC,SAAU,SAAAY,GAAI,OAAI,EAAKkF,kBAAkB,CAAC5D,MAAOtB,MAD5D,UAGJ,kBAAC,GAAD,CAAM7E,IAAI,UACN,wBAAWgJ,YAAY,UAAUnI,MAAO6C,EAAKsG,OAClCjP,KAAK,SACLkJ,SAAU,SAAAY,GAAI,OAAI,EAAKkF,kBAAkB,CAACC,OAAQnF,MAF7D,QAIJ,kBAAC,GAAD,CAAM7E,IAAI,gBACN,wBAAWgJ,YAAY,gBAAgBnI,MAAO6C,EAAKuG,aACxClP,KAAK,SACLkJ,SAAU,SAAAY,GAAI,OAAI,EAAKkF,kBAAkB,CAACE,aAAcpF,MAFnE,cAIJ,kBAAC,GAAD,CAAM7E,IAAI,wBACN,wBAAWgJ,YAAY,wBAAwBnI,MAAO6C,EAAK4B,qBAChDvK,KAAK,SACLkJ,SAAU,SAAAY,GAAI,OAAI,EAAKkF,kBAAkB,CAACzE,qBAAsBT,MAF3E,aAMJ,kBAAC,GAAD,CAAM7E,IAAI,YACN,2BAAW,wBAAQjF,KAAK,UAAUkL,QAAS,kBAAM,EAAKiE,gBAA3C,mBAInB,uBAAMnF,aAAc,iBAAM,eACtB,sBAAM9H,KAAN,CACI+C,IAAI,YACJgF,MAAO,wBACH8B,QAASpD,EAAKpI,UACd2I,SAAU,SAAAhJ,GAAK,OAAI,EAAKkP,aAAalP,IACrC+L,SAAS,aALjB,iBAQA,sBAAM/J,KAAN,CACImN,MAAM,aACNnE,QAAS,kBAAM,EAAKzJ,MAAMiB,QAAQC,KAAK,CAACC,SAAS,yBAAD,OAA2B+F,EAAKlI,QAFpF,YAMJ,kBAAC,GAAD,CAAaiL,SAAS,WAAWR,QAAS,kBAAM,EAAKoE,sB,sCAKhD,IAAD,OACZ,KAAYhD,2BAA2B,CACnCnK,MAAO,aACPoB,QAASoL,GACTlC,uBAAwB,EACxBF,kBAAmBoC,GAAcnC,OAAS,IAC3C,SAAA+C,GACC,IAAMC,EAASb,GAAcY,GACd,YAAXC,EACA,EAAKC,SACa,WAAXD,GACP,IAAM5K,KAAK,0B,+BAKb,IP5GSU,EO6GRqD,EAAQhH,KAAKzB,MAAbyI,MP7GQrD,EO8GPqD,EAAKrD,OP7GVhC,EAAQ,CACXmB,IAAI,aAAD,OAAea,EAAf,SACHZ,OAAQ,UO2GaX,MAAK,WACtB,IAAMa,KAAK,yB,wCAIDnD,GACd,IAAMkH,EAAI,2BACHhH,KAAKzB,MAAMyI,MACXlH,GAEPE,KAAKc,SAAS,CAACkG,W,oCPjGG,IAAAA,KOqGPhH,KAAKzB,MAAMyI,KPpGnBrF,EAAQ,CACXmB,IAAI,aAAD,OAAekE,EAAKlI,IACvBiE,OAAQ,OACRtE,KAAMuI,KOiGsB5E,MAAK,WAC7B,IAAMa,KAAK,uB,mCAIN8K,GAAY,IPjGIC,EOiGL,QPjGKA,EOkGP,CAAClP,GAAIkB,KAAKkN,OAAQa,aPjGjCpM,EAAQ,CACXmB,IAAI,aAAD,OAAekL,EAAOlP,GAAtB,gBACHiE,OAAQ,OACRtE,KAAM,CAACG,UAAWoP,EAAOD,cO8FuB3L,MAAK,WACjD,IAAMa,KAAK,0BACX,EAAKmK,uB,GAxHejM,aA6HjBC,eAAWC,YAAQ,MApIV,SAAC+B,EAAUtD,GAC/B,OAAO,2BACAA,GADP,IAEIoD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBAiId7B,CAA+B4L,K,6BC3HnDgB,G,kDACF,WAAYnO,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,CACT2P,WAAY,GACZC,iBAAiB,EACjBC,gBAAgB,EAChBC,cAAe,IANJ,E,gEAUE,IAAD,OAChBrO,KAAKF,MAAMoD,SAAS,gBdxBjBvB,EAAQ,CACXmB,IAAK,8BACLC,OAAQ,QcuBUX,MAAK,SAAAC,GACnB,EAAKvB,SAAS,CACVoN,WAAY7L,S,+BAKd,IAAD,OACE9B,EADF,IACEA,KADF,EAE+CP,KAAKzB,MAAlD2P,EAFF,EAEEA,WAAYE,EAFd,EAEcA,eAAgBC,EAF9B,EAE8BA,cAC5B3Q,EAAgBsC,KAAKF,MAArBpC,aACP,OACI,yBAAKuC,UAAU,kBACX,uBAAMoI,aAAc,iBAAM,iBACtB,kBAAC9H,EAAD,CAAM+C,IAAI,UAAUgF,MAAO4F,EAAWI,SAAtC,WACA,kBAAC/N,EAAD,CAAM+C,IAAI,aAAagF,MAAO4F,EAAWK,YAAzC,cACA,kBAAChO,EAAD,CAAM+C,IAAI,YAAYgF,MAAO4F,EAAWM,WAAxC,aACA,kBAACjO,EAAD,CAAM+C,IAAI,MAAMgF,MAAO4F,EAAWO,KAAlC,aACA,kBAAClO,EAAD,CAAM+C,IAAI,UAAUgF,MAAO,wBAAMjK,KAAK,UAChCkL,QAAS,kBAAM,EAAKmF,qBAD1B,aACyDR,EAAWS,SACpE,kBAACpO,EAAD,CAAM+C,IAAI,QACN,wBAAQjF,KAAK,UAAUkL,QAAS,kBAAM,EAAKqF,eACnCvC,UAAWrM,KAAKzB,MAAM4P,iBAD9B,kBAIR,uBAAM9F,aAAc,iBAAM,aACtB,kBAAC9H,EAAD,CACI+C,IAAI,SACJgF,MAAO,wBACH8B,QAAS1M,EACT6J,SAAU,SAAAxB,GAAM,OAAI,EAAKzB,gBAAgByB,IACzCuE,SAAS,aALjB,gBAQA,kBAAC/J,EAAD,CAAM+C,IAAI,cAAcgF,MAAO,wBAAMjK,KAAK,UACpCkL,QAAS,kBAAM,EAAKzJ,MAAMiB,QAAQC,KAAK,CAACC,SAAU,4BADxD,gBAIA,kBAACV,EAAD,CAAM+C,IAAI,eACN,wBAAQjF,KAAK,UAAUkL,QAAS,kBAAM,EAAKsF,sBAA3C,yBAGR,uBACI7G,QAASoG,EACT5N,MAAM,4BACNyH,aAAW,EACX6G,cAAc,EACd5G,OAAQ,CACJ,CACIC,KAAM,SACNvH,QAAS,kBAAM,EAAKE,SAAS,CAACsN,gBAAgB,MAElD,CACIjG,KAAM,SACNvH,QAAS,kBAAM,EAAKmO,oBAG5B,wBACIzC,YAAY,oCACZ0C,YAAU,EACV7K,MAAOkK,EAAe9G,SAAU,SAAAzB,GAAC,OAAI,EAAKhF,SAAS,CAACuN,cAAevI,W,oCAOnF,IAAM7C,KAAK,4BAA6B,GAAG,GAC3CjD,KAAKc,SAAS,CACVqN,iBAAiB,M,sCAITpI,GACZ/F,KAAKF,MAAMwE,gBAAgByB,K,yCAI3B,IAAMsI,EAAgBrO,KAAKzB,MAAM2P,WAAWS,QAC5C3O,KAAKc,SAAS,CACVuN,gBACAD,gBAAgB,M,sCAIP,ICvHQrO,EDuHT,QCvHSA,EDwHPC,KAAKzB,MAAM8P,cCvHtB1M,EAAQ,CACXmB,IAAK,uBACLC,OAAQ,OACRtE,KAAM,CACFkQ,QAAS5O,MDmH2BqC,MAAK,SAAAC,GACzC,IAAMY,KAAN,oBAAwBZ,EAAxB,MACA,EAAKvB,SAAS,CACVsN,gBAAgB,S,0CbxFrBzM,EAAQ,CACXmB,IAAK,mCACLC,OAAQ,Sa4FYX,MAAK,WACrB,IAAMa,KAAK,uC,GA7GK9B,aAkHbC,eAAWC,aAzHH,SAAC9C,EAAOuB,GAC3B,OAAO,2BACAA,GADP,IAEIpC,aAAca,EAAMb,kBAVJ,SAAC0F,EAAUtD,GAC/B,OAAO,2BACAA,GADP,IAEIoD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,eAChCoB,gBAAiB,kBAAalB,EAASgB,GAAqB,WAArB,mBA4HrB/C,CAAyC4M,KErI5D1N,G,IAAAA,KA4CQ0O,G,kDAzCX,WAAYnP,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,CACT2Q,YAAa,IAHF,E,gEAOE,IAAD,OhBIbvN,EAAQ,CACXmB,IAAK,8BACLC,OAAQ,QgBLWX,MAAK,SAAAC,GACpB,IAAM8M,EAAW,GACjB,IAAK,IAAMjR,KAAQmE,EACXA,EAAIkB,eAAerF,IACnBiR,EAASnO,KAAK,CACV9C,OACAiG,MAAO9B,EAAInE,KAIvB,EAAK4C,SAAS,CACVoO,YAAaC,S,+BAKf,IACCD,EAAelP,KAAKzB,MAApB2Q,YACP,OACI,yBAAKjP,UAAU,eACX,uBAAMoI,aAAc,iBAAM,sBAElB6G,EAAYrH,KAAI,SAAAuH,GAAC,OAAK,kBAAC,GAAD,CAAM9L,IAAK8L,EAAElR,MAC/B,6BAAMkR,EAAElR,MACR,wBAAciG,MAAOiL,EAAEjL,MAAO6K,YAAU,EAACK,YAAa,c,GAjCjDlO,aCQ3BmO,I,OAAoB,CAAC,SAAU,WAE/BC,G,kDACF,WAAYzP,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,CACTyI,KAAM,GACNjJ,QAAS,GACTyR,kBAAkB,EAClBC,SAAU,GACVC,iBAAkB,IAPP,E,gEAWE,IAAD,OAChB1P,KAAKF,MAAMoD,SAAS,WADJ,IAETpE,EAAMkB,KAAKF,MAAMoH,MAAMiG,OAAvBrO,GACPkG,GAAYlG,GAAIsD,MAAK,SAAAC,GACjB,IADwB,EAClBtE,EAAUsE,EAAItE,QADI,cAELA,GAFK,IAExB,2BAA4B,SACjB4R,SAAU,GAHG,8BAKxB,EAAK7O,SAAS,CACVkG,KAAM3E,EACNtE,QAASA,IAEb,EAAK+B,MAAMoD,SAAX,sBAAmCb,EAAIsB,YXqBxChC,EAAQ,CACXmB,IAAK,0BACLC,OAAQ,QWrBcX,MAAK,SAAAC,GACvB,IAD8B,EACxBuN,EAAa,GADW,cAEbvN,GAFa,IAE9B,2BAAsB,CAAC,IAAD,EAAb2E,EAAa,QACZjJ,EAAUiJ,EAAKjJ,QACf8R,EAAW,GAFC,cAGC9R,GAHD,IAGlB,2BAA4B,CAAC,IAApBc,EAAmB,QACxBgR,EAAS7O,KAAK,CACVmD,MAAOtF,EAAOC,GACd4M,MAAO7M,EAAOqL,WANJ,8BASlB0F,EAAW5O,KAAK,CACZmD,MAAO6C,EAAKlI,GACZ4M,MAAO1E,EAAKrD,OACZkM,SAAUA,KAdY,8BAiB9B,EAAK/O,SAAS,CAAC2O,SAAUpN,EAAKqN,iBAAkBE,S,uCAIvC/Q,GAAS,IAAD,SACwBmB,KAAKzB,MAA3CiR,EADc,EACdA,iBAAkBE,EADJ,EACIA,iBACnBI,EACF,sBAAMvP,KAAN,CAAW+C,IAAKzE,EAAOC,GACZ4O,MAAM,aACNzN,UAAS,sBAAiBpB,EAAO8Q,QAAU,sBAAwB,IACnEpG,QAAS,kBAAM,EAAKwG,qBAAqBlR,IACzCyJ,MAAOkH,EAAmB,kBAAoB,IACpD3Q,EAAO0J,UAEhB,OAAIiH,EACOM,EAEC,wBACJrR,KAAMiR,EACNpM,IAAKzE,EAAOC,GACZqF,MAAO,CAACtF,EAAOqO,OAAQrO,EAAOC,IAC9BqN,KAAM,EACN5E,SAAU,SAAAyI,GAAC,OAAI,EAAKC,eAAepR,EAAQmR,KAAKF,K,qCAI7CI,EAAWzP,GACtB,IAaI0P,EAbEjD,EAASzM,EAAS,GAClB/B,EAAW+B,EAAS,GACtBgH,GAAS,EACP2I,EAAkBpQ,KAAKzB,MAAMR,QACnC,IAAK,IAAIsS,KAAKD,EAAiB,CAC3B,GAAKA,EAAgB7M,eAAe8M,GAGrBD,EAAgBC,GACpBvR,KAAOoR,EAAUpR,KACxB2I,EAAQ4I,GAXgB,oBAefrQ,KAAKzB,MAAMkR,UAfI,IAehC,2BAAsC,CAAC,IAA9BzI,EAA6B,QAClC,GAAIA,EAAKlI,KAAOoO,EAAQ,CAAC,IAAD,gBACDlG,EAAKjJ,SADJ,IACpB,2BAAiC,CAAC,IAAzBc,EAAwB,QACzBA,EAAOC,KAAOJ,IACdG,EAAO8Q,SAAU,EACjBQ,EAAiBtR,IAJL,8BAOpB,QAvBwB,kDA0BlBuR,GA1BkB,IA0BhC,2BAA+B,CAC3B,GAD2B,QACrBtR,KAAOqR,EAAerR,GAExB,YADA,IAAMmE,KAAK,oBAAqB,GAAG,IA5BX,8BAgChCmN,EAAgB3I,GAAS0I,EACzBnQ,KAAKc,SAAS,CAAC/C,QAASqS,M,+BAGlB,IAAD,SACqCpQ,KAAKzB,MAAxCyI,EADF,EACEA,KAAMjJ,EADR,EACQA,QAASyR,EADjB,EACiBA,iBACtB,OACI,6BACI,uBAAMnH,aAAc,iBAAM,cACtB,sBAAM9H,KAAN,CAAW+H,MAAOtB,EAAKrD,QAAvB,WACA,sBAAMpD,KAAN,CAAW+H,MAAOtB,EAAK2B,SAAvB,YACA,sBAAMpI,KAAN,CAAW+H,MAAOtB,EAAKyC,OAAvB,WAEJ,uBAAMpB,aAAc,iBAAM,YAElBtK,EAAQ8J,KAAI,SAAAhJ,GAAM,OAAI,EAAKyR,iBAAiBzR,MAEhD,sBAAM0B,KAAN,KACI,2BACI,uBAAMuI,QAAS,WACX,sBAAMvI,KAAN,KACI,wBAAQlC,KAAK,UACLkL,QAAS,kBAAM,EAAKzI,SAAS,CAAC0O,kBAAmB,EAAKjR,MAAMiR,qBAC/DA,EAAmB,SAAW,WAGvC,sBAAMjP,KAAN,KACI,wBAAQlC,KAAK,QAAQkL,QAAS,kBAAM,EAAKgH,aACjClE,SAAUmD,GADlB,QAGJ,sBAAMjP,KAAN,KACI,wBAAQlC,KAAK,UAAUgO,SAAUmD,EACzBjG,QAAS,kBAAM,EAAKiH,iBAD5B,iB,kCAWnB,IAAD,gBACWxQ,KAAKzB,MAAMR,SADtB,IACR,2BAAuC,CACnC,GADmC,QACxBe,GAAK,EAEZ,YADA,IAAMmE,KAAK,0BAA2B,GAAG,IAHzC,kCAODlF,EAAWiC,KAAKzB,MAAhBR,QACPA,EAAQiD,KAAK,CACTlC,IAAK,EACLyJ,SAAU,eACVoH,SAAS,IAEb3P,KAAKc,SAAS,CAAC/C,c,2CAGEc,GAAS,IAAD,OACEmB,KAAKzB,MAAzBiR,kBAIP,KAAY7E,2BACR,CACI/I,QAAS0N,GACT9O,MAAM,UAAD,OAAY3B,EAAO0J,UACxBqC,kBAAmB,EACnBE,uBAAwB,IAE5B,SAAArD,GACkB,IAAVA,GACA,IAAMuD,MAAM,SAAZ,wBACqBnM,EAAO0J,SAD5B,KAEI,CACI,CAACJ,KAAM,UACP,CACIA,KAAM,SACNvH,QAAS,kBAAM,EAAK6P,aAAa5R,Y,mCAOhDA,GAAS,IACXd,EAAWiC,KAAKzB,MAAhBR,QACD2S,EAAa,GACnB,IAAK,IAAIL,KAAKtS,EACV,GAAKA,EAAQwF,eAAe8M,GAA5B,CAGA,IAAMM,EAAI5S,EAAQsS,GACdM,EAAE7R,KAAOD,EAAOC,IAGpB4R,EAAW1P,KAAK2P,GAEpB3Q,KAAKc,SAAS,CAAC/C,QAAS2S,M,qCAGZ,IAAD,SACLE,EAAY5Q,KAAKzB,MAAMR,QAAQ8J,KAAI,SAAAmI,GAAC,OAAIA,EAAElR,MADrC,cAEI8R,GAFJ,IAEX,2BAA0B,CACtB,GADsB,SACZ,EAEN,YADA,IAAM3N,KAAK,2BAA4B,GAAG,IAJvC,8BAQX,IAAM+D,EAAOhH,KAAKzB,MAAMyI,KACxB,IAAMgE,MAAM,uBAAwB,qCAAsC,CAAC,CAAC7C,KAAM,UAAW,CACzFA,KAAM,QACNvH,QAAS,YhB7MO,SAACgQ,EAAW1D,GACpC,OAAOvL,EAAQ,CACXmB,IAAK,kCACLC,OAAQ,OACRtE,KAAM,CACFmS,YACA1D,agBwMI2D,CAAaD,EAAW5J,EAAKlI,IAAIsD,MAAK,SAAAC,GAClC,IAAMY,KAAK,kBAD8B,MAElClF,EAAW,EAAKQ,MAAhBR,QAFkC,cAG3BA,GAH2B,IAGzC,2BAAuB,SACjB4R,SAAU,GAJyB,8BAMzC,EAAK7O,SAAS,CAAC/C,uB,GA5NFoD,aAmOlBE,eAAQ,MA3OC,SAAC+B,EAAUtD,GAC/B,OAAO,2BACAA,GADP,IAEIoD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBAwOzB7B,CAA+BkO,ICnL/BuB,G,kDA3DX,WAAYhR,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,CACTR,QAAS,IAHE,E,gEAQfiC,KAAK+Q,Y,gCAGE,IAAD,OjB4BHpP,EAAQ,CACXmB,IAAK,wBACLC,OAAQ,QiB7BEX,MAAK,SAAAC,GACX,EAAKvB,SAAS,CAAC/C,QAASsE,S,+BAItB,IAAD,OACEtE,EAAWiC,KAAKzB,MAAhBR,QACP,OACI,yBAAKkC,UAAU,YACX,uBAAMoI,aAAc,iBAAM,gBAElBtK,EAAQ8J,KAAI,SAAAhJ,GAAM,OACd,sBAAM0B,KAAN,CAAW+C,IAAKzE,EAAOC,IAClB,EAAKwR,iBAAiBzR,QAKvC,2BACI,wBAAQ0K,QAAS,kBAAM,EAAKwH,WAAW1S,KAAK,WAA5C,e,uCAMCQ,GAAS,IAAD,OACdmI,EAAoBnI,EAApBmI,KAAM7H,EAAcN,EAAdM,WACb,OAAQ,yBAAKoK,QAAS,kBAAM,EAAKyH,cAAcnS,KAAvC,OACCA,EAAOC,GADR,IACaD,EAAOqL,QADpB,QAEAlD,GAAQA,EAAKlI,GAFb,IAEkBkI,GAAQA,EAAKrD,OAF/B,QAGAxE,GAAcA,EAAWL,GAHzB,IAG8BK,GAAcA,EAAW4G,OAHvD,O,oCAOElH,GAAS,IACZM,EAAoBN,EAApBM,WAAY6H,EAAQnI,EAARmI,KACnBnI,EAAOmI,KAAO,KACdnI,EAAOM,WAAa,KACpB,IAAM8R,EAAQ,uBAAM5I,aAAc,iBAAM,WACpC,wBAAclE,MAAOpF,KAAKE,UAAUJ,GAASmQ,YAAU,IACvD,wBAAc7K,MAAOpF,KAAKE,UAAUE,GAAa6P,YAAU,IAC3D,wBAAc7K,MAAOpF,KAAKE,UAAU+H,GAAOgI,YAAU,KAEzD,IAAMhE,MAAM,SAAUiG,O,GAxDP9P,aCejB+P,G,kDACF,WAAYpR,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,GAFE,E,qDAMf,OACI,kBAAC,KAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOwB,KAAK,YAAY8J,UAAWoB,GAAakG,OAAK,IACrD,kBAAC,IAAD,CAAOpR,KAAK,kBAAkB8J,UAAWG,GAAemH,OAAK,IAC7D,kBAAC,IAAD,CAAOpR,KAAK,gBAAgB8J,UAAWuB,GAAa+F,OAAK,IACzD,kBAAC,IAAD,CAAOpR,KAAK,sBAAsB8J,UAAW8B,GAAmBwF,OAAK,IACrE,kBAAC,IAAD,CAAOpR,KAAK,2BAA2B8J,UAAWoD,GAAmBkE,OAAK,IAC1E,kBAAC,IAAD,CAAOpR,KAAK,kBAAkB8J,UAAWoE,GAAekD,OAAK,IAC7D,kBAAC,IAAD,CAAOpR,KAAK,wBAAwB8J,UAAWoF,GAAoBkC,OAAK,IACxE,kBAAC,IAAD,CAAOpR,KAAK,4BAA4B8J,UAAW0F,GAAoB4B,OAAK,IAC5E,kBAAC,IAAD,CAAOpR,KAAK,oBAAoB8J,UAAWiH,GAAUK,OAAK,U,GAlBxDhQ,aAyBPE,eAAQ,MA/BC,SAAC+B,EAAUtD,GAC/B,OAAO,eACAA,KA6BIuB,CAA+B6P,I,6BChCxCE,G,kDACF,WAAYtR,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,GACb,EAAKuB,MAAMoD,SAAS,kBAHL,E,qDAOf,OACI,6BACI,wBACImO,IAAK,wBAAMhT,KAAK,eAAeiT,KAAK,KAAKC,MAAO,CAACC,KAAM,aACvDhR,MAAM,qBACNiR,QAAQ,0B,0CAMpB,IAAMC,KAAK,qBAAM,EAAG,MAAM,O,GAnBZvQ,aAuBPE,eAAQ,MA9BC,SAAC+B,EAAUtD,GAC/B,OAAO,2BACAA,GADP,IAEIoD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBA2BzB7B,CAA+B+P,ICvBxCO,G,kDACF,WAAY7R,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,GACb,EAAKuB,MAAMoD,SAAS,QAHL,E,qDAOf,OACI,6BACI,wBACImO,IAAK,wBAAMhT,KAAK,eAAeiT,KAAK,KAAKC,MAAO,CAACC,KAAM,aACvDhR,MAAM,qBACNiR,QAAQ,0B,0CAMpB,IAAMC,KAAK,qBAAM,EAAG,MAAM,O,GAnBfvQ,aAuBJE,eAAQ,MA9BC,SAAC+B,EAAUtD,GAC/B,OAAO,2BACAA,GADP,IAEIoD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBA2BzB7B,CAA+BsQ,I,8BCtBxCC,I,yDACF,WAAY9R,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,CACTsT,YAAY,GAHD,E,gEAQf7R,KAAKF,MAAMoD,SAAS,W,+BAIpB,OACI,yBAAKjD,UAAU,SACX,uBAAW6R,aAAc,CAACC,MAAM,IAAhC,6GACA,6BACA,2BACI,wBACIC,UAAU,EACVC,UAAQ,EACRhS,UAAU,kBAEV,yBAAKA,UAAU,eAAesR,MAAO,CAACW,gBAAiB,YACnD,yBAAKjS,UAAU,SAAf,6EAIJ,yBAAKA,UAAU,eAAesR,MAAO,CAACW,gBAAiB,YACnD,yBAAKjS,UAAU,SAAf,kBAMZ,uBAAWA,UAAU,WACjB,wBAAIA,UAAU,SAAd,4BACA,yBAAKA,UAAU,QACX,47BAGA,kvCAIA,y2B,GA7CJkB,cAuDLE,eAAQ,MA9DC,SAAC+B,EAAUtD,GAC/B,OAAO,2BACAA,GADP,IAEIoD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBA2DzB7B,CAA+BuQ,ICnDxCO,I,yDACF,WAAYrS,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,GAFE,E,qDAMf,OACI,yBAAK0B,UAAU,cAEPD,KAAKF,MAAMnC,WAAa,yBAAKsC,UAAU,eAAiB,KAE5D,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOF,KAAK,IAAI8J,UAAW3E,GAAWiM,OAAK,IAC3C,kBAAC,IAAD,CAAOpR,KAAK,aAAa8J,UAAWqH,GAASC,OAAK,IAClD,kBAAC,IAAD,CAAOpR,KAAK,WAAW8J,UAAWuH,GAASD,OAAK,IAChD,kBAAC,IAAD,CAAOpR,KAAK,QAAQ8J,UAAW8H,GAAMR,OAAK,IAC1C,kBAAC,IAAD,CAAOpR,KAAK,SAAS8J,UAAW+H,GAAOT,OAAK,KAEhD,yBAAKlR,UAAU,oB,GAnBNkB,cAyBVE,gBAhCQ,SAAC9C,EAAOuB,GAC3B,OAAO,2BACAA,GADP,IAEInC,WAAYY,EAAMZ,eA6Ba,KAAxB0D,CAA8B8Q,I,4DC3BvCC,I,yDACF,WAAYtS,GAAQ,IAAD,8BACf,cAAMA,IACDvB,MAAQ,CACT8T,gBAAgB,GAHL,E,qDAOT,IAAD,OACL,IAAKrS,KAAKF,MAAMnC,WACZ,OAAO,KAFN,IAIE6C,EAASR,KAAKF,MAAdU,MACP,OACI,yBAAKP,UAAU,aACX,wBACIqS,YAAa,wBAAMjU,KAAK,OAAOkL,QAAS,kBAAM,EAAKgJ,iBACnDC,aAAcxS,KAAKwS,eACnBC,KAAK,SACPjS,M,qCAKE,IAAD,OACJ6R,EAAkBrS,KAAKzB,MAAvB8T,eACD9R,EAAO,KAAQA,KACrB,OAAQ,wBAASmS,MAAI,EACJ1K,QAASqK,EACTM,QAAS,CACJ,kBAACpS,EAAD,CAAM+C,IAAI,QAAQa,MAAM,QAClByO,YAAU,SADhB,SAEA,kBAACrS,EAAD,CAAM+C,IAAI,WAAWa,MAAM,WACrBoN,MAAO,CAACsB,WAAY,WAD1B,YAEA,kBAACtS,EAAD,CAAM+C,IAAI,SAASa,MAAM,SACnBoN,MAAO,CAACsB,WAAY,WAD1B,WAGLC,SAAU,SAAAhN,GAAC,OAAI,EAAKiN,gBAAgBjN,KAEjD,wBAAMzH,KAAK,gB,oCAKf2B,KAAKF,MAAMiB,QAAQiS,W,sCAGPlN,GACZ,OAAQA,EAAExC,KACN,IAAK,QACDtD,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAU,WAEd,MACJ,IAAK,WACDjB,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAU,cAEd,MACJ,IAAK,SACDjB,KAAKiT,kBAKbjT,KAAKc,SAAS,CACVuR,gBAAgB,M,wCAKpB,IAAMrH,MAAM,iBAAkB,kDAC1B,CACI,CACI7C,KAAM,UAEV,CACIA,KAAM,MACNvH,QAAS,WACLiC,IAAgBT,MAAK,WACjB,IAAMa,KAAK,8B,GAhFf9B,cAwFTC,eAAWC,aAhGH,SAAC9C,EAAOuB,GAC3B,OAAO,2BACAA,GADP,IAEIU,MAAOjC,EAAMX,YACbD,WAAYY,EAAMZ,eA4FA0D,CAAwB+Q,K,UCnG5CrR,GAAUmS,eAEVC,GAAoB,SAAAC,GACtB,IAKM5U,EvBmBmB,SAAAkT,GACzB,MAAO,CACHrT,KP7BuB,kBO8BvBI,KAAMiT,GuBtBK2B,CALF,CACTpS,SAAUmS,EAASnS,SACnBqS,OAAQF,EAASE,OACjBC,KAAMH,EAASG,OAGnB7T,EAAM0D,SAAS5E,IAEnBuC,GAAQyS,QAAO,SAAChV,GACZ2U,GAAkB3U,EAAO4U,aAI7BD,GAAkBpS,GAAQqS,UACXrS,UCSA0S,G,kLAjBP/T,EAAM0D,SAASc,Q,+BAIf,OACI,kBAAC,KAAD,CAAQnD,QAASA,IACb,kBAAC,IAAD,CAAUrB,MAAOA,GACb,yBAAKO,UAAU,eACX,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,EAAD,a,GAZNiB,IAAMC,WCCJuS,QACW,cAA7BrU,OAAO+T,SAASO,UAEe,UAA7BtU,OAAO+T,SAASO,UAEhBtU,OAAO+T,SAASO,SAASzM,MACvB,2DCJN0M,IAASC,OACL,kBAAC,GAAD,MACAzO,SAAS0O,eAAe,SDmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7R,MAAK,SAAA8R,GACJA,EAAaC,gBAEd1R,OAAM,SAAA2R,GACLC,QAAQD,MAAMA,EAAM3C,c","file":"static/js/main.36049a9e.chunk.js","sourcesContent":["import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\n\r\nconst defaultState = {\r\n    showTabBar: true,\r\n    enableTabBar: false,\r\n    showHeader: true,\r\n    globalTitle: '重力货道',\r\n    routerPath: null,\r\n    dashboardSlots: [],\r\n    sensors: [],\r\n    connections: [],\r\n    user: {\r\n        name: 'MonolithIoT'\r\n    }\r\n};\r\nconst actionTable = {};\r\nconst registerReducer = (type, reducer) => {\r\n    actionTable[type] = reducer;\r\n};\r\nregisterReducer(SET_TABBAR_STATE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showTabBar: action.data\r\n    };\r\n});\r\nregisterReducer(SET_ROUTER_PATH, (state, action) => {\r\n    return {\r\n        ...state,\r\n        routerPath: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_DASHBOARD_SLOT_DATA, (state, action) => {\r\n    return {\r\n        ...state,\r\n        dashboardSlots: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(SET_TITLE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        globalTitle: action.data,\r\n    }\r\n});\r\nregisterReducer(ASYNC_FETCH_SENSORS, (state, action) => {\r\n    return {\r\n        ...state,\r\n        sensors: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(TOGGLE_SENSOR_ELABLE, (state, action) => {\r\n    const sensors = state.sensors;\r\n    const sensorId = action.data.sensorId;\r\n    const hasElable = action.data.hasElabel;\r\n    for (let sensor of sensors) {\r\n        if (sensor.id === sensorId) {\r\n            sensor.hasElable = hasElable;\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        sensors: JSON.parse(JSON.stringify(sensors))\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_CONNECTION, (state, action) => {\r\n    return {\r\n        ...state,\r\n        connections: action.data,\r\n    };\r\n});\r\nregisterReducer(DELETE_CONNECTION, (state, action) => {\r\n    const id = action.data.id;\r\n    const connections = state.connections.filter(connection => connection.id !== id);\r\n    return {\r\n        ...state,\r\n        connections\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_TAB_BAR, (state, action) => {\r\n    return {\r\n        ...state,\r\n        enableTabBar: action.data,\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_HEADER, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showHeader: action.data\r\n    };\r\n});\r\nexport default (state = defaultState, action) => {\r\n    const type = action.type;\r\n    if (type in actionTable) {\r\n        const handler = actionTable[type];\r\n        return handler(state, action);\r\n    }\r\n    return state;\r\n}\r\n","export const SET_USER = \"user.set\";\r\n\r\nexport const SET_TABBAR_STATE = 'tabBar.set';\r\n\r\nexport const SET_ROUTER_PATH = 'router.path.set';\r\n\r\nexport const ASYNC_FETCH_DASHBOARD_SLOT_DATA = 'dashboard.slot_data.fetch.async';\r\n\r\nexport const SET_TITLE = 'title.set';\r\n\r\nexport const ASYNC_FETCH_SENSORS = 'sensors.fetch.async';\r\n\r\nexport const TOGGLE_SENSOR_ELABLE = 'sensor.elabel.toggle';\r\n\r\nexport const ASYNC_FETCH_CONNECTION = 'connections.fetch.async';\r\n\r\nexport const DELETE_CONNECTION = 'connection.delete';\r\n\r\nexport const SET_ENABLE_TAB_BAR = 'system.tabBar.set';\r\n\r\nexport const SET_ENABLE_HEADER = 'system.header.set';\r\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport reducer from './reducer';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst allEnhancers = reduxDevTools(applyMiddleware(thunk));\r\nconst store = createStore(reducer, allEnhancers);\r\n\r\nexport default store;\r\n","import React from 'react'\r\nimport {TabBar} from 'antd-mobile'\r\nimport {connect} from 'react-redux';\r\nimport './AppTabBar.sass'\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showTabBar: state.showTabBar,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass AppTabBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            path: '/',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const showTabBar = this.props.showTabBar && this.props.enableTabBar;\r\n        const {path} = this.state;\r\n        if (showTabBar) {\r\n            return (\r\n                <div className=\"appTabBar\">\r\n                    <TabBar\r\n                        unselectedTintColor=\"#949494\"\r\n                        tintColor=\"#33A3F4\"\r\n                        barTintColor=\"white\"\r\n                        hidden={!this.props.showTabBar}\r\n                        tabBarPosition=\"bottom\">\r\n                        <TabBar.Item title=\"Dashboard\"\r\n                                     selected={path === '/'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe64e;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe64e;</i>}\r\n                                     onPress={() => this.pushPath('/')}/>\r\n                        <TabBar.Item title=\"Logs\"\r\n                                     selected={path === '/logs'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe60c;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe60c;</i>}\r\n                                     onPress={() => this.pushPath('/logs')}/>\r\n                        <TabBar.Item title=\"Address\"\r\n                                     selected={path === '/address'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe61b;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe61b;</i>}\r\n                                     onPress={() => this.pushPath('/address')}/>\r\n                        <TabBar.Item title=\"Setting\"\r\n                                     selected={path === '/setting'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe660;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe660;</i>}\r\n                                     onPress={() => this.pushPath('/setting')}/>\r\n                    </TabBar>\r\n                </div>)\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    pushPath(path) {\r\n        this.setState({\r\n            path,\r\n        });\r\n        this.props.history.push({\r\n            pathname: path,\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(AppTabBar));\r\n","import {httpRequest} from '../util/httpUtils';\r\nimport {Toast} from 'antd-mobile'\r\n\r\nconst showLoading = () => {\r\n    Toast.loading('Loading', 0);\r\n};\r\nconst hideLoading = () => {\r\n    Toast.hide();\r\n};\r\nconst showError = (msg) => {\r\n    Toast.fail(msg);\r\n};\r\n\r\n\r\nexport function request(options) {\r\n    const showLoadingToast = !options.hideLoading;\r\n    if (showLoadingToast) {\r\n        showLoading();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        httpRequest(options)\r\n            .then(res => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                if (res.status !== 200) {\r\n                    showError(`Http Response Status:${res.status}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                const body = res.data;\r\n                if (body.code !== 200) {\r\n                    showError(`Error [${body.code}]:${body.msg}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                resolve(body.data);\r\n            }).catch(err => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                const errStr = err.toString();\r\n                showError(errStr);\r\n                reject(err);\r\n            }\r\n        );\r\n    })\r\n}\r\n","import axios from 'axios'\r\n\r\nexport function httpRequest(options) {\r\n    return axios(options);\r\n}\r\n","import {request} from './request';\r\n\r\nexport const fetchSlotData = () => {\r\n    return request({\r\n        url: '/api/dashboard/slot-data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchSystemInfo = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-infos',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchSystemProps = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-props',\r\n        method: 'get',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/_with-slot',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const toggleElable = (sensorId, hasElabel) => {\r\n    return new Promise((resolve, reject) => {\r\n        resolve();\r\n    })\r\n};\r\n\r\n\r\nexport const reloadSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/reload',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const setSlotByIds = (sensorIds, slotId) => {\r\n    return request({\r\n        url: '/api/sensor/_set-slot-id-by-ids',\r\n        method: 'post',\r\n        data: {\r\n            sensorIds,\r\n            slotId,\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const stopWeightService = () => {\r\n    return request({\r\n        url: '/api/sensor/_stop-weight-service',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const dumpAll = () => {\r\n    return request({\r\n        url: '/api/sensor/_dump-all',\r\n        method: 'get',\r\n    });\r\n};\r\n","import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    SET_USER,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\nimport {fetchSlotData} from '../api/dashboard';\r\nimport {fetchSensors, toggleElable} from '../api/sensor';\r\nimport {deleteConnection, fetchConnections} from '../api/connection';\r\nimport {fetchEnableTabBar, setEnableTabBar} from '../api/config';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: SET_USER,\r\n        data: user\r\n    }\r\n};\r\nexport const setTabBarState = show => {\r\n    return {\r\n        type: SET_TABBAR_STATE,\r\n        data: show\r\n    };\r\n};\r\n\r\nexport const setRouterPath = info => {\r\n    return {\r\n        type: SET_ROUTER_PATH,\r\n        data: info\r\n    };\r\n};\r\nexport const setTitle = title => {\r\n    return {\r\n        type: SET_TITLE,\r\n        data: title,\r\n    }\r\n};\r\nexport const asyncFetchDashboardSlotData = () => {\r\n    return dispatch => {\r\n        fetchSlotData().then(res => {\r\n            const slots = [];\r\n            for (const key in res) {\r\n                if (res.hasOwnProperty(key)) {\r\n                    slots.push(res[key]);\r\n                }\r\n            }\r\n            const action = {\r\n                type: ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n                data: slots.sort((a, b) => a.slotNo.localeCompare(b.slotNo)),\r\n            };\r\n            dispatch(action);\r\n        });\r\n    }\r\n};\r\n\r\nexport const asyncFetchSensors = () => {\r\n    return dispatch => {\r\n        fetchSensors().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_SENSORS,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const toggleSensorElable = (sensorId, hasElabel) => {\r\n    return dispatch => {\r\n        toggleElable().then(() => {\r\n            const action = {\r\n                type: TOGGLE_SENSOR_ELABLE,\r\n                data: {\r\n                    sensorId,\r\n                    hasElabel\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    };\r\n};\r\n\r\n\r\nexport const asyncFetchConnection = () => {\r\n    return dispatch => {\r\n        fetchConnections().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_CONNECTION,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const asyncDeleteConnection = id => {\r\n    return dispatch => {\r\n        deleteConnection(id).then(() => {\r\n            const action = {\r\n                type: DELETE_CONNECTION,\r\n                data: {\r\n                    id: id\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    }\r\n};\r\n\r\nexport const fetchEnableTabBarAction = () => {\r\n    return dispatch => {\r\n        fetchEnableTabBar().then(res => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: res.value === 'true',\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const setEnableTabBarAction = enable => {\r\n    return dispatch => {\r\n        setEnableTabBar(enable).then(() => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: enable,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const showHeader = show => {\r\n    return {\r\n        type: SET_ENABLE_HEADER,\r\n        data: show,\r\n    };\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchConnections = () => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const deleteConnection = id => {\r\n    return request({\r\n        url: `/api/connection/${id}`,\r\n        method: 'delete',\r\n    });\r\n};\r\n\r\nexport const createConnection = connection => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'put',\r\n        data: connection,\r\n    });\r\n};\r\n\r\n\r\nexport const scanPort = () => {\r\n    return request({\r\n        url: '/api/serial/scan',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const scanDevice = id => {\r\n    return request({\r\n        url: `/api/connection/${id}/_scan`,\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\n\r\nexport const fetchEnableTabBar = () => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setEnableTabBar = enable => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'post',\r\n        data: {\r\n            value: enable,\r\n        },\r\n    });\r\n};\r\n","export const asKg = g => {\r\n    return (g / 1000.0).toFixed(3);\r\n};\r\n\r\nexport const isWan = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isIncredible = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isDisable = state => {\r\n    return state === 3;\r\n};\r\n\r\nexport const isOffline = state => {\r\n    return state === 2;\r\n};\r\n\r\nconst connectionTypes = {\r\n    1: 'Serial',\r\n    2: 'Network',\r\n};\r\n\r\nexport const asConnectionType = type => {\r\n    if (type in connectionTypes) {\r\n        return connectionTypes[type];\r\n    }\r\n    return `Unknown [${type}]`;\r\n};\r\n\r\nconst weightStateTable = {\r\n    1: 'stable',\r\n    2: 'dynamic',\r\n    3: 'underLoad',\r\n    4: 'overLoad',\r\n};\r\nexport const isStable = weightState => {\r\n    return weightState === 1;\r\n};\r\n\r\nexport const asWeightStateString = state => {\r\n    return state in weightStateTable ? weightStateTable[state] : state;\r\n};\r\n\r\n\r\nexport const groupSlots = slots => {\r\n    const groups = {};\r\n    const putSlot = (name, slot) => {\r\n        if (name in groups) {\r\n            groups[name].push(slot);\r\n        } else {\r\n            groups[name] = [slot];\r\n        }\r\n    };\r\n    for (let slot of slots) {\r\n        const slotNo = slot.slotNo;\r\n        const noItems = slotNo.match(/^(\\w+)-(\\d+)-(\\w+)$/);\r\n        if (noItems) {\r\n            const groupName = `${noItems[1]}货架第${noItems[2]}层`;\r\n            putSlot(groupName, slot);\r\n        } else {\r\n            putSlot('未分组货道', slot);\r\n        }\r\n    }\r\n    const res = [];\r\n    for (let name in groups) {\r\n        if (!groups.hasOwnProperty(name)) {\r\n            continue;\r\n        }\r\n        res.push({\r\n            name,\r\n            slots: groups[name],\r\n        });\r\n    }\r\n    return res;\r\n};\r\n\r\nconst stateTable = {\r\n    1: '使用中',\r\n    2: '离线',\r\n    3: '已停用',\r\n    4: '超载',\r\n    5: '欠载',\r\n};\r\nexport const asStateString = state => {\r\n    if (state in stateTable) {\r\n        return stateTable[state];\r\n    }\r\n    return 'Unknown State:' + state;\r\n};\r\n","import {request} from './request';\r\n\r\nexport const doZeroAll = () => {\r\n    return request({\r\n        url: '/api/slot/zero-all',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const zeroOne = slotNo => {\r\n    return request({\r\n        url: `/api/slot/${slotNo}/zero`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllSlots = () => {\r\n    return request({\r\n        url: '/api/slot/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDetail = id => {\r\n    return request({\r\n        url: `/api/slot/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const updateSlot = slot => {\r\n    return request({\r\n        url: `/api/slot/${slot.id}`,\r\n        method: 'post',\r\n        data: slot\r\n    });\r\n};\r\n\r\n\r\nexport const toggleELabelState = option => {\r\n    return request({\r\n        url: `/api/slot/${option.id}/has-e-label`,\r\n        method: 'post',\r\n        data: {hasElabel: option.hasELabel},\r\n    });\r\n};\r\n\r\nexport const highlightBySku = sku => {\r\n    return request({\r\n        url: '/api/slot/highlight',\r\n        method: 'post',\r\n        data: {\r\n            skuNo: sku\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllWithSensors = () => {\r\n    return request({\r\n        url: '/api/slot/_with-sensors',\r\n        method: 'get',\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {asyncFetchDashboardSlotData, setTabBarState, setTitle, showHeader} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport './Dashboard.sass'\r\nimport {Flex, List, Modal, NoticeBar, SearchBar, Tabs, Toast, WingBlank} from 'antd-mobile';\r\nimport {asStateString, groupSlots, isDisable, isIncredible, isOffline, isWan} from '../../util/DataConvertor';\r\nimport {highlightBySku} from '../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        slots: state.dashboardSlots\r\n    };\r\n};\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSlotData: (...args) => dispatch(asyncFetchDashboardSlotData(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        showHeader: (...args) => dispatch(showHeader(...args)),\r\n        showTabBar: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nconst TabItems = [\r\n    {\r\n        title: '重力货道数据',\r\n        key: 'dashboard',\r\n    },\r\n    {\r\n        title: '重力货道配置',\r\n        key: 'settings',\r\n    }\r\n];\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.rootEle = document;\r\n        this.state = {\r\n            sensors: [],\r\n            sensorModalVisible: false,\r\n            operationSlot: {},\r\n            searchSkuNo: '',\r\n            noticeSlots: [],\r\n        };\r\n        this.props.setTitle('Dashboard');\r\n        this.renderSlotCard = this.renderSlotCard.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startFetchData();\r\n        this.props.showHeader(false);\r\n        this.props.showTabBar(false);\r\n        this.listenKeyPress();\r\n    }\r\n\r\n    listenKeyPress() {\r\n        this.rootEle.onkeypress = e => {\r\n            const sourceTagName = e.target.tagName.toLowerCase();\r\n            if (sourceTagName !== 'body') {\r\n                return;\r\n            }\r\n            const keyCode = e.keyCode;\r\n            if (keyCode === 13) {\r\n                this.triggerHighlight(this.state.searchSkuNo);\r\n            } else {\r\n                this.appendSearchSku(String.fromCharCode(keyCode));\r\n            }\r\n        };\r\n    }\r\n\r\n    appendSearchSku(c) {\r\n        const {searchSkuNo} = this.state;\r\n        this.setState({\r\n            searchSkuNo: searchSkuNo + c,\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.fetchTimer);\r\n        this.props.showHeader(true);\r\n        this.props.showTabBar(true);\r\n        this.cancelKeyPress();\r\n    }\r\n\r\n    cancelKeyPress() {\r\n        this.rootEle.onkeypress = null;\r\n    }\r\n\r\n    startFetchData() {\r\n        this.props.fetchSlotData();\r\n        this.fetchTimer = setInterval(() => {\r\n            this.props.fetchSlotData();\r\n        }, 1000);\r\n    }\r\n\r\n    render() {\r\n        const slots = this.props.slots;\r\n        const {searchSkuNo, noticeSlots, sensorModalVisible, operationSlot, sensors} = this.state;\r\n        const groupedSlots = groupSlots(slots);\r\n        this.highlightSlotIds = {};\r\n        for (let slot of noticeSlots) {\r\n            this.highlightSlotIds[slot.id] = true;\r\n        }\r\n        const firstNoticeSlot = noticeSlots ? noticeSlots[0] : null;\r\n        return (\r\n            <div className=\"dashboard\">\r\n                <Tabs tabs={TabItems} onChange={(tab, index) => this.onTabChange(tab, index)}/>\r\n                <SearchBar\r\n                    value={searchSkuNo}\r\n                    onSubmit={e => this.triggerHighlight(e)}\r\n                    onChange={searchSkuNo => this.setState({searchSkuNo})}/>\r\n                <div className=\"notice-list\">\r\n                    {\r\n                        this.renderNoticeBar(firstNoticeSlot)\r\n                    }\r\n                </div>\r\n                <div className=\"slot-groups\">\r\n                    {\r\n                        groupedSlots.map(group => this.renderGroupItem(group))\r\n                    }\r\n                </div>\r\n                <Modal visible={sensorModalVisible}\r\n                       title={`Sensors for ${operationSlot.slotNo}`}\r\n                       transparent\r\n                       footer={[{text: 'OK', onPress: () => this.setState({sensorModalVisible: false})}]}\r\n                       onClose={() => this.setState({sensorModalVisible: false})}>\r\n                    <List renderHeader={() => 'Sensors'}>\r\n                        {\r\n                            sensors ? sensors.map(sensor => (<List.Item\r\n                                    extra={asStateString(sensor.state)}\r\n                                    key={sensor.id}>\r\n                                    {sensor.deviceSn}\r\n                                    <List.Item.Brief>{sensor.address485}</List.Item.Brief>\r\n                                </List.Item>)) :\r\n                                <List.Item>Empty List</List.Item>\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderNoticeBar(slot) {\r\n        if (!slot) {\r\n            return;\r\n        }\r\n        const content = [];\r\n        content.push(slot.skuName);\r\n        if (slot.skuShelfLifeOpenDays) {\r\n            content.push('，开封后保质期');\r\n            content.push((<span className=\"days\">{slot.skuShelfLifeOpenDays}</span>));\r\n            content.push('天');\r\n        } else {\r\n            content.push('，开封后保质期未设置！');\r\n        }\r\n        return (<NoticeBar className=\"notice\">\r\n            {content}\r\n        </NoticeBar>)\r\n    }\r\n\r\n    renderGroupItem(group) {\r\n        return (<div className=\"group-item\" key={group.name}>\r\n            <p className=\"group-name\">\r\n                {group.name}\r\n            </p>\r\n            <WingBlank>\r\n                <Flex className=\"slots\" wrap={\"wrap\"} justify=\"between\">\r\n                    {\r\n                        group.slots.map(slot => this.renderSlotCard(slot))\r\n                    }\r\n                </Flex>\r\n            </WingBlank>\r\n        </div>)\r\n    }\r\n\r\n    renderSlotCard(slot) {\r\n        const sensors = slot.sensors;\r\n        if (!sensors) {\r\n            return null;\r\n        }\r\n        const sku = slot.sku || {};\r\n        const data = slot.data || {};\r\n        let slotCardClassName = 'slot-card';\r\n        if (slot.id in this.highlightSlotIds) {\r\n            slotCardClassName += ' slot-card-highlight';\r\n        } else {\r\n            if (isWan(slot.state)) {\r\n                if (isDisable(slot.state)) {\r\n                    slotCardClassName += ' slot-card-disable';\r\n                } else if (isOffline(slot.state)) {\r\n                    slotCardClassName += ' slot-card-offline';\r\n                } else {\r\n                    slotCardClassName += ' slot-card-warn';\r\n                }\r\n            }\r\n        }\r\n        const incredible = isIncredible(data.toleranceState);\r\n        const state = asStateString(slot.state);\r\n        return (<div key={slot.id}\r\n                     className={slotCardClassName}\r\n                     onClick={() => this.onSlotCardClick(slot)}>\r\n            <Flex className=\"card-header\" justify=\"between\">\r\n                <div className=\"slot-no\">\r\n                    {slot.slotNo}\r\n                </div>\r\n                <div className=\"state\">\r\n                    <span className=\"dot\"/>\r\n                    <span>{state}</span>\r\n                </div>\r\n            </Flex>\r\n            <Flex className=\"card-body\" justify=\"between\">\r\n                <div className=\"left\">\r\n                    <div className=\"sku-no\">SKU:{sku.skuNo}</div>\r\n                    <div className=\"sku-name\">{sku.name}</div>\r\n                </div>\r\n                <div className=\"delimiter\"/>\r\n                <div className={`right ${incredible ? 'right-incredible' : ''}`}>\r\n                    <span className=\"pcs-value\">{data.count}</span>\r\n                    <span className=\"pcs-unit\">(数量)</span>\r\n                </div>\r\n            </Flex>\r\n        </div>);\r\n    }\r\n\r\n    onSlotCardClick(slot) {\r\n        this.setState({\r\n            operationSlot: slot,\r\n            sensors: slot.sensors,\r\n            sensorModalVisible: true,\r\n        });\r\n    }\r\n\r\n    triggerHighlight(skuNo) {\r\n        if (skuNo === '' || skuNo.trim() === '') {\r\n            Toast.show('Please Type a SkuNo!', 1, false);\r\n            return;\r\n        }\r\n        highlightBySku(skuNo).then(res => {\r\n            this.setState({\r\n                noticeSlots: res\r\n            });\r\n            setTimeout(() => this.setState({noticeSlots: [], searchSkuNo: '',}), 5000);\r\n        }).catch(() => {\r\n            this.setState({\r\n                searchSkuNo: '',\r\n            });\r\n        });\r\n    }\r\n\r\n    onTabChange(tab, index) {\r\n        switch (index) {\r\n            case 0:\r\n                // dashboard\r\n                this.props.history.push({\r\n                    pathname: '/dashboard'\r\n                });\r\n                break;\r\n            case 1:\r\n                // settings\r\n                this.props.history.push({\r\n                    pathname: '/setting/'\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nconst component = connect(mapState2Props, mapAction2Props)(Dashboard);\r\nexport default withRouter(component);\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from 'antd-mobile';\r\nimport './FloatButton.sass';\r\n\r\nclass FloatButton extends Component {\r\n    static propTypes = {\r\n        iconType: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func,\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"floatButton\" onClick={() => this.onClick()}>\r\n                <Icon type={this.props.iconType} className=\"icon\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onClick() {\r\n        if (this.props.onClick) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n}\r\n\r\nexport default FloatButton;\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Card, Flex, List, Modal, Switch, Toast} from \"antd-mobile\";\r\nimport {asyncFetchSensors, setTabBarState, setTitle, toggleSensorElable} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {reloadSensors} from \"../../../api/sensor\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSensors: (...args) => dispatch(asyncFetchSensors(...args)),\r\n        toggleSensorElable: (...args) => dispatch(toggleSensorElable(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    }\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        sensors: state.sensors,\r\n    };\r\n};\r\n\r\nclass SensorSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Sensor Setting');\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.props;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <List renderHeader={() => 'Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => (<List.Item key={sensor.id}>\r\n                            <Card>\r\n                                <Card.Header title={`Address:${sensor.address}`} extra={sensor.deviceSn}/>\r\n                                <Card.Body>\r\n                                    <Flex justify=\"between\">\r\n                                        <span>ELabel</span>\r\n                                        <Switch checked={sensor.hasElabel}\r\n                                                onChange={(e) => this.toggleElabel(sensor, e)}\r\n                                                platform=\"android\"/>\r\n                                    </Flex>\r\n                                </Card.Body>\r\n                                <Card.Footer content={`Slot:[${sensor.slot && sensor.slot.slotNo}]`}\r\n                                             extra={sensor.slot && sensor.slot.id}/>\r\n                            </Card>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationActions()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchSensors();\r\n    }\r\n\r\n    toggleElabel(sensor, e) {\r\n        this.props.toggleSensorElable(sensor.id, e);\r\n    }\r\n\r\n    showOperationActions() {\r\n        const buttons = ['Reload Sensors', 'Cancel'];\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: 'Operations',\r\n            options: buttons,\r\n            cancelButtonIndex: buttons.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            if (index === 0) {\r\n                this.callReloadSensors();\r\n            }\r\n        })\r\n    }\r\n\r\n    callReloadSensors() {\r\n        Modal.alert('Reload', 'Are you sure to reload?',\r\n            [\r\n                {\r\n                    text: 'Yes', onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('Reload Success!', 1, false);\r\n                        })\r\n                    }\r\n                },\r\n                {\r\n                    text: 'Cancel', onPress: () => {\r\n                        Toast.show('Cancel', 1, false);\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(SensorSetting);\r\n","import React, {Component} from 'react';\r\nimport {Flex, Icon, List, WhiteSpace} from \"antd-mobile\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nclass SettingMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Setting');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"setting\">\r\n                <List renderHeader={() => 'Settings:'}>\r\n                    <List.Item onClick={() => this.go('/setting/sensor')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>Sensors</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/slot')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>Slots</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/connection')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>Connections</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/system')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>System</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/overview')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>Overview</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    go(path) {\r\n        this.props.history.push({\r\n            pathname: path\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SettingMenu));\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Flex, Icon, List, Toast} from 'antd-mobile';\r\nimport {doZeroAll, fetchAllSlots} from '../../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport './SlotSetting.sass';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst OperationActions = ['Refresh', 'Do Zero All', 'Cancel'];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slots: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(false);\r\n        this.props.setTitle('Slot Settings');\r\n        this.fetchSlots();\r\n    }\r\n\r\n    render() {\r\n        const {slots} = this.state;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <List renderHeader={() => 'Slot List'}>\r\n                    {\r\n                        slots.map(slot => (\r\n                            <Item key={slot.id} extra={<Icon type=\"right\"/>} onClick={() => this.toSlotDetail(slot)}>\r\n                                <Flex justify=\"between\">\r\n                                    <span className=\"slotNo\">{slot.slotNo}</span>\r\n                                    <span className=\"name\">{slot.skuName}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationSheet()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showOperationSheet() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: OperationActions,\r\n            title: 'Operations',\r\n            cancelButtonIndex: OperationActions.length - 1,\r\n            destructiveButtonIndex: 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.fetchSlots();\r\n                    break;\r\n                case 1:\r\n                    this.doZeroAll();\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        })\r\n    }\r\n\r\n    toSlotDetail(slot) {\r\n        this.props.history.push({\r\n            pathname: `/setting/slot-detail/${slot.id}`,\r\n        });\r\n    }\r\n\r\n    doZeroAll() {\r\n        doZeroAll().then(() => {\r\n            Toast.show('All Zeroed!');\r\n        })\r\n    }\r\n\r\n    fetchSlots() {\r\n        fetchAllSlots().then(res => {\r\n            this.setState({slots: res})\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotSetting));\r\n","import React, {Component} from 'react';\r\nimport {asyncDeleteConnection, asyncFetchConnection, setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Flex, Icon, InputItem, List, Modal, Picker, Toast} from 'antd-mobile';\r\nimport {asConnectionType} from '../../../util/DataConvertor';\r\nimport './ConnectionSetting.sass'\r\nimport {createConnection, scanDevice, scanPort} from '../../../api/connection';\r\nimport {connect} from 'react-redux';\r\n\r\nconst ConnectionOperations = [\r\n    'Delete',\r\n    'Start Scan',\r\n    'Cancel',\r\n];\r\nconst connectionTypes = [\r\n    {\r\n        label: 'Serial',\r\n        value: 1,\r\n    },\r\n    {\r\n        label: 'Network',\r\n        value: 2,\r\n    }\r\n];\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchConnection: (...args) => dispatch(asyncFetchConnection(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        deleteConnection: (...args) => dispatch(asyncDeleteConnection(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        connections: state.connections,\r\n    };\r\n};\r\n\r\nclass ConnectionSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            createDialogVisible: false,\r\n            create: {\r\n                type: null,\r\n                target: ''\r\n            },\r\n            serialPorts: []\r\n        };\r\n        this.props.setTitle('Connection Setting');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchConnection();\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {connections} = this.props;\r\n        const {createDialogVisible} = this.state;\r\n        const {create} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Connections'}>\r\n                    {\r\n                        connections.map(connection => (\r\n                            <Item key={connection.id} extra={<Icon type=\"right\"/>}\r\n                                  onClick={() => this.showConnectionOperations(connection)}>\r\n                                <Flex justify=\"between\" className=\"connectionItem\">\r\n                                    <span className=\"type\">{asConnectionType(connection.type)}</span>\r\n                                    <span className=\"target\">{connection.target}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                    <Item key=\"createButton\">\r\n                        <Button type=\"primary\" onClick={() => this.showCreateDialog()}>New</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={createDialogVisible}\r\n                    transparent\r\n                    title=\"Create A Connection\"\r\n                    footer={[\r\n                        {text: 'Cancel', onPress: () => this.setState({createDialogVisible: false})},\r\n                        {text: 'Create', onPress: () => this.createConnection()},\r\n                    ]}\r\n                    onClose={() => this.setState({createDialogVisible: false})}>\r\n                    <List title=\"Connection\">\r\n                        <Picker data={connectionTypes} title=\"Connection Type\" cols={1}\r\n                                extra=\"Choose\"\r\n                                onChange={e => this.setCreateType(e)}>\r\n                            <List.Item>\r\n                                <InputItem value={create.type && asConnectionType(create.type)}\r\n                                           disabled={true}\r\n                                           placeholder=\"Type\"/>\r\n                            </List.Item>\r\n                        </Picker>\r\n                        {\r\n                            (() => {\r\n                                const input = (<List.Item key=\"target\"><InputItem placeholder=\"Connection Target\"\r\n                                                                                  onChange={e => this.setCreateTarget(e)}\r\n                                                                                  value={create.target}\r\n                                                                                  disabled={this.state.create.type === 1}/></List.Item>);\r\n                                if (create.type === 1) {\r\n                                    return (<Picker data={this.state.serialPorts}\r\n                                                    extra=\"Choose\"\r\n                                                    title=\"Serial Port List\"\r\n                                                    cols={1}\r\n                                                    onChange={arr => this.setCreateTargetSerial(arr)}>\r\n                                        {input}\r\n                                    </Picker>)\r\n                                } else {\r\n                                    return input;\r\n                                }\r\n                            })()\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    deleteConnection(connection) {\r\n        Modal.alert('Delete Connection!', 'Are You Sure delete this connection',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                    onPress: () => {\r\n                        Toast.show('Canceled', 1, false);\r\n                    }\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => {\r\n                        this.props.deleteConnection(connection.id);\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    scanConnection(connection) {\r\n        Modal.alert('Scan Device!', 'Scan Devices for this Connection?',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                    onPress: () => {\r\n                        Toast.show('Canceled', 1, false);\r\n                    }\r\n                },\r\n                {\r\n                    text: 'Scan',\r\n                    onPress: () => {\r\n                        scanDevice(connection.id).then(() => {\r\n                            Toast.show('Scan Success!', 2, false)\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    showCreateDialog() {\r\n        this.setState({\r\n            createDialogVisible: true\r\n        })\r\n    }\r\n\r\n    createConnection() {\r\n        createConnection(this.state.create).then(() => {\r\n            this.props.fetchConnection();\r\n            this.setState({\r\n                create: {},\r\n                createDialogVisible: false,\r\n            });\r\n        })\r\n    }\r\n\r\n    setCreateType(types) {\r\n        if (types.length < 1) {\r\n            Toast.show('Please Choose A Connection Type!');\r\n        }\r\n        const type = types[0];\r\n        const newCreate = {\r\n            type,\r\n            target: ''\r\n        };\r\n        this.setState({create: newCreate});\r\n        if (type === 1 && this.state.serialPorts.length <= 0) {\r\n            scanPort().then(res => {\r\n                const serialPorts = [];\r\n                for (const port of res) {\r\n                    serialPorts.push({\r\n                        label: port,\r\n                        value: port,\r\n                    });\r\n                }\r\n                this.setState({serialPorts});\r\n            });\r\n        }\r\n    }\r\n\r\n    setCreateTarget(e) {\r\n        const create = {\r\n            ...this.state.create,\r\n            target: e,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    setCreateTargetSerial(serialIndexList) {\r\n        if (!serialIndexList) {\r\n            Toast.show('Please Choose A Serial Port!');\r\n            return;\r\n        }\r\n        const port = serialIndexList[0];\r\n        const create = {\r\n            ...this.state.create,\r\n            target: port,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    showConnectionOperations(connection) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: `${connection.target} Operations`,\r\n            options: ConnectionOperations,\r\n            cancelButtonIndex: ConnectionOperations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.deleteConnection(connection);\r\n                    break;\r\n                case 1:\r\n                    this.scanConnection(connection);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(ConnectionSetting);\r\n","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDetail, toggleELabelState, updateSlot, zeroOne} from '../../../api/slot';\r\nimport {ActionSheet, Button, InputItem, List, Switch, Toast, WingBlank} from 'antd-mobile';\r\nimport {setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst ActionButtons = [\r\n    'Do Zero',\r\n    'Delete',\r\n    'Cancel',\r\n];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotDetailSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {}\r\n        };\r\n        this.slotId = this.props.match.params.id;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle(`${this.slotId} Settings`);\r\n        this.fetchSlotInfo();\r\n    }\r\n\r\n    fetchSlotInfo() {\r\n        fetchDetail(this.slotId).then(res => {\r\n            this.setState({slot: res});\r\n            this.props.setTitle(`${res.slotNo} Settings`);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {slot} = this.state;\r\n        return (\r\n            <div className=\"slotDetail\">\r\n                <List renderHeader={() => 'Slot Info'}>\r\n                    <Item key=\"slotNo\">\r\n                        <InputItem placeholder=\"Slot No\" value={slot.slotNo}\r\n                                   onChange={text => this.setUpdateSlotProp({slotNo: text})}>SlotNo</InputItem>\r\n                    </Item>\r\n                    <Item key=\"SkuName\">\r\n                        <InputItem placeholder=\"Sku Name\" value={slot.skuName}\r\n                                   onChange={text => this.setUpdateSlotProp({skuName: text})}>SKUName</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuNo\">\r\n                        <InputItem placeholder=\"SKU No\" value={slot.skuNo}\r\n                                   onChange={text => this.setUpdateSlotProp({skuNo: text})}>SKUNo</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuApw\">\r\n                        <InputItem placeholder=\"SKU Apw\" value={slot.skuApw}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuApw: text})}>Apw</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuTolerance\">\r\n                        <InputItem placeholder=\"SKU Tolerance\" value={slot.skuTolerance}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuTolerance: text})}>Tolerance</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuShelfLifeOpenDays\">\r\n                        <InputItem placeholder=\"SKU ShelfLifeOpenDays\" value={slot.skuShelfLifeOpenDays}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuShelfLifeOpenDays: text})}>\r\n                            SLO Days\r\n                        </InputItem>\r\n                    </Item>\r\n                    <Item key=\"applyBtn\">\r\n                        <WingBlank><Button type=\"primary\" onClick={() => this.applyModify()}>Apply\r\n                            Modify</Button></WingBlank>\r\n                    </Item>\r\n                </List>\r\n                <List renderHeader={() => 'Operations'}>\r\n                    <List.Item\r\n                        key=\"hasELabel\"\r\n                        extra={<Switch\r\n                            checked={slot.hasElabel}\r\n                            onChange={state => this.toggleELabel(state)}\r\n                            platform=\"android\"/>}>\r\n                        Enable ELabel\r\n                    </List.Item>\r\n                    <List.Item\r\n                        arrow=\"horizontal\"\r\n                        onClick={() => this.props.history.push({pathname: `/setting/slot-sensors/${slot.id}`})}>\r\n                        Sensors\r\n                    </List.Item>\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.openOperation()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    openOperation() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: 'Operations',\r\n            options: ActionButtons,\r\n            destructiveButtonIndex: 1,\r\n            cancelButtonIndex: ActionButtons.length - 1,\r\n        }, buttonIndex => {\r\n            const button = ActionButtons[buttonIndex];\r\n            if (button === 'Do Zero') {\r\n                this.doZero();\r\n            } else if (button === 'Delete') {\r\n                Toast.show('Unable To Delete!');\r\n            }\r\n        });\r\n    }\r\n\r\n    doZero() {\r\n        const {slot} = this.state;\r\n        zeroOne(slot.slotNo).then(() => {\r\n            Toast.show('Do Zero Success!');\r\n        });\r\n    }\r\n\r\n    setUpdateSlotProp(props) {\r\n        const slot = {\r\n            ...this.state.slot,\r\n            ...props\r\n        };\r\n        this.setState({slot});\r\n    }\r\n\r\n    applyModify() {\r\n        updateSlot(this.state.slot).then(() => {\r\n            Toast.show('Apply Success!');\r\n        });\r\n    }\r\n\r\n    toggleELabel(hasELabel) {\r\n        toggleELabelState({id: this.slotId, hasELabel}).then(() => {\r\n            Toast.show('Toggle ELabel Success!');\r\n            this.fetchSlotInfo();\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotDetailSetting));\r\n","import React, {Component} from 'react';\r\nimport {Button, Icon, List, Modal, Switch, TextareaItem, Toast} from 'antd-mobile';\r\nimport {setEnableTabBarAction, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {fetchSystemInfo} from '../../../api/dashboard';\r\nimport {reloadLibPath} from '../../../api/serial';\r\nimport {stopWeightService} from '../../../api/sensor';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setEnableTabBar: (...args) => dispatch(setEnableTabBarAction(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass SystemSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemInfo: {},\r\n            killButtonState: true,\r\n            libLoadVisible: false,\r\n            reloadLibPath: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('System Infos');\r\n        fetchSystemInfo().then(res => {\r\n            this.setState({\r\n                systemInfo: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {systemInfo, libLoadVisible, reloadLibPath} = this.state;\r\n        const {enableTabBar} = this.props;\r\n        return (\r\n            <div className=\"systemSettings\">\r\n                <List renderHeader={() => 'System Infos'}>\r\n                    <Item key=\"appName\" extra={systemInfo.appName}>APPName</Item>\r\n                    <Item key=\"appVersion\" extra={systemInfo.appVersion}>APPVersion</Item>\r\n                    <Item key=\"dbVersion\" extra={systemInfo.dbVersion}>DBVersion</Item>\r\n                    <Item key=\"pid\" extra={systemInfo.pid}>ProcessID</Item>\r\n                    <Item key=\"libPath\" extra={<Icon type=\"right\"/>}\r\n                          onClick={() => this.showLibLoadModal()}> LibPath: {systemInfo.libPath}</Item>\r\n                    <Item key=\"kill\">\r\n                        <Button type=\"warning\" onClick={() => this.killProcess()}\r\n                                disabled={!this.state.killButtonState}>Kill Process</Button>\r\n                    </Item>\r\n                </List>\r\n                <List renderHeader={() => 'Settings'}>\r\n                    <Item\r\n                        key=\"tabBar\"\r\n                        extra={<Switch\r\n                            checked={enableTabBar}\r\n                            onChange={target => this.setEnableTabBar(target)}\r\n                            platform=\"android\"/>}>\r\n                        EnableTabBar\r\n                    </Item>\r\n                    <Item key=\"systemProps\" extra={<Icon type=\"right\"/>}\r\n                          onClick={() => this.props.history.push({pathname: '/setting/system-props'})}>\r\n                        System Props\r\n                    </Item>\r\n                    <Item key=\"stopService\">\r\n                        <Button type=\"warning\" onClick={() => this.stopWeightService()}>Stop Weight Service</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={libLoadVisible}\r\n                    title=\"Reload SerialPort Library\"\r\n                    transparent\r\n                    maskClosable={true}\r\n                    footer={[\r\n                        {\r\n                            text: 'Cancel',\r\n                            onPress: () => this.setState({libLoadVisible: false})\r\n                        },\r\n                        {\r\n                            text: 'Reload',\r\n                            onPress: () => this.reloadLibrary()\r\n                        },\r\n                    ]}>\r\n                    <TextareaItem\r\n                        placeholder=\"Type the SerialPort library Path!\"\r\n                        autoHeight\r\n                        value={reloadLibPath} onChange={e => this.setState({reloadLibPath: e})}/>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    killProcess() {\r\n        Toast.show('Do not kill this process!', 1, false);\r\n        this.setState({\r\n            killButtonState: false\r\n        });\r\n    }\r\n\r\n    setEnableTabBar(target) {\r\n        this.props.setEnableTabBar(target);\r\n    }\r\n\r\n    showLibLoadModal() {\r\n        const reloadLibPath = this.state.systemInfo.libPath;\r\n        this.setState({\r\n            reloadLibPath,\r\n            libLoadVisible: true\r\n        });\r\n    }\r\n\r\n    reloadLibrary() {\r\n        reloadLibPath(this.state.reloadLibPath).then(res => {\r\n            Toast.show(`Success: [${res}]`);\r\n            this.setState({\r\n                libLoadVisible: false,\r\n            })\r\n        })\r\n    }\r\n\r\n    stopWeightService() {\r\n        stopWeightService().then(() => {\r\n            Toast.show(\"Stop Weight Service Success!\");\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props, mapAction2Props)(SystemSetting));\r\n","import {request} from './request';\r\n\r\nexport const reloadLibPath = path => {\r\n    return request({\r\n        url: '/api/serial/load-lib',\r\n        method: 'post',\r\n        data: {\r\n            libPath: path\r\n        }\r\n    })\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchSystemProps} from '../.././../api/dashboard';\r\nimport {List, TextareaItem} from 'antd-mobile';\r\n\r\nconst {Item} = List;\r\n\r\nclass SystemPropsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemProps: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchSystemProps().then(res => {\r\n            const propList = [];\r\n            for (const name in res) {\r\n                if (res.hasOwnProperty(name)) {\r\n                    propList.push({\r\n                        name,\r\n                        value: res[name],\r\n                    });\r\n                }\r\n            }\r\n            this.setState({\r\n                systemProps: propList\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {systemProps} = this.state;\r\n        return (\r\n            <div className=\"systemProps\">\r\n                <List renderHeader={() => 'System Properties'}>\r\n                    {\r\n                        systemProps.map(p => (<Item key={p.name}>\r\n                            <div>{p.name}</div>\r\n                            <TextareaItem value={p.value} autoHeight labelNumber={5}/>\r\n                        </Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SystemPropsSetting;\r\n","import React, {Component} from 'react';\r\nimport {fetchAllWithSensors, fetchDetail} from '../../../api/slot';\r\nimport {setSlotByIds} from '../../../api/sensor';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Flex, List, Modal, Picker, Toast, WingBlank} from \"antd-mobile\";\r\nimport './SlotSensorsSetting.sass'\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\nconst SENSOR_OPERATIONS = ['Remove', 'Cancel'];\r\n\r\nclass SlotSensorsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {},\r\n            sensors: [],\r\n            sensorRemoveMode: false,\r\n            allSlots: [],\r\n            sensorPickerData: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('Sensors');\r\n        const {id} = this.props.match.params;\r\n        fetchDetail(id).then(res => {\r\n            const sensors = res.sensors;\r\n            for (let sensor of sensors) {\r\n                sensor.changed = false;\r\n            }\r\n            this.setState({\r\n                slot: res,\r\n                sensors: sensors,\r\n            });\r\n            this.props.setTitle(`Sensors For ${res.slotNo}`);\r\n        });\r\n        fetchAllWithSensors().then(res => {\r\n            const pickerData = [];\r\n            for (let slot of res) {\r\n                const sensors = slot.sensors;\r\n                const children = [];\r\n                for (let sensor of sensors) {\r\n                    children.push({\r\n                        value: sensor.id,\r\n                        label: sensor.address,\r\n                    });\r\n                }\r\n                pickerData.push({\r\n                    value: slot.id,\r\n                    label: slot.slotNo,\r\n                    children: children,\r\n                });\r\n            }\r\n            this.setState({allSlots: res, sensorPickerData: pickerData,});\r\n        });\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {sensorRemoveMode, sensorPickerData} = this.state;\r\n        const sensorItem = (\r\n            <List.Item key={sensor.id}\r\n                       arrow=\"horizontal\"\r\n                       className={`sensor-item ${sensor.changed ? 'sensor-item-changed' : ''}`}\r\n                       onClick={() => this.openSensorOperations(sensor)}\r\n                       extra={sensorRemoveMode ? 'Click to remove' : ''}>\r\n                {sensor.deviceSn}\r\n            </List.Item>);\r\n        if (sensorRemoveMode) {\r\n            return sensorItem;\r\n        } else {\r\n            return (<Picker\r\n                data={sensorPickerData}\r\n                key={sensor.id}\r\n                value={[sensor.slotId, sensor.id]}\r\n                cols={2}\r\n                onChange={v => this.onSelectSensor(sensor, v)}>{sensorItem}</Picker>)\r\n        }\r\n    }\r\n\r\n    onSelectSensor(oldSensor, selected) {\r\n        const slotId = selected[0];\r\n        const sensorId = selected[1];\r\n        let index = -1;\r\n        const selectedSensors = this.state.sensors;\r\n        for (let i in selectedSensors) {\r\n            if (!selectedSensors.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            const sensor = selectedSensors[i];\r\n            if (sensor.id === oldSensor.id) {\r\n                index = i;\r\n            }\r\n        }\r\n        let selectedSensor;\r\n        for (let slot of this.state.allSlots) {\r\n            if (slot.id === slotId) {\r\n                for (let sensor of slot.sensors) {\r\n                    if (sensor.id === sensorId) {\r\n                        sensor.changed = true;\r\n                        selectedSensor = sensor;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let s of selectedSensors) {\r\n            if (s.id === selectedSensor.id) {\r\n                Toast.show('Duplicate Sensor!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        selectedSensors[index] = selectedSensor;\r\n        this.setState({sensors: selectedSensors,})\r\n    }\r\n\r\n    render() {\r\n        const {slot, sensors, sensorRemoveMode} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Slot Info'}>\r\n                    <List.Item extra={slot.slotNo}>Slot NO</List.Item>\r\n                    <List.Item extra={slot.skuName}>SKU Name</List.Item>\r\n                    <List.Item extra={slot.skuNo}>SKU NO</List.Item>\r\n                </List>\r\n                <List renderHeader={() => 'Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => this.renderSensorItem(sensor))\r\n                    }\r\n                    <List.Item>\r\n                        <WingBlank>\r\n                            <Flex justify={\"between\"}>\r\n                                <Flex.Item>\r\n                                    <Button type=\"warning\"\r\n                                            onClick={() => this.setState({sensorRemoveMode: !this.state.sensorRemoveMode})}>\r\n                                        {sensorRemoveMode ? 'Cancel' : 'Remove'}\r\n                                    </Button>\r\n                                </Flex.Item>\r\n                                <Flex.Item>\r\n                                    <Button type=\"ghost\" onClick={() => this.addSensor()}\r\n                                            disabled={sensorRemoveMode}>Add</Button>\r\n                                </Flex.Item>\r\n                                <Flex.Item>\r\n                                    <Button type=\"primary\" disabled={sensorRemoveMode}\r\n                                            onClick={() => this.applySensors()}>Apply</Button>\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </WingBlank>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    addSensor() {\r\n        for (let sensor of this.state.sensors) {\r\n            if (sensor.id < 0) {\r\n                Toast.show('Please select a sensor!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        const {sensors} = this.state;\r\n        sensors.push({\r\n            id: -1,\r\n            deviceSn: 'Not Selected',\r\n            changed: true,\r\n        });\r\n        this.setState({sensors});\r\n    }\r\n\r\n    openSensorOperations(sensor) {\r\n        const {sensorRemoveMode} = this.state;\r\n        if (!sensorRemoveMode) {\r\n            return;\r\n        }\r\n        ActionSheet.showActionSheetWithOptions(\r\n            {\r\n                options: SENSOR_OPERATIONS,\r\n                title: `Sensor ${sensor.deviceSn}`,\r\n                cancelButtonIndex: 2,\r\n                destructiveButtonIndex: 0,\r\n            },\r\n            index => {\r\n                if (index === 0) {\r\n                    Modal.alert('Remove',\r\n                        `Remove sensor ${sensor.deviceSn}?`,\r\n                        [\r\n                            {text: 'Cancel'},\r\n                            {\r\n                                text: 'Remove',\r\n                                onPress: () => this.removeSensor(sensor),\r\n                            }\r\n                        ]);\r\n                }\r\n            })\r\n    }\r\n\r\n    removeSensor(sensor) {\r\n        const {sensors} = this.state;\r\n        const newSensors = [];\r\n        for (let i in sensors) {\r\n            if (!sensors.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            const s = sensors[i];\r\n            if (s.id === sensor.id) {\r\n                continue;\r\n            }\r\n            newSensors.push(s);\r\n        }\r\n        this.setState({sensors: newSensors});\r\n    }\r\n\r\n    applySensors() {\r\n        const sensorIds = this.state.sensors.map(v => v.id);\r\n        for (let id of sensorIds) {\r\n            if (id <= 0) {\r\n                Toast.show('Any sensor not selected!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        const slot = this.state.slot;\r\n        Modal.alert('Apply Sensor Setting', 'Do you want to apply this changes?', [{text: 'Cancel'}, {\r\n            text: 'Apply',\r\n            onPress: () => {\r\n                setSlotByIds(sensorIds, slot.id).then(res => {\r\n                    Toast.show('Apply Success!');\r\n                    const {sensors} = this.state;\r\n                    for (let s of sensors) {\r\n                        s.changed = false;\r\n                    }\r\n                    this.setState({sensors});\r\n                })\r\n            }\r\n        }])\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SlotSensorsSetting);\r\n","import React, {Component} from 'react';\r\nimport {dumpAll} from '../../../api/sensor';\r\nimport {Button, List, Modal, TextareaItem, WingBlank} from 'antd-mobile';\r\n\r\nclass Overview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        dumpAll().then(res => {\r\n            this.setState({sensors: res})\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.state;\r\n        return (\r\n            <div className=\"overview\">\r\n                <List renderHeader={() => 'All Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => (\r\n                            <List.Item key={sensor.id}>\r\n                                {this.renderSensorItem(sensor)}\r\n                            </List.Item>\r\n                        ))\r\n                    }\r\n                </List>\r\n                <WingBlank>\r\n                    <Button onClick={() => this.refresh()} type=\"primary\">Refresh</Button>\r\n                </WingBlank>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {slot, connection} = sensor;\r\n        return (<div onClick={() => this.onSensorClick(sensor)}>\r\n            WS:[{sensor.id},{sensor.address}]\r\n            S:[{slot && slot.id},{slot && slot.slotNo}]\r\n            C:[{connection && connection.id},{connection && connection.target}]\r\n        </div>);\r\n    }\r\n\r\n    onSensorClick(sensor) {\r\n        const {connection, slot} = sensor;\r\n        sensor.slot = null;\r\n        sensor.connection = null;\r\n        const list = (<List renderHeader={() => 'Sensor'}>\r\n            <TextareaItem value={JSON.stringify(sensor)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(connection)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(slot)} autoHeight/>\r\n        </List>);\r\n        Modal.alert('Sensor', list);\r\n    }\r\n}\r\n\r\nexport default Overview;\r\n","import React, {Component} from 'react';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport SensorSetting from './setting/SensorSetting'\r\nimport SettingMenu from './setting/SettingMenu'\r\nimport SlotSetting from './setting/SlotSetting'\r\nimport ConnectionSetting from './setting/ConnectionSetting'\r\nimport SlotDetailSetting from './setting/SlotDetailSetting'\r\nimport SystemSetting from './setting/SystemSetting'\r\nimport SystemPropsSetting from './setting/SystemPropsSetting'\r\nimport SlotSensorsSetting from './setting/SlotSensorsSetting'\r\nimport Overview from './setting/Overview'\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n    };\r\n};\r\n\r\nclass Setting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/setting/\" component={SettingMenu} exact/>\r\n                    <Route path=\"/setting/sensor\" component={SensorSetting} exact/>\r\n                    <Route path=\"/setting/slot\" component={SlotSetting} exact/>\r\n                    <Route path=\"/setting/connection\" component={ConnectionSetting} exact/>\r\n                    <Route path=\"/setting/slot-detail/:id\" component={SlotDetailSetting} exact/>\r\n                    <Route path=\"/setting/system\" component={SystemSetting} exact/>\r\n                    <Route path=\"/setting/system-props\" component={SystemPropsSetting} exact/>\r\n                    <Route path=\"/setting/slot-sensors/:id\" component={SlotSensorsSetting} exact/>\r\n                    <Route path=\"/setting/overview\" component={Overview} exact/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Setting);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Result, Toast} from \"antd-mobile\";\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Address extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Config Address');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Result\r\n                    img={<Icon type=\"check-circle\" size=\"lg\" style={{fill: '#1F90E6'}}/>}\r\n                    title=\"开发中\"\r\n                    message=\"开发中\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中',1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Address);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Result, Toast} from 'antd-mobile';\r\nimport {setTitle} from \"../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Logs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Logs');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Result\r\n                    img={<Icon type=\"check-circle\" size=\"lg\" style={{fill: '#1F90E6'}}/>}\r\n                    title=\"开发中\"\r\n                    message=\"开发中\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中',1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Logs);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {Carousel, NoticeBar, WhiteSpace, WingBlank} from 'antd-mobile';\r\nimport './About.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass About extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            drawerOpen: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('About');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"about\">\r\n                <NoticeBar marqueeProps={{loop: true,}}>磐石电气（常州）有限公司：http://www.monolith-iot.com</NoticeBar>\r\n                <WhiteSpace/>\r\n                <WingBlank>\r\n                    <Carousel\r\n                        autoplay={true}\r\n                        infinite\r\n                        className=\"headerCarousel\"\r\n                    >\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#FF9808'}}>\r\n                            <div className=\"title\">\r\n                                磐石电气（常州）有限公司\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#3171FA'}}>\r\n                            <div className=\"title\">\r\n                                MonolithIoT\r\n                            </div>\r\n                        </div>\r\n                    </Carousel>\r\n                </WingBlank>\r\n                <WingBlank className=\"article\">\r\n                    <h1 className=\"title\">关于我们</h1>\r\n                    <div className=\"text\">\r\n                        <p>\r\n                            磐石电气(常州)有限公司,是一家高科技智能测量装备研发及生产企业，把传统体积，重量的测量数字化物联网化，可以与WMS,ERP，SAP等企业管理软件相结合，便于企业更直观的管理自己的仓储，物流等。磐石电气下设研发部，工程部，业务部，有较强的设计，研发和生产能力，可为客户提供嵌入式计算机系统产品设计，开发，系统集成，工程实施等服务。\r\n                        </p>\r\n                        <p>\r\n                            随着公司的发展，主要产品有自主研发的智能数字卷尺，智能手动叉车秤，安卓智能称重终端，静态/动态DWS等各种物联网类智能称重量方设备及软件定制系统,可为客户最大程度地提供智能化系统化的测量系统解决方案。产品广泛应用于快递物流、生鲜供应、港口订舱、仓储、工业离散制造及各种以长度(含面\r\n                            积、体积)测量为手段的民用、商用用途中。凭着可靠的产品质量和良好的售后服务，我公司已与顺丰、中国邮政、京东、国际快递DHL、华为等多家知名企业合作。\r\n                        </p>\r\n                        <p>\r\n                            目前公司已申请中国专利24项,美国专利1项，并拥有一支以博士、硕士为主的优秀研发团队，具有较高的研发能力和管理水平，现有多名员工曾在外企作为技术骨干，承传欧美设计制造理念，并采用先进的产品生命周期管理（PLM），重视产品质量，为公司产品的技术引领、技术创新和公司的可持续发展奠定了坚实基础。\r\n                        </p>\r\n                    </div>\r\n                </WingBlank>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(About);\r\n","import React, {Component} from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Dashboard from './content/Dashboard'\r\nimport Setting from './content/Setting';\r\nimport Address from './content/Address';\r\nimport Logs from './content/Logs';\r\nimport About from './content/About';\r\nimport './AppContent.sass';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"appContent\">\r\n                {\r\n                    this.props.showHeader ? <div className=\"headerMask\"/> : null\r\n                }\r\n                <Switch>\r\n                    <Route path=\"/\" component={Dashboard} exact/>\r\n                    <Route path=\"/setting**\" component={Setting} exact/>\r\n                    <Route path=\"/address\" component={Address} exact/>\r\n                    <Route path=\"/logs\" component={Logs} exact/>\r\n                    <Route path=\"/about\" component={About} exact/>\r\n                </Switch>\r\n                <div className=\"tabBarMask\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, null)(AppContent);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Modal, NavBar, Popover, Toast} from \"antd-mobile\";\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\nimport './AppHeader.sass';\r\nimport {reloadSensors} from \"../api/sensor\";\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        title: state.globalTitle,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppHeader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            popoverVisible: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.showHeader) {\r\n            return null;\r\n        }\r\n        const {title} = this.props;\r\n        return (\r\n            <div className=\"appHeader\">\r\n                <NavBar\r\n                    leftContent={<Icon type=\"left\" onClick={() => this.onBackClick()}/>}\r\n                    rightContent={this.rightContent()}\r\n                    mode=\"light\"\r\n                >{title}</NavBar>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    rightContent() {\r\n        const {popoverVisible} = this.state;\r\n        const Item = Popover.Item;\r\n        return (<Popover mask\r\n                         visible={popoverVisible}\r\n                         overlay={[\r\n                             (<Item key=\"about\" value=\"about\"\r\n                                    data-seed=\"logId\">About</Item>),\r\n                             (<Item key=\"settings\" value=\"settings\"\r\n                                    style={{whiteSpace: 'nowrap'}}>Settings</Item>),\r\n                             (<Item key=\"reload\" value=\"reload\"\r\n                                    style={{whiteSpace: 'nowrap'}}>Reload</Item>),\r\n                         ]}\r\n                         onSelect={e => this.onPopoverSelect(e)}\r\n        >\r\n            <Icon type=\"ellipsis\"/>\r\n        </Popover>);\r\n    }\r\n\r\n    onBackClick() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    onPopoverSelect(e) {\r\n        switch (e.key) {\r\n            case 'about':\r\n                this.props.history.push({\r\n                    pathname: '/about',\r\n                });\r\n                break;\r\n            case 'settings':\r\n                this.props.history.push({\r\n                    pathname: '/setting/',\r\n                });\r\n                break;\r\n            case 'reload':\r\n                this.doReloadSensors();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({\r\n            popoverVisible: false\r\n        });\r\n    }\r\n\r\n    doReloadSensors() {\r\n        Modal.alert('Reload Sensors', 'Reload sensors from database into weightService',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                },\r\n                {\r\n                    text: 'Yes',\r\n                    onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('Reload Success!');\r\n                        });\r\n                    },\r\n                },\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props)(AppHeader));\r\n","import {createBrowserHistory} from 'history';\r\nimport {setRouterPath} from '../store/actionCreators'\r\nimport store from '../store';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst notifyPathChanged = location => {\r\n    const info = {\r\n        pathname: location.pathname,\r\n        search: location.search,\r\n        hash: location.hash\r\n    };\r\n    const action = setRouterPath(info);\r\n    store.dispatch(action);\r\n};\r\nhistory.listen((action) => {\r\n    notifyPathChanged(action.location);\r\n});\r\n\r\n\r\nnotifyPathChanged(history.location);\r\nexport default history;\r\n","import React from 'react'\nimport './App.css'\nimport store from './store'\nimport {Provider} from 'react-redux'\nimport AppTabBar from './component/AppTabBar'\nimport AppContent from './component/AppContent'\nimport AppHeader from './component/AppHeader'\nimport {HashRouter as Router} from 'react-router-dom'\nimport history from './util/History'\nimport {fetchEnableTabBarAction} from './store/actionCreators';\n\nclass App extends React.Component {\n    componentDidMount() {\n        store.dispatch(fetchEnableTabBarAction());\n    }\n\n    render() {\n        return (\n            <Router history={history}>\n                <Provider store={store}>\n                    <div className=\"app-content\">\n                        <AppHeader/>\n                        <AppContent/>\n                        <AppTabBar/>\n                    </div>\n                </Provider>\n            </Router>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import 'babel-polyfill'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n/*ReactDOM.render(\n    <React.StrictMode>\n        <App/>,\n    </React.StrictMode>,\n    document.getElementById('root')\n);*/\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}