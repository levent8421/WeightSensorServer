{"version":3,"sources":["store/reducer.js","store/actionTypes.js","store/index.js","component/AppTabBar.jsx","api/request.js","util/httpUtils.js","api/dashboard.js","api/sensor.js","store/actionCreators.js","api/connection.js","api/config.js","util/DataConvertor.js","api/slot.js","component/content/Dashboard.jsx","component/commons/FloatButton.jsx","component/content/setting/SensorSetting.jsx","component/content/setting/SettingMenu.jsx","component/content/setting/SlotSetting.jsx","component/content/setting/ConnectionSetting.jsx","component/content/setting/SlotDetailSetting.jsx","component/content/setting/SystemSetting.jsx","api/serial.js","component/content/setting/SystemPropsSetting.jsx","component/content/setting/SlotSensorsSetting.jsx","component/content/setting/Overview.jsx","component/content/setting/SystemCheck.jsx","api/systemStatus.js","component/content/setting/MessageLog.jsx","component/content/Setting.jsx","component/content/Address.jsx","component/content/Logs.jsx","component/content/About.jsx","component/AppContent.jsx","component/AppHeader.jsx","util/History.js","App.js","serviceWorker.js","index.js"],"names":["defaultState","showTabBar","enableTabBar","showHeader","globalTitle","routerPath","dashboardSlots","sensors","connections","user","name","actionTable","registerReducer","type","reducer","state","action","data","sensorId","hasElable","hasElabel","sensor","id","JSON","parse","stringify","filter","connection","allEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","handler","AppTabBar","props","path","this","className","unselectedTintColor","tintColor","barTintColor","hidden","tabBarPosition","Item","title","selected","icon","selectedIcon","onPress","pushPath","setState","history","push","pathname","React","Component","withRouter","connect","hideLoading","hide","showError","msg","fail","request","options","showLoadingToast","loading","Promise","resolve","reject","axios","httpRequest","then","res","status","body","code","catch","err","errStr","toString","reloadSensors","url","method","setTabBarState","show","setTitle","asyncFetchDashboardSlotData","dispatch","slots","key","hasOwnProperty","sort","a","b","slotNo","localeCompare","asyncFetchSensors","address","toggleSensorElable","asyncFetchConnection","asyncDeleteConnection","deleteConnection","fetchEnableTabBarAction","value","setEnableTabBarAction","enable","setEnableTabBar","connectionTypes","1","2","asConnectionType","stateTable","3","4","5","asStateString","doZeroAll","fetchDetail","TabItems","Dashboard","rootEle","document","sensorModalVisible","operationSlot","searchSkuNo","noticeSlots","renderSlotCard","bind","startFetchData","listenKeyPress","onkeypress","e","target","tagName","toLowerCase","keyCode","triggerHighlight","appendSearchSku","String","fromCharCode","c","clearInterval","fetchTimer","cancelKeyPress","fetchSlotData","setInterval","groupedSlots","groups","putSlot","slot","noItems","match","groupSlots","highlightSlotIds","firstNoticeSlot","tabs","onChange","tab","index","onTabChange","onSubmit","renderNoticeBar","map","group","renderGroupItem","visible","transparent","footer","text","onClose","renderHeader","extra","deviceSn","Brief","address485","content","skuName","skuShelfLifeOpenDays","wrap","justify","sku","slotCardClassName","isWan","isDisable","isOffline","incredible","isIncredible","toleranceState","weightInKg","weight","toFixed","count","isStable","weightState","asCount","onClick","onSlotCardClick","skuNo","trim","setTimeout","component","FloatButton","defaultPosition","right","bottom","position","down","style","onMouseDown","onMouseUp","onMouseMove","iconType","setDown","_moved","startPos","x","clientX","y","clientY","callOnClick","dx","dy","SensorSetting","Header","Body","checked","toggleElabel","platform","Footer","showOperationActions","fetchSensors","buttons","showActionSheetWithOptions","cancelButtonIndex","length","destructiveButtonIndex","callReloadSensors","alert","SettingMenu","go","arrow","OperationActions","SlotSetting","fetchSlots","toSlotDetail","showOperationSheet","ConnectionOperations","label","ConnectionSetting","createDialogVisible","create","serialPorts","fetchConnection","showConnectionOperations","showCreateDialog","createConnection","cols","setCreateType","disabled","placeholder","input","setCreateTarget","arr","setCreateTargetSerial","types","newCreate","port","serialIndexList","scanConnection","ActionButtons","SlotDetailSetting","slotId","params","fetchSlotInfo","setUpdateSlotProp","skuApw","skuTolerance","applyModify","toggleELabel","openOperation","buttonIndex","button","doZero","hasELabel","option","SystemSetting","systemInfo","killButtonState","libLoadVisible","reloadLibPath","appName","appVersion","dbVersion","dbVersionName","pid","showLibLoadModal","libPath","killProcess","stopWeightService","maskClosable","reloadLibrary","autoHeight","SystemPropsSetting","systemProps","propList","p","labelNumber","SENSOR_OPERATIONS","SlotSensorsSetting","sensorRemoveMode","allSlots","sensorPickerData","changed","pickerData","children","sensorItem","openSensorOperations","v","onSelectSensor","oldSensor","selectedSensor","selectedSensors","i","renderSensorItem","addSensor","applySensors","removeSensor","newSensors","s","sensorIds","setSlotByIds","Overview","refresh","onSensorClick","list","SystemCheck","statusTable","tcpApi","databaseTables","refreshStatusTable","color","ip","reconnectTcp","tableName","refreshDatabaseTables","renderMessageItem","message","rows","seqNo","MessageLog","logs","refreshLogs","refreshTimmer","Setting","exact","Address","img","size","fill","info","Logs","About","drawerOpen","marqueeProps","loop","autoplay","infinite","backgroundColor","AppContent","CompensationActions","AppHeader","popoverVisible","leftContent","onBackClick","rightContent","mode","mask","overlay","data-seed","whiteSpace","onSelect","onPopoverSelect","goBack","doReloadSensors","showCompensationOperations","doSetCompensationState","enableCompensation","setCompensationState","createBrowserHistory","notifyPathChanged","location","setRouterPath","search","hash","listen","App","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.ea28d443.chunk.js","sourcesContent":["import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\n\r\nconst defaultState = {\r\n    showTabBar: true,\r\n    enableTabBar: false,\r\n    showHeader: true,\r\n    globalTitle: '重力货道',\r\n    routerPath: null,\r\n    dashboardSlots: [],\r\n    sensors: [],\r\n    connections: [],\r\n    user: {\r\n        name: 'MonolithIoT'\r\n    }\r\n};\r\nconst actionTable = {};\r\nconst registerReducer = (type, reducer) => {\r\n    actionTable[type] = reducer;\r\n};\r\nregisterReducer(SET_TABBAR_STATE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showTabBar: action.data\r\n    };\r\n});\r\nregisterReducer(SET_ROUTER_PATH, (state, action) => {\r\n    return {\r\n        ...state,\r\n        routerPath: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_DASHBOARD_SLOT_DATA, (state, action) => {\r\n    return {\r\n        ...state,\r\n        dashboardSlots: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(SET_TITLE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        globalTitle: action.data,\r\n    }\r\n});\r\nregisterReducer(ASYNC_FETCH_SENSORS, (state, action) => {\r\n    return {\r\n        ...state,\r\n        sensors: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(TOGGLE_SENSOR_ELABLE, (state, action) => {\r\n    const sensors = state.sensors;\r\n    const sensorId = action.data.sensorId;\r\n    const hasElable = action.data.hasElabel;\r\n    for (let sensor of sensors) {\r\n        if (sensor.id === sensorId) {\r\n            sensor.hasElable = hasElable;\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        sensors: JSON.parse(JSON.stringify(sensors))\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_CONNECTION, (state, action) => {\r\n    return {\r\n        ...state,\r\n        connections: action.data,\r\n    };\r\n});\r\nregisterReducer(DELETE_CONNECTION, (state, action) => {\r\n    const id = action.data.id;\r\n    const connections = state.connections.filter(connection => connection.id !== id);\r\n    return {\r\n        ...state,\r\n        connections\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_TAB_BAR, (state, action) => {\r\n    return {\r\n        ...state,\r\n        enableTabBar: action.data,\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_HEADER, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showHeader: action.data\r\n    };\r\n});\r\nexport default (state = defaultState, action) => {\r\n    const type = action.type;\r\n    if (type in actionTable) {\r\n        const handler = actionTable[type];\r\n        return handler(state, action);\r\n    }\r\n    return state;\r\n}\r\n","export const SET_USER = \"user.set\";\r\n\r\nexport const SET_TABBAR_STATE = 'tabBar.set';\r\n\r\nexport const SET_ROUTER_PATH = 'router.path.set';\r\n\r\nexport const ASYNC_FETCH_DASHBOARD_SLOT_DATA = 'dashboard.slot_data.fetch.async';\r\n\r\nexport const SET_TITLE = 'title.set';\r\n\r\nexport const ASYNC_FETCH_SENSORS = 'sensors.fetch.async';\r\n\r\nexport const TOGGLE_SENSOR_ELABLE = 'sensor.elabel.toggle';\r\n\r\nexport const ASYNC_FETCH_CONNECTION = 'connections.fetch.async';\r\n\r\nexport const DELETE_CONNECTION = 'connection.delete';\r\n\r\nexport const SET_ENABLE_TAB_BAR = 'system.tabBar.set';\r\n\r\nexport const SET_ENABLE_HEADER = 'system.header.set';\r\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport reducer from './reducer';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst allEnhancers = reduxDevTools(applyMiddleware(thunk));\r\nconst store = createStore(reducer, allEnhancers);\r\n\r\nexport default store;\r\n","import React from 'react'\r\nimport {TabBar} from 'antd-mobile'\r\nimport {connect} from 'react-redux';\r\nimport './AppTabBar.sass'\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showTabBar: state.showTabBar,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass AppTabBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            path: '/',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const showTabBar = this.props.showTabBar && this.props.enableTabBar;\r\n        const {path} = this.state;\r\n        if (showTabBar) {\r\n            return (\r\n                <div className=\"appTabBar\">\r\n                    <TabBar\r\n                        unselectedTintColor=\"#949494\"\r\n                        tintColor=\"#33A3F4\"\r\n                        barTintColor=\"white\"\r\n                        hidden={!this.props.showTabBar}\r\n                        tabBarPosition=\"bottom\">\r\n                        <TabBar.Item title=\"Dashboard\"\r\n                                     selected={path === '/'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe64e;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe64e;</i>}\r\n                                     onPress={() => this.pushPath('/')}/>\r\n                        <TabBar.Item title=\"Logs\"\r\n                                     selected={path === '/logs'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe60c;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe60c;</i>}\r\n                                     onPress={() => this.pushPath('/logs')}/>\r\n                        <TabBar.Item title=\"Address\"\r\n                                     selected={path === '/address'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe61b;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe61b;</i>}\r\n                                     onPress={() => this.pushPath('/address')}/>\r\n                        <TabBar.Item title=\"Setting\"\r\n                                     selected={path === '/setting'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe660;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe660;</i>}\r\n                                     onPress={() => this.pushPath('/setting')}/>\r\n                    </TabBar>\r\n                </div>)\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    pushPath(path) {\r\n        this.setState({\r\n            path,\r\n        });\r\n        this.props.history.push({\r\n            pathname: path,\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(AppTabBar));\r\n","import {httpRequest} from '../util/httpUtils';\r\nimport {Toast} from 'antd-mobile'\r\n\r\nconst showLoading = () => {\r\n    Toast.loading('Loading', 0);\r\n};\r\nconst hideLoading = () => {\r\n    Toast.hide();\r\n};\r\nconst showError = (msg) => {\r\n    Toast.fail(msg);\r\n};\r\n\r\n\r\nexport function request(options) {\r\n    const showLoadingToast = !options.hideLoading;\r\n    if (showLoadingToast) {\r\n        showLoading();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        httpRequest(options)\r\n            .then(res => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                if (res.status !== 200) {\r\n                    showError(`Http Response Status:${res.status}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                const body = res.data;\r\n                if (body.code !== 200) {\r\n                    showError(`Error [${body.code}]:${body.msg}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                resolve(body.data);\r\n            }).catch(err => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                const errStr = err.toString();\r\n                showError(errStr);\r\n                reject(err);\r\n            }\r\n        );\r\n    })\r\n}\r\n","import axios from 'axios'\r\n\r\nexport function httpRequest(options) {\r\n    return axios(options);\r\n}\r\n","import {request} from './request';\r\n\r\nexport const fetchSlotData = () => {\r\n    return request({\r\n        url: '/api/dashboard/slot-data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchSystemInfo = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-infos',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchSystemProps = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-props',\r\n        method: 'get',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/_with-slot',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const toggleElable = (sensorId, hasElabel) => {\r\n    return new Promise((resolve, reject) => {\r\n        resolve();\r\n    })\r\n};\r\n\r\n\r\nexport const reloadSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/reload',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const setSlotByIds = (sensorIds, slotId) => {\r\n    return request({\r\n        url: '/api/sensor/_set-slot-id-by-ids',\r\n        method: 'post',\r\n        data: {\r\n            sensorIds,\r\n            slotId,\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const stopWeightService = () => {\r\n    return request({\r\n        url: '/api/sensor/_stop-weight-service',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const dumpAll = () => {\r\n    return request({\r\n        url: '/api/sensor/_dump-all',\r\n        method: 'get',\r\n    });\r\n};\r\n","import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    SET_USER,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\nimport {fetchSlotData} from '../api/dashboard';\r\nimport {fetchSensors, toggleElable} from '../api/sensor';\r\nimport {deleteConnection, fetchConnections} from '../api/connection';\r\nimport {fetchEnableTabBar, setEnableTabBar} from '../api/config';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: SET_USER,\r\n        data: user\r\n    }\r\n};\r\nexport const setTabBarState = show => {\r\n    return {\r\n        type: SET_TABBAR_STATE,\r\n        data: show\r\n    };\r\n};\r\n\r\nexport const setRouterPath = info => {\r\n    return {\r\n        type: SET_ROUTER_PATH,\r\n        data: info\r\n    };\r\n};\r\nexport const setTitle = title => {\r\n    return {\r\n        type: SET_TITLE,\r\n        data: title,\r\n    }\r\n};\r\nexport const asyncFetchDashboardSlotData = () => {\r\n    return dispatch => {\r\n        fetchSlotData().then(res => {\r\n            const slots = [];\r\n            for (const key in res) {\r\n                if (res.hasOwnProperty(key)) {\r\n                    slots.push(res[key]);\r\n                }\r\n            }\r\n            const action = {\r\n                type: ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n                data: slots.sort((a, b) => a.slotNo.localeCompare(b.slotNo)),\r\n            };\r\n            dispatch(action);\r\n        });\r\n    }\r\n};\r\n\r\nexport const asyncFetchSensors = () => {\r\n    return dispatch => {\r\n        fetchSensors().then(res => {\r\n            const sensors = res.sort((a, b) => a.address - b.address);\r\n            const action = {\r\n                type: ASYNC_FETCH_SENSORS,\r\n                data: sensors,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const toggleSensorElable = (sensorId, hasElabel) => {\r\n    return dispatch => {\r\n        toggleElable().then(() => {\r\n            const action = {\r\n                type: TOGGLE_SENSOR_ELABLE,\r\n                data: {\r\n                    sensorId,\r\n                    hasElabel\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    };\r\n};\r\n\r\n\r\nexport const asyncFetchConnection = () => {\r\n    return dispatch => {\r\n        fetchConnections().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_CONNECTION,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const asyncDeleteConnection = id => {\r\n    return dispatch => {\r\n        deleteConnection(id).then(() => {\r\n            const action = {\r\n                type: DELETE_CONNECTION,\r\n                data: {\r\n                    id: id\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    }\r\n};\r\n\r\nexport const fetchEnableTabBarAction = () => {\r\n    return dispatch => {\r\n        fetchEnableTabBar().then(res => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: res.value === 'true',\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const setEnableTabBarAction = enable => {\r\n    return dispatch => {\r\n        setEnableTabBar(enable).then(() => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: enable,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const showHeader = show => {\r\n    return {\r\n        type: SET_ENABLE_HEADER,\r\n        data: show,\r\n    };\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchConnections = () => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const deleteConnection = id => {\r\n    return request({\r\n        url: `/api/connection/${id}`,\r\n        method: 'delete',\r\n    });\r\n};\r\n\r\nexport const createConnection = connection => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'put',\r\n        data: connection,\r\n    });\r\n};\r\n\r\n\r\nexport const scanPort = () => {\r\n    return request({\r\n        url: '/api/serial/scan',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const scanDevice = id => {\r\n    return request({\r\n        url: `/api/connection/${id}/_scan`,\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\n\r\nexport const fetchEnableTabBar = () => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setEnableTabBar = enable => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'post',\r\n        data: {\r\n            value: enable,\r\n        },\r\n    });\r\n};\r\n","export const asKg = g => {\r\n    return (g / 1000.0).toFixed(3);\r\n};\r\n\r\nexport const isWan = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isIncredible = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isDisable = state => {\r\n    return state === 3;\r\n};\r\n\r\nexport const isOffline = state => {\r\n    return state === 2;\r\n};\r\n\r\nconst connectionTypes = {\r\n    1: 'Serial',\r\n    2: 'Network',\r\n};\r\n\r\nexport const asConnectionType = type => {\r\n    if (type in connectionTypes) {\r\n        return connectionTypes[type];\r\n    }\r\n    return `Unknown [${type}]`;\r\n};\r\n\r\nconst weightStateTable = {\r\n    1: 'stable',\r\n    2: 'dynamic',\r\n    3: 'underLoad',\r\n    4: 'overLoad',\r\n};\r\nexport const isStable = weightState => {\r\n    return weightState === 1;\r\n};\r\n\r\nexport const asWeightStateString = state => {\r\n    return state in weightStateTable ? weightStateTable[state] : state;\r\n};\r\n\r\n\r\nexport const groupSlots = slots => {\r\n    const groups = {};\r\n    const putSlot = (name, slot) => {\r\n        if (name in groups) {\r\n            groups[name].push(slot);\r\n        } else {\r\n            groups[name] = [slot];\r\n        }\r\n    };\r\n    for (let slot of slots) {\r\n        const slotNo = slot.slotNo;\r\n        const noItems = slotNo.match(/^(\\w+)-(\\d+)-(\\w+)$/);\r\n        if (noItems) {\r\n            const groupName = `${noItems[1]}货架第${noItems[2]}层`;\r\n            putSlot(groupName, slot);\r\n        } else {\r\n            putSlot('未分组货道', slot);\r\n        }\r\n    }\r\n    const res = [];\r\n    for (let name in groups) {\r\n        if (!groups.hasOwnProperty(name)) {\r\n            continue;\r\n        }\r\n        res.push({\r\n            name,\r\n            slots: groups[name],\r\n        });\r\n    }\r\n    return res;\r\n};\r\n\r\nconst stateTable = {\r\n    1: '使用中',\r\n    2: '离线',\r\n    3: '已停用',\r\n    4: '超载',\r\n    5: '欠载',\r\n};\r\nexport const asStateString = state => {\r\n    if (state in stateTable) {\r\n        return stateTable[state];\r\n    }\r\n    return 'Unknown State:' + state;\r\n};\r\n\r\nexport const asCount = data => {\r\n    const count = data.count;\r\n    const isStable = data.weightState === 1;\r\n    if (count === null) {\r\n        return '~❗';\r\n    }\r\n    if (isStable) {\r\n        return count;\r\n    }\r\n    return '~' + count;\r\n};\r\n","import {request} from './request';\r\n\r\nexport const doZeroAll = () => {\r\n    return request({\r\n        url: '/api/slot/zero-all',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const zeroOne = slotNo => {\r\n    return request({\r\n        url: `/api/slot/${slotNo}/zero`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllSlots = () => {\r\n    return request({\r\n        url: '/api/slot/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDetail = id => {\r\n    return request({\r\n        url: `/api/slot/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const updateSlot = slot => {\r\n    return request({\r\n        url: `/api/slot/${slot.id}`,\r\n        method: 'post',\r\n        data: slot\r\n    });\r\n};\r\n\r\n\r\nexport const toggleELabelState = option => {\r\n    return request({\r\n        url: `/api/slot/${option.id}/has-e-label`,\r\n        method: 'post',\r\n        data: {hasElabel: option.hasELabel},\r\n    });\r\n};\r\n\r\nexport const highlightBySku = sku => {\r\n    return request({\r\n        url: '/api/slot/highlight',\r\n        method: 'post',\r\n        data: {\r\n            skuNo: sku\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllWithSensors = () => {\r\n    return request({\r\n        url: '/api/slot/_with-sensors',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setCompensationState = state => {\r\n    return request({\r\n        url: '/api/slot/_all-compensation',\r\n        method: 'post',\r\n        data: {\r\n            enableCompensation: state,\r\n        }\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {asyncFetchDashboardSlotData, setTabBarState, setTitle, showHeader} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport './Dashboard.sass'\r\nimport {Flex, List, Modal, NoticeBar, SearchBar, Tabs, Toast, WingBlank} from 'antd-mobile';\r\nimport {asKg, asStateString, groupSlots, isDisable, isIncredible, isOffline, isWan,asCount} from '../../util/DataConvertor';\r\nimport {highlightBySku} from '../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        slots: state.dashboardSlots\r\n    };\r\n};\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSlotData: (...args) => dispatch(asyncFetchDashboardSlotData(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        showHeader: (...args) => dispatch(showHeader(...args)),\r\n        showTabBar: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nconst TabItems = [\r\n    {\r\n        title: '重力货道数据',\r\n        key: 'dashboard',\r\n    },\r\n    {\r\n        title: '重力货道配置',\r\n        key: 'settings',\r\n    }\r\n];\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.rootEle = document;\r\n        this.state = {\r\n            sensors: [],\r\n            sensorModalVisible: false,\r\n            operationSlot: {},\r\n            searchSkuNo: '',\r\n            noticeSlots: [],\r\n        };\r\n        this.props.setTitle('Dashboard');\r\n        this.renderSlotCard = this.renderSlotCard.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startFetchData();\r\n        this.props.showHeader(false);\r\n        this.props.showTabBar(false);\r\n        this.listenKeyPress();\r\n    }\r\n\r\n    listenKeyPress() {\r\n        this.rootEle.onkeypress = e => {\r\n            const sourceTagName = e.target.tagName.toLowerCase();\r\n            if (sourceTagName !== 'body') {\r\n                return;\r\n            }\r\n            const keyCode = e.keyCode;\r\n            if (keyCode === 13) {\r\n                this.triggerHighlight(this.state.searchSkuNo);\r\n            } else {\r\n                this.appendSearchSku(String.fromCharCode(keyCode));\r\n            }\r\n        };\r\n    }\r\n\r\n    appendSearchSku(c) {\r\n        const {searchSkuNo} = this.state;\r\n        this.setState({\r\n            searchSkuNo: searchSkuNo + c,\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.fetchTimer);\r\n        this.props.showHeader(true);\r\n        this.props.showTabBar(true);\r\n        this.cancelKeyPress();\r\n    }\r\n\r\n    cancelKeyPress() {\r\n        this.rootEle.onkeypress = null;\r\n    }\r\n\r\n    startFetchData() {\r\n        this.props.fetchSlotData();\r\n        this.fetchTimer = setInterval(() => {\r\n            this.props.fetchSlotData();\r\n        }, 1000);\r\n    }\r\n\r\n    render() {\r\n        const slots = this.props.slots;\r\n        const {searchSkuNo, noticeSlots, sensorModalVisible, operationSlot, sensors} = this.state;\r\n        const groupedSlots = groupSlots(slots);\r\n        this.highlightSlotIds = {};\r\n        for (let slot of noticeSlots) {\r\n            this.highlightSlotIds[slot.id] = true;\r\n        }\r\n        const firstNoticeSlot = noticeSlots ? noticeSlots[0] : null;\r\n        return (\r\n            <div className=\"dashboard\">\r\n                <Tabs tabs={TabItems} onChange={(tab, index) => this.onTabChange(tab, index)}/>\r\n                <SearchBar\r\n                    value={searchSkuNo}\r\n                    onSubmit={e => this.triggerHighlight(e)}\r\n                    onChange={searchSkuNo => this.setState({searchSkuNo})}/>\r\n                <div className=\"notice-list\">\r\n                    {\r\n                        this.renderNoticeBar(firstNoticeSlot)\r\n                    }\r\n                </div>\r\n                <div className=\"slot-groups\">\r\n                    {\r\n                        groupedSlots.map(group => this.renderGroupItem(group))\r\n                    }\r\n                </div>\r\n                <Modal visible={sensorModalVisible}\r\n                       title={`Sensors for ${operationSlot.slotNo}`}\r\n                       transparent\r\n                       footer={[{text: 'OK', onPress: () => this.setState({sensorModalVisible: false})}]}\r\n                       onClose={() => this.setState({sensorModalVisible: false})}>\r\n                    <List renderHeader={() => 'Sensors'}>\r\n                        {\r\n                            sensors ? sensors.map(sensor => (<List.Item\r\n                                    extra={asStateString(sensor.state)}\r\n                                    key={sensor.id}>\r\n                                    {sensor.deviceSn}\r\n                                    <List.Item.Brief>{sensor.address485}</List.Item.Brief>\r\n                                </List.Item>)) :\r\n                                <List.Item>Empty List</List.Item>\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderNoticeBar(slot) {\r\n        if (!slot) {\r\n            return;\r\n        }\r\n        const content = [];\r\n        content.push(slot.skuName);\r\n        if (slot.skuShelfLifeOpenDays) {\r\n            content.push('，开封后保质期');\r\n            content.push((<span className=\"days\">{slot.skuShelfLifeOpenDays}</span>));\r\n            content.push('天');\r\n        } else {\r\n            content.push('，开封后保质期未设置！');\r\n        }\r\n        return (<NoticeBar className=\"notice\">\r\n            {content}\r\n        </NoticeBar>)\r\n    }\r\n\r\n    renderGroupItem(group) {\r\n        return (<div className=\"group-item\" key={group.name}>\r\n            <p className=\"group-name\">\r\n                {group.name}\r\n            </p>\r\n            <WingBlank>\r\n                <Flex className=\"slots\" wrap={\"wrap\"} justify=\"between\">\r\n                    {\r\n                        group.slots.map(slot => this.renderSlotCard(slot))\r\n                    }\r\n                </Flex>\r\n            </WingBlank>\r\n        </div>)\r\n    }\r\n\r\n    renderSlotCard(slot) {\r\n        const sensors = slot.sensors;\r\n        if (!sensors) {\r\n            return null;\r\n        }\r\n        const sku = slot.sku || {};\r\n        const data = slot.data || {};\r\n        let slotCardClassName = 'slot-card';\r\n        if (slot.id in this.highlightSlotIds) {\r\n            slotCardClassName += ' slot-card-highlight';\r\n        } else {\r\n            if (isWan(slot.state)) {\r\n                if (isDisable(slot.state)) {\r\n                    slotCardClassName += ' slot-card-disable';\r\n                } else if (isOffline(slot.state)) {\r\n                    slotCardClassName += ' slot-card-offline';\r\n                } else {\r\n                    slotCardClassName += ' slot-card-warn';\r\n                }\r\n            }\r\n        }\r\n        const incredible = isIncredible(data.toleranceState);\r\n        const state = asStateString(slot.state);\r\n        const weightInKg = asKg(data.weight);\r\n        const count = asCount(data);\r\n        return (<div key={slot.id}\r\n                     className={slotCardClassName}\r\n                     onClick={() => this.onSlotCardClick(slot)}>\r\n            <Flex className=\"card-header\" justify=\"between\">\r\n                <div className=\"slot-no\">\r\n                    {slot.slotNo}\r\n                </div>\r\n                <div className=\"state\">\r\n                    <span className=\"weight\">({weightInKg}kg)</span>\r\n                    <span className=\"dot\"/>\r\n                    <span>{state}</span>\r\n                </div>\r\n            </Flex>\r\n            <Flex className=\"card-body\" justify=\"between\">\r\n                <div className=\"left\">\r\n                    <div className=\"sku-no\">SKU:{sku.skuNo}</div>\r\n                    <div className=\"sku-name\">{sku.name}</div>\r\n                </div>\r\n                <div className=\"delimiter\"/>\r\n                <div className={`right ${incredible ? 'right-incredible' : ''}`}>\r\n                    <span className=\"pcs-value\">{count}</span>\r\n                    <span className=\"pcs-unit\">(数量)</span>\r\n                </div>\r\n            </Flex>\r\n        </div>);\r\n    }\r\n\r\n    onSlotCardClick(slot) {\r\n        this.setState({\r\n            operationSlot: slot,\r\n            sensors: slot.sensors,\r\n            sensorModalVisible: true,\r\n        });\r\n    }\r\n\r\n    triggerHighlight(skuNo) {\r\n        if (skuNo === '' || skuNo.trim() === '') {\r\n            Toast.show('Please Type a SkuNo!', 1, false);\r\n            return;\r\n        }\r\n        highlightBySku(skuNo).then(res => {\r\n            this.setState({\r\n                noticeSlots: res\r\n            });\r\n            setTimeout(() => this.setState({noticeSlots: [], searchSkuNo: '',}), 5000);\r\n        }).catch(() => {\r\n            this.setState({\r\n                searchSkuNo: '',\r\n            });\r\n        });\r\n    }\r\n\r\n    onTabChange(tab, index) {\r\n        switch (index) {\r\n            case 0:\r\n                // dashboard\r\n                this.props.history.push({\r\n                    pathname: '/dashboard'\r\n                });\r\n                break;\r\n            case 1:\r\n                // settings\r\n                this.props.history.push({\r\n                    pathname: '/setting/'\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nconst component = connect(mapState2Props, mapAction2Props)(Dashboard);\r\nexport default withRouter(component);\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from 'antd-mobile';\r\nimport './FloatButton.sass';\r\n\r\nclass FloatButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.defaultPosition = {\r\n            right: 20,\r\n            bottom: 100,\r\n        };\r\n        this.state = {\r\n            position: this.defaultPosition,\r\n            down: false,\r\n        };\r\n    }\r\n\r\n    static propTypes = {\r\n        iconType: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func,\r\n    };\r\n\r\n    render() {\r\n        const {position, down} = this.state;\r\n        return (\r\n            <div className={\"floatButton \" + (down ? 'move' : '')}\r\n                 style={{...position}}\r\n                 onMouseDown={e => this.onMouseDown(e)}\r\n                 onMouseUp={() => this.onMouseUp()}\r\n                 onMouseMove={e => this.onMouseMove(e)}>\r\n                <Icon type={this.props.iconType} className=\"icon\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    callOnClick() {\r\n        if (this.props.onClick) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n\r\n    setDown(down) {\r\n        this.setState({down});\r\n    }\r\n\r\n    onMouseDown(e) {\r\n        this.setDown(true);\r\n        this._moved = false;\r\n        this.startPos = {\r\n            x: e.clientX,\r\n            y: e.clientY,\r\n        };\r\n    }\r\n\r\n    onMouseUp() {\r\n        this.setDown(false);\r\n        this.defaultPosition = this.state.position;\r\n        if (!this._moved) {\r\n            this.callOnClick();\r\n            this._moved = false;\r\n        }\r\n    }\r\n\r\n    onMouseMove(e) {\r\n        if (!this.state.down) {\r\n            return;\r\n        }\r\n        const {clientX, clientY} = e;\r\n        const dx = this.startPos.x - clientX;\r\n        const dy = this.startPos.y - clientY;\r\n        let {right, bottom} = this.defaultPosition;\r\n        right += dx;\r\n        bottom += dy;\r\n        this.setState({\r\n            position: {\r\n                right,\r\n                bottom,\r\n            }\r\n        });\r\n        this._moved = true;\r\n    }\r\n}\r\n\r\nexport default FloatButton;\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Card, Flex, List, Modal, Switch, Toast} from \"antd-mobile\";\r\nimport {asyncFetchSensors, setTabBarState, setTitle, toggleSensorElable} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {reloadSensors} from \"../../../api/sensor\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSensors: (...args) => dispatch(asyncFetchSensors(...args)),\r\n        toggleSensorElable: (...args) => dispatch(toggleSensorElable(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    }\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        sensors: state.sensors,\r\n    };\r\n};\r\n\r\nclass SensorSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Sensor Setting');\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.props;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <List renderHeader={() => 'Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => (<List.Item key={sensor.id}>\r\n                            <Card>\r\n                                <Card.Header title={`Address:${sensor.address}`} extra={sensor.deviceSn}/>\r\n                                <Card.Body>\r\n                                    <Flex justify=\"between\">\r\n                                        <span>ELabel</span>\r\n                                        <Switch checked={sensor.hasElabel}\r\n                                                onChange={(e) => this.toggleElabel(sensor, e)}\r\n                                                platform=\"android\"/>\r\n                                    </Flex>\r\n                                </Card.Body>\r\n                                <Card.Footer content={`Slot:[${sensor.slot && sensor.slot.slotNo}]`}\r\n                                             extra={sensor.slot && sensor.slot.id}/>\r\n                            </Card>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationActions()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchSensors();\r\n    }\r\n\r\n    toggleElabel(sensor, e) {\r\n        this.props.toggleSensorElable(sensor.id, e);\r\n    }\r\n\r\n    showOperationActions() {\r\n        const buttons = ['Reload Sensors', 'Cancel'];\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: 'Operations',\r\n            options: buttons,\r\n            cancelButtonIndex: buttons.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            if (index === 0) {\r\n                this.callReloadSensors();\r\n            }\r\n        })\r\n    }\r\n\r\n    callReloadSensors() {\r\n        Modal.alert('Reload', 'Are you sure to reload?',\r\n            [\r\n                {\r\n                    text: 'Yes', onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('Reload Success!', 1, false);\r\n                        })\r\n                    }\r\n                },\r\n                {\r\n                    text: 'Cancel', onPress: () => {\r\n                        Toast.show('Cancel', 1, false);\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(SensorSetting);\r\n","import React, {Component} from 'react';\r\nimport {List} from \"antd-mobile\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nclass SettingMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Setting');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"setting\">\r\n                <List renderHeader={() => 'Settings:'}>\r\n                    <List.Item onClick={() => this.go('/setting/sensor')} arrow=\"horizontal\">\r\n                        Sensors\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/slot')} arrow=\"horizontal\">\r\n                        Slots\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/connection')} arrow=\"horizontal\">\r\n                        Connections\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/system')} arrow=\"horizontal\">\r\n                        System Info\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\" onClick={() => this.go('/setting/system-check')}>\r\n                        System Check\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/overview')} arrow=\"horizontal\">\r\n                        Overview\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    go(path) {\r\n        this.props.history.push({\r\n            pathname: path\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SettingMenu));\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Flex, Icon, List, Toast} from 'antd-mobile';\r\nimport {doZeroAll, fetchAllSlots} from '../../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport './SlotSetting.sass';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst OperationActions = ['Refresh', 'Do Zero All', 'Cancel'];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slots: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(false);\r\n        this.props.setTitle('Slot Settings');\r\n        this.fetchSlots();\r\n    }\r\n\r\n    render() {\r\n        const {slots} = this.state;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <List renderHeader={() => 'Slot List'}>\r\n                    {\r\n                        slots.map(slot => (\r\n                            <Item key={slot.id} extra={<Icon type=\"right\"/>} onClick={() => this.toSlotDetail(slot)}>\r\n                                <Flex justify=\"between\">\r\n                                    <span className=\"slotNo\">{slot.slotNo}</span>\r\n                                    <span className=\"name\">{slot.skuName}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationSheet()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showOperationSheet() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: OperationActions,\r\n            title: 'Operations',\r\n            cancelButtonIndex: OperationActions.length - 1,\r\n            destructiveButtonIndex: 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.fetchSlots();\r\n                    break;\r\n                case 1:\r\n                    this.doZeroAll();\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        })\r\n    }\r\n\r\n    toSlotDetail(slot) {\r\n        this.props.history.push({\r\n            pathname: `/setting/slot-detail/${slot.id}`,\r\n        });\r\n    }\r\n\r\n    doZeroAll() {\r\n        doZeroAll().then(() => {\r\n            Toast.show('All Zeroed!');\r\n        })\r\n    }\r\n\r\n    fetchSlots() {\r\n        fetchAllSlots().then(res => {\r\n            const slots = res.sort((a, b) => a.slotNo.localeCompare(b.slotNo));\r\n            this.setState({slots})\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotSetting));\r\n","import React, {Component} from 'react';\r\nimport {asyncDeleteConnection, asyncFetchConnection, setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Flex, Icon, InputItem, List, Modal, Picker, Toast} from 'antd-mobile';\r\nimport {asConnectionType} from '../../../util/DataConvertor';\r\nimport './ConnectionSetting.sass'\r\nimport {createConnection, scanDevice, scanPort} from '../../../api/connection';\r\nimport {connect} from 'react-redux';\r\n\r\nconst ConnectionOperations = [\r\n    'Delete',\r\n    'Start Scan',\r\n    'Cancel',\r\n];\r\nconst connectionTypes = [\r\n    {\r\n        label: 'Serial',\r\n        value: 1,\r\n    },\r\n    {\r\n        label: 'Network',\r\n        value: 2,\r\n    }\r\n];\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchConnection: (...args) => dispatch(asyncFetchConnection(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        deleteConnection: (...args) => dispatch(asyncDeleteConnection(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        connections: state.connections,\r\n    };\r\n};\r\n\r\nclass ConnectionSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            createDialogVisible: false,\r\n            create: {\r\n                type: null,\r\n                target: ''\r\n            },\r\n            serialPorts: []\r\n        };\r\n        this.props.setTitle('Connection Setting');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchConnection();\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {connections} = this.props;\r\n        const {createDialogVisible} = this.state;\r\n        const {create} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Connections'}>\r\n                    {\r\n                        connections.map(connection => (\r\n                            <Item key={connection.id} extra={<Icon type=\"right\"/>}\r\n                                  onClick={() => this.showConnectionOperations(connection)}>\r\n                                <Flex justify=\"between\" className=\"connectionItem\">\r\n                                    <span className=\"type\">{asConnectionType(connection.type)}</span>\r\n                                    <span className=\"target\">{connection.target}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                    <Item key=\"createButton\">\r\n                        <Button type=\"primary\" onClick={() => this.showCreateDialog()}>New</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={createDialogVisible}\r\n                    transparent\r\n                    title=\"Create A Connection\"\r\n                    footer={[\r\n                        {text: 'Cancel', onPress: () => this.setState({createDialogVisible: false})},\r\n                        {text: 'Create', onPress: () => this.createConnection()},\r\n                    ]}\r\n                    onClose={() => this.setState({createDialogVisible: false})}>\r\n                    <List title=\"Connection\">\r\n                        <Picker data={connectionTypes} title=\"Connection Type\" cols={1}\r\n                                extra=\"Choose\"\r\n                                onChange={e => this.setCreateType(e)}>\r\n                            <List.Item>\r\n                                <InputItem value={create.type && asConnectionType(create.type)}\r\n                                           disabled={true}\r\n                                           placeholder=\"Type\"/>\r\n                            </List.Item>\r\n                        </Picker>\r\n                        {\r\n                            (() => {\r\n                                const input = (<List.Item key=\"target\"><InputItem placeholder=\"Connection Target\"\r\n                                                                                  onChange={e => this.setCreateTarget(e)}\r\n                                                                                  value={create.target}\r\n                                                                                  disabled={this.state.create.type === 1}/></List.Item>);\r\n                                if (create.type === 1) {\r\n                                    return (<Picker data={this.state.serialPorts}\r\n                                                    extra=\"Choose\"\r\n                                                    title=\"Serial Port List\"\r\n                                                    cols={1}\r\n                                                    onChange={arr => this.setCreateTargetSerial(arr)}>\r\n                                        {input}\r\n                                    </Picker>)\r\n                                } else {\r\n                                    return input;\r\n                                }\r\n                            })()\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    deleteConnection(connection) {\r\n        Modal.alert('Delete Connection!', 'Are You Sure delete this connection',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                    onPress: () => {\r\n                        Toast.show('Canceled', 1, false);\r\n                    }\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => {\r\n                        this.props.deleteConnection(connection.id);\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    scanConnection(connection) {\r\n        Modal.alert('Scan Device!', 'Scan Devices for this Connection?',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                    onPress: () => {\r\n                        Toast.show('Canceled', 1, false);\r\n                    }\r\n                },\r\n                {\r\n                    text: 'Scan',\r\n                    onPress: () => {\r\n                        scanDevice(connection.id).then(() => {\r\n                            Toast.show('Scan Success!', 2, false)\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    showCreateDialog() {\r\n        this.setState({\r\n            createDialogVisible: true\r\n        })\r\n    }\r\n\r\n    createConnection() {\r\n        createConnection(this.state.create).then(() => {\r\n            this.props.fetchConnection();\r\n            this.setState({\r\n                create: {},\r\n                createDialogVisible: false,\r\n            });\r\n        })\r\n    }\r\n\r\n    setCreateType(types) {\r\n        if (types.length < 1) {\r\n            Toast.show('Please Choose A Connection Type!');\r\n        }\r\n        const type = types[0];\r\n        const newCreate = {\r\n            type,\r\n            target: ''\r\n        };\r\n        this.setState({create: newCreate});\r\n        if (type === 1 && this.state.serialPorts.length <= 0) {\r\n            scanPort().then(res => {\r\n                const serialPorts = [];\r\n                for (const port of res) {\r\n                    serialPorts.push({\r\n                        label: port,\r\n                        value: port,\r\n                    });\r\n                }\r\n                this.setState({serialPorts});\r\n            });\r\n        }\r\n    }\r\n\r\n    setCreateTarget(e) {\r\n        const create = {\r\n            ...this.state.create,\r\n            target: e,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    setCreateTargetSerial(serialIndexList) {\r\n        if (!serialIndexList) {\r\n            Toast.show('Please Choose A Serial Port!');\r\n            return;\r\n        }\r\n        const port = serialIndexList[0];\r\n        const create = {\r\n            ...this.state.create,\r\n            target: port,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    showConnectionOperations(connection) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: `${connection.target} Operations`,\r\n            options: ConnectionOperations,\r\n            cancelButtonIndex: ConnectionOperations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.deleteConnection(connection);\r\n                    break;\r\n                case 1:\r\n                    this.scanConnection(connection);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(ConnectionSetting);\r\n","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDetail, toggleELabelState, updateSlot, zeroOne} from '../../../api/slot';\r\nimport {ActionSheet, Button, InputItem, List, Switch, Toast, WingBlank} from 'antd-mobile';\r\nimport {setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst ActionButtons = [\r\n    'Do Zero',\r\n    'Delete',\r\n    'Cancel',\r\n];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotDetailSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {}\r\n        };\r\n        this.slotId = this.props.match.params.id;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle(`${this.slotId} Settings`);\r\n        this.fetchSlotInfo();\r\n    }\r\n\r\n    fetchSlotInfo() {\r\n        fetchDetail(this.slotId).then(res => {\r\n            this.setState({slot: res});\r\n            this.props.setTitle(`${res.slotNo} Settings`);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {slot} = this.state;\r\n        return (\r\n            <div className=\"slotDetail\">\r\n                <List renderHeader={() => 'Slot Info'}>\r\n                    <Item key=\"slotNo\">\r\n                        <InputItem placeholder=\"Slot No\" value={slot.slotNo}\r\n                                   onChange={text => this.setUpdateSlotProp({slotNo: text})}>SlotNo</InputItem>\r\n                    </Item>\r\n                    <Item key=\"SkuName\">\r\n                        <InputItem placeholder=\"Sku Name\" value={slot.skuName}\r\n                                   onChange={text => this.setUpdateSlotProp({skuName: text})}>SKUName</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuNo\">\r\n                        <InputItem placeholder=\"SKU No\" value={slot.skuNo}\r\n                                   onChange={text => this.setUpdateSlotProp({skuNo: text})}>SKUNo</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuApw\">\r\n                        <InputItem placeholder=\"SKU Apw\" value={slot.skuApw}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuApw: text})}>Apw</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuTolerance\">\r\n                        <InputItem placeholder=\"SKU Tolerance\" value={slot.skuTolerance}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuTolerance: text})}>Tolerance</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuShelfLifeOpenDays\">\r\n                        <InputItem placeholder=\"SKU ShelfLifeOpenDays\" value={slot.skuShelfLifeOpenDays}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuShelfLifeOpenDays: text})}>\r\n                            SLO Days\r\n                        </InputItem>\r\n                    </Item>\r\n                    <Item key=\"applyBtn\">\r\n                        <WingBlank><Button type=\"primary\" onClick={() => this.applyModify()}>Apply\r\n                            Modify</Button></WingBlank>\r\n                    </Item>\r\n                </List>\r\n                <List renderHeader={() => 'Operations'}>\r\n                    <List.Item\r\n                        key=\"hasELabel\"\r\n                        extra={<Switch\r\n                            checked={slot.hasElabel}\r\n                            onChange={state => this.toggleELabel(state)}\r\n                            platform=\"android\"/>}>\r\n                        Enable ELabel\r\n                    </List.Item>\r\n                    <List.Item\r\n                        arrow=\"horizontal\"\r\n                        onClick={() => this.props.history.push({pathname: `/setting/slot-sensors/${slot.id}`})}>\r\n                        Sensors\r\n                    </List.Item>\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.openOperation()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    openOperation() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: 'Operations',\r\n            options: ActionButtons,\r\n            destructiveButtonIndex: 1,\r\n            cancelButtonIndex: ActionButtons.length - 1,\r\n        }, buttonIndex => {\r\n            const button = ActionButtons[buttonIndex];\r\n            if (button === 'Do Zero') {\r\n                this.doZero();\r\n            } else if (button === 'Delete') {\r\n                Toast.show('Unable To Delete!');\r\n            }\r\n        });\r\n    }\r\n\r\n    doZero() {\r\n        const {slot} = this.state;\r\n        zeroOne(slot.slotNo).then(() => {\r\n            Toast.show('Do Zero Success!');\r\n        });\r\n    }\r\n\r\n    setUpdateSlotProp(props) {\r\n        const slot = {\r\n            ...this.state.slot,\r\n            ...props\r\n        };\r\n        this.setState({slot});\r\n    }\r\n\r\n    applyModify() {\r\n        updateSlot(this.state.slot).then(() => {\r\n            Toast.show('Apply Success!');\r\n        });\r\n    }\r\n\r\n    toggleELabel(hasELabel) {\r\n        toggleELabelState({id: this.slotId, hasELabel}).then(() => {\r\n            Toast.show('Toggle ELabel Success!');\r\n            this.fetchSlotInfo();\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotDetailSetting));\r\n","import React, {Component} from 'react';\r\nimport {Button, Icon, List, Modal, Switch, TextareaItem, Toast} from 'antd-mobile';\r\nimport {setEnableTabBarAction, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {fetchSystemInfo} from '../../../api/dashboard';\r\nimport {reloadLibPath} from '../../../api/serial';\r\nimport {stopWeightService} from '../../../api/sensor';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setEnableTabBar: (...args) => dispatch(setEnableTabBarAction(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass SystemSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemInfo: {},\r\n            killButtonState: true,\r\n            libLoadVisible: false,\r\n            reloadLibPath: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('System Infos');\r\n        fetchSystemInfo().then(res => {\r\n            this.setState({\r\n                systemInfo: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {systemInfo, libLoadVisible, reloadLibPath} = this.state;\r\n        const {enableTabBar} = this.props;\r\n        return (\r\n            <div className=\"systemSettings\">\r\n                <List renderHeader={() => 'System Infos'}>\r\n                    <Item key=\"appName\" extra={systemInfo.appName}>APPName</Item>\r\n                    <Item key=\"appVersion\" extra={systemInfo.appVersion}>APPVersion</Item>\r\n                    <Item key=\"dbVersion\" extra={systemInfo.dbVersion}>DBVersion</Item>\r\n                    <Item key=\"dbVersionName\" extra={systemInfo.dbVersionName}>DBVersionName</Item>\r\n                    <Item key=\"pid\" extra={systemInfo.pid}>ProcessID</Item>\r\n                    <Item key=\"libPath\" extra={<Icon type=\"right\"/>}\r\n                          onClick={() => this.showLibLoadModal()}> LibPath: {systemInfo.libPath}</Item>\r\n                    <Item key=\"kill\">\r\n                        <Button type=\"warning\" onClick={() => this.killProcess()}\r\n                                disabled={!this.state.killButtonState}>Kill Process</Button>\r\n                    </Item>\r\n                </List>\r\n                <List renderHeader={() => 'Settings'}>\r\n                    <Item\r\n                        key=\"tabBar\"\r\n                        extra={<Switch\r\n                            checked={enableTabBar}\r\n                            onChange={target => this.setEnableTabBar(target)}\r\n                            platform=\"android\"/>}>\r\n                        EnableTabBar\r\n                    </Item>\r\n                    <Item key=\"systemProps\" extra={<Icon type=\"right\"/>}\r\n                          onClick={() => this.props.history.push({pathname: '/setting/system-props'})}>\r\n                        System Props\r\n                    </Item>\r\n                    <Item key=\"stopService\">\r\n                        <Button type=\"warning\" onClick={() => this.stopWeightService()}>Stop Weight Service</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={libLoadVisible}\r\n                    title=\"Reload SerialPort Library\"\r\n                    transparent\r\n                    maskClosable={true}\r\n                    footer={[\r\n                        {\r\n                            text: 'Cancel',\r\n                            onPress: () => this.setState({libLoadVisible: false})\r\n                        },\r\n                        {\r\n                            text: 'Reload',\r\n                            onPress: () => this.reloadLibrary()\r\n                        },\r\n                    ]}>\r\n                    <TextareaItem\r\n                        placeholder=\"Type the SerialPort library Path!\"\r\n                        autoHeight\r\n                        value={reloadLibPath} onChange={e => this.setState({reloadLibPath: e})}/>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    killProcess() {\r\n        Toast.show('Do not kill this process!', 1, false);\r\n        this.setState({\r\n            killButtonState: false\r\n        });\r\n    }\r\n\r\n    setEnableTabBar(target) {\r\n        this.props.setEnableTabBar(target);\r\n    }\r\n\r\n    showLibLoadModal() {\r\n        const reloadLibPath = this.state.systemInfo.libPath;\r\n        this.setState({\r\n            reloadLibPath,\r\n            libLoadVisible: true\r\n        });\r\n    }\r\n\r\n    reloadLibrary() {\r\n        reloadLibPath(this.state.reloadLibPath).then(res => {\r\n            Toast.show(`Success: [${res}]`);\r\n            this.setState({\r\n                libLoadVisible: false,\r\n            })\r\n        })\r\n    }\r\n\r\n    stopWeightService() {\r\n        stopWeightService().then(() => {\r\n            Toast.show(\"Stop Weight Service Success!\");\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props, mapAction2Props)(SystemSetting));\r\n","import {request} from './request';\r\n\r\nexport const reloadLibPath = path => {\r\n    return request({\r\n        url: '/api/serial/load-lib',\r\n        method: 'post',\r\n        data: {\r\n            libPath: path\r\n        }\r\n    })\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchSystemProps} from '../.././../api/dashboard';\r\nimport {List, TextareaItem} from 'antd-mobile';\r\n\r\nconst {Item} = List;\r\n\r\nclass SystemPropsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemProps: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchSystemProps().then(res => {\r\n            const propList = [];\r\n            for (const name in res) {\r\n                if (res.hasOwnProperty(name)) {\r\n                    propList.push({\r\n                        name,\r\n                        value: res[name],\r\n                    });\r\n                }\r\n            }\r\n            this.setState({\r\n                systemProps: propList\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {systemProps} = this.state;\r\n        return (\r\n            <div className=\"systemProps\">\r\n                <List renderHeader={() => 'System Properties'}>\r\n                    {\r\n                        systemProps.map(p => (<Item key={p.name}>\r\n                            <div>{p.name}</div>\r\n                            <TextareaItem value={p.value} autoHeight labelNumber={5}/>\r\n                        </Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SystemPropsSetting;\r\n","import React, {Component} from 'react';\r\nimport {fetchAllWithSensors, fetchDetail} from '../../../api/slot';\r\nimport {setSlotByIds} from '../../../api/sensor';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Flex, List, Modal, Picker, Toast, WingBlank} from \"antd-mobile\";\r\nimport './SlotSensorsSetting.sass'\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\nconst SENSOR_OPERATIONS = ['Remove', 'Cancel'];\r\n\r\nclass SlotSensorsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {},\r\n            sensors: [],\r\n            sensorRemoveMode: false,\r\n            allSlots: [],\r\n            sensorPickerData: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('Sensors');\r\n        const {id} = this.props.match.params;\r\n        fetchDetail(id).then(res => {\r\n            const sensors = res.sensors;\r\n            for (let sensor of sensors) {\r\n                sensor.changed = false;\r\n            }\r\n            this.setState({\r\n                slot: res,\r\n                sensors: sensors,\r\n            });\r\n            this.props.setTitle(`Sensors For ${res.slotNo}`);\r\n        });\r\n        fetchAllWithSensors().then(res => {\r\n            const pickerData = [];\r\n            for (let slot of res) {\r\n                const sensors = slot.sensors;\r\n                const children = [];\r\n                for (let sensor of sensors) {\r\n                    children.push({\r\n                        value: sensor.id,\r\n                        label: sensor.address,\r\n                    });\r\n                }\r\n                pickerData.push({\r\n                    value: slot.id,\r\n                    label: slot.slotNo,\r\n                    children: children,\r\n                });\r\n            }\r\n            this.setState({allSlots: res, sensorPickerData: pickerData,});\r\n        });\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {sensorRemoveMode, sensorPickerData} = this.state;\r\n        const sensorItem = (\r\n            <List.Item key={sensor.id}\r\n                       arrow=\"horizontal\"\r\n                       className={`sensor-item ${sensor.changed ? 'sensor-item-changed' : ''}`}\r\n                       onClick={() => this.openSensorOperations(sensor)}\r\n                       extra={sensorRemoveMode ? 'Click to remove' : ''}>\r\n                {sensor.deviceSn}\r\n            </List.Item>);\r\n        if (sensorRemoveMode) {\r\n            return sensorItem;\r\n        } else {\r\n            return (<Picker\r\n                data={sensorPickerData}\r\n                key={sensor.id}\r\n                value={[sensor.slotId, sensor.id]}\r\n                cols={2}\r\n                onChange={v => this.onSelectSensor(sensor, v)}>{sensorItem}</Picker>)\r\n        }\r\n    }\r\n\r\n    onSelectSensor(oldSensor, selected) {\r\n        const slotId = selected[0];\r\n        const sensorId = selected[1];\r\n        let index = -1;\r\n        const selectedSensors = this.state.sensors;\r\n        for (let i in selectedSensors) {\r\n            if (!selectedSensors.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            const sensor = selectedSensors[i];\r\n            if (sensor.id === oldSensor.id) {\r\n                index = i;\r\n            }\r\n        }\r\n        let selectedSensor;\r\n        for (let slot of this.state.allSlots) {\r\n            if (slot.id === slotId) {\r\n                for (let sensor of slot.sensors) {\r\n                    if (sensor.id === sensorId) {\r\n                        sensor.changed = true;\r\n                        selectedSensor = sensor;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let s of selectedSensors) {\r\n            if (s.id === selectedSensor.id) {\r\n                Toast.show('Duplicate Sensor!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        selectedSensors[index] = selectedSensor;\r\n        this.setState({sensors: selectedSensors,})\r\n    }\r\n\r\n    render() {\r\n        const {slot, sensors, sensorRemoveMode} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Slot Info'}>\r\n                    <List.Item extra={slot.slotNo}>Slot NO</List.Item>\r\n                    <List.Item extra={slot.skuName}>SKU Name</List.Item>\r\n                    <List.Item extra={slot.skuNo}>SKU NO</List.Item>\r\n                </List>\r\n                <List renderHeader={() => 'Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => this.renderSensorItem(sensor))\r\n                    }\r\n                    <List.Item>\r\n                        <WingBlank>\r\n                            <Flex justify={\"between\"}>\r\n                                <Flex.Item>\r\n                                    <Button type=\"warning\"\r\n                                            onClick={() => this.setState({sensorRemoveMode: !this.state.sensorRemoveMode})}>\r\n                                        {sensorRemoveMode ? 'Cancel' : 'Remove'}\r\n                                    </Button>\r\n                                </Flex.Item>\r\n                                <Flex.Item>\r\n                                    <Button type=\"ghost\" onClick={() => this.addSensor()}\r\n                                            disabled={sensorRemoveMode}>Add</Button>\r\n                                </Flex.Item>\r\n                                <Flex.Item>\r\n                                    <Button type=\"primary\" disabled={sensorRemoveMode}\r\n                                            onClick={() => this.applySensors()}>Apply</Button>\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </WingBlank>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    addSensor() {\r\n        for (let sensor of this.state.sensors) {\r\n            if (sensor.id < 0) {\r\n                Toast.show('Please select a sensor!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        const {sensors} = this.state;\r\n        sensors.push({\r\n            id: -1,\r\n            deviceSn: 'Not Selected',\r\n            changed: true,\r\n        });\r\n        this.setState({sensors});\r\n    }\r\n\r\n    openSensorOperations(sensor) {\r\n        const {sensorRemoveMode} = this.state;\r\n        if (!sensorRemoveMode) {\r\n            return;\r\n        }\r\n        ActionSheet.showActionSheetWithOptions(\r\n            {\r\n                options: SENSOR_OPERATIONS,\r\n                title: `Sensor ${sensor.deviceSn}`,\r\n                cancelButtonIndex: 2,\r\n                destructiveButtonIndex: 0,\r\n            },\r\n            index => {\r\n                if (index === 0) {\r\n                    Modal.alert('Remove',\r\n                        `Remove sensor ${sensor.deviceSn}?`,\r\n                        [\r\n                            {text: 'Cancel'},\r\n                            {\r\n                                text: 'Remove',\r\n                                onPress: () => this.removeSensor(sensor),\r\n                            }\r\n                        ]);\r\n                }\r\n            })\r\n    }\r\n\r\n    removeSensor(sensor) {\r\n        const {sensors} = this.state;\r\n        const newSensors = [];\r\n        for (let i in sensors) {\r\n            if (!sensors.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            const s = sensors[i];\r\n            if (s.id === sensor.id) {\r\n                continue;\r\n            }\r\n            newSensors.push(s);\r\n        }\r\n        this.setState({sensors: newSensors});\r\n    }\r\n\r\n    applySensors() {\r\n        const sensorIds = this.state.sensors.map(v => v.id);\r\n        for (let id of sensorIds) {\r\n            if (id <= 0) {\r\n                Toast.show('Any sensor not selected!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        const slot = this.state.slot;\r\n        Modal.alert('Apply Sensor Setting', 'Do you want to apply this changes?', [{text: 'Cancel'}, {\r\n            text: 'Apply',\r\n            onPress: () => {\r\n                setSlotByIds(sensorIds, slot.id).then(res => {\r\n                    Toast.show('Apply Success!');\r\n                    const {sensors} = this.state;\r\n                    for (let s of sensors) {\r\n                        s.changed = false;\r\n                    }\r\n                    this.setState({sensors});\r\n                })\r\n            }\r\n        }])\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SlotSensorsSetting);\r\n","import React, {Component} from 'react';\r\nimport {dumpAll} from '../../../api/sensor';\r\nimport {Button, List, Modal, TextareaItem, WingBlank} from 'antd-mobile';\r\n\r\nclass Overview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        dumpAll().then(res => {\r\n            const sensors = res.sort((a, b) => a.address - b.address);\r\n            this.setState({sensors})\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.state;\r\n        return (\r\n            <div className=\"overview\">\r\n                <List renderHeader={() => 'All Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => (\r\n                            <List.Item key={sensor.id}>\r\n                                {this.renderSensorItem(sensor)}\r\n                            </List.Item>\r\n                        ))\r\n                    }\r\n                </List>\r\n                <WingBlank>\r\n                    <Button onClick={() => this.refresh()} type=\"primary\">Refresh</Button>\r\n                </WingBlank>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {slot, connection} = sensor;\r\n        return (<div onClick={() => this.onSensorClick(sensor)}>\r\n            WS:[{sensor.id},{sensor.address}]\r\n            S:[{slot && slot.id},{slot && slot.slotNo}]\r\n            C:[{connection && connection.id},{connection && connection.target}]\r\n        </div>);\r\n    }\r\n\r\n    onSensorClick(sensor) {\r\n        const {connection, slot} = sensor;\r\n        sensor.slot = null;\r\n        sensor.connection = null;\r\n        const list = (<List renderHeader={() => 'Sensor'}>\r\n            <TextareaItem value={JSON.stringify(sensor)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(connection)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(slot)} autoHeight/>\r\n        </List>);\r\n        Modal.alert('Sensor', list);\r\n    }\r\n}\r\n\r\nexport default Overview;\r\n","import React, {Component} from 'react';\r\nimport {disconnectTcp, fetchDatabaseTables, fetchStatusTable} from '../../../api/systemStatus';\r\nimport {Button, Flex, List, Modal, Toast} from 'antd-mobile';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\nconst renderConnectionStatus = status => {\r\n    if (status) {\r\n        return (<span style={{color: '#1F90E6'}}>Connected</span>)\r\n    } else {\r\n        return (<span style={{color: '#E94F4F'}}>Disconnected</span>)\r\n    }\r\n};\r\n\r\nclass SystemCheck extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            statusTable: {\r\n                tcpApi: {},\r\n            },\r\n            databaseTables: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('System Check');\r\n        this.refreshStatusTable();\r\n    }\r\n\r\n    refreshStatusTable() {\r\n        fetchStatusTable().then(res => {\r\n            this.setState({\r\n                statusTable: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    refreshDatabaseTables() {\r\n        fetchDatabaseTables().then(res => {\r\n            this.setState({databaseTables: res,})\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {statusTable, databaseTables} = this.state;\r\n        const {tcpApi} = statusTable;\r\n        return (\r\n            <div className=\"system-check\">\r\n                <List renderHeader={() => 'TCP API'}>\r\n                    <List.Item extra={renderConnectionStatus(tcpApi.connection)}>\r\n                        TCP API Status\r\n                    </List.Item>\r\n                    <List.Item extra={tcpApi.ip}>\r\n                        IP\r\n                    </List.Item>\r\n                    <List.Item extra={tcpApi.port}>\r\n                        PORT\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\"\r\n                               onClick={() => this.props.history.push({pathname: '/setting/message-log'})}>\r\n                        Message Log\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <Flex justify=\"between\">\r\n                            <Flex.Item>\r\n                                <Button type=\"warning\" onClick={() => this.reconnectTcp()}>Reconnect</Button>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <Button type=\"primary\" onClick={() => this.refreshStatusTable()}>Refresh</Button>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </List.Item>\r\n                </List>\r\n                <List renderHeader={() => 'Database Tables'}>\r\n                    {databaseTables.map(tableName => (<List.Item key={tableName}>{tableName}</List.Item>))}\r\n                    <List.Item>\r\n                        <Button type=\"primary\" onClick={() => this.refreshDatabaseTables()}>Fetch Table List</Button>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    reconnectTcp() {\r\n        Modal.alert('Confirm', 'Disconnect TCP connection and reconnect?', [{text: 'Cancel'}, {\r\n            text: 'Yes', onPress() {\r\n                disconnectTcp().then(() => {\r\n                    Toast.show('Disconnect success! reconnect after 3 seconds!', 3, false);\r\n                });\r\n            }\r\n        }])\r\n    }\r\n}\r\n\r\nconst component = connect(null, mapAction2Props)(SystemCheck);\r\nexport default withRouter(component);\r\n","import {request} from './request';\r\n\r\nexport const fetchStatusTable = () => {\r\n    return request({\r\n        url: '/api/status/',\r\n        method: 'get',\r\n    })\r\n};\r\n\r\nexport const disconnectTcp = () => {\r\n    return request({\r\n        url: '/api/status/tcp-disconnect',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const fetchDatabaseTables = () => {\r\n    return request({\r\n        url: '/api/status/tables',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchMessageLog = () => {\r\n    return request({\r\n        url: '/api/status/message-log',\r\n        method: 'get',\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchMessageLog} from '../../../api/systemStatus';\r\nimport {Card, List, TextareaItem} from \"antd-mobile\";\r\nimport './MessageLog.sass'\r\n\r\nconst renderMessageItem = (message, index) => {\r\n    return (<List.Item key={index}>\r\n        <Card className=\"message-item\">\r\n            <Card.Header title={message.action} extra={message.type}/>\r\n            <Card.Body>\r\n                <TextareaItem value={JSON.stringify(message.data)} rows={3}/>\r\n            </Card.Body>\r\n            <Card.Footer content={message.seqNo}/>\r\n        </Card>\r\n    </List.Item>);\r\n};\r\n\r\nclass MessageLog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            logs: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshLogs();\r\n        this.refreshTimmer = setInterval(() => {\r\n            this.refreshLogs();\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.refreshTimmer);\r\n    }\r\n\r\n    refreshLogs() {\r\n        fetchMessageLog().then(res => {\r\n            this.setState({\r\n                logs: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {logs} = this.state;\r\n        return (\r\n            <div className=\"message-log\">\r\n                <List renderHeader={() => 'Message Logs'}>\r\n                    {\r\n                        logs.map(renderMessageItem)\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageLog;\r\n","import React, {Component} from 'react';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport SensorSetting from './setting/SensorSetting'\r\nimport SettingMenu from './setting/SettingMenu'\r\nimport SlotSetting from './setting/SlotSetting'\r\nimport ConnectionSetting from './setting/ConnectionSetting'\r\nimport SlotDetailSetting from './setting/SlotDetailSetting'\r\nimport SystemSetting from './setting/SystemSetting'\r\nimport SystemPropsSetting from './setting/SystemPropsSetting'\r\nimport SlotSensorsSetting from './setting/SlotSensorsSetting'\r\nimport Overview from './setting/Overview'\r\nimport SystemCheck from './setting/SystemCheck'\r\nimport MessageLog from './setting/MessageLog'\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n    };\r\n};\r\n\r\nclass Setting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/setting/\" component={SettingMenu} exact/>\r\n                    <Route path=\"/setting/sensor\" component={SensorSetting} exact/>\r\n                    <Route path=\"/setting/slot\" component={SlotSetting} exact/>\r\n                    <Route path=\"/setting/connection\" component={ConnectionSetting} exact/>\r\n                    <Route path=\"/setting/slot-detail/:id\" component={SlotDetailSetting} exact/>\r\n                    <Route path=\"/setting/system\" component={SystemSetting} exact/>\r\n                    <Route path=\"/setting/system-props\" component={SystemPropsSetting} exact/>\r\n                    <Route path=\"/setting/slot-sensors/:id\" component={SlotSensorsSetting} exact/>\r\n                    <Route path=\"/setting/overview\" component={Overview} exact/>\r\n                    <Route path=\"/setting/system-check\" component={SystemCheck} exact/>\r\n                    <Route path=\"/setting/message-log\" component={MessageLog} exact/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Setting);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Result, Toast} from \"antd-mobile\";\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Address extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Config Address');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Result\r\n                    img={<Icon type=\"check-circle\" size=\"lg\" style={{fill: '#1F90E6'}}/>}\r\n                    title=\"开发中\"\r\n                    message=\"开发中\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中',1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Address);\r\n","import React, {Component} from 'react';\r\nimport {setTitle} from \"../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport MessageLog from './setting/MessageLog';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Logs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Logs');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MessageLog/>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Logs);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {Carousel, NoticeBar, WhiteSpace, WingBlank} from 'antd-mobile';\r\nimport './About.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass About extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            drawerOpen: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('About');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"about\">\r\n                <NoticeBar marqueeProps={{loop: true,}}>磐石电气（常州）有限公司：http://www.monolith-iot.com</NoticeBar>\r\n                <WhiteSpace/>\r\n                <WingBlank>\r\n                    <Carousel\r\n                        autoplay={true}\r\n                        infinite\r\n                        className=\"headerCarousel\"\r\n                    >\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#FF9808'}}>\r\n                            <div className=\"title\">\r\n                                磐石电气（常州）有限公司\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#3171FA'}}>\r\n                            <div className=\"title\">\r\n                                MonolithIoT\r\n                            </div>\r\n                        </div>\r\n                    </Carousel>\r\n                </WingBlank>\r\n                <WingBlank className=\"article\">\r\n                    <h1 className=\"title\">关于我们</h1>\r\n                    <div className=\"text\">\r\n                        <p>\r\n                            磐石电气(常州)有限公司,是一家高科技智能测量装备研发及生产企业，把传统体积，重量的测量数字化物联网化，可以与WMS,ERP，SAP等企业管理软件相结合，便于企业更直观的管理自己的仓储，物流等。磐石电气下设研发部，工程部，业务部，有较强的设计，研发和生产能力，可为客户提供嵌入式计算机系统产品设计，开发，系统集成，工程实施等服务。\r\n                        </p>\r\n                        <p>\r\n                            随着公司的发展，主要产品有自主研发的智能数字卷尺，智能手动叉车秤，安卓智能称重终端，静态/动态DWS等各种物联网类智能称重量方设备及软件定制系统,可为客户最大程度地提供智能化系统化的测量系统解决方案。产品广泛应用于快递物流、生鲜供应、港口订舱、仓储、工业离散制造及各种以长度(含面\r\n                            积、体积)测量为手段的民用、商用用途中。凭着可靠的产品质量和良好的售后服务，我公司已与顺丰、中国邮政、京东、国际快递DHL、华为等多家知名企业合作。\r\n                        </p>\r\n                        <p>\r\n                            目前公司已申请中国专利24项,美国专利1项，并拥有一支以博士、硕士为主的优秀研发团队，具有较高的研发能力和管理水平，现有多名员工曾在外企作为技术骨干，承传欧美设计制造理念，并采用先进的产品生命周期管理（PLM），重视产品质量，为公司产品的技术引领、技术创新和公司的可持续发展奠定了坚实基础。\r\n                        </p>\r\n                    </div>\r\n                </WingBlank>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(About);\r\n","import React, {Component} from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Dashboard from './content/Dashboard'\r\nimport Setting from './content/Setting';\r\nimport Address from './content/Address';\r\nimport Logs from './content/Logs';\r\nimport About from './content/About';\r\nimport './AppContent.sass';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"appContent\">\r\n                {\r\n                    this.props.showHeader ? <div className=\"headerMask\"/> : null\r\n                }\r\n                <Switch>\r\n                    <Route path=\"/\" component={Dashboard} exact/>\r\n                    <Route path=\"/setting**\" component={Setting} exact/>\r\n                    <Route path=\"/address\" component={Address} exact/>\r\n                    <Route path=\"/logs\" component={Logs} exact/>\r\n                    <Route path=\"/about\" component={About} exact/>\r\n                </Switch>\r\n                <div className=\"tabBarMask\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, null)(AppContent);\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Icon, Modal, NavBar, Popover, Toast} from \"antd-mobile\";\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\nimport './AppHeader.sass';\r\nimport {reloadSensors} from \"../api/sensor\";\r\nimport {doZeroAll, setCompensationState} from '../api/slot';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        title: state.globalTitle,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\nconst CompensationActions = ['Enable', 'Disable', 'Cancel'];\r\n\r\nclass AppHeader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            popoverVisible: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.showHeader) {\r\n            return null;\r\n        }\r\n        const {title} = this.props;\r\n        return (\r\n            <div className=\"appHeader\">\r\n                <NavBar\r\n                    leftContent={<Icon type=\"left\" onClick={() => this.onBackClick()}/>}\r\n                    rightContent={this.rightContent()}\r\n                    mode=\"light\"\r\n                >{title}</NavBar>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    rightContent() {\r\n        const {popoverVisible} = this.state;\r\n        const Item = Popover.Item;\r\n        return (<Popover mask\r\n                         visible={popoverVisible}\r\n                         overlay={[\r\n                             (<Item key=\"about\" value=\"about\"\r\n                                    data-seed=\"logId\">About</Item>),\r\n                             (<Item key=\"settings\" value=\"settings\"\r\n                                    style={{whiteSpace: 'nowrap'}}>Settings</Item>),\r\n                             (<Item key=\"reload\" value=\"reload\"\r\n                                    style={{whiteSpace: 'nowrap'}}>Reload</Item>),\r\n                             (<Item key=\"doZero\" value=\"reload\"\r\n                                    style={{whiteSpace: 'nowrap'}}>DoZero</Item>),\r\n                             (<Item key=\"compensation\" value=\"compensation\"\r\n                                    style={{whiteSpace: 'nowrap'}}>Compensation</Item>),\r\n                         ]}\r\n                         onSelect={e => this.onPopoverSelect(e)}\r\n        >\r\n            <Icon type=\"ellipsis\"/>\r\n        </Popover>);\r\n    }\r\n\r\n    onBackClick() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    onPopoverSelect(e) {\r\n        switch (e.key) {\r\n            case 'about':\r\n                this.props.history.push({\r\n                    pathname: '/about',\r\n                });\r\n                break;\r\n            case 'settings':\r\n                this.props.history.push({\r\n                    pathname: '/setting/',\r\n                });\r\n                break;\r\n            case 'reload':\r\n                this.doReloadSensors();\r\n                break;\r\n            case 'doZero':\r\n                doZeroAll().then(() => {\r\n                    Toast.show('DoZero Success!', 1, false);\r\n                });\r\n                break;\r\n            case 'compensation':\r\n                this.showCompensationOperations();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({\r\n            popoverVisible: false\r\n        });\r\n    }\r\n\r\n    showCompensationOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: CompensationActions,\r\n            title: 'Compensation operations',\r\n            cancelButtonIndex: CompensationActions.length - 1,\r\n            destructiveButtonIndex: 1,\r\n        }, index => {\r\n            const name = CompensationActions[index];\r\n            switch (name) {\r\n                case 'Enable':\r\n                    this.doSetCompensationState(true);\r\n                    break;\r\n                case 'Disable':\r\n                    this.doSetCompensationState(false);\r\n                    break;\r\n                default:\r\n                    break\r\n            }\r\n        });\r\n    }\r\n\r\n    doSetCompensationState(state) {\r\n        setCompensationState(state).then(() => {\r\n            const message = (state ? 'Enable' : 'Disable') + ' Compensation Success!';\r\n            Toast.show(message, 1, false);\r\n        });\r\n    }\r\n\r\n    doReloadSensors() {\r\n        Modal.alert('Reload Sensors', 'Reload sensors from database into weightService',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                },\r\n                {\r\n                    text: 'Yes',\r\n                    onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('Reload Success!');\r\n                        });\r\n                    },\r\n                },\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props)(AppHeader));\r\n","import {createBrowserHistory} from 'history';\r\nimport {setRouterPath} from '../store/actionCreators'\r\nimport store from '../store';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst notifyPathChanged = location => {\r\n    const info = {\r\n        pathname: location.pathname,\r\n        search: location.search,\r\n        hash: location.hash\r\n    };\r\n    const action = setRouterPath(info);\r\n    store.dispatch(action);\r\n};\r\nhistory.listen((action) => {\r\n    notifyPathChanged(action.location);\r\n});\r\n\r\n\r\nnotifyPathChanged(history.location);\r\nexport default history;\r\n","import React from 'react'\nimport './App.css'\nimport store from './store'\nimport {Provider} from 'react-redux'\nimport AppTabBar from './component/AppTabBar'\nimport AppContent from './component/AppContent'\nimport AppHeader from './component/AppHeader'\nimport {HashRouter as Router} from 'react-router-dom'\nimport history from './util/History'\nimport {fetchEnableTabBarAction} from './store/actionCreators';\n\nclass App extends React.Component {\n    componentDidMount() {\n        store.dispatch(fetchEnableTabBarAction());\n    }\n\n    render() {\n        return (\n            <Router history={history}>\n                <Provider store={store}>\n                    <div className=\"app-content\">\n                        <AppHeader/>\n                        <AppContent/>\n                        <AppTabBar/>\n                    </div>\n                </Provider>\n            </Router>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import 'babel-polyfill'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n/*ReactDOM.render(\n    <React.StrictMode>\n        <App/>,\n    </React.StrictMode>,\n    document.getElementById('root')\n);*/\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}