{"version":3,"sources":["store/reducer.js","store/actionTypes.js","store/index.js","component/AppTabBar.jsx","api/request.js","util/httpUtils.js","api/dashboard.js","api/sensor.js","store/actionCreators.js","api/connection.js","api/config.js","util/DataConvertor.js","api/slot.js","component/content/Dashboard.jsx","component/commons/FloatButton.jsx","component/content/setting/SensorSetting.jsx","component/content/setting/SettingMenu.jsx","component/content/setting/SlotSetting.jsx","component/content/setting/ConnectionSetting.jsx","component/content/setting/SlotDetailSetting.jsx","component/content/setting/SystemSetting.jsx","api/serial.js","component/content/setting/SystemPropsSetting.jsx","component/content/setting/SlotSensorsSetting.jsx","component/content/setting/Overview.jsx","component/content/setting/SystemCheck.jsx","api/systemStatus.js","component/content/setting/MessageLog.jsx","component/content/setting/SensorHealthy.jsx","api/healthy.js","api/firmware.js","component/content/setting/SensorDetails.jsx","component/content/Setting.jsx","component/content/Address.jsx","component/content/Logs.jsx","component/content/About.jsx","component/AppContent.jsx","component/AppHeader.jsx","util/History.js","App.js","serviceWorker.js","index.js"],"names":["defaultState","showTabBar","enableTabBar","showHeader","globalTitle","routerPath","dashboardSlots","sensors","connections","user","name","actionTable","registerReducer","type","reducer","state","action","data","sensorId","hasElabel","sensor","id","JSON","parse","stringify","filter","connection","allEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","handler","AppTabBar","props","path","this","className","unselectedTintColor","tintColor","barTintColor","hidden","tabBarPosition","Item","title","selected","icon","selectedIcon","onPress","pushPath","setState","history","push","pathname","React","Component","withRouter","connect","hideLoading","hide","showError","msg","fail","request","options","showLoadingToast","loading","Promise","resolve","reject","axios","httpRequest","then","res","status","body","code","catch","err","errStr","toString","reloadSensors","url","method","setTabBarState","show","setTitle","asyncFetchDashboardSlotData","dispatch","slots","key","hasOwnProperty","sort","a","b","slotNo","localeCompare","asyncFetchSensors","address","toggleSensorElable","toggleElable","asyncFetchConnection","asyncDeleteConnection","deleteConnection","fetchEnableTabBarAction","value","setEnableTabBarAction","enable","setEnableTabBar","connectionTypes","1","2","asConnectionType","stateTable","3","4","5","asStateString","doZeroAll","zeroOne","encodedSlotNo","encodeURIComponent","fetchDetail","TabItems","Dashboard","rootEle","document","thSensors","sensorModalVisible","operationSlot","searchSkuNo","noticeSlots","renderSlotCard","bind","startFetchData","listenKeyPress","onkeypress","e","target","tagName","toLowerCase","keyCode","triggerHighlight","appendSearchSku","String","fromCharCode","c","clearInterval","fetchTimer","cancelKeyPress","fetchSlotData","setInterval","slotData","thData","temperatureHumidityData","temperature","humidity","toFixed","map","renderThSensorCard","groupedSlots","groups","putSlot","slot","noItems","match","groupSlots","highlightSlotIds","firstNoticeSlot","tabs","onChange","tab","index","onTabChange","onSubmit","renderNoticeBar","group","renderGroupItem","renderThSensors","visible","transparent","footer","text","doSlotZero","onClose","renderHeader","extra","deviceSn","Brief","address485","content","skuName","skuShelfLifeOpenDays","wrap","justify","sku","slotCardClassName","isWan","isDisable","isOffline","incredible","isIncredible","toleranceState","weightInKg","weight","count","isStable","weightState","asCount","skuNo","onClick","onSlotCardClick","trim","setTimeout","alert","callDoZero","component","FloatButton","defaultPosition","right","bottom","down","style","callOnClick","iconType","SensorSetting","Header","Body","checked","toggleElabel","platform","arrow","toSensorDetails","Footer","showOperationActions","fetchSensors","buttons","showActionSheetWithOptions","cancelButtonIndex","length","destructiveButtonIndex","callReloadSensors","SettingMenu","go","OperationActions","SlotSetting","fetchSlots","toSlotDetail","showOperationSheet","ConnectionOperations","label","ConnectionSetting","createDialogVisible","create","serialPorts","fetchConnection","showConnectionOperations","showCreateDialog","createConnection","cols","setCreateType","disabled","placeholder","input","setCreateTarget","arr","setCreateTargetSerial","types","newCreate","port","serialIndexList","connectionId","scanConnection","startScanTHSensors","ActionButtons","SlotDetailSetting","slotId","params","fetchSlotInfo","setUpdateSlotProp","skuApw","skuTolerance","applyModify","toggleELabel","openOperation","buttonIndex","button","doZero","hasELabel","option","SystemSetting","systemInfo","libLoadVisible","reloadLibPath","appName","appVersion","dbVersion","dbVersionName","pid","showLibLoadModal","libPath","stopWeightService","maskClosable","reloadLibrary","autoHeight","SystemPropsSetting","systemProps","propList","p","labelNumber","SENSOR_OPERATIONS","SlotSensorsSetting","sensorRemoveMode","allSlots","sensorPickerData","changed","pickerData","children","sensorItem","openSensorOperations","v","onSelectSensor","oldSensor","selectedSensor","selectedSensors","i","renderSensorItem","addSensor","applySensors","removeSensor","newSensors","s","sensorIds","setSlotByIds","Overview","refresh","onSensorClick","list","SystemCheck","statusTable","tcpApi","databaseTables","refreshStatusTable","color","ip","reconnectTcp","tableName","showDbResetConfirm","refreshDatabaseTables","doDbReset","renderMessageItem","message","rows","seqNo","MessageLog","logs","refreshLogs","refreshTimmer","operations","ClickOperations","UPGRADE_PROGRESS_STATE_TABLE","0","SensorHealthy","upgradePercent","upgradeProgress","refreshSensors","tryReleaseUpgradeProgressTimmer","upgradeFirmwareTimmer","clearTimeout","showUpgradeProgress","cb","upgradeProgressPercent","undefined","total","current","helthy","renderSensorCard","onUpgradeProgressModalClose","doAbortFirmwareUpgrade","percent","position","showOperations","healthy","upgradeFirmware","packageCounter","totalSuccess","totalErrors","errorsRate","warn","errorRateInPer","minRate","doFirmwareUpgrade","refreshUpgradeProgress","refreshUpgradeProgressCb","zeroOffset","zeroReference","successRate","elabelSuccess","elabelErrors","eLabelTotal","elabelSuccessRate","elabelErrorosRate","elabelContinueErrors","onCardClick","continueErrors","showCleanCounterConfirm","doCleanCounter","SensorDetails","sensorParams","refreshParams","param","Setting","exact","Address","img","size","fill","info","Logs","About","drawerOpen","marqueeProps","loop","autoplay","infinite","backgroundColor","AppContent","CompensationActions","AppHeader","popoverVisible","leftContent","onBackClick","rightContent","mode","mask","overlay","data-seed","whiteSpace","onSelect","onPopoverSelect","goBack","doReloadSensors","showZeroAllConfirm","showCompensationOperations","doSetCompensationState","enableCompensation","setCompensationState","createBrowserHistory","notifyPathChanged","location","setRouterPath","search","hash","listen","App","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.0bc517da.chunk.js","sourcesContent":["import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\n\r\nconst defaultState = {\r\n    showTabBar: true,\r\n    enableTabBar: false,\r\n    showHeader: true,\r\n    globalTitle: '重力货道',\r\n    routerPath: null,\r\n    dashboardSlots: [],\r\n    sensors: [],\r\n    connections: [],\r\n    user: {\r\n        name: 'MonolithIoT'\r\n    }\r\n};\r\nconst actionTable = {};\r\nconst registerReducer = (type, reducer) => {\r\n    actionTable[type] = reducer;\r\n};\r\nregisterReducer(SET_TABBAR_STATE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showTabBar: action.data\r\n    };\r\n});\r\nregisterReducer(SET_ROUTER_PATH, (state, action) => {\r\n    return {\r\n        ...state,\r\n        routerPath: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_DASHBOARD_SLOT_DATA, (state, action) => {\r\n    return {\r\n        ...state,\r\n        dashboardSlots: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(SET_TITLE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        globalTitle: action.data,\r\n    }\r\n});\r\nregisterReducer(ASYNC_FETCH_SENSORS, (state, action) => {\r\n    return {\r\n        ...state,\r\n        sensors: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(TOGGLE_SENSOR_ELABLE, (state, action) => {\r\n    const sensors = state.sensors;\r\n    const sensorId = action.data.sensorId;\r\n    const hasElabel = action.data.hasElabel;\r\n    for (let sensor of sensors) {\r\n        if (sensor.id === sensorId) {\r\n            sensor.hasElabel = hasElabel;\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        sensors: JSON.parse(JSON.stringify(sensors))\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_CONNECTION, (state, action) => {\r\n    return {\r\n        ...state,\r\n        connections: action.data,\r\n    };\r\n});\r\nregisterReducer(DELETE_CONNECTION, (state, action) => {\r\n    const id = action.data.id;\r\n    const connections = state.connections.filter(connection => connection.id !== id);\r\n    return {\r\n        ...state,\r\n        connections\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_TAB_BAR, (state, action) => {\r\n    return {\r\n        ...state,\r\n        enableTabBar: action.data,\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_HEADER, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showHeader: action.data\r\n    };\r\n});\r\nexport default (state = defaultState, action) => {\r\n    const type = action.type;\r\n    if (type in actionTable) {\r\n        const handler = actionTable[type];\r\n        return handler(state, action);\r\n    }\r\n    return state;\r\n}\r\n","export const SET_USER = \"user.set\";\r\n\r\nexport const SET_TABBAR_STATE = 'tabBar.set';\r\n\r\nexport const SET_ROUTER_PATH = 'router.path.set';\r\n\r\nexport const ASYNC_FETCH_DASHBOARD_SLOT_DATA = 'dashboard.slot_data.fetch.async';\r\n\r\nexport const SET_TITLE = 'title.set';\r\n\r\nexport const ASYNC_FETCH_SENSORS = 'sensors.fetch.async';\r\n\r\nexport const TOGGLE_SENSOR_ELABLE = 'sensor.elabel.toggle';\r\n\r\nexport const ASYNC_FETCH_CONNECTION = 'connections.fetch.async';\r\n\r\nexport const DELETE_CONNECTION = 'connection.delete';\r\n\r\nexport const SET_ENABLE_TAB_BAR = 'system.tabBar.set';\r\n\r\nexport const SET_ENABLE_HEADER = 'system.header.set';\r\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport reducer from './reducer';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst allEnhancers = reduxDevTools(applyMiddleware(thunk));\r\nconst store = createStore(reducer, allEnhancers);\r\n\r\nexport default store;\r\n","import React from 'react'\r\nimport {TabBar} from 'antd-mobile'\r\nimport {connect} from 'react-redux';\r\nimport './AppTabBar.sass'\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showTabBar: state.showTabBar,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass AppTabBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            path: '/',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const showTabBar = this.props.showTabBar && this.props.enableTabBar;\r\n        const {path} = this.state;\r\n        if (showTabBar) {\r\n            return (\r\n                <div className=\"appTabBar\">\r\n                    <TabBar\r\n                        unselectedTintColor=\"#949494\"\r\n                        tintColor=\"#33A3F4\"\r\n                        barTintColor=\"white\"\r\n                        hidden={!this.props.showTabBar}\r\n                        tabBarPosition=\"bottom\">\r\n                        <TabBar.Item title=\"Dashboard\"\r\n                                     selected={path === '/'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe64e;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe64e;</i>}\r\n                                     onPress={() => this.pushPath('/')}/>\r\n                        <TabBar.Item title=\"Logs\"\r\n                                     selected={path === '/logs'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe60c;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe60c;</i>}\r\n                                     onPress={() => this.pushPath('/logs')}/>\r\n                        <TabBar.Item title=\"Address\"\r\n                                     selected={path === '/address'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe61b;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe61b;</i>}\r\n                                     onPress={() => this.pushPath('/address')}/>\r\n                        <TabBar.Item title=\"Setting\"\r\n                                     selected={path === '/setting'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe660;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe660;</i>}\r\n                                     onPress={() => this.pushPath('/setting')}/>\r\n                    </TabBar>\r\n                </div>)\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    pushPath(path) {\r\n        this.setState({\r\n            path,\r\n        });\r\n        this.props.history.push({\r\n            pathname: path,\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(AppTabBar));\r\n","import {httpRequest} from '../util/httpUtils';\r\nimport {Toast} from 'antd-mobile'\r\n\r\nconst showLoading = () => {\r\n    Toast.loading('Loading', 0);\r\n};\r\nconst hideLoading = () => {\r\n    Toast.hide();\r\n};\r\nconst showError = (msg) => {\r\n    Toast.fail(msg);\r\n};\r\n\r\n\r\nexport function request(options) {\r\n    const showLoadingToast = !options.hideLoading;\r\n    if (showLoadingToast) {\r\n        showLoading();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        httpRequest(options)\r\n            .then(res => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                if (res.status !== 200) {\r\n                    showError(`Http Response Status:${res.status}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                const body = res.data;\r\n                if (body.code !== 200) {\r\n                    showError(`Error [${body.code}]:${body.msg}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                resolve(body.data);\r\n            }).catch(err => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                const errStr = err.toString();\r\n                showError(errStr);\r\n                reject(err);\r\n            }\r\n        );\r\n    })\r\n}\r\n","import axios from 'axios'\r\n\r\nexport function httpRequest(options) {\r\n    return axios(options);\r\n}\r\n","import {request} from './request';\r\n\r\nexport const fetchSlotData = () => {\r\n    return request({\r\n        url: '/api/dashboard/slot-data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchSystemInfo = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-infos',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchSystemProps = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-props',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDashboardData = () => {\r\n    return request({\r\n        url: '/api/dashboard/_data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/_with-slot',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const toggleElable = (sensorId, hasElabel) => {\r\n    return request({\r\n        url: `/api/sensor/${sensorId}/haselabel`,\r\n        method: 'post',\r\n        data: {\r\n            hasElabel: hasElabel\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const reloadSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/reload',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const setSlotByIds = (sensorIds, slotId) => {\r\n    return request({\r\n        url: '/api/sensor/_set-slot-id-by-ids',\r\n        method: 'post',\r\n        data: {\r\n            sensorIds,\r\n            slotId,\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const stopWeightService = () => {\r\n    return request({\r\n        url: '/api/sensor/_stop-weight-service',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const dumpAll = () => {\r\n    return request({\r\n        url: '/api/sensor/_dump-all',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const findSensorById = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n","import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    SET_USER,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\nimport {fetchSlotData} from '../api/dashboard';\r\nimport {fetchSensors, toggleElable} from '../api/sensor';\r\nimport {deleteConnection, fetchConnections} from '../api/connection';\r\nimport {fetchEnableTabBar, setEnableTabBar} from '../api/config';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: SET_USER,\r\n        data: user\r\n    }\r\n};\r\nexport const setTabBarState = show => {\r\n    return {\r\n        type: SET_TABBAR_STATE,\r\n        data: show\r\n    };\r\n};\r\n\r\nexport const setRouterPath = info => {\r\n    return {\r\n        type: SET_ROUTER_PATH,\r\n        data: info\r\n    };\r\n};\r\nexport const setTitle = title => {\r\n    return {\r\n        type: SET_TITLE,\r\n        data: title,\r\n    }\r\n};\r\nexport const asyncFetchDashboardSlotData = () => {\r\n    return dispatch => {\r\n        fetchSlotData().then(res => {\r\n            const slots = [];\r\n            for (const key in res) {\r\n                if (res.hasOwnProperty(key)) {\r\n                    slots.push(res[key]);\r\n                }\r\n            }\r\n            const action = {\r\n                type: ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n                data: slots.sort((a, b) => a.slotNo.localeCompare(b.slotNo)),\r\n            };\r\n            dispatch(action);\r\n        });\r\n    }\r\n};\r\n\r\nexport const asyncFetchSensors = () => {\r\n    return dispatch => {\r\n        fetchSensors().then(res => {\r\n            const sensors = res.sort((a, b) => a.address - b.address);\r\n            const action = {\r\n                type: ASYNC_FETCH_SENSORS,\r\n                data: sensors,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const toggleSensorElable = (sensorId, hasElabel) => {\r\n    return dispatch => {\r\n        toggleElable(sensorId, hasElabel).then(() => {\r\n            const action = {\r\n                type: TOGGLE_SENSOR_ELABLE,\r\n                data: {\r\n                    sensorId,\r\n                    hasElabel\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    };\r\n};\r\n\r\n\r\nexport const asyncFetchConnection = () => {\r\n    return dispatch => {\r\n        fetchConnections().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_CONNECTION,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const asyncDeleteConnection = id => {\r\n    return dispatch => {\r\n        deleteConnection(id).then(() => {\r\n            const action = {\r\n                type: DELETE_CONNECTION,\r\n                data: {\r\n                    id: id\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    }\r\n};\r\n\r\nexport const fetchEnableTabBarAction = () => {\r\n    return dispatch => {\r\n        fetchEnableTabBar().then(res => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: res.value === 'true',\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const setEnableTabBarAction = enable => {\r\n    return dispatch => {\r\n        setEnableTabBar(enable).then(() => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: enable,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const showHeader = show => {\r\n    return {\r\n        type: SET_ENABLE_HEADER,\r\n        data: show,\r\n    };\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchConnections = () => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const deleteConnection = id => {\r\n    return request({\r\n        url: `/api/connection/${id}`,\r\n        method: 'delete',\r\n    });\r\n};\r\n\r\nexport const createConnection = connection => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'put',\r\n        data: connection,\r\n    });\r\n};\r\n\r\n\r\nexport const scanPort = () => {\r\n    return request({\r\n        url: '/api/serial/scan',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const scanDevice = id => {\r\n    return request({\r\n        url: `/api/connection/${id}/_scan`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const startScanTempHumiSensors = connectionId => {\r\n    return request({\r\n        url: `/api/connection/${connectionId}/_scan-th-device`,\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\n\r\nexport const fetchEnableTabBar = () => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setEnableTabBar = enable => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'post',\r\n        data: {\r\n            value: enable,\r\n        },\r\n    });\r\n};\r\n","export const asKg = g => {\r\n    return (g / 1000.0).toFixed(3);\r\n};\r\n\r\nexport const isWan = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isIncredible = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isDisable = state => {\r\n    return state === 3;\r\n};\r\n\r\nexport const isOffline = state => {\r\n    return state === 2;\r\n};\r\n\r\nconst connectionTypes = {\r\n    1: 'Serial',\r\n    2: 'Network',\r\n};\r\n\r\nexport const asConnectionType = type => {\r\n    if (type in connectionTypes) {\r\n        return connectionTypes[type];\r\n    }\r\n    return `Unknown [${type}]`;\r\n};\r\n\r\nconst weightStateTable = {\r\n    1: 'stable',\r\n    2: 'dynamic',\r\n    3: 'underLoad',\r\n    4: 'overLoad',\r\n};\r\nexport const isStable = weightState => {\r\n    return weightState === 1;\r\n};\r\n\r\nexport const asWeightStateString = state => {\r\n    return state in weightStateTable ? weightStateTable[state] : state;\r\n};\r\n\r\n\r\nexport const groupSlots = slots => {\r\n    const groups = {};\r\n    const putSlot = (name, slot) => {\r\n        if (name in groups) {\r\n            groups[name].push(slot);\r\n        } else {\r\n            groups[name] = [slot];\r\n        }\r\n    };\r\n    for (let slot of slots) {\r\n        const slotNo = slot.slotNo;\r\n        const noItems = slotNo.match(/^(\\w+)-(\\d+)-(\\w+)$/);\r\n        if (noItems) {\r\n            const groupName = `${noItems[1]}货架第${noItems[2]}层`;\r\n            putSlot(groupName, slot);\r\n        } else {\r\n            putSlot('未分组货道', slot);\r\n        }\r\n    }\r\n    const res = [];\r\n    for (let name in groups) {\r\n        if (!groups.hasOwnProperty(name)) {\r\n            continue;\r\n        }\r\n        res.push({\r\n            name,\r\n            slots: groups[name],\r\n        });\r\n    }\r\n    return res;\r\n};\r\n\r\nconst stateTable = {\r\n    1: '使用中',\r\n    2: '离线',\r\n    3: '已停用',\r\n    4: '超载',\r\n    5: '欠载',\r\n};\r\nexport const asStateString = state => {\r\n    if (state in stateTable) {\r\n        return stateTable[state];\r\n    }\r\n    return 'Unknown State:' + state;\r\n};\r\n\r\nexport const asCount = data => {\r\n    const count = data.count;\r\n    const isStable = data.weightState === 1;\r\n    if (count === null) {\r\n        return '~❗';\r\n    }\r\n    if (isStable) {\r\n        return count;\r\n    }\r\n    return '~' + count;\r\n};\r\n","import {request} from './request';\r\n\r\nexport const doZeroAll = () => {\r\n    return request({\r\n        url: '/api/slot/zero-all',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const zeroOne = slotNo => {\r\n    const encodedSlotNo = encodeURIComponent(slotNo);\r\n    const apiUrl = `/api/slot/${encodedSlotNo}/zero`;\r\n    return request({\r\n        url: apiUrl,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllSlots = () => {\r\n    return request({\r\n        url: '/api/slot/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDetail = id => {\r\n    return request({\r\n        url: `/api/slot/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const updateSlot = slot => {\r\n    return request({\r\n        url: `/api/slot/${slot.id}`,\r\n        method: 'post',\r\n        data: slot\r\n    });\r\n};\r\n\r\n\r\nexport const toggleELabelState = option => {\r\n    return request({\r\n        url: `/api/slot/${option.id}/has-e-label`,\r\n        method: 'post',\r\n        data: {hasElabel: option.hasELabel},\r\n    });\r\n};\r\n\r\nexport const highlightBySku = sku => {\r\n    return request({\r\n        url: '/api/slot/highlight',\r\n        method: 'post',\r\n        data: {\r\n            skuNo: sku\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllWithSensors = () => {\r\n    return request({\r\n        url: '/api/slot/_with-sensors',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setCompensationState = state => {\r\n    return request({\r\n        url: '/api/slot/_all-compensation',\r\n        method: 'post',\r\n        data: {\r\n            enableCompensation: state,\r\n        }\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {asyncFetchDashboardSlotData, setTabBarState, setTitle, showHeader} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport './Dashboard.sass'\r\nimport {Flex, List, Modal, NoticeBar, SearchBar, Tabs, Toast, WingBlank} from 'antd-mobile';\r\nimport {\r\n    asCount,\r\n    asKg,\r\n    asStateString,\r\n    groupSlots,\r\n    isDisable,\r\n    isIncredible,\r\n    isOffline,\r\n    isWan\r\n} from '../../util/DataConvertor';\r\nimport {highlightBySku, zeroOne} from '../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDashboardData} from \"../../api/dashboard\";\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        slots: state.dashboardSlots\r\n    };\r\n};\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSlotData: (...args) => dispatch(asyncFetchDashboardSlotData(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        showHeader: (...args) => dispatch(showHeader(...args)),\r\n        showTabBar: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nconst TabItems = [\r\n    {\r\n        title: '重力货道数据',\r\n        key: 'dashboard',\r\n    },\r\n    {\r\n        title: '重力货道配置',\r\n        key: 'settings',\r\n    }\r\n];\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.rootEle = document;\r\n        this.state = {\r\n            slots: [],\r\n            thSensors: [],\r\n            sensors: [],\r\n            sensorModalVisible: false,\r\n            operationSlot: {},\r\n            searchSkuNo: '',\r\n            noticeSlots: [],\r\n        };\r\n        this.props.setTitle('Dashboard');\r\n        this.renderSlotCard = this.renderSlotCard.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startFetchData();\r\n        this.props.showHeader(false);\r\n        this.props.showTabBar(false);\r\n        this.listenKeyPress();\r\n    }\r\n\r\n    listenKeyPress() {\r\n        this.rootEle.onkeypress = e => {\r\n            const sourceTagName = e.target.tagName.toLowerCase();\r\n            if (sourceTagName !== 'body') {\r\n                return;\r\n            }\r\n            const keyCode = e.keyCode;\r\n            if (keyCode === 13) {\r\n                this.triggerHighlight(this.state.searchSkuNo);\r\n            } else {\r\n                this.appendSearchSku(String.fromCharCode(keyCode));\r\n            }\r\n        };\r\n    }\r\n\r\n    appendSearchSku(c) {\r\n        const {searchSkuNo} = this.state;\r\n        this.setState({\r\n            searchSkuNo: searchSkuNo + c,\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.fetchTimer);\r\n        this.props.showHeader(true);\r\n        this.props.showTabBar(true);\r\n        this.cancelKeyPress();\r\n    }\r\n\r\n    cancelKeyPress() {\r\n        this.rootEle.onkeypress = null;\r\n    }\r\n\r\n    startFetchData() {\r\n        this.props.fetchSlotData();\r\n        this.fetchTimer = setInterval(() => {\r\n            fetchDashboardData().then(res => {\r\n                const slotData = res.slotData;\r\n                const thData = res.temperatureHumidityData;\r\n                const slots = [];\r\n                const thSensors = [];\r\n                for (let slotNo in slotData) {\r\n                    if (slotData.hasOwnProperty(slotNo)) {\r\n                        slots.push(slotData[slotNo]);\r\n                    }\r\n                }\r\n                for (let id in thData) {\r\n                    if (thData.hasOwnProperty(id)) {\r\n                        thSensors.push(thData[id]);\r\n                    }\r\n                }\r\n                this.setState({\r\n                    slots: slots,\r\n                    thSensors: thSensors,\r\n                });\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    renderThSensorCard(sensor) {\r\n        const {data} = sensor;\r\n        let {temperature, humidity} = data;\r\n        temperature = temperature && temperature.toFixed(1);\r\n        humidity = humidity && humidity.toFixed(1);\r\n        return (<div className=\"th-card\" key={sensor.id}>\r\n            <div className=\"card-header\">传感器地址: <span>{sensor.address}</span></div>\r\n            <Flex className=\"card-body\">\r\n                <Flex.Item>\r\n                    <p className=\"name\">温度</p>\r\n                    <p className=\"value\">{temperature}°C</p>\r\n                </Flex.Item>\r\n                <Flex.Item>\r\n                    <p className=\"name\">湿度</p>\r\n                    <p className=\"value\">{humidity}%</p>\r\n                </Flex.Item>\r\n            </Flex>\r\n        </div>);\r\n    }\r\n\r\n    renderThSensors() {\r\n        const {thSensors} = this.state;\r\n        return (<div className=\"th-sensor-group\">\r\n            <div className=\"title\">温湿度传感器</div>\r\n            <div className=\"sensors\">\r\n                {\r\n                    thSensors.map(sensor => this.renderThSensorCard(sensor))\r\n                }\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        const slots = this.state.slots;\r\n        const {searchSkuNo, noticeSlots, sensorModalVisible, operationSlot, sensors} = this.state;\r\n        const groupedSlots = groupSlots(slots);\r\n        this.highlightSlotIds = {};\r\n        for (let slot of noticeSlots) {\r\n            this.highlightSlotIds[slot.id] = true;\r\n        }\r\n        const firstNoticeSlot = noticeSlots ? noticeSlots[0] : null;\r\n        return (\r\n            <div className=\"dashboard\">\r\n                <Tabs tabs={TabItems} onChange={(tab, index) => this.onTabChange(tab, index)}/>\r\n                <SearchBar\r\n                    value={searchSkuNo}\r\n                    onSubmit={e => this.triggerHighlight(e)}\r\n                    onChange={searchSkuNo => this.setState({searchSkuNo})}/>\r\n                <div className=\"notice-list\">\r\n                    {\r\n                        this.renderNoticeBar(firstNoticeSlot)\r\n                    }\r\n                </div>\r\n                <div className=\"slot-groups\">\r\n                    {\r\n                        groupedSlots.map(group => this.renderGroupItem(group))\r\n                    }\r\n                </div>\r\n                <div className=\"th-sensors\">\r\n                    {\r\n                        this.renderThSensors()\r\n                    }\r\n                </div>\r\n                <Modal visible={sensorModalVisible}\r\n                       title={`Sensors for ${operationSlot.slotNo}`}\r\n                       transparent\r\n                       footer={[\r\n                           {text: 'OK', onPress: () => this.setState({sensorModalVisible: false})}, {\r\n                               text: 'DoZero', onPress: () => this.doSlotZero(this.state.operationSlot)\r\n                           }\r\n                       ]}\r\n                       onClose={() => this.setState({sensorModalVisible: false})}>\r\n                    <List renderHeader={() => 'Sensors'}>\r\n                        {\r\n                            sensors ? sensors.map(sensor => (<List.Item\r\n                                    extra={asStateString(sensor.state)}\r\n                                    key={sensor.id}>\r\n                                    {sensor.deviceSn}\r\n                                    <List.Item.Brief>{sensor.address485}</List.Item.Brief>\r\n                                </List.Item>)) :\r\n                                <List.Item>Empty List</List.Item>\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderNoticeBar(slot) {\r\n        if (!slot) {\r\n            return;\r\n        }\r\n        const content = [];\r\n        content.push(slot.skuName);\r\n        if (slot.skuShelfLifeOpenDays) {\r\n            content.push('，开封后保质期');\r\n            content.push((<span className=\"days\">{slot.skuShelfLifeOpenDays}</span>));\r\n            content.push('天');\r\n        } else {\r\n            content.push('，开封后保质期未设置！');\r\n        }\r\n        return (<NoticeBar className=\"notice\">\r\n            {content}\r\n        </NoticeBar>)\r\n    }\r\n\r\n    renderGroupItem(group) {\r\n        return (<div className=\"group-item\" key={group.name}>\r\n            <p className=\"group-name\">\r\n                {group.name}\r\n            </p>\r\n            <WingBlank>\r\n                <Flex className=\"slots\" wrap={\"wrap\"} justify=\"between\">\r\n                    {\r\n                        group.slots.map(slot => this.renderSlotCard(slot))\r\n                    }\r\n                </Flex>\r\n            </WingBlank>\r\n        </div>)\r\n    }\r\n\r\n    renderSlotCard(slot) {\r\n        const sensors = slot.sensors;\r\n        if (!sensors) {\r\n            return null;\r\n        }\r\n        const sku = slot.sku || {};\r\n        const data = slot.data || {};\r\n        let slotCardClassName = 'slot-card';\r\n        if (slot.id in this.highlightSlotIds) {\r\n            slotCardClassName += ' slot-card-highlight';\r\n        } else {\r\n            if (isWan(slot.state)) {\r\n                if (isDisable(slot.state)) {\r\n                    slotCardClassName += ' slot-card-disable';\r\n                } else if (isOffline(slot.state)) {\r\n                    slotCardClassName += ' slot-card-offline';\r\n                } else {\r\n                    slotCardClassName += ' slot-card-warn';\r\n                }\r\n            }\r\n        }\r\n        const incredible = isIncredible(data.toleranceState);\r\n        const state = asStateString(slot.state);\r\n        const weightInKg = asKg(data.weight);\r\n        const count = asCount(data);\r\n        return (<div key={slot.id}\r\n                     className={slotCardClassName}>\r\n            <Flex className=\"card-header\" justify=\"between\">\r\n                <div className=\"slot-no\">\r\n                    {slot.slotNo}\r\n                </div>\r\n                <div className=\"state\">\r\n                    <span className=\"weight\">({weightInKg}kg)</span>\r\n                    <span className=\"dot\"/>\r\n                    <span>{state}</span>\r\n                </div>\r\n            </Flex>\r\n            <Flex className=\"card-body\" justify=\"between\">\r\n                <div className=\"left\">\r\n                    <div className=\"sku-no\">SKU:{sku.skuNo}</div>\r\n                    <div className=\"sku-name\">{sku.name}</div>\r\n                </div>\r\n                <div className=\"delimiter\"/>\r\n                <div className={`right ${incredible ? 'right-incredible' : ''}`}\r\n                     onClick={() => this.onSlotCardClick(slot)}>\r\n                    <span className=\"pcs-value\">{count}</span>\r\n                    <span className=\"pcs-unit\">(数量)</span>\r\n                </div>\r\n            </Flex>\r\n        </div>);\r\n    }\r\n\r\n    onSlotCardClick(slot) {\r\n        this.setState({\r\n            operationSlot: slot,\r\n            sensors: slot.sensors,\r\n            sensorModalVisible: true,\r\n        });\r\n    }\r\n\r\n    triggerHighlight(skuNo) {\r\n        if (skuNo === '' || skuNo.trim() === '') {\r\n            Toast.show('Please Type a SkuNo!', 1, false);\r\n            return;\r\n        }\r\n        highlightBySku(skuNo).then(res => {\r\n            this.setState({\r\n                noticeSlots: res\r\n            });\r\n            setTimeout(() => this.setState({noticeSlots: [], searchSkuNo: '',}), 5000);\r\n        }).catch(() => {\r\n            this.setState({\r\n                searchSkuNo: '',\r\n            });\r\n        });\r\n    }\r\n\r\n    onTabChange(tab, index) {\r\n        switch (index) {\r\n            case 0:\r\n                // dashboard\r\n                this.props.history.push({\r\n                    pathname: '/dashboard'\r\n                });\r\n                break;\r\n            case 1:\r\n                // settings\r\n                this.props.history.push({\r\n                    pathname: '/setting/'\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    doSlotZero(slot) {\r\n        const {slotNo} = slot;\r\n        Modal.alert('Do Zero?', `Do zero for this clot[${slotNo}]?`, [\r\n            {text: 'Cancel'},\r\n            {text: 'Yes', onPress: () => this.callDoZero(slotNo)}\r\n        ])\r\n    }\r\n\r\n    callDoZero(slotNo) {\r\n        zeroOne(slotNo).then(() => {\r\n            Toast.show(`slot[${slotNo}] Zero success!`);\r\n        });\r\n    }\r\n}\r\n\r\nconst component = connect(mapState2Props, mapAction2Props)(Dashboard);\r\nexport default withRouter(component);\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from 'antd-mobile';\r\nimport './FloatButton.sass';\r\n\r\nclass FloatButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.defaultPosition = {\r\n            right: 20,\r\n            bottom: 100,\r\n        };\r\n        this.state = {\r\n            down: false,\r\n        };\r\n    }\r\n\r\n    static propTypes = {\r\n        iconType: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func,\r\n    };\r\n\r\n    render() {\r\n        const {down} = this.state;\r\n        return (\r\n            <div className={\"floatButton \" + (down ? 'move' : '')}\r\n                 style={this.defaultPosition}\r\n                 onClick={e => this.callOnClick(e)}\r\n            >\r\n                <Icon type={this.props.iconType} className=\"icon\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    callOnClick(e) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport default FloatButton;\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Card, List, Modal, Switch, Toast} from \"antd-mobile\";\r\nimport {asyncFetchSensors, setTabBarState, setTitle, toggleSensorElable} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {reloadSensors} from \"../../../api/sensor\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSensors: (...args) => dispatch(asyncFetchSensors(...args)),\r\n        toggleSensorElable: (...args) => dispatch(toggleSensorElable(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    }\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        sensors: state.sensors,\r\n    };\r\n};\r\n\r\nclass SensorSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Sensor Setting');\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.props;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <List renderHeader={() => 'Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => (<List.Item key={sensor.id}>\r\n                            <Card>\r\n                                <Card.Header title={`Address:${sensor.address}`} extra={sensor.deviceSn}/>\r\n                                <Card.Body>\r\n                                    <List>\r\n                                        <List.Item extra={<Switch checked={sensor.hasElabel}\r\n                                                                  onChange={(e) => this.toggleElabel(sensor, e)}\r\n                                                                  platform=\"android\"/>}>\r\n                                            ELabel\r\n                                        </List.Item>\r\n                                        <List.Item arrow=\"horizontal\" onClick={() => this.toSensorDetails(sensor)}>\r\n                                            Sensor Params\r\n                                        </List.Item>\r\n                                    </List>\r\n                                </Card.Body>\r\n                                <Card.Footer content={`Slot:[${sensor.slot && sensor.slot.slotNo}]`}\r\n                                             extra={sensor.slot && sensor.slot.id}/>\r\n                            </Card>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationActions()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    toSensorDetails(sensor) {\r\n        this.props.history.push({pathname: `/setting/${sensor.address}/sensor-details`});\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchSensors();\r\n    }\r\n\r\n    toggleElabel(sensor, e) {\r\n        const sensorId = sensor.id;\r\n        this.props.toggleSensorElable(sensorId, e);\r\n    }\r\n\r\n    showOperationActions() {\r\n        const buttons = ['Reload Sensors', 'Cancel'];\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: 'Operations',\r\n            options: buttons,\r\n            cancelButtonIndex: buttons.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            if (index === 0) {\r\n                this.callReloadSensors();\r\n            }\r\n        })\r\n    }\r\n\r\n    callReloadSensors() {\r\n        Modal.alert('Reload', 'Are you sure to reload?',\r\n            [\r\n                {\r\n                    text: 'Yes', onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('Reload Success!', 1, false);\r\n                        })\r\n                    }\r\n                },\r\n                {\r\n                    text: 'Cancel', onPress: () => {\r\n                        Toast.show('Cancel', 1, false);\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(SensorSetting);\r\n","import React, {Component} from 'react';\r\nimport {List} from \"antd-mobile\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nclass SettingMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Setting');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"setting\">\r\n                <List renderHeader={() => 'Settings:'}>\r\n                    <List.Item onClick={() => this.go('/setting/sensor')} arrow=\"horizontal\">\r\n                        Sensors\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/slot')} arrow=\"horizontal\">\r\n                        Slots\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/connection')} arrow=\"horizontal\">\r\n                        Connections\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/system')} arrow=\"horizontal\">\r\n                        System Info\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\" onClick={() => this.go('/setting/system-check')}>\r\n                        System Check\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/overview')} arrow=\"horizontal\">\r\n                        Overview\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    go(path) {\r\n        this.props.history.push({\r\n            pathname: path\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SettingMenu));\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Flex, Icon, List, Toast} from 'antd-mobile';\r\nimport {doZeroAll, fetchAllSlots} from '../../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport './SlotSetting.sass';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst OperationActions = ['Refresh', 'Do Zero All', 'Cancel'];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slots: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(false);\r\n        this.props.setTitle('Slot Settings');\r\n        this.fetchSlots();\r\n    }\r\n\r\n    render() {\r\n        const {slots} = this.state;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <List renderHeader={() => 'Slot List'}>\r\n                    {\r\n                        slots.map(slot => (\r\n                            <Item key={slot.id} extra={<Icon type=\"right\"/>} onClick={() => this.toSlotDetail(slot)}>\r\n                                <Flex justify=\"between\">\r\n                                    <span className=\"slotNo\">{slot.slotNo}</span>\r\n                                    <span className=\"name\">{slot.skuName}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationSheet()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showOperationSheet() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: OperationActions,\r\n            title: 'Operations',\r\n            cancelButtonIndex: OperationActions.length - 1,\r\n            destructiveButtonIndex: 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.fetchSlots();\r\n                    break;\r\n                case 1:\r\n                    this.doZeroAll();\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        })\r\n    }\r\n\r\n    toSlotDetail(slot) {\r\n        this.props.history.push({\r\n            pathname: `/setting/slot-detail/${slot.id}`,\r\n        });\r\n    }\r\n\r\n    doZeroAll() {\r\n        doZeroAll().then(() => {\r\n            Toast.show('All Zeroed!');\r\n        })\r\n    }\r\n\r\n    fetchSlots() {\r\n        fetchAllSlots().then(res => {\r\n            const slots = res.sort((a, b) => a.slotNo.localeCompare(b.slotNo));\r\n            this.setState({slots})\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotSetting));\r\n","import React, {Component} from 'react';\r\nimport {asyncDeleteConnection, asyncFetchConnection, setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Flex, Icon, InputItem, List, Modal, Picker, Toast} from 'antd-mobile';\r\nimport {asConnectionType} from '../../../util/DataConvertor';\r\nimport './ConnectionSetting.sass'\r\nimport {createConnection, scanDevice, scanPort, startScanTempHumiSensors} from '../../../api/connection';\r\nimport {connect} from 'react-redux';\r\n\r\nconst ConnectionOperations = [\r\n    'Delete',\r\n    'Start Scan WeightSensor',\r\n    'Start Scan TempHumiditySensor',\r\n    'Cancel',\r\n];\r\nconst connectionTypes = [\r\n    {\r\n        label: 'Serial',\r\n        value: 1,\r\n    },\r\n    {\r\n        label: 'Network',\r\n        value: 2,\r\n    }\r\n];\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchConnection: (...args) => dispatch(asyncFetchConnection(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        deleteConnection: (...args) => dispatch(asyncDeleteConnection(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        connections: state.connections,\r\n    };\r\n};\r\n\r\nclass ConnectionSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            createDialogVisible: false,\r\n            create: {\r\n                type: null,\r\n                target: ''\r\n            },\r\n            serialPorts: []\r\n        };\r\n        this.props.setTitle('Connection Setting');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchConnection();\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {connections} = this.props;\r\n        const {createDialogVisible} = this.state;\r\n        const {create} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Connections'}>\r\n                    {\r\n                        connections.map(connection => (\r\n                            <Item key={connection.id} extra={<Icon type=\"right\"/>}\r\n                                  onClick={() => this.showConnectionOperations(connection)}>\r\n                                <Flex justify=\"between\" className=\"connectionItem\">\r\n                                    <span className=\"type\">{asConnectionType(connection.type)}</span>\r\n                                    <span className=\"target\">{connection.target}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                    <Item key=\"createButton\">\r\n                        <Button type=\"primary\" onClick={() => this.showCreateDialog()}>New</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={createDialogVisible}\r\n                    transparent\r\n                    title=\"Create A Connection\"\r\n                    footer={[\r\n                        {text: 'Cancel', onPress: () => this.setState({createDialogVisible: false})},\r\n                        {text: 'Create', onPress: () => this.createConnection()},\r\n                    ]}\r\n                    onClose={() => this.setState({createDialogVisible: false})}>\r\n                    <List title=\"Connection\">\r\n                        <Picker data={connectionTypes} title=\"Connection Type\" cols={1}\r\n                                extra=\"Choose\"\r\n                                onChange={e => this.setCreateType(e)}>\r\n                            <List.Item>\r\n                                <InputItem value={create.type && asConnectionType(create.type)}\r\n                                           disabled={true}\r\n                                           placeholder=\"Type\"/>\r\n                            </List.Item>\r\n                        </Picker>\r\n                        {\r\n                            (() => {\r\n                                const input = (<List.Item key=\"target\"><InputItem placeholder=\"Connection Target\"\r\n                                                                                  onChange={e => this.setCreateTarget(e)}\r\n                                                                                  value={create.target}\r\n                                                                                  disabled={this.state.create.type === 1}/></List.Item>);\r\n                                if (create.type === 1) {\r\n                                    return (<Picker data={this.state.serialPorts}\r\n                                                    extra=\"Choose\"\r\n                                                    title=\"Serial Port List\"\r\n                                                    cols={1}\r\n                                                    onChange={arr => this.setCreateTargetSerial(arr)}>\r\n                                        {input}\r\n                                    </Picker>)\r\n                                } else {\r\n                                    return input;\r\n                                }\r\n                            })()\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    deleteConnection(connection) {\r\n        Modal.alert('Delete Connection!', 'Are You Sure delete this connection',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                    onPress: () => {\r\n                        Toast.show('Canceled', 1, false);\r\n                    }\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => {\r\n                        this.props.deleteConnection(connection.id);\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    scanConnection(connection) {\r\n        Modal.alert('Scan Device!', 'Scan Devices for this Connection?',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                    onPress: () => {\r\n                        Toast.show('Canceled', 1, false);\r\n                    }\r\n                },\r\n                {\r\n                    text: 'Scan',\r\n                    onPress: () => {\r\n                        scanDevice(connection.id).then(() => {\r\n                            Toast.show('Scan Success!', 2, false)\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    showCreateDialog() {\r\n        this.setState({\r\n            createDialogVisible: true\r\n        })\r\n    }\r\n\r\n    createConnection() {\r\n        createConnection(this.state.create).then(() => {\r\n            this.props.fetchConnection();\r\n            this.setState({\r\n                create: {},\r\n                createDialogVisible: false,\r\n            });\r\n        })\r\n    }\r\n\r\n    setCreateType(types) {\r\n        if (types.length < 1) {\r\n            Toast.show('Please Choose A Connection Type!');\r\n        }\r\n        const type = types[0];\r\n        const newCreate = {\r\n            type,\r\n            target: ''\r\n        };\r\n        this.setState({create: newCreate});\r\n        if (type === 1 && this.state.serialPorts.length <= 0) {\r\n            scanPort().then(res => {\r\n                const serialPorts = [];\r\n                for (const port of res) {\r\n                    serialPorts.push({\r\n                        label: port,\r\n                        value: port,\r\n                    });\r\n                }\r\n                this.setState({serialPorts});\r\n            });\r\n        }\r\n    }\r\n\r\n    setCreateTarget(e) {\r\n        const create = {\r\n            ...this.state.create,\r\n            target: e,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    setCreateTargetSerial(serialIndexList) {\r\n        if (!serialIndexList) {\r\n            Toast.show('Please Choose A Serial Port!');\r\n            return;\r\n        }\r\n        const port = serialIndexList[0];\r\n        const create = {\r\n            ...this.state.create,\r\n            target: port,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    startScanTHSensors(connection) {\r\n        Modal.alert('Scan TH Device!', 'Scan TemperatureHumidityDevices for this Connection?',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                },\r\n                {\r\n                    text: 'Scan',\r\n                    onPress: () => {\r\n                        startScanTempHumiSensors(connection.id).then(() => {\r\n                            Toast.show('Scan Success!', 2, false)\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    showConnectionOperations(connection) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: `${connection.target} Operations`,\r\n            options: ConnectionOperations,\r\n            cancelButtonIndex: ConnectionOperations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.deleteConnection(connection);\r\n                    break;\r\n                case 1:\r\n                    this.scanConnection(connection);\r\n                    break;\r\n                case 2:\r\n                    this.startScanTHSensors(connection);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(ConnectionSetting);\r\n","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDetail, toggleELabelState, updateSlot, zeroOne} from '../../../api/slot';\r\nimport {ActionSheet, Button, InputItem, List, Switch, Toast, WingBlank} from 'antd-mobile';\r\nimport {setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst ActionButtons = [\r\n    'Do Zero',\r\n    'Delete',\r\n    'Cancel',\r\n];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotDetailSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {}\r\n        };\r\n        this.slotId = this.props.match.params.id;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle(`${this.slotId} Settings`);\r\n        this.fetchSlotInfo();\r\n    }\r\n\r\n    fetchSlotInfo() {\r\n        fetchDetail(this.slotId).then(res => {\r\n            this.setState({slot: res});\r\n            this.props.setTitle(`${res.slotNo} Settings`);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {slot} = this.state;\r\n        return (\r\n            <div className=\"slotDetail\">\r\n                <List renderHeader={() => 'Slot Info'}>\r\n                    <Item key=\"slotNo\">\r\n                        <InputItem placeholder=\"Slot No\" value={slot.slotNo}\r\n                                   onChange={text => this.setUpdateSlotProp({slotNo: text})}>SlotNo</InputItem>\r\n                    </Item>\r\n                    <Item key=\"SkuName\">\r\n                        <InputItem placeholder=\"Sku Name\" value={slot.skuName}\r\n                                   onChange={text => this.setUpdateSlotProp({skuName: text})}>SKUName</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuNo\">\r\n                        <InputItem placeholder=\"SKU No\" value={slot.skuNo}\r\n                                   onChange={text => this.setUpdateSlotProp({skuNo: text})}>SKUNo</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuApw\">\r\n                        <InputItem placeholder=\"SKU Apw\" value={slot.skuApw}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuApw: text})}>Apw</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuTolerance\">\r\n                        <InputItem placeholder=\"SKU Tolerance\" value={slot.skuTolerance}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuTolerance: text})}>Tolerance</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuShelfLifeOpenDays\">\r\n                        <InputItem placeholder=\"SKU ShelfLifeOpenDays\" value={slot.skuShelfLifeOpenDays}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuShelfLifeOpenDays: text})}>\r\n                            SLO Days\r\n                        </InputItem>\r\n                    </Item>\r\n                    <Item key=\"applyBtn\">\r\n                        <WingBlank><Button type=\"primary\" onClick={() => this.applyModify()}>Apply\r\n                            Modify</Button></WingBlank>\r\n                    </Item>\r\n                </List>\r\n                <List renderHeader={() => 'Operations'}>\r\n                    <List.Item\r\n                        key=\"hasELabel\"\r\n                        extra={<Switch\r\n                            checked={slot.hasElabel}\r\n                            onChange={state => this.toggleELabel(state)}\r\n                            platform=\"android\"/>}>\r\n                        Enable ELabel\r\n                    </List.Item>\r\n                    <List.Item\r\n                        arrow=\"horizontal\"\r\n                        onClick={() => this.props.history.push({pathname: `/setting/slot-sensors/${slot.id}`})}>\r\n                        Sensors\r\n                    </List.Item>\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.openOperation()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    openOperation() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: 'Operations',\r\n            options: ActionButtons,\r\n            destructiveButtonIndex: 1,\r\n            cancelButtonIndex: ActionButtons.length - 1,\r\n        }, buttonIndex => {\r\n            const button = ActionButtons[buttonIndex];\r\n            if (button === 'Do Zero') {\r\n                this.doZero();\r\n            } else if (button === 'Delete') {\r\n                Toast.show('Unable To Delete!');\r\n            }\r\n        });\r\n    }\r\n\r\n    doZero() {\r\n        const {slot} = this.state;\r\n        zeroOne(slot.slotNo).then(() => {\r\n            Toast.show('Do Zero Success!');\r\n        });\r\n    }\r\n\r\n    setUpdateSlotProp(props) {\r\n        const slot = {\r\n            ...this.state.slot,\r\n            ...props\r\n        };\r\n        this.setState({slot});\r\n    }\r\n\r\n    applyModify() {\r\n        updateSlot(this.state.slot).then(() => {\r\n            Toast.show('Apply Success!');\r\n        });\r\n    }\r\n\r\n    toggleELabel(hasELabel) {\r\n        toggleELabelState({id: this.slotId, hasELabel}).then(() => {\r\n            Toast.show('Toggle ELabel Success!');\r\n            this.fetchSlotInfo();\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotDetailSetting));\r\n","import React, {Component} from 'react';\r\nimport {Button, Icon, List, Modal, Switch, TextareaItem, Toast} from 'antd-mobile';\r\nimport {setEnableTabBarAction, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {fetchSystemInfo} from '../../../api/dashboard';\r\nimport {reloadLibPath} from '../../../api/serial';\r\nimport {stopWeightService} from '../../../api/sensor';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setEnableTabBar: (...args) => dispatch(setEnableTabBarAction(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass SystemSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemInfo: {},\r\n            libLoadVisible: false,\r\n            reloadLibPath: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('System Infos');\r\n        fetchSystemInfo().then(res => {\r\n            this.setState({\r\n                systemInfo: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {systemInfo, libLoadVisible, reloadLibPath} = this.state;\r\n        const {enableTabBar} = this.props;\r\n        return (\r\n            <div className=\"systemSettings\">\r\n                <List renderHeader={() => 'System Infos'}>\r\n                    <Item key=\"appName\" extra={systemInfo.appName}>APPName</Item>\r\n                    <Item key=\"appVersion\" extra={systemInfo.appVersion}>APPVersion</Item>\r\n                    <Item key=\"dbVersion\" extra={systemInfo.dbVersion}>DBVersion</Item>\r\n                    <Item key=\"dbVersionName\" extra={systemInfo.dbVersionName}>DBVersionName</Item>\r\n                    <Item key=\"pid\" extra={systemInfo.pid}>ProcessID</Item>\r\n                    <Item key=\"libPath\" extra={<Icon type=\"right\"/>}\r\n                          onClick={() => this.showLibLoadModal()}> LibPath: {systemInfo.libPath}</Item>\r\n                </List>\r\n                <List renderHeader={() => 'Settings'}>\r\n                    <Item\r\n                        key=\"tabBar\"\r\n                        extra={<Switch\r\n                            checked={enableTabBar}\r\n                            onChange={target => this.setEnableTabBar(target)}\r\n                            platform=\"android\"/>}>\r\n                        EnableTabBar\r\n                    </Item>\r\n                    <Item key=\"systemProps\" extra={<Icon type=\"right\"/>}\r\n                          onClick={() => this.props.history.push({pathname: '/setting/system-props'})}>\r\n                        System Props\r\n                    </Item>\r\n                    <Item key=\"stopService\">\r\n                        <Button type=\"warning\" onClick={() => this.stopWeightService()}>Stop Weight Service</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={libLoadVisible}\r\n                    title=\"Reload SerialPort Library\"\r\n                    transparent\r\n                    maskClosable={true}\r\n                    footer={[\r\n                        {\r\n                            text: 'Cancel',\r\n                            onPress: () => this.setState({libLoadVisible: false})\r\n                        },\r\n                        {\r\n                            text: 'Reload',\r\n                            onPress: () => this.reloadLibrary()\r\n                        },\r\n                    ]}>\r\n                    <TextareaItem\r\n                        placeholder=\"Type the SerialPort library Path!\"\r\n                        autoHeight\r\n                        value={reloadLibPath} onChange={e => this.setState({reloadLibPath: e})}/>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setEnableTabBar(target) {\r\n        this.props.setEnableTabBar(target);\r\n    }\r\n\r\n    showLibLoadModal() {\r\n        const reloadLibPath = this.state.systemInfo.libPath;\r\n        this.setState({\r\n            reloadLibPath,\r\n            libLoadVisible: true\r\n        });\r\n    }\r\n\r\n    reloadLibrary() {\r\n        reloadLibPath(this.state.reloadLibPath).then(res => {\r\n            Toast.show(`Success: [${res}]`);\r\n            this.setState({\r\n                libLoadVisible: false,\r\n            })\r\n        })\r\n    }\r\n\r\n    stopWeightService() {\r\n        stopWeightService().then(() => {\r\n            Toast.show(\"Stop Weight Service Success!\");\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props, mapAction2Props)(SystemSetting));\r\n","import {request} from './request';\r\n\r\nexport const reloadLibPath = path => {\r\n    return request({\r\n        url: '/api/serial/load-lib',\r\n        method: 'post',\r\n        data: {\r\n            libPath: path\r\n        }\r\n    })\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchSystemProps} from '../.././../api/dashboard';\r\nimport {List, TextareaItem} from 'antd-mobile';\r\n\r\nconst {Item} = List;\r\n\r\nclass SystemPropsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemProps: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchSystemProps().then(res => {\r\n            const propList = [];\r\n            for (const name in res) {\r\n                if (res.hasOwnProperty(name)) {\r\n                    propList.push({\r\n                        name,\r\n                        value: res[name],\r\n                    });\r\n                }\r\n            }\r\n            this.setState({\r\n                systemProps: propList\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {systemProps} = this.state;\r\n        return (\r\n            <div className=\"systemProps\">\r\n                <List renderHeader={() => 'System Properties'}>\r\n                    {\r\n                        systemProps.map(p => (<Item key={p.name}>\r\n                            <div>{p.name}</div>\r\n                            <TextareaItem value={p.value} autoHeight labelNumber={5}/>\r\n                        </Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SystemPropsSetting;\r\n","import React, {Component} from 'react';\r\nimport {fetchAllWithSensors, fetchDetail} from '../../../api/slot';\r\nimport {setSlotByIds} from '../../../api/sensor';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Flex, List, Modal, Picker, Toast, WingBlank} from \"antd-mobile\";\r\nimport './SlotSensorsSetting.sass'\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\nconst SENSOR_OPERATIONS = ['Remove', 'Cancel'];\r\n\r\nclass SlotSensorsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {},\r\n            sensors: [],\r\n            sensorRemoveMode: false,\r\n            allSlots: [],\r\n            sensorPickerData: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('Sensors');\r\n        const {id} = this.props.match.params;\r\n        fetchDetail(id).then(res => {\r\n            const sensors = res.sensors;\r\n            for (let sensor of sensors) {\r\n                sensor.changed = false;\r\n            }\r\n            this.setState({\r\n                slot: res,\r\n                sensors: sensors,\r\n            });\r\n            this.props.setTitle(`Sensors For ${res.slotNo}`);\r\n        });\r\n        fetchAllWithSensors().then(res => {\r\n            const pickerData = [];\r\n            for (let slot of res) {\r\n                const sensors = slot.sensors;\r\n                const children = [];\r\n                for (let sensor of sensors) {\r\n                    children.push({\r\n                        value: sensor.id,\r\n                        label: sensor.address,\r\n                    });\r\n                }\r\n                pickerData.push({\r\n                    value: slot.id,\r\n                    label: slot.slotNo,\r\n                    children: children,\r\n                });\r\n            }\r\n            this.setState({allSlots: res, sensorPickerData: pickerData,});\r\n        });\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {sensorRemoveMode, sensorPickerData} = this.state;\r\n        const sensorItem = (\r\n            <List.Item key={sensor.id}\r\n                       arrow=\"horizontal\"\r\n                       className={`sensor-item ${sensor.changed ? 'sensor-item-changed' : ''}`}\r\n                       onClick={() => this.openSensorOperations(sensor)}\r\n                       extra={sensorRemoveMode ? 'Click to remove' : ''}>\r\n                {sensor.deviceSn}\r\n            </List.Item>);\r\n        if (sensorRemoveMode) {\r\n            return sensorItem;\r\n        } else {\r\n            return (<Picker\r\n                data={sensorPickerData}\r\n                key={sensor.id}\r\n                value={[sensor.slotId, sensor.id]}\r\n                cols={2}\r\n                onChange={v => this.onSelectSensor(sensor, v)}>{sensorItem}</Picker>)\r\n        }\r\n    }\r\n\r\n    onSelectSensor(oldSensor, selected) {\r\n        const slotId = selected[0];\r\n        const sensorId = selected[1];\r\n        let index = -1;\r\n        const selectedSensors = this.state.sensors;\r\n        for (let i in selectedSensors) {\r\n            if (!selectedSensors.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            const sensor = selectedSensors[i];\r\n            if (sensor.id === oldSensor.id) {\r\n                index = i;\r\n            }\r\n        }\r\n        let selectedSensor;\r\n        for (let slot of this.state.allSlots) {\r\n            if (slot.id === slotId) {\r\n                for (let sensor of slot.sensors) {\r\n                    if (sensor.id === sensorId) {\r\n                        sensor.changed = true;\r\n                        selectedSensor = sensor;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let s of selectedSensors) {\r\n            if (s.id === selectedSensor.id) {\r\n                Toast.show('Duplicate Sensor!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        selectedSensors[index] = selectedSensor;\r\n        this.setState({sensors: selectedSensors,})\r\n    }\r\n\r\n    render() {\r\n        const {slot, sensors, sensorRemoveMode} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Slot Info'}>\r\n                    <List.Item extra={slot.slotNo}>Slot NO</List.Item>\r\n                    <List.Item extra={slot.skuName}>SKU Name</List.Item>\r\n                    <List.Item extra={slot.skuNo}>SKU NO</List.Item>\r\n                </List>\r\n                <List renderHeader={() => 'Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => this.renderSensorItem(sensor))\r\n                    }\r\n                    <List.Item>\r\n                        <WingBlank>\r\n                            <Flex justify={\"between\"}>\r\n                                <Flex.Item>\r\n                                    <Button type=\"warning\"\r\n                                            onClick={() => this.setState({sensorRemoveMode: !this.state.sensorRemoveMode})}>\r\n                                        {sensorRemoveMode ? 'Cancel' : 'Remove'}\r\n                                    </Button>\r\n                                </Flex.Item>\r\n                                <Flex.Item>\r\n                                    <Button type=\"ghost\" onClick={() => this.addSensor()}\r\n                                            disabled={sensorRemoveMode}>Add</Button>\r\n                                </Flex.Item>\r\n                                <Flex.Item>\r\n                                    <Button type=\"primary\" disabled={sensorRemoveMode}\r\n                                            onClick={() => this.applySensors()}>Apply</Button>\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </WingBlank>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    addSensor() {\r\n        for (let sensor of this.state.sensors) {\r\n            if (sensor.id < 0) {\r\n                Toast.show('Please select a sensor!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        const {sensors} = this.state;\r\n        sensors.push({\r\n            id: -1,\r\n            deviceSn: 'Not Selected',\r\n            changed: true,\r\n        });\r\n        this.setState({sensors});\r\n    }\r\n\r\n    openSensorOperations(sensor) {\r\n        const {sensorRemoveMode} = this.state;\r\n        if (!sensorRemoveMode) {\r\n            return;\r\n        }\r\n        ActionSheet.showActionSheetWithOptions(\r\n            {\r\n                options: SENSOR_OPERATIONS,\r\n                title: `Sensor ${sensor.deviceSn}`,\r\n                cancelButtonIndex: 2,\r\n                destructiveButtonIndex: 0,\r\n            },\r\n            index => {\r\n                if (index === 0) {\r\n                    Modal.alert('Remove',\r\n                        `Remove sensor ${sensor.deviceSn}?`,\r\n                        [\r\n                            {text: 'Cancel'},\r\n                            {\r\n                                text: 'Remove',\r\n                                onPress: () => this.removeSensor(sensor),\r\n                            }\r\n                        ]);\r\n                }\r\n            })\r\n    }\r\n\r\n    removeSensor(sensor) {\r\n        const {sensors} = this.state;\r\n        const newSensors = [];\r\n        for (let i in sensors) {\r\n            if (!sensors.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            const s = sensors[i];\r\n            if (s.id === sensor.id) {\r\n                continue;\r\n            }\r\n            newSensors.push(s);\r\n        }\r\n        this.setState({sensors: newSensors});\r\n    }\r\n\r\n    applySensors() {\r\n        const sensorIds = this.state.sensors.map(v => v.id);\r\n        for (let id of sensorIds) {\r\n            if (id <= 0) {\r\n                Toast.show('Any sensor not selected!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        const slot = this.state.slot;\r\n        Modal.alert('Apply Sensor Setting', 'Do you want to apply this changes?', [{text: 'Cancel'}, {\r\n            text: 'Apply',\r\n            onPress: () => {\r\n                setSlotByIds(sensorIds, slot.id).then(res => {\r\n                    Toast.show('Apply Success!');\r\n                    const {sensors} = this.state;\r\n                    for (let s of sensors) {\r\n                        s.changed = false;\r\n                    }\r\n                    this.setState({sensors});\r\n                })\r\n            }\r\n        }])\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SlotSensorsSetting);\r\n","import React, {Component} from 'react';\r\nimport {dumpAll} from '../../../api/sensor';\r\nimport {Button, List, Modal, TextareaItem, WingBlank} from 'antd-mobile';\r\n\r\nclass Overview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        dumpAll().then(res => {\r\n            const sensors = res.sort((a, b) => a.address - b.address);\r\n            this.setState({sensors})\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.state;\r\n        return (\r\n            <div className=\"overview\">\r\n                <List renderHeader={() => 'All Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => (\r\n                            <List.Item key={sensor.id}>\r\n                                {this.renderSensorItem(sensor)}\r\n                            </List.Item>\r\n                        ))\r\n                    }\r\n                </List>\r\n                <WingBlank>\r\n                    <Button onClick={() => this.refresh()} type=\"primary\">Refresh</Button>\r\n                </WingBlank>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {slot, connection} = sensor;\r\n        return (<div onClick={() => this.onSensorClick(sensor)}>\r\n            WS:[{sensor.id},{sensor.address}]\r\n            S:[{slot && slot.id},{slot && slot.slotNo}]\r\n            C:[{connection && connection.id},{connection && connection.target}]\r\n        </div>);\r\n    }\r\n\r\n    onSensorClick(sensor) {\r\n        const {connection, slot} = sensor;\r\n        sensor.slot = null;\r\n        sensor.connection = null;\r\n        const list = (<List renderHeader={() => 'Sensor'}>\r\n            <TextareaItem value={JSON.stringify(sensor)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(connection)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(slot)} autoHeight/>\r\n        </List>);\r\n        Modal.alert('Sensor', list);\r\n    }\r\n}\r\n\r\nexport default Overview;\r\n","import React, {Component} from 'react';\r\nimport {disconnectTcp, fetchDatabaseTables, fetchStatusTable, resetDatabase} from '../../../api/systemStatus';\r\nimport {Button, Flex, List, Modal, Toast} from 'antd-mobile';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\nconst renderConnectionStatus = status => {\r\n    if (status) {\r\n        return (<span style={{color: '#1F90E6'}}>Connected</span>)\r\n    } else {\r\n        return (<span style={{color: '#E94F4F'}}>Disconnected</span>)\r\n    }\r\n};\r\n\r\nclass SystemCheck extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            statusTable: {\r\n                tcpApi: {},\r\n            },\r\n            databaseTables: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('System Check');\r\n        this.refreshStatusTable();\r\n    }\r\n\r\n    refreshStatusTable() {\r\n        fetchStatusTable().then(res => {\r\n            this.setState({\r\n                statusTable: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    refreshDatabaseTables() {\r\n        fetchDatabaseTables().then(res => {\r\n            this.setState({databaseTables: res,})\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {statusTable, databaseTables} = this.state;\r\n        const {tcpApi} = statusTable;\r\n        return (\r\n            <div className=\"system-check\">\r\n                <List renderHeader={() => 'TCP API'}>\r\n                    <List.Item extra={renderConnectionStatus(tcpApi.connection)}>\r\n                        TCP API Status\r\n                    </List.Item>\r\n                    <List.Item extra={tcpApi.ip}>\r\n                        IP\r\n                    </List.Item>\r\n                    <List.Item extra={tcpApi.port}>\r\n                        PORT\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\"\r\n                               onClick={() => this.props.history.push({pathname: '/setting/message-log'})}>\r\n                        Message Log\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\"\r\n                               onClick={() => this.props.history.push({pathname: '/setting/sensor-healthy'})}>\r\n                        Sensor Healthy\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <Flex justify=\"between\">\r\n                            <Flex.Item>\r\n                                <Button type=\"warning\" onClick={() => this.reconnectTcp()}>Reconnect</Button>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <Button type=\"primary\" onClick={() => this.refreshStatusTable()}>Refresh</Button>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </List.Item>\r\n                </List>\r\n                <List renderHeader={() => 'Database Tables'}>\r\n                    {databaseTables.map(tableName => (<List.Item key={tableName}>{tableName}</List.Item>))}\r\n                    <List.Item>\r\n                        <Flex>\r\n                            <Flex.Item>\r\n                                <Button type=\"warning\" onClick={() => this.showDbResetConfirm()}>Reset DB</Button>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <Button type=\"primary\" onClick={() => this.refreshDatabaseTables()}>\r\n                                    Fetch Table List\r\n                                </Button>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    reconnectTcp() {\r\n        Modal.alert('Confirm', 'Disconnect TCP connection and reconnect?', [{text: 'Cancel'}, {\r\n            text: 'Yes', onPress() {\r\n                disconnectTcp().then(() => {\r\n                    Toast.show('Disconnect success! reconnect after 3 seconds!', 3, false);\r\n                });\r\n            }\r\n        }])\r\n    }\r\n\r\n    showDbResetConfirm() {\r\n        Modal.alert('清空数据库？',\r\n            '该操作将会清空数据库中全部内容，操作完成后需要对货道重新扫描并重新下发库位信息！（该操作无法恢复）',\r\n            [{text: 'Cancel'}, {text: 'Yes', onPress: () => this.doDbReset()}])\r\n    }\r\n\r\n    doDbReset() {\r\n        resetDatabase().then(() => {\r\n            Modal.alert('Database Reset Success!', 'Reset success, please scan again!');\r\n        });\r\n    }\r\n}\r\n\r\nconst component = connect(null, mapAction2Props)(SystemCheck);\r\nexport default withRouter(component);\r\n","import {request} from './request';\r\n\r\nexport const fetchStatusTable = () => {\r\n    return request({\r\n        url: '/api/status/',\r\n        method: 'get',\r\n    })\r\n};\r\n\r\nexport const disconnectTcp = () => {\r\n    return request({\r\n        url: '/api/status/tcp-disconnect',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const fetchDatabaseTables = () => {\r\n    return request({\r\n        url: '/api/status/tables',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchMessageLog = () => {\r\n    return request({\r\n        url: '/api/status/message-log',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const resetDatabase = () => {\r\n    return request({\r\n        url: '/api/status/_db-reset',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const sensorParams = address => {\r\n    return request({\r\n        url: `/api/status/${address}/_details`,\r\n        method: 'get'\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchMessageLog} from '../../../api/systemStatus';\r\nimport {Card, List, TextareaItem} from \"antd-mobile\";\r\nimport './MessageLog.sass'\r\n\r\nconst renderMessageItem = (message, index) => {\r\n    return (<List.Item key={index}>\r\n        <Card className=\"message-item\">\r\n            <Card.Header title={message.action} extra={message.type}/>\r\n            <Card.Body>\r\n                <TextareaItem value={JSON.stringify(message.data)} rows={3}/>\r\n            </Card.Body>\r\n            <Card.Footer content={message.seqNo}/>\r\n        </Card>\r\n    </List.Item>);\r\n};\r\n\r\nclass MessageLog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            logs: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshLogs();\r\n        this.refreshTimmer = setInterval(() => {\r\n            this.refreshLogs();\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.refreshTimmer);\r\n    }\r\n\r\n    refreshLogs() {\r\n        fetchMessageLog().then(res => {\r\n            this.setState({\r\n                logs: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {logs} = this.state;\r\n        return (\r\n            <div className=\"message-log\">\r\n                <List renderHeader={() => 'Message Logs'}>\r\n                    {\r\n                        logs.map(renderMessageItem)\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageLog;\r\n","import React, {Component} from 'react';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {ActionSheet, Card, Flex, List, Modal, Progress, Toast} from 'antd-mobile';\r\nimport {cleanCounter, sensorHealthy} from '../../../api/healthy';\r\nimport {abortFirmwareUpgrade, fetchUpgradeProgress, sensorFirmwareUpgrade} from '../../../api/firmware';\r\nimport './SensorHealthy.sass';\r\n\r\nconst operations = ['Clean', 'Refresh', 'Cancel'];\r\nconst ClickOperations = ['Firmware Upgrade', 'Cancel'];\r\nconst WARN_RATE = 0.1;\r\nconst UPGRADE_PROGRESS_STATE_TABLE = {\r\n    0: '等待升级',\r\n    1: '升级成功',\r\n    2: '升级失败',\r\n    3: '升级中',\r\n};\r\n\r\nclass SensorHealthy extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: [],\r\n            upgradePercent: 0,\r\n            upgradeProgress: {},\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshSensors();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n    }\r\n\r\n    tryReleaseUpgradeProgressTimmer() {\r\n        if (this.upgradeFirmwareTimmer) {\r\n            clearTimeout(this.upgradeFirmwareTimmer);\r\n        }\r\n    }\r\n\r\n    refreshSensors() {\r\n        sensorHealthy().then(res => {\r\n            this.setState({\r\n                sensors: res,\r\n                showUpgradeProgress: false,\r\n            })\r\n        });\r\n    }\r\n\r\n    refreshUpgradeProgress(cb) {\r\n        fetchUpgradeProgress().then(res => {\r\n            this.setState({upgradeProgress: res});\r\n            cb(res);\r\n        });\r\n    }\r\n\r\n    doAbortFirmwareUpgrade() {\r\n        abortFirmwareUpgrade().then(() => {\r\n            Toast.show('升级已取消', 3, false);\r\n        });\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n    }\r\n\r\n    render() {\r\n        const {sensors, showUpgradeProgress, upgradeProgress} = this.state;\r\n        let upgradeProgressPercent = 0;\r\n        if (upgradeProgress.total !== undefined && upgradeProgress.current !== undefined && upgradeProgress.total !== 0) {\r\n            upgradeProgressPercent = upgradeProgress.current / upgradeProgress.total * 100;\r\n        }\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Sensor Healthy'}>\r\n                    {\r\n                        sensors.map(helthy => (<List.Item key={helthy.sensor.id}>\r\n                            {this.renderSensorCard(helthy)}\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <Modal visible={showUpgradeProgress}\r\n                       title=\"升级进度\"\r\n                       transparent\r\n                       maskClosable={false}\r\n                       onClose={() => this.onUpgradeProgressModalClose()}\r\n                       footer={[{\r\n                           text: 'Abort Upgrade',\r\n                           disabled: true,\r\n                           onPress: () => {\r\n                               this.onUpgradeProgressModalClose();\r\n                               this.doAbortFirmwareUpgrade();\r\n                           }\r\n                       }]}>\r\n                    <p>{UPGRADE_PROGRESS_STATE_TABLE[upgradeProgress.state]}</p>\r\n                    <p>{upgradeProgressPercent.toFixed(2)}%</p>\r\n                    <Progress percent={upgradeProgressPercent} position=\"normal\"/>\r\n                </Modal>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperations()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onCardClick(healthy) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: ClickOperations,\r\n            title: 'Sensor Operations',\r\n            cancelButtonIndex: ClickOperations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            if (index === 0) {\r\n                this.upgradeFirmware(healthy);\r\n            }\r\n        });\r\n    }\r\n\r\n    upgradeFirmware(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const total = packageCounter.totalSuccess + packageCounter.totalErrors;\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.totalErrors / total));\r\n        let title = '';\r\n        let content = '';\r\n        let warn = false;\r\n        const errorRateInPer = (errorsRate * 100).toFixed(2);\r\n        if (errorsRate > WARN_RATE) {\r\n            const minRate = (WARN_RATE * 100).toFixed(2);\r\n            title = '谨慎升级！！！';\r\n            content = `传感器${sensor.address}的网络丢包率为${errorRateInPer}%，在极限值${minRate}%下，建议通过串口升级！`;\r\n            warn = true;\r\n        } else {\r\n            title = '升级确认';\r\n            content = `传感${sensor.address}器的网络丢包率为${errorRateInPer}%,升级后请手动reload启动重力服务！`;\r\n            warn = false;\r\n        }\r\n        Modal.alert(title, content, [\r\n            {\r\n                text: warn ? '仍要升级' : '升级',\r\n                onPress: () => {\r\n                    this.doFirmwareUpgrade(sensor);\r\n                }\r\n            },\r\n            {\r\n                text: '取消升级',\r\n            }\r\n        ])\r\n    }\r\n\r\n    doFirmwareUpgrade(sensor) {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n        sensorFirmwareUpgrade(sensor.id).then(() => {\r\n            Toast.show('升级已完成', 2, false);\r\n            this.tryReleaseUpgradeProgressTimmer();\r\n        });\r\n        this.showUpgradeProgress();\r\n        this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n    }\r\n\r\n    refreshUpgradeProgressCb() {\r\n        return () => {\r\n            this.upgradeFirmwareTimmer = setTimeout(() => {\r\n                this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n            }, 500);\r\n        };\r\n    }\r\n\r\n    showUpgradeProgress() {\r\n        this.setState({showUpgradeProgress: true});\r\n    }\r\n\r\n    onUpgradeProgressModalClose() {\r\n        this.setState({showUpgradeProgress: false});\r\n    }\r\n\r\n    renderSensorCard(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const zeroOffset = `ZeroOffset:${sensor.zeroReference}`;\r\n        const total = packageCounter.totalSuccess + packageCounter.totalErrors;\r\n        const successRate = total === 0 ? 0 : ((packageCounter.totalSuccess / total) * 100).toFixed(0);\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.totalErrors / total) * 100).toFixed(0);\r\n\r\n        const elabelSuccess = packageCounter.elabelSuccess;\r\n        const elabelErrors = packageCounter.elabelErrors;\r\n        const eLabelTotal = elabelErrors + elabelSuccess;\r\n        const elabelSuccessRate = eLabelTotal === 0 ? 0 : ((elabelSuccess / eLabelTotal) * 100).toFixed(0);\r\n        const elabelErrorosRate = eLabelTotal === 0 ? 0 : ((elabelErrors / eLabelTotal) * 100).toFixed(0);\r\n        const elabelContinueErrors = packageCounter.elabelContinueErrors;\r\n        return (<Card key={sensor.id} onClick={() => this.onCardClick(healthy)}>\r\n            <Card.Header title={sensor.address} extra={sensor.deviceSn}/>\r\n            <Card.Body className=\"healthy-package-counter\">\r\n                <Flex>\r\n                    <Flex.Item>\r\n                        <div className=\"total\">\r\n                            <p className=\"title\">SUCCESS</p>\r\n                            <p className=\"value\">{packageCounter.totalSuccess}/{successRate}%</p>\r\n                            <p className=\"title\">ELABEL SUCCESS</p>\r\n                            <p className=\"value\">{elabelSuccess}/{elabelSuccessRate}%</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <div className=\"error\">\r\n                            <p className=\"title\">ERRORS</p>\r\n                            <p className=\"value\">{packageCounter.totalErrors}/{errorsRate}%</p>\r\n                            <p className=\"title\">ELABEL ERRORS</p>\r\n                            <p className=\"value\">{elabelErrors}/{elabelErrorosRate}%</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <div className=\"continue\">\r\n                            <p className=\"title\">CONTINUE</p>\r\n                            <p className=\"value\">{packageCounter.continueErrors}</p>\r\n                            <p className=\"title\">ELABEL CONTINUE</p>\r\n                            <p className=\"value\">{elabelContinueErrors}</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            </Card.Body>\r\n            <Card.Footer content={zeroOffset}/>\r\n        </Card>);\r\n    }\r\n\r\n    showOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: operations,\r\n            title: 'Operations',\r\n            cancelButtonIndex: operations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    //Clean\r\n                    this.showCleanCounterConfirm();\r\n                    break;\r\n                case 1:\r\n                    this.refreshSensors();\r\n                    break;\r\n                case 2:\r\n                    //Cancel\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    showCleanCounterConfirm() {\r\n        Modal.alert('Clean Counter?', 'Clean counter?', [\r\n            {text: 'Cancel'},\r\n            {text: 'Yes', onPress: () => this.doCleanCounter()}\r\n        ]);\r\n    }\r\n\r\n    doCleanCounter() {\r\n        cleanCounter().then(() => {\r\n            Toast.show('Clean success!', 1, false);\r\n        })\r\n    }\r\n}\r\n\r\nexport default SensorHealthy;\r\n","import {request} from './request';\r\n\r\nexport const sensorHealthy = () => {\r\n    return request({\r\n        url: '/api/sensor-healthy/_healthy',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const cleanCounter = () => {\r\n    return request({\r\n        url: '/api/sensor-healthy/_clean-counter',\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const sensorFirmwareUpgrade = sensorId => {\r\n    return request({\r\n        url: `/api/firmware/${sensorId}/_upgrade`,\r\n        method: 'post',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchUpgradeProgress = () => {\r\n    return request({\r\n        url: '/api/firmware/_upgrade-progress',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const abortFirmwareUpgrade = () => {\r\n    return request({\r\n        url: '/api/firmware/_abort-upgrade',\r\n        method: 'post',\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {sensorParams} from '../../../api/systemStatus';\r\nimport {ActionSheet, List} from 'antd-mobile';\r\nimport FloatButton from \"../../commons/FloatButton\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst operations = ['Refresh', 'Cancel'];\r\n\r\nclass SensorDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensor: {},\r\n            slot: {},\r\n            sensorParams: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('Sensor Params');\r\n        this.props.setTabBarState(false);\r\n        const address = this.props.match.params.address;\r\n        this.refreshParams(address);\r\n    }\r\n\r\n    refreshParams(address) {\r\n        sensorParams(address).then(res => {\r\n            const {slot, sensor} = res;\r\n            delete res.slot;\r\n            delete res.sensor;\r\n            const params = [];\r\n            for (let name in res) {\r\n                if (!res.hasOwnProperty(name)) {\r\n                    continue;\r\n                }\r\n                params.push({\r\n                    name: name,\r\n                    value: res[name],\r\n                });\r\n            }\r\n            this.setState({\r\n                sensor: sensor,\r\n                slot: slot,\r\n                sensorParams: params,\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {sensor, slot, sensorParams} = this.state;\r\n        return (\r\n            <div className=\"sensor-details\">\r\n                <List renderHeader={() => 'Sensor Info'}>\r\n                    <List.Item extra={sensor.deviceSn}>SN</List.Item>\r\n                    <List.Item extra={sensor.hasElabel ? 'yes' : 'no'}>ELabel</List.Item>\r\n                    <List.Item extra={sensor.address}>Address</List.Item>\r\n                    <List.Item extra={sensor.zeroReference}>ZeroReference</List.Item>\r\n                    <List.Item extra={slot.slotNo}>SlotNo</List.Item>\r\n                    <List.Item extra={slot.skuApw}>SkuApw</List.Item>\r\n                    <List.Item extra={slot.skuName}>SkuName</List.Item>\r\n                    <List.Item extra={slot.skuTolerance}>SkuTolerance</List.Item>\r\n                    <List.Item extra={slot.skuNo}>SkuNo</List.Item>\r\n                </List>\r\n                <List renderHeader={() => 'Sensor Params'}>\r\n                    {\r\n                        sensorParams.map(param => (\r\n                            <List.Item key={param.name} extra={JSON.stringify(param.value)}>\r\n                                {param.name}\r\n                            </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperations()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: operations,\r\n            title: 'Operations',\r\n            cancelButtonIndex: operations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.refreshParams(this.props.match.params.address);\r\n                    break;\r\n                case 1:\r\n                    //Cancel\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SensorDetails);\r\n","import React, {Component} from 'react';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport SensorSetting from './setting/SensorSetting'\r\nimport SettingMenu from './setting/SettingMenu'\r\nimport SlotSetting from './setting/SlotSetting'\r\nimport ConnectionSetting from './setting/ConnectionSetting'\r\nimport SlotDetailSetting from './setting/SlotDetailSetting'\r\nimport SystemSetting from './setting/SystemSetting'\r\nimport SystemPropsSetting from './setting/SystemPropsSetting'\r\nimport SlotSensorsSetting from './setting/SlotSensorsSetting'\r\nimport Overview from './setting/Overview'\r\nimport SystemCheck from './setting/SystemCheck'\r\nimport MessageLog from './setting/MessageLog'\r\nimport SensorHealthy from './setting/SensorHealthy'\r\nimport SensorDetails from './setting/SensorDetails'\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n    };\r\n};\r\n\r\nclass Setting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/setting/\" component={SettingMenu} exact/>\r\n                    <Route path=\"/setting/sensor\" component={SensorSetting} exact/>\r\n                    <Route path=\"/setting/slot\" component={SlotSetting} exact/>\r\n                    <Route path=\"/setting/connection\" component={ConnectionSetting} exact/>\r\n                    <Route path=\"/setting/slot-detail/:id\" component={SlotDetailSetting} exact/>\r\n                    <Route path=\"/setting/system\" component={SystemSetting} exact/>\r\n                    <Route path=\"/setting/system-props\" component={SystemPropsSetting} exact/>\r\n                    <Route path=\"/setting/slot-sensors/:id\" component={SlotSensorsSetting} exact/>\r\n                    <Route path=\"/setting/overview\" component={Overview} exact/>\r\n                    <Route path=\"/setting/system-check\" component={SystemCheck} exact/>\r\n                    <Route path=\"/setting/message-log\" component={MessageLog} exact/>\r\n                    <Route path=\"/setting/sensor-healthy\" component={SensorHealthy} exact/>\r\n                    <Route path=\"/setting/:address/sensor-details\" component={SensorDetails} exact/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Setting);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Result, Toast} from \"antd-mobile\";\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Address extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Config Address');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Result\r\n                    img={<Icon type=\"check-circle\" size=\"lg\" style={{fill: '#1F90E6'}}/>}\r\n                    title=\"开发中\"\r\n                    message=\"开发中\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中',1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Address);\r\n","import React, {Component} from 'react';\r\nimport {setTitle} from \"../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport MessageLog from './setting/MessageLog';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Logs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Logs');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MessageLog/>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Logs);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {Carousel, NoticeBar, WhiteSpace, WingBlank} from 'antd-mobile';\r\nimport './About.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass About extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            drawerOpen: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('About');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"about\">\r\n                <NoticeBar marqueeProps={{loop: true,}}>磐石电气（常州）有限公司：http://www.monolith-iot.com</NoticeBar>\r\n                <WhiteSpace/>\r\n                <WingBlank>\r\n                    <Carousel\r\n                        autoplay={true}\r\n                        infinite\r\n                        className=\"headerCarousel\"\r\n                    >\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#FF9808'}}>\r\n                            <div className=\"title\">\r\n                                磐石电气（常州）有限公司\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#3171FA'}}>\r\n                            <div className=\"title\">\r\n                                MonolithIoT\r\n                            </div>\r\n                        </div>\r\n                    </Carousel>\r\n                </WingBlank>\r\n                <WingBlank className=\"article\">\r\n                    <h1 className=\"title\">关于我们</h1>\r\n                    <div className=\"text\">\r\n                        <p>\r\n                            磐石电气(常州)有限公司,是一家高科技智能测量装备研发及生产企业，把传统体积，重量的测量数字化物联网化，可以与WMS,ERP，SAP等企业管理软件相结合，便于企业更直观的管理自己的仓储，物流等。磐石电气下设研发部，工程部，业务部，有较强的设计，研发和生产能力，可为客户提供嵌入式计算机系统产品设计，开发，系统集成，工程实施等服务。\r\n                        </p>\r\n                        <p>\r\n                            随着公司的发展，主要产品有自主研发的智能数字卷尺，智能手动叉车秤，安卓智能称重终端，静态/动态DWS等各种物联网类智能称重量方设备及软件定制系统,可为客户最大程度地提供智能化系统化的测量系统解决方案。产品广泛应用于快递物流、生鲜供应、港口订舱、仓储、工业离散制造及各种以长度(含面\r\n                            积、体积)测量为手段的民用、商用用途中。凭着可靠的产品质量和良好的售后服务，我公司已与顺丰、中国邮政、京东、国际快递DHL、华为等多家知名企业合作。\r\n                        </p>\r\n                        <p>\r\n                            目前公司已申请中国专利24项,美国专利1项，并拥有一支以博士、硕士为主的优秀研发团队，具有较高的研发能力和管理水平，现有多名员工曾在外企作为技术骨干，承传欧美设计制造理念，并采用先进的产品生命周期管理（PLM），重视产品质量，为公司产品的技术引领、技术创新和公司的可持续发展奠定了坚实基础。\r\n                        </p>\r\n                    </div>\r\n                </WingBlank>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(About);\r\n","import React, {Component} from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Dashboard from './content/Dashboard'\r\nimport Setting from './content/Setting';\r\nimport Address from './content/Address';\r\nimport Logs from './content/Logs';\r\nimport About from './content/About';\r\nimport './AppContent.sass';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"appContent\">\r\n                {\r\n                    this.props.showHeader ? <div className=\"headerMask\"/> : null\r\n                }\r\n                <Switch>\r\n                    <Route path=\"/\" component={Dashboard} exact/>\r\n                    <Route path=\"/setting**\" component={Setting} exact/>\r\n                    <Route path=\"/address\" component={Address} exact/>\r\n                    <Route path=\"/logs\" component={Logs} exact/>\r\n                    <Route path=\"/about\" component={About} exact/>\r\n                </Switch>\r\n                <div className=\"tabBarMask\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, null)(AppContent);\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Icon, Modal, NavBar, Popover, Toast} from \"antd-mobile\";\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\nimport './AppHeader.sass';\r\nimport {reloadSensors} from \"../api/sensor\";\r\nimport {doZeroAll, setCompensationState} from '../api/slot';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        title: state.globalTitle,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\nconst CompensationActions = ['Enable', 'Disable', 'Cancel'];\r\n\r\nclass AppHeader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            popoverVisible: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.showHeader) {\r\n            return null;\r\n        }\r\n        const {title} = this.props;\r\n        return (\r\n            <div className=\"appHeader\">\r\n                <NavBar\r\n                    leftContent={<Icon type=\"left\" onClick={() => this.onBackClick()}/>}\r\n                    rightContent={this.rightContent()}\r\n                    mode=\"light\"\r\n                >{title}</NavBar>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    rightContent() {\r\n        const {popoverVisible} = this.state;\r\n        const Item = Popover.Item;\r\n        return (<Popover mask\r\n                         visible={popoverVisible}\r\n                         overlay={[\r\n                             (<Item key=\"about\" value=\"about\"\r\n                                    data-seed=\"logId\">About</Item>),\r\n                             (<Item key=\"settings\" value=\"settings\"\r\n                                    style={{whiteSpace: 'nowrap'}}>Settings</Item>),\r\n                             (<Item key=\"reload\" value=\"reload\"\r\n                                    style={{whiteSpace: 'nowrap'}}>Reload</Item>),\r\n                             (<Item key=\"doZero\" value=\"reload\"\r\n                                    style={{whiteSpace: 'nowrap'}}>ZeroAll</Item>),\r\n                             (<Item key=\"compensation\" value=\"compensation\"\r\n                                    style={{whiteSpace: 'nowrap'}}>Compensation</Item>),\r\n                         ]}\r\n                         onSelect={e => this.onPopoverSelect(e)}\r\n        >\r\n            <Icon type=\"ellipsis\"/>\r\n        </Popover>);\r\n    }\r\n\r\n    onBackClick() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    onPopoverSelect(e) {\r\n        switch (e.key) {\r\n            case 'about':\r\n                this.props.history.push({\r\n                    pathname: '/about',\r\n                });\r\n                break;\r\n            case 'settings':\r\n                this.props.history.push({\r\n                    pathname: '/setting/',\r\n                });\r\n                break;\r\n            case 'reload':\r\n                this.doReloadSensors();\r\n                break;\r\n            case 'doZero':\r\n                this.showZeroAllConfirm();\r\n                break;\r\n            case 'compensation':\r\n                this.showCompensationOperations();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({\r\n            popoverVisible: false\r\n        });\r\n    }\r\n\r\n    showZeroAllConfirm() {\r\n        Modal.alert('Zero All', 'Do zero for all sensors?', [{text: 'Cancel'}, {\r\n            text: 'Yes', onPress() {\r\n                doZeroAll().then(() => {\r\n                    Toast.show('Zero all success!', 1, false);\r\n                });\r\n            }\r\n        }])\r\n    }\r\n\r\n    showCompensationOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: CompensationActions,\r\n            title: 'Compensation operations',\r\n            cancelButtonIndex: CompensationActions.length - 1,\r\n            destructiveButtonIndex: 1,\r\n        }, index => {\r\n            const name = CompensationActions[index];\r\n            switch (name) {\r\n                case 'Enable':\r\n                    this.doSetCompensationState(true);\r\n                    break;\r\n                case 'Disable':\r\n                    this.doSetCompensationState(false);\r\n                    break;\r\n                default:\r\n                    break\r\n            }\r\n        });\r\n    }\r\n\r\n    doSetCompensationState(state) {\r\n        setCompensationState(state).then(() => {\r\n            const message = (state ? 'Enable' : 'Disable') + ' Compensation Success!';\r\n            Toast.show(message, 1, false);\r\n        });\r\n    }\r\n\r\n    doReloadSensors() {\r\n        Modal.alert('Reload Sensors', 'Reload sensors from database into weightService',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                },\r\n                {\r\n                    text: 'Yes',\r\n                    onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('Reload Success!');\r\n                        });\r\n                    },\r\n                },\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props)(AppHeader));\r\n","import {createBrowserHistory} from 'history';\r\nimport {setRouterPath} from '../store/actionCreators'\r\nimport store from '../store';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst notifyPathChanged = location => {\r\n    const info = {\r\n        pathname: location.pathname,\r\n        search: location.search,\r\n        hash: location.hash\r\n    };\r\n    const action = setRouterPath(info);\r\n    store.dispatch(action);\r\n};\r\nhistory.listen((action) => {\r\n    notifyPathChanged(action.location);\r\n});\r\n\r\n\r\nnotifyPathChanged(history.location);\r\nexport default history;\r\n","import React from 'react'\nimport './App.css'\nimport store from './store'\nimport {Provider} from 'react-redux'\nimport AppTabBar from './component/AppTabBar'\nimport AppContent from './component/AppContent'\nimport AppHeader from './component/AppHeader'\nimport {HashRouter as Router} from 'react-router-dom'\nimport history from './util/History'\nimport {fetchEnableTabBarAction} from './store/actionCreators';\n\nclass App extends React.Component {\n    componentDidMount() {\n        store.dispatch(fetchEnableTabBarAction());\n    }\n\n    render() {\n        return (\n            <Router history={history}>\n                <Provider store={store}>\n                    <div className=\"app-content\">\n                        <AppHeader/>\n                        <AppContent/>\n                        <AppTabBar/>\n                    </div>\n                </Provider>\n            </Router>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import 'babel-polyfill'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n/*ReactDOM.render(\n    <React.StrictMode>\n        <App/>,\n    </React.StrictMode>,\n    document.getElementById('root')\n);*/\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}