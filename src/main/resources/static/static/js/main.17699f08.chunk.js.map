{"version":3,"sources":["store/reducer.js","store/actionTypes.js","store/index.js","component/AppTabBar.jsx","api/request.js","util/httpUtils.js","api/dashboard.js","api/sensor.js","store/actionCreators.js","api/connection.js","util/DataConvertor.js","component/content/Dashboard.jsx","component/content/setting/SensorSetting.jsx","component/content/setting/SettingMenu.jsx","component/content/setting/SlotSetting.jsx","api/slot.js","component/content/setting/ConnectionSetting.jsx","component/content/setting/SlotDetailSetting.jsx","component/content/Setting.jsx","component/content/Address.jsx","component/content/Logs.jsx","component/AppContent.jsx","component/AppHeader.jsx","util/History.js","App.js","serviceWorker.js","index.js"],"names":["defaultState","showTabBar","globalTitle","routerPath","dashboardSlots","sensors","connections","user","name","actionTable","registerReducer","type","reducer","state","action","data","sensorId","hasElable","hasElabel","sensor","id","JSON","parse","stringify","filter","connection","allEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","handler","AppTabBar","this","props","className","unselectedTintColor","tintColor","barTintColor","hidden","tabBarPosition","Item","title","icon","onPress","pushPath","path","history","push","pathname","React","Component","withRouter","connect","hideLoading","hide","showError","msg","fail","request","options","showLoading","loading","Promise","resolve","reject","axios","httpRequest","then","res","status","body","code","catch","err","dataTemplate","deviceSn","address","slotId","slot","slotNo","setTabBarState","show","setTitle","asyncFetchDashboardSlotData","dispatch","url","method","slots","key","hasOwnProperty","asyncFetchSensors","toggleSensorElable","asyncFetchConnection","asyncDeleteConnection","deleteConnection","isWarn","toleranceState","connectionTypes","1","2","asConnectionType","isStable","weightState","Dashboard","startFetchData","clearInterval","fetchTimer","fetchSlotData","setInterval","renderHeader","map","Header","extra","sku","Body","justify","count","weight","toFixed","Footer","content","skuNo","SensorSetting","checked","onChange","e","toggleElabel","fetchSensors","SettingMenu","onClick","go","SlotSetting","fetchSlots","toSlotDetail","skuName","doZeroAll","setState","label","value","ConnectionSetting","createDialogVisible","create","target","fetchConnection","showCreateDialog","visible","transparent","footer","text","createConnection","cols","setCreateType","disabled","placeholder","setCreateTarget","types","length","newCreate","ActionButtons","SlotDetailSetting","match","params","skuApw","skuTolerance","openOperation","applyModify","showActionSheetWithOptions","destructiveButtonIndex","cancelButtonIndex","buttonIndex","button","doZero","Setting","component","exact","Address","img","size","style","fill","message","info","Logs","AppContent","AppHeader","leftContent","back","rightContent","mode","goBack","createBrowserHistory","notifyPathChanged","location","setRouterPath","search","hash","listen","App","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.17699f08.chunk.js","sourcesContent":["import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\n\r\nconst defaultState = {\r\n    showTabBar: true,\r\n    globalTitle: '重力货道',\r\n    routerPath: null,\r\n    dashboardSlots: [],\r\n    sensors: [],\r\n    connections: [],\r\n    user: {\r\n        name: 'MonolithIoT'\r\n    }\r\n};\r\nconst actionTable = {};\r\nconst registerReducer = (type, reducer) => {\r\n    actionTable[type] = reducer;\r\n};\r\nregisterReducer(SET_TABBAR_STATE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showTabBar: action.data\r\n    };\r\n});\r\nregisterReducer(SET_ROUTER_PATH, (state, action) => {\r\n    return {\r\n        ...state,\r\n        routerPath: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_DASHBOARD_SLOT_DATA, (state, action) => {\r\n    return {\r\n        ...state,\r\n        dashboardSlots: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(SET_TITLE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        globalTitle: action.data,\r\n    }\r\n});\r\nregisterReducer(ASYNC_FETCH_SENSORS, (state, action) => {\r\n    return {\r\n        ...state,\r\n        sensors: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(TOGGLE_SENSOR_ELABLE, (state, action) => {\r\n    const sensors = state.sensors;\r\n    const sensorId = action.data.sensorId;\r\n    const hasElable = action.data.hasElabel;\r\n    for (let sensor of sensors) {\r\n        if (sensor.id === sensorId) {\r\n            sensor.hasElable = hasElable;\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        sensors: JSON.parse(JSON.stringify(sensors))\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_CONNECTION, (state, action) => {\r\n    return {\r\n        ...state,\r\n        connections: action.data,\r\n    };\r\n});\r\nregisterReducer(DELETE_CONNECTION, (state, action) => {\r\n    const id = action.data.id;\r\n    const connections = state.connections.filter(connection => connection.id !== id);\r\n    return {\r\n        ...state,\r\n        connections\r\n    };\r\n});\r\nexport default (state = defaultState, action) => {\r\n    const type = action.type;\r\n    if (type in actionTable) {\r\n        const handler = actionTable[type];\r\n        return handler(state, action);\r\n    }\r\n    return state;\r\n}\r\n","export const SET_USER = \"user.set\";\r\n\r\nexport const SET_TABBAR_STATE = 'tabBar.set';\r\n\r\nexport const SET_ROUTER_PATH = 'router.path.set';\r\n\r\nexport const ASYNC_FETCH_DASHBOARD_SLOT_DATA = 'dashboard.slot_data.fetch.async';\r\n\r\nexport const SET_TITLE = 'title.set';\r\n\r\nexport const ASYNC_FETCH_SENSORS = 'sensors.fetch.async';\r\n\r\nexport const TOGGLE_SENSOR_ELABLE = 'sensor.elabel.toggle';\r\n\r\nexport const ASYNC_FETCH_CONNECTION = 'connections.fetch.async';\r\n\r\nexport const DELETE_CONNECTION = 'connection.delete';\r\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport reducer from './reducer';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst allEnhancers = reduxDevTools(applyMiddleware(thunk));\r\nconst store = createStore(reducer, allEnhancers);\r\n\r\nexport default store;\r\n","import React from 'react'\r\nimport {Icon, TabBar} from 'antd-mobile'\r\nimport {connect} from 'react-redux';\r\nimport './AppTabBar.sass'\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showTabBar: state.showTabBar,\r\n    };\r\n};\r\n\r\nclass AppTabBar extends React.Component {\r\n    render() {\r\n        const showTabBar = this.props.showTabBar;\r\n        if (showTabBar) {\r\n            return (<div className=\"appTabBar\">\r\n                <TabBar\r\n                    unselectedTintColor=\"#949494\"\r\n                    tintColor=\"#33A3F4\"\r\n                    barTintColor=\"white\"\r\n                    hidden={!this.props.showTabBar}\r\n                    tabBarPosition=\"bottom\">\r\n                    <TabBar.Item title=\"Dashboard\" icon={<Icon type=\"check-circle\"/>}\r\n                                 onPress={() => this.pushPath('/')}/>\r\n                    <TabBar.Item title=\"Logs\" icon={<Icon type=\"check-circle\"/>}\r\n                                 onPress={() => this.pushPath('/logs')}/>\r\n                    <TabBar.Item title=\"Address\" icon={<Icon type=\"check-circle\"/>}\r\n                                 onPress={() => this.pushPath('/address')}/>\r\n                    <TabBar.Item title=\"Setting\" icon={<Icon type=\"check-circle\"/>}\r\n                                 onPress={() => this.pushPath('/setting')}/>\r\n                </TabBar>\r\n            </div>)\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    pushPath(path) {\r\n        this.props.history.push({\r\n            pathname: path,\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(AppTabBar));\r\n","import {httpRequest} from '../util/httpUtils';\r\nimport {Toast} from 'antd-mobile'\r\n\r\nconst showLoading = () => {\r\n    Toast.loading('Loading', 0);\r\n};\r\nconst hideLoading = () => {\r\n    Toast.hide();\r\n};\r\nconst showError = (msg) => {\r\n    Toast.fail(msg);\r\n};\r\n\r\n\r\nexport function request(options) {\r\n    if (options.showLoading) {\r\n        showLoading();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        httpRequest(options)\r\n            .then(res => {\r\n                hideLoading();\r\n                if (res.status !== 200) {\r\n                    showError(`Http Response Status:${res.status}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                const body = res.data;\r\n                if (body.code !== 200) {\r\n                    showError(`Error [${body.code}]:${body.msg}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                resolve(body.data);\r\n            }).catch(err => {\r\n                hideLoading();\r\n                showError(err);\r\n                reject(err);\r\n            }\r\n        );\r\n    })\r\n}\r\n","import axios from 'axios'\r\n\r\nexport function httpRequest(options) {\r\n    return axios(options);\r\n}\r\n","import {request} from './request';\r\n\r\nexport const fetchSlotData = () => {\r\n    return request({\r\n        url: '/api/dashboard/slot-data',\r\n        method: 'get',\r\n        showLoading: false,\r\n    });\r\n};\r\n","const dataTemplate = [\r\n    {\r\n        id: 1,\r\n        deviceSn: '123456789',\r\n        address: 10,\r\n        hasElable: true,\r\n        slotId: 1,\r\n        slot: {\r\n            id: 1,\r\n            slotNo: 'A-1-1'\r\n        }\r\n    },\r\n    {\r\n        id: 2,\r\n        deviceSn: '123456789',\r\n        address: 10,\r\n        hasElable: true,\r\n        slotId: 1,\r\n        slot: {\r\n            id: 1,\r\n            slotNo: 'A-1-1'\r\n        }\r\n    },\r\n    {\r\n        id: 3,\r\n        deviceSn: '123456789',\r\n        address: 10,\r\n        hasElable: false,\r\n        slotId: 1,\r\n        slot: {\r\n            id: 1,\r\n            slotNo: 'A-1-1'\r\n        }\r\n    }\r\n];\r\n\r\nexport const fetchSensors = () => {\r\n    return new Promise((resolve, reject) => {\r\n        resolve(dataTemplate);\r\n    });\r\n};\r\n\r\nexport const toggleElable = (sensorId, hasElabel) => {\r\n    return new Promise((resolve, reject) => {\r\n        resolve();\r\n    })\r\n};\r\n","import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    SET_USER,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\nimport {fetchSlotData} from '../api/dashboard';\r\nimport {fetchSensors, toggleElable} from '../api/sensor';\r\nimport {deleteConnection, fetchConnections} from '../api/connection';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: SET_USER,\r\n        data: user\r\n    }\r\n};\r\nexport const setTabBarState = show => {\r\n    return {\r\n        type: SET_TABBAR_STATE,\r\n        data: show\r\n    };\r\n};\r\n\r\nexport const setRouterPath = info => {\r\n    return {\r\n        type: SET_ROUTER_PATH,\r\n        data: info\r\n    };\r\n};\r\nexport const setTitle = title => {\r\n    return {\r\n        type: SET_TITLE,\r\n        data: title,\r\n    }\r\n};\r\nexport const asyncFetchDashboardSlotData = () => {\r\n    return dispatch => {\r\n        fetchSlotData().then(res => {\r\n            const slots = [];\r\n            for (const key in res) {\r\n                if (res.hasOwnProperty(key)) {\r\n                    slots.push(res[key]);\r\n                }\r\n            }\r\n            const action = {\r\n                type: ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n                data: slots\r\n            };\r\n            dispatch(action);\r\n        });\r\n    }\r\n};\r\n\r\nexport const asyncFetchSensors = () => {\r\n    return dispatch => {\r\n        fetchSensors().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_SENSORS,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const toggleSensorElable = (sensorId, hasElabel) => {\r\n    return dispatch => {\r\n        toggleElable().then(() => {\r\n            const action = {\r\n                type: TOGGLE_SENSOR_ELABLE,\r\n                data: {\r\n                    sensorId,\r\n                    hasElabel\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    };\r\n};\r\n\r\n\r\nexport const asyncFetchConnection = () => {\r\n    return dispatch => {\r\n        fetchConnections().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_CONNECTION,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const asyncDeleteConnection = id => {\r\n    return dispatch => {\r\n        deleteConnection(id).then(() => {\r\n            const action = {\r\n                type: DELETE_CONNECTION,\r\n                data: {\r\n                    id: id\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    }\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchConnections = () => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const deleteConnection = id => {\r\n    return request({\r\n        url: `/api/connection/${id}`,\r\n        method: 'delete',\r\n    });\r\n};\r\n\r\nexport const createConnection = connection => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'put',\r\n        data: connection,\r\n    });\r\n};\r\n\r\n","export const asKg = g => {\r\n    return (g / 1000.0).toFixed(3);\r\n};\r\n\r\nexport const isWarn = (slot) => {\r\n    return (slot.data && slot.data.toleranceState) === 'incredible';\r\n};\r\n\r\nconst connectionTypes = {\r\n    1: 'Serial',\r\n    2: 'Network',\r\n};\r\n\r\nexport const asConnectionType = type => {\r\n    if (type in connectionTypes) {\r\n        return connectionTypes[type];\r\n    }\r\n    return `Unknown [${type}]`;\r\n};\r\n\r\nconst weightStateTable = {\r\n    1: 'stable',\r\n    2: 'dynamic',\r\n    3: 'underLoad',\r\n    4: 'overLoad',\r\n};\r\nexport const isStable = weightState => {\r\n    return weightState === 1;\r\n};\r\n\r\nexport const asWeightStateString = state => {\r\n    return state in weightStateTable ? weightStateTable[state] : state;\r\n};\r\n","import React, {Component} from 'react';\r\nimport {asyncFetchDashboardSlotData, setTitle} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {Card, Flex, List} from 'antd-mobile';\r\nimport './Dashboard.sass'\r\nimport {asKg, isStable, isWarn} from '../../util/DataConvertor';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        slots: state.dashboardSlots\r\n    };\r\n};\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSlotData: (...args) => dispatch(asyncFetchDashboardSlotData(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Dashboard');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startFetchData();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.fetchTimer);\r\n    }\r\n\r\n    startFetchData() {\r\n        this.props.fetchSlotData();\r\n        this.fetchTimer = setInterval(() => {\r\n            this.props.fetchSlotData();\r\n        }, 3000);\r\n    }\r\n\r\n    render() {\r\n        const slots = this.props.slots;\r\n        const {Item} = List;\r\n        return (\r\n            <div className=\"dashboard\">\r\n                <List renderHeader={() => 'SLOT LIST'}>\r\n                    {slots.map(slot => (<Item key={slot.slotNo}>\r\n                        <Card className={isWarn(slot) ? 'warn' : ''}>\r\n                            <Card.Header title={slot.slotNo} extra={slot.sku && slot.sku.name}/>\r\n                            <Card.Body>\r\n                                <Flex className=\"slotCard\" justify=\"center\">\r\n                                    <div className=\"count\">\r\n                                        <span\r\n                                            className={isWarn(slot) ? 'warn value' : 'value'}>{slot.data && slot.data.count}</span>\r\n                                        <span className=\"unit\">pis</span>\r\n                                    </div>\r\n                                    <div\r\n                                        className={isStable(slot.data && slot.data.weightState) ? 'weight' : 'weight warn'}>\r\n                                        <span\r\n                                            className={isWarn(slot) ? 'warn value' : 'value'}>{isStable(slot.data && slot.data.weightState) ? '' : '~'}{slot.data && asKg(slot.data.weight)}</span>\r\n                                        <span className=\"unit\">kg</span>\r\n                                    </div>\r\n                                </Flex>\r\n                            </Card.Body>\r\n                            <Card.Footer content={slot.sku && slot.sku.skuNo}/>\r\n                        </Card>\r\n                    </Item>))}\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(Dashboard);\r\n","import React, {Component} from 'react';\r\nimport {Card, Flex, List, Switch} from \"antd-mobile\";\r\nimport {asyncFetchSensors, setTabBarState, setTitle, toggleSensorElable} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSensors: (...args) => dispatch(asyncFetchSensors(...args)),\r\n        toggleSensorElable: (...args) => dispatch(toggleSensorElable(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    }\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        sensors: state.sensors,\r\n    };\r\n};\r\n\r\nclass SensorSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Sensor Setting');\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.props;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <List renderHeader={() => 'Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => (<List.Item key={sensor.id}>\r\n                            <Card>\r\n                                <Card.Header title={`Address:${sensor.address}`} extra={sensor.deviceSn}/>\r\n                                <Card.Body>\r\n                                    <Flex justify=\"between\">\r\n                                        <span>ELabel</span>\r\n                                        <Switch checked={sensor.hasElable}\r\n                                                onChange={(e) => this.toggleElabel(sensor, e)}/>\r\n                                    </Flex>\r\n                                </Card.Body>\r\n                                <Card.Footer content={`Slot:[${sensor.slot && sensor.slot.slotNo}]`}\r\n                                             extra={sensor.slot && sensor.slot.id}/>\r\n                            </Card>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchSensors();\r\n    }\r\n\r\n    toggleElabel(sensor, e) {\r\n        this.props.toggleSensorElable(sensor.id, e);\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(SensorSetting);\r\n","import React, {Component} from 'react';\r\nimport {Flex, Icon, List, WhiteSpace} from \"antd-mobile\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nclass SettingMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Setting');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"setting\">\r\n                <List>\r\n                    <List.Item onClick={() => this.go('/setting/sensor')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>Sensor Setting</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/slot')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>Slot Setting</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/connection')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>Connection Setting</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    go(path) {\r\n        this.props.history.push({\r\n            pathname: path\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SettingMenu));\r\n","import React, {Component} from 'react';\r\nimport {Button, Flex, Icon, List, Toast} from 'antd-mobile';\r\nimport {doZeroAll, fetchAllSlots} from '../../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst {Item} = List;\r\n\r\nclass SlotSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slots: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchSlots();\r\n    }\r\n\r\n    render() {\r\n        const {slots} = this.state;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <List renderHeader={() => 'Slot List'}>\r\n                    {\r\n                        slots.map(slot => (\r\n                            <Item key={slot.id} extra={<Icon type=\"right\"/>} onClick={() => this.toSlotDetail(slot)}>\r\n                                <Flex justify=\"between\">\r\n                                    <span className=\"slotNo\">{slot.slotNo}</span>\r\n                                    <span className=\"name\">{slot.skuName}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                </List>\r\n                <Flex>\r\n                    <Flex.Item>\r\n                        <Button type=\"primary\" onClick={() => this.doZeroAll()}>Do All Zero</Button>\r\n                    </Flex.Item>\r\n\r\n                    <Flex.Item>\r\n                        <Button type=\"primary\" onClick={() => this.fetchSlots()}>Refresh</Button>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    toSlotDetail(slot) {\r\n        this.props.history.push({\r\n            pathname: `/setting/slot-detail/${slot.id}`,\r\n        });\r\n    }\r\n\r\n    doZeroAll() {\r\n        doZeroAll().then(() => {\r\n            Toast.show('All Zeroed!');\r\n        })\r\n    }\r\n\r\n    fetchSlots() {\r\n        fetchAllSlots().then(res => {\r\n            this.setState({slots: res})\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(SlotSetting);\r\n","import {request} from './request';\r\n\r\nexport const doZeroAll = () => {\r\n    return request({\r\n        url: '/api/slot/zero-all',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const zeroOne = slotNo => {\r\n    return request({\r\n        url: `/api/slot/${slotNo}/zero`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllSlots = () => {\r\n    return request({\r\n        url: '/api/slot/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDetail = id => {\r\n    return request({\r\n        url: `/api/slot/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {asyncDeleteConnection, asyncFetchConnection, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {Button, Flex, Icon, InputItem, List, Modal, Picker, Toast} from 'antd-mobile';\r\nimport {asConnectionType} from '../../../util/DataConvertor';\r\nimport {createConnection} from '../../../api/connection';\r\nimport './ConnectionSetting.sass'\r\n\r\nconst connectionTypes = [\r\n    {\r\n        label: 'Serial',\r\n        value: 1,\r\n    },\r\n    {\r\n        label: 'Network',\r\n        value: 2,\r\n    }\r\n];\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchConnection: (...args) => dispatch(asyncFetchConnection(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        deleteConnection: (...args) => dispatch(asyncDeleteConnection(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        connections: state.connections,\r\n    };\r\n};\r\n\r\nclass ConnectionSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            createDialogVisible: false,\r\n            create: {\r\n                type: null,\r\n                target: ''\r\n            }\r\n        };\r\n        this.props.setTitle('Connection Setting');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchConnection();\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {connections} = this.props;\r\n        const {createDialogVisible} = this.state;\r\n        const {create} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Connections'}>\r\n                    {\r\n                        connections.map(connection => (<Item key={connection.id}>\r\n                            <Flex justify=\"between\" className=\"connectionItem\">\r\n                                <span className=\"type\">{asConnectionType(connection.type)}</span>\r\n                                <span className=\"target\">{connection.target}</span>\r\n                                <Icon className=\"deleteButton\" type=\"cross-circle\"\r\n                                      onClick={() => this.deleteConnection(connection)}/>\r\n                            </Flex>\r\n                        </Item>))\r\n                    }\r\n                    <Item key=\"createButton\">\r\n                        <Button type=\"primary\" onClick={() => this.showCreateDialog()}>Create New</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={createDialogVisible}\r\n                    transparent\r\n                    title=\"Create A Connection\"\r\n                    footer={[{\r\n                        text: 'Create', onPress: () => {\r\n                            this.createConnection();\r\n                        }\r\n                    }]}>\r\n                    <List title=\"Connection\">\r\n                        <Picker data={connectionTypes} title=\"Connection Type\" cols={1}\r\n                                extra=\"Choose\"\r\n                                onChange={e => this.setCreateType(e)}>\r\n                            <List.Item>\r\n                                <InputItem value={create.type && asConnectionType(create.type)}\r\n                                           disabled={true}\r\n                                           placeholder=\"Type\"/>\r\n                            </List.Item>\r\n                        </Picker>\r\n                        <List.Item>\r\n                            <InputItem placeholder=\"Connection Target\"\r\n                                       onChange={e => this.setCreateTarget(e)}\r\n                                       value={create.target}/>\r\n                        </List.Item>\r\n                    </List>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    deleteConnection(connection) {\r\n        this.props.deleteConnection(connection.id);\r\n    }\r\n\r\n    showCreateDialog() {\r\n        this.setState({\r\n            createDialogVisible: true\r\n        })\r\n    }\r\n\r\n    createConnection() {\r\n        createConnection(this.state.create).then(() => {\r\n            this.props.fetchConnection();\r\n            this.setState({\r\n                create: {},\r\n                createDialogVisible: false,\r\n            });\r\n        })\r\n    }\r\n\r\n    setCreateType(types) {\r\n        if (types.length < 1) {\r\n            Toast.show('Please Choose A Connection Type!');\r\n        }\r\n        const type = types[0];\r\n        const {create} = this.state;\r\n        const newCreate = {\r\n            ...create,\r\n            type,\r\n        };\r\n        this.setState({create: newCreate});\r\n    }\r\n\r\n    setCreateTarget(e) {\r\n        const create = {\r\n            ...this.state.create,\r\n            target: e,\r\n        };\r\n        this.setState({create});\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(ConnectionSetting);\r\n","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDetail, zeroOne} from '../../../api/slot';\r\nimport {ActionSheet, Button, Flex, InputItem, List, Toast} from 'antd-mobile';\r\n\r\nconst ActionButtons = [\r\n    'Do Zero',\r\n    'Delete',\r\n    'Cancel',\r\n];\r\nconst {Item} = List;\r\n\r\nclass SlotDetailSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {}\r\n        };\r\n        this.slotId = this.props.match.params.id;\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchDetail(this.slotId).then(res => {\r\n            this.setState({slot: res});\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {slot} = this.state;\r\n        return (\r\n            <div className=\"slotDetail\">\r\n                <List renderHeader={() => 'Slot Info'}>\r\n                    <Item key=\"slotNo\">\r\n                        <InputItem placeholder=\"Slot No\" value={slot.slotNo}>SlotNo</InputItem>\r\n                    </Item>\r\n                    <Item key=\"SkuName\">\r\n                        <InputItem placeholder=\"Sku Name\" value={slot.skuName}>SKUName</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuNo\">\r\n                        <InputItem placeholder=\"SKU No\" value={slot.skuNo}>SKUNo</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuApw\">\r\n                        <InputItem placeholder=\"SKU Apw\" value={slot.skuApw}>SKUApw</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuTolerance\">\r\n                        <InputItem placeholder=\"SKU Apw\" value={slot.skuTolerance}>SKUTolerance</InputItem>\r\n                    </Item>\r\n                </List>\r\n                <Flex>\r\n                    <Flex.Item>\r\n                        <Button type=\"primary\" onClick={() => this.openOperation()}>{`Operate ${slot.slotNo}`}</Button>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <Button type=\"primary\" onClick={() => this.applyModify()}>Apply Modify</Button>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    openOperation() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: 'Operations',\r\n            options: ActionButtons,\r\n            destructiveButtonIndex: 1,\r\n            cancelButtonIndex: ActionButtons.length - 1,\r\n        }, buttonIndex => {\r\n            const button = ActionButtons[buttonIndex];\r\n            if (button === 'Do Zero') {\r\n                this.doZero();\r\n            } else if (button === 'Delete') {\r\n                Toast.show('Unable To Delete!');\r\n            }\r\n        });\r\n    }\r\n\r\n    doZero() {\r\n        const {slot} = this.state;\r\n        zeroOne(slot.slotNo).then(() => {\r\n            Toast.show('Do Zero Success!');\r\n        });\r\n    }\r\n\r\n    applyModify() {\r\n        Toast.show('UnSupport!', 1);\r\n    }\r\n}\r\n\r\nexport default withRouter(SlotDetailSetting);\r\n","import React, {Component} from 'react';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport SensorSetting from './setting/SensorSetting'\r\nimport SettingMenu from './setting/SettingMenu'\r\nimport SlotSetting from './setting/SlotSetting'\r\nimport ConnectionSetting from './setting/ConnectionSetting'\r\nimport SlotDetailSetting from './setting/SlotDetailSetting'\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n    };\r\n};\r\n\r\nclass Setting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/setting/\" component={SettingMenu} exact/>\r\n                    <Route path=\"/setting/sensor\" component={SensorSetting} exact/>\r\n                    <Route path=\"/setting/slot\" component={SlotSetting} exact/>\r\n                    <Route path=\"/setting/connection\" component={ConnectionSetting} exact/>\r\n                    <Route path=\"/setting/slot-detail/:id\" component={SlotDetailSetting} exact/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Setting);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Result, Toast} from \"antd-mobile\";\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Address extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Config Address');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Result\r\n                    img={<Icon type=\"check-circle\" size=\"lg\" style={{fill: '#1F90E6'}}/>}\r\n                    title=\"开发中\"\r\n                    message=\"开发中\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中',1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Address);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Result, Toast} from 'antd-mobile';\r\nimport {setTitle} from \"../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Logs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Logs');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Result\r\n                    img={<Icon type=\"check-circle\" size=\"lg\" style={{fill: '#1F90E6'}}/>}\r\n                    title=\"开发中\"\r\n                    message=\"开发中\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中',1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Logs);\r\n","import React, {Component} from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Dashboard from './content/Dashboard'\r\nimport Setting from './content/Setting';\r\nimport Address from './content/Address';\r\nimport Logs from './content/Logs';\r\n\r\nclass AppContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Switch>\r\n                    <Route path=\"/\" component={Dashboard} exact/>\r\n                    <Route path=\"/setting**\" component={Setting} exact/>\r\n                    <Route path=\"/address\" component={Address} exact/>\r\n                    <Route path=\"/logs\" component={Logs} exact/>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppContent;\r\n","import React, {Component} from 'react';\r\nimport {Icon, NavBar} from \"antd-mobile\";\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        title: state.globalTitle,\r\n    };\r\n};\r\n\r\nclass AppHeader extends Component {\r\n    render() {\r\n        const {title} = this.props;\r\n        return (\r\n            <NavBar\r\n                leftContent={<Icon type=\"left\" onClick={() => this.back()}/>}\r\n                rightContent={<Icon type=\"ellipsis\"/>}\r\n                mode=\"light\"\r\n            >{title}</NavBar>\r\n        );\r\n    }\r\n\r\n    back() {\r\n        this.props.history.goBack();\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props)(AppHeader));\r\n","import {createBrowserHistory} from 'history';\r\nimport {setRouterPath} from '../store/actionCreators'\r\nimport store from '../store';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst notifyPathChanged = location => {\r\n    const info = {\r\n        pathname: location.pathname,\r\n        search: location.search,\r\n        hash: location.hash\r\n    };\r\n    const action = setRouterPath(info);\r\n    store.dispatch(action);\r\n};\r\nhistory.listen((action) => {\r\n    notifyPathChanged(action.location);\r\n});\r\n\r\n\r\nnotifyPathChanged(history.location);\r\nexport default history;\r\n","import React from 'react'\nimport './App.css'\nimport store from './store'\nimport {Provider} from 'react-redux'\nimport AppTabBar from './component/AppTabBar'\nimport AppContent from './component/AppContent'\nimport AppHeader from './component/AppHeader'\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport history from './util/History'\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router history={history}>\n                <Provider store={store}>\n                    <div className=\"app-content\">\n                        <AppTabBar/>\n                        <AppHeader/>\n                        <AppContent/>\n                    </div>\n                </Provider>\n            </Router>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    /*{<React.StrictMode>}*/\n    <App/>,\n    /*</React.StrictMode>,*/\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}