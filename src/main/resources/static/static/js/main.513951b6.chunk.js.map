{"version":3,"sources":["store/reducer.js","store/actionTypes.js","store/index.js","component/AppTabBar.jsx","api/request.js","util/httpUtils.js","api/dashboard.js","api/sensor.js","api/connection.js","api/config.js","store/actionCreators.js","util/datetimeUtils.js","context/metadata.js","util/DataConvertor.js","api/slot.js","component/content/Dashboard.jsx","store/storeUtils.js","component/commons/SlotCard.jsx","component/commons/SlotGroup.jsx","util/FetcherTask.js","component/commons/TempSensorCard.jsx","component/commons/SlotOperationModal.jsx","component/content/HomeDashboard.jsx","component/commons/FloatButton.jsx","component/content/setting/SensorSetting.jsx","component/content/setting/SettingMenu.jsx","component/content/setting/SlotSetting.jsx","component/content/setting/ConnectionSetting.jsx","component/content/setting/SlotDetailSetting.jsx","component/content/setting/SystemSetting.jsx","api/serial.js","component/content/setting/SystemPropsSetting.jsx","component/content/setting/Overview.jsx","component/content/setting/SystemCheck.jsx","api/systemStatus.js","component/content/setting/MessageLog.jsx","component/content/setting/SensorHealthy.jsx","api/healthy.js","api/firmware.js","component/content/setting/SensorDetails.jsx","component/content/setting/ThSensorSetting.jsx","api/thSensor.js","component/commons/LineCharts.jsx","component/content/setting/ThSensorDetailsSetting.jsx","api/tempHumidityLog.js","component/content/setting/ExtraPageSetting.jsx","component/content/Setting.jsx","component/content/Address.jsx","component/content/Logs.jsx","component/content/About.jsx","component/content/PidAnimation.jsx","util/DStar.js","util/DStarBoard.js","component/content/DStarAnimation.jsx","util/SlideDemoCanvas.js","component/content/SlideAnimation.jsx","component/content/ExtraPage.jsx","component/content/AsbogDashboard.jsx","component/AppContent.jsx","component/AppHeader.jsx","util/History.js","util/consoleBanner.js","App.js","serviceWorker.js","index.js"],"names":["defaultState","showTabBar","enableTabBar","showHeader","globalTitle","routerPath","dashboardSlots","sensors","connections","user","name","actionTable","registerReducer","type","reducer","state","action","data","sensorId","hasElabel","sensor","id","JSON","parse","stringify","filter","connection","allEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","handler","AppTabBar","props","path","this","className","unselectedTintColor","tintColor","barTintColor","hidden","tabBarPosition","Item","title","selected","icon","selectedIcon","onPress","pushPath","setState","history","push","pathname","React","Component","withRouter","connect","hideLoading","hide","showError","msg","fail","request","options","showLoadingToast","loading","Promise","resolve","reject","axios","httpRequest","then","res","status","body","code","catch","err","errStr","toString","fetchDashboardData","url","method","reloadSensors","fetchScanProgress","fetchExtraPageUri","setTabBarState","show","setTitle","asyncFetchDashboardSlotData","dispatch","slots","key","hasOwnProperty","sort","a","b","slotNo","localeCompare","asyncFetchSensors","address","toggleSensorElable","toggleElable","asyncFetchConnection","asyncDeleteConnection","deleteConnection","fetchEnableTabBarAction","value","setEnableTabBarAction","enable","setEnableTabBar","parseDate","str","groups","match","year","parseInt","month","date","hour","min","sec","d","Date","setFullYear","setMonth","setDate","setHours","setMinutes","setSeconds","ERROR_STATE","4","5","2","STATE_TABLE","1","3","SENSOR_TYPES","0","asKg","g","toFixed","connectionTypes","asConnectionType","slotSortWeight","compareBySlotNo","aName","bName","aNames","split","bNames","length","i","aItem","bItem","groupSlots","putSlot","slot","noItems","aWeight","substring","bWeight","asStateString","thSensorStateTable","thSensorStateText","lastHighlightSlot","lastTime","lastSlot","skuUpdateTime","time","getTime","zeroOne","encodedSlotNo","encodeURIComponent","highlightBySku","sku","skuNo","toggleEnableState","slotId","lockSlot","TabItems","Dashboard","rootEle","document","groupedSlots","thSensors","sensorModalVisible","operationSlot","searchSkuNo","noticeSlots","lastNoticeSlot","renderSlotCard","bind","startFetchData","console","log","listenKeyPress","onkeypress","e","target","tagName","toLowerCase","keyCode","triggerHighlight","appendSearchSku","String","fromCharCode","c","fetchTimer","clearInterval","cancelKeyPress","setInterval","slotData","thData","temperatureHumidityData","temperature","humidity","tempStateText","temperatureState","tempWarn","humidityText","tempClass","stateClass","cardClass","stateStr","tempClassStr","join","no","map","renderThSensorCard","highlightSlotIds","tabs","onChange","tab","index","onTabChange","onSubmit","renderNoticeBar","group","renderGroupItem","renderThSensors","visible","transparent","footer","text","doSlotZero","onClose","renderHeader","extra","deviceSn","Brief","address485","content","skuName","skuShelfLifeOpenDays","wrap","justify","slotCardClassName","isWan","isDisable","isOffline","incredible","isIncredible","toleranceState","weightInKg","weight","count","isStable","weightState","asCount","onClick","onSlotCardClick","trim","ts","findLastNoticeSlot","setTimeout","alert","callDoZero","component","fetchSlotData","mapState","mapAction","mapStateAndAction","SLOT_CARD_CLASS_TABLE","TOLERANCE_STATE_CLASS_TABLE","SlotCard","highLight","errorOnly","pcs","formatPcs","formatSkuNo","slotCardClassStr","slotCardClass","pcsClassStr","pcsClass","merged","isHighLight","highLightSlotTable","SlotGroup","onCardClick","highlightSlotTable","renderSlots","FetcherTask","config","fetchData","onNewData","duration","onError","running","runNext","timmer","start","clearTimeout","CARD_CLASS_TABLE","BODY_CLASS_TABLE","TempSensorCard","temp","formatTemp","tempState","cardClassStr","bodyClassStr","bodyClass","renderSensor","SlotOperationModal","_this","maskClosable","renderSensors","doZero","asHighlightSlotTable","dict2List","dict","rootDom","searchValue","noticeSlot","tempSensors","currentTab","slotOperationVisible","selectedSlot","errorNotice","showErrorOnly","searchErrorModal","initFetcher","registerKeyPressHandler","fetcherTask","stop","cancelKeyPressHandler","char","submitSearch","searchSku","onDashboardDataRefresh","onFetcherError","error","showSearchErrorModal","closeSearchErrorTimmer","WarningOutlined","tab0Class","tab1Class","tab2Class","switchPageWithDelay","renderErrorNotice","renderTabs","placeholder","ScanOutlined","renderSlotOperationModal","FloatButton","defaultPosition","right","bottom","down","style","callOnClick","iconType","TYPE_PICKER_DATA","item","label","SensorSetting","typePickerVisible","typePickerTitle","fetchSensors","typeName","Header","Body","checked","toggleElabel","platform","arrow","toSensorDetails","showTypePicker","Footer","renderCardListItem","cols","onDismiss","onOk","updateSensorType","showOperationActions","updatingTypeSensor","buttons","showActionSheetWithOptions","cancelButtonIndex","destructiveButtonIndex","callReloadSensors","SettingMenu","go","OperationActions","SlotSetting","selectedNums","continueSelected","fetchSlots","s","selectedMap","selectedMinAddress","Object","keys","isContinueSelected","indivisible","onItemClick","renderSlotSensors","selectedNumStyle","renderSlotItem","showOperationSheet","findSelectedSlots","slotNos","ids","slotIds","toSlotDetail","doZeroAll","mergeSlot","resetSlotSensor","toSelectedSlotDetails","chooseAllSlotSensor","ConnectionOperations","scanResultMap2Arr","result","scanStateTable","ConnectionSetting","createDialogVisible","create","serialPorts","scanProgressVisible","scanProgress","progress","end","errors","scanError","tempHumScanProgressVisible","fetchConnection","scanProgressFetcher","currentAddress","scanResult","humidityScanning","showConnectionOperations","showCreateDialog","createConnection","setCreateType","disabled","input","setCreateTarget","arr","setCreateTargetSerial","percent","position","stopFetchScanProgress","sensorSn","elabelSn","stopHumidityScanning","startFetchScanProgress","types","newCreate","port","serialIndexList","connectionId","refreshDeviceUsbId","usbDeviceId","scanConnection","startScanTHSensors","ActionButtons","SlotDetailSetting","params","fetchSlotInfo","setUpdateSlotProp","skuApw","skuTolerance","applyModify","toggleELabel","operateIndivisible","openOperation","message","doOperateIndivisible","prompt","password","buttonIndex","showLockModal","states","hasELabel","option","VERSION_SELECTOR_OPTIONS","DATA_TO_SHOW","SystemSetting","systemInfo","libLoadVisible","reloadLibPath","refreshConfig","showLibLoadModal","libPath","showProtocolVersionSelector","stopWeightService","reloadLibrary","autoHeight","version","createIfNotExists","setProtocolVersion","SystemPropsSetting","systemProps","propList","p","labelNumber","Overview","refresh","renderSensorItem","onSensorClick","list","SoftFilterLevelTable","SoftFilterLevels","doSetCompensationState","enableCompensation","setCompensationState","SystemCheck","statusTable","tcpApi","databaseTables","softFilterLevel","softFilterLevelLabel","displayAutoUnit","refreshStatusTable","refreshSoftFilterLevel","refreshDisplayAutoUnitState","level","operation","color","ip","reconnectTcp","setSoftFilterLevel","showCompensationOperations","showReloadConfirm","showCleanBackupSnConfirm","autoUnit","tableName","showDbResetConfirm","refreshDatabaseTables","updateSoftFilterLevel","doDbReset","renderMessageItem","rows","seqNo","MessageLog","logs","refreshLogs","refreshTimmer","operations","ClickOperations","UPGRADE_PROGRESS_STATE_TABLE","SensorHealthy","upgradePercent","upgradeProgress","refreshSensors","tryReleaseUpgradeProgressTimmer","upgradeFirmwareTimmer","healthyList","showUpgradeProgress","cb","upgradeProgressPercent","undefined","total","current","helthy","renderSensorCard","onUpgradeProgressModalClose","doAbortFirmwareUpgrade","showOperations","healthy","tryRecoveryElabelAddress","tryRecoverySensorAddress","tryRecoverySensorAddressWithOriginSn","upgradeFirmware","upgradeElabelFirmware","recoverySensorAddress","recoveryElabelAddress","packageCounter","totalSuccess","totalErrors","errorsRate","warn","errorRateInPer","minRate","doFirmwareUpgrade","elabelSuccess","elabelErrors","doElabelFirmwareUpgrade","refreshUpgradeProgress","refreshUpgradeProgressCb","zeroOffset","zeroReference","successRate","eLabelTotal","elabelSuccessRate","elabelErrorosRate","elabelContinueErrors","continueErrors","showCleanCounterConfirm","doCleanCounter","SensorDetails","sensorParams","refreshParams","param","ThSensorSetting","toDetail","LineCharts","canvas","charts","echarts","init","refreshCharts","xData","yData","series","names","y","tooltip","trigger","legend","xAxis","yAxis","setOption","width","height","ref","onCanvasLoad","defaultProps","ThSensorDetailsSetting","dataLogs","chartsXData","chartsYData","currentTemp","tempData","maxTempData","minTempData","createTime","maxTemperature","minTemperature","timeStr","getHours","getMinutes","getSeconds","refreshDataLog","fetchOneSensor","currentTemperature","calibrateTemp","setSensorData","maxHumidity","minHumidity","updateRange","txt","ExtraPageSetting","pageUri","uri","setPageUri","gotoExtraPage","exact","Address","info","Logs","About","drawerOpen","autoplay","infinite","backgroundColor","I","PidAnimation","x","xSum","lastErrorX","ySum","lastErrorY","onTimer","onclick","offsetX","offsetY","onCanvasClick","canvasContext","getContext","reDrawPoint","clearRect","fillStyle","fillRect","errorX","derivativeX","outX","Math","CanvasWidth","max","errorY","derivativeY","outY","CanvasHeight","calcDistance","pa","pb","dx","abs","tx","dy","ty","CloseList","pointTable","priority","point","DStar","onRePlan","requestPoint","mapSize","updateCurrent","wallCache","planPath","planPathIndex","rePlan","steps","nextPoint","closeList","nextStep","asPath","openList","nearPoint","minCoastPoint","minNum","num","calcMin","xMax","yMax","nextX","nextY","hasKey","updateNearPointInfo","updatePointInfo","base","xOffset","yOffset","drawCross","ctx","strokeStyle","beginPath","moveTo","lineTo","stroke","DStarBoard","onMessage","wallList","clickAction","currentPoint","targetPoint","onCanvasPress","rePaint","setupDStar","shutdown","timer","dStar","firstPlan","floor","getPressPoint","addWall","removeWall","markTarget","setTarget","drawBackground","drawWall","drawCurrent","drawTarget","drawPlanPath","WIDTH_STEP","HEIGHT_STEP","arc","PI","wall","CLICK_ACTION_NAMES","rePlanSteps","board","checkCanvasChanged","pathList","setup","setClickAction","clickActionName","changeBoardClickAction","setupTimer","onCanvasBind","BOX_LIST","mode","SlideDemoCanvas","getAttribute","boxList","box","drawBox","rect","last","pop","unshift","nextFrame","slideCanvas","slideDemoBoard","play","onSlideAnimationCanvasBind","ExtraPage","src","renderFrame","OPERATIONS","calibrateVisible","calibrateStep","calibrateSlot","calibrateSpan","dataFetcher","prefix","prettySlotData","tareWithValue","tare","showCalibrate","test","tareValue","span","calibrateWithSpan","showSlotOperations","onCalibrateNext","Step","AppContent","HomeDashboard","Setting","DStarAnimation","SlideAnimation","AsbogDashboard","AppHeader","popoverVisible","leftContent","onBackClick","rightContent","mask","overlay","data-seed","whiteSpace","onSelect","onPopoverSelect","goBack","doReloadSensors","createBrowserHistory","notifyPathChanged","location","setRouterPath","search","hash","listen","printBanner","App","consoleBanner","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.513951b6.chunk.js","sourcesContent":["import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\n\r\nconst defaultState = {\r\n    showTabBar: true,\r\n    enableTabBar: false,\r\n    showHeader: true,\r\n    globalTitle: '重力货道',\r\n    routerPath: null,\r\n    dashboardSlots: [],\r\n    sensors: [],\r\n    connections: [],\r\n    user: {\r\n        name: 'MonolithIoT'\r\n    }\r\n};\r\nconst actionTable = {};\r\nconst registerReducer = (type, reducer) => {\r\n    actionTable[type] = reducer;\r\n};\r\nregisterReducer(SET_TABBAR_STATE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showTabBar: action.data\r\n    };\r\n});\r\nregisterReducer(SET_ROUTER_PATH, (state, action) => {\r\n    return {\r\n        ...state,\r\n        routerPath: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_DASHBOARD_SLOT_DATA, (state, action) => {\r\n    return {\r\n        ...state,\r\n        dashboardSlots: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(SET_TITLE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        globalTitle: action.data,\r\n    }\r\n});\r\nregisterReducer(ASYNC_FETCH_SENSORS, (state, action) => {\r\n    return {\r\n        ...state,\r\n        sensors: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(TOGGLE_SENSOR_ELABLE, (state, action) => {\r\n    const sensors = state.sensors;\r\n    const sensorId = action.data.sensorId;\r\n    const hasElabel = action.data.hasElabel;\r\n    for (let sensor of sensors) {\r\n        if (sensor.id === sensorId) {\r\n            sensor.hasElabel = hasElabel;\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        sensors: JSON.parse(JSON.stringify(sensors))\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_CONNECTION, (state, action) => {\r\n    return {\r\n        ...state,\r\n        connections: action.data,\r\n    };\r\n});\r\nregisterReducer(DELETE_CONNECTION, (state, action) => {\r\n    const id = action.data.id;\r\n    const connections = state.connections.filter(connection => connection.id !== id);\r\n    return {\r\n        ...state,\r\n        connections\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_TAB_BAR, (state, action) => {\r\n    return {\r\n        ...state,\r\n        enableTabBar: action.data,\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_HEADER, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showHeader: action.data\r\n    };\r\n});\r\nexport default (state = defaultState, action) => {\r\n    const type = action.type;\r\n    if (type in actionTable) {\r\n        const handler = actionTable[type];\r\n        return handler(state, action);\r\n    }\r\n    return state;\r\n}\r\n","export const SET_USER = \"user.set\";\r\n\r\nexport const SET_TABBAR_STATE = 'tabBar.set';\r\n\r\nexport const SET_ROUTER_PATH = 'router.path.set';\r\n\r\nexport const ASYNC_FETCH_DASHBOARD_SLOT_DATA = 'dashboard.slot_data.fetch.async';\r\n\r\nexport const SET_TITLE = 'title.set';\r\n\r\nexport const ASYNC_FETCH_SENSORS = 'sensors.fetch.async';\r\n\r\nexport const TOGGLE_SENSOR_ELABLE = 'sensor.elabel.toggle';\r\n\r\nexport const ASYNC_FETCH_CONNECTION = 'connections.fetch.async';\r\n\r\nexport const DELETE_CONNECTION = 'connection.delete';\r\n\r\nexport const SET_ENABLE_TAB_BAR = 'system.tabBar.set';\r\n\r\nexport const SET_ENABLE_HEADER = 'system.header.set';\r\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport reducer from './reducer';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst allEnhancers = reduxDevTools(applyMiddleware(thunk));\r\nconst store = createStore(reducer, allEnhancers);\r\n\r\nexport default store;\r\n","import React from 'react'\r\nimport {TabBar} from 'antd-mobile'\r\nimport {connect} from 'react-redux';\r\nimport './AppTabBar.sass'\r\nimport {withRouter} from 'react-router-dom';\r\nimport {CodeSandboxCircleFilled as ExtraIcon} from '@ant-design/icons';\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showTabBar: state.showTabBar,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass AppTabBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            path: '/',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const showTabBar = this.props.showTabBar && this.props.enableTabBar;\r\n        const {path} = this.state;\r\n        if (showTabBar) {\r\n            return (\r\n                <div className=\"appTabBar\">\r\n                    <TabBar\r\n                        unselectedTintColor=\"#949494\"\r\n                        tintColor=\"#33A3F4\"\r\n                        barTintColor=\"white\"\r\n                        hidden={!this.props.showTabBar}\r\n                        tabBarPosition=\"bottom\">\r\n                        <TabBar.Item title=\"看板\"\r\n                                     selected={path === '/'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe64e;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe64e;</i>}\r\n                                     onPress={() => this.pushPath('/')}/>\r\n                        <TabBar.Item title=\"扩展\"\r\n                                     selected={path === '/extra'}\r\n                                     icon={<ExtraIcon className=\"buttonIcon\"/>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe60c;</i>}\r\n                                     onPress={() => this.pushPath('/extra')}/>\r\n                        {/*<TabBar.Item title=\"日志\"\r\n                                     selected={path === '/logs'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe60c;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe60c;</i>}\r\n                                     onPress={() => this.pushPath('/logs')}/>*/}\r\n                        {/*<TabBar.Item title=\"编址\"\r\n                                     selected={path === '/address'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe61b;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe61b;</i>}\r\n                                     onPress={() => this.pushPath('/address')}/>*/}\r\n                        <TabBar.Item title=\"设置\"\r\n                                     selected={path === '/setting'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe660;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe660;</i>}\r\n                                     onPress={() => this.pushPath('/setting')}/>\r\n                    </TabBar>\r\n                </div>)\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    pushPath(path) {\r\n        this.setState({\r\n            path,\r\n        });\r\n        this.props.history.push({\r\n            pathname: path,\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(AppTabBar));\r\n","import {httpRequest} from '../util/httpUtils';\r\nimport {Toast} from 'antd-mobile'\r\n\r\nconst showLoading = () => {\r\n    Toast.loading('Loading', 0);\r\n};\r\nconst hideLoading = () => {\r\n    Toast.hide();\r\n};\r\nconst showError = (msg) => {\r\n    Toast.fail(msg);\r\n};\r\n\r\n\r\nexport function request(options) {\r\n    const showLoadingToast = !options.hideLoading;\r\n    if (showLoadingToast) {\r\n        showLoading();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        httpRequest(options)\r\n            .then(res => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                if (res.status !== 200) {\r\n                    showError(`Http Response Status:${res.status}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                const body = res.data;\r\n                if (body.code !== 200) {\r\n                    showError(`Error [${body.code}]:${body.msg}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                resolve(body.data);\r\n            }).catch(err => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                const errStr = err.toString();\r\n                showError(errStr);\r\n                reject(err);\r\n            }\r\n        );\r\n    })\r\n}\r\n","import axios from 'axios'\r\n\r\nexport function httpRequest(options) {\r\n    return axios(options);\r\n}\r\n","import {request} from './request';\r\n\r\nexport const fetchSlotData = () => {\r\n    return request({\r\n        url: '/api/dashboard/slot-data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchSystemInfo = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-infos',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchSystemProps = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-props',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDashboardData = () => {\r\n    return request({\r\n        url: '/api/dashboard/_data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchDashboardDataByPrefix = prefix => {\r\n    return request({\r\n        url: '/api/dashboard/_data-for-prefix',\r\n        method: 'get',\r\n        hideLoading: true,\r\n        params: {\r\n            prefix\r\n        }\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/_with-slot',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const toggleElable = (sensorId, hasElabel) => {\r\n    return request({\r\n        url: `/api/sensor/${sensorId}/haselabel`,\r\n        method: 'post',\r\n        data: {\r\n            hasElabel: hasElabel\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const reloadSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/reload',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const setSlotByIds = (sensorIds, slotId) => {\r\n    return request({\r\n        url: '/api/sensor/_set-slot-id-by-ids',\r\n        method: 'post',\r\n        data: {\r\n            sensorIds,\r\n            slotId,\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const stopWeightService = () => {\r\n    return request({\r\n        url: '/api/sensor/_stop-weight-service',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const dumpAll = () => {\r\n    return request({\r\n        url: '/api/sensor/_dump-all',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const findSensorById = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\nexport const tryRecoverySensorAddress = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_recovery-sensor-address`,\r\n        method: 'post',\r\n    });\r\n};\r\nexport const tryRecoverySensorAddressWithOriginSn = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_recovery-sensor-address-with-origin-sn`,\r\n        method: 'post',\r\n    });\r\n};\r\nexport const tryRecoveryElabelAddress = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_recovery-elabel-address`,\r\n        method: 'post',\r\n    });\r\n};\r\nexport const cleanAllBackupSn = () => {\r\n    return request({\r\n        url: '/api/sensor/_clean-backup-sn',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const calibrateZero = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_calibrate-zero`,\r\n        method: 'post',\r\n        data: {},\r\n    });\r\n};\r\n\r\nexport const calibrateWithSpan = sensor => {\r\n    return request({\r\n        url: `/api/sensor/${sensor.id}/_calibrate-span`,\r\n        method: 'post',\r\n        data: {\r\n            span: sensor.span,\r\n        }\r\n    });\r\n};\r\n\r\nexport const updateSensorType = (id, type) => {\r\n    return request({\r\n        url: `/api/sensor/${id}/type`,\r\n        method: 'post',\r\n        data: {\r\n            type: type,\r\n        }\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchConnections = () => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const deleteConnection = id => {\r\n    return request({\r\n        url: `/api/connection/${id}`,\r\n        method: 'delete',\r\n    });\r\n};\r\n\r\nexport const createConnection = connection => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'put',\r\n        data: connection,\r\n    });\r\n};\r\n\r\n\r\nexport const scanPort = () => {\r\n    return request({\r\n        url: '/api/serial/scan',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const scanDevice = id => {\r\n    return request({\r\n        url: `/api/connection/${id}/_scan`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const startScanTempHumiSensors = connectionId => {\r\n    return request({\r\n        url: `/api/connection/${connectionId}/_scan-th-device`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const fetchScanProgress = () => {\r\n    return request({\r\n        url: '/api/connection/_scan-progress',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\n\r\nexport const refreshDeviceUsbId = id => {\r\n    return request({\r\n        url: `/api/connection/${id}/_refresh-usb-id`,\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\n\r\nexport const fetchEnableTabBar = () => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setEnableTabBar = enable => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'post',\r\n        data: {\r\n            value: enable,\r\n        },\r\n    });\r\n};\r\n\r\nexport const fetchSoftFilterLevel = () => {\r\n    return request({\r\n        url: '/api/config/weight.soft_filter_level',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const updateSoftFilterLevel = value => {\r\n    return request({\r\n        url: '/api/config/weight.soft_filter_level',\r\n        method: 'post',\r\n        data: {\r\n            value: value,\r\n        }\r\n    });\r\n};\r\n\r\nexport const fetchDisplayAutoUnit = () => {\r\n    return request({\r\n        url: '/api/config/application.display.auto_unit',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setDisplayAutoUnit = autoUnit => {\r\n    return request({\r\n        url: '/api/config/application.display.auto_unit',\r\n        method: 'post',\r\n        data: {\r\n            value: autoUnit ? 'true' : 'false',\r\n            createIfNotExists: true,\r\n        },\r\n    });\r\n};\r\nexport const fetchExtraPageUri = () => {\r\n    return request({\r\n        url: '/api/config/extra.page_uri',\r\n        method: 'get',\r\n    });\r\n};\r\nexport const setExtraPageUri = uri => {\r\n    return request({\r\n        url: '/api/config/extra.page_uri',\r\n        method: 'post',\r\n        data: {\r\n            value: uri,\r\n            createIfNotExists: true,\r\n        }\r\n    });\r\n};\r\n\r\nexport const setProtocolVersion = version => {\r\n    return request({\r\n        url: '/api/config/weight.protocol_version',\r\n        method: 'post',\r\n        data: {\r\n            value: version,\r\n            createIfNotExists: true,\r\n        }\r\n    });\r\n};\r\n","import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    SET_USER,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\nimport {fetchSlotData} from '../api/dashboard';\r\nimport {fetchSensors, toggleElable} from '../api/sensor';\r\nimport {deleteConnection, fetchConnections} from '../api/connection';\r\nimport {fetchEnableTabBar, setEnableTabBar} from '../api/config';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: SET_USER,\r\n        data: user\r\n    }\r\n};\r\nexport const setTabBarState = show => {\r\n    return {\r\n        type: SET_TABBAR_STATE,\r\n        data: show\r\n    };\r\n};\r\n\r\nexport const setRouterPath = info => {\r\n    return {\r\n        type: SET_ROUTER_PATH,\r\n        data: info\r\n    };\r\n};\r\nexport const setTitle = title => {\r\n    return {\r\n        type: SET_TITLE,\r\n        data: title,\r\n    }\r\n};\r\nexport const asyncFetchDashboardSlotData = () => {\r\n    return dispatch => {\r\n        fetchSlotData().then(res => {\r\n            const slots = [];\r\n            for (const key in res) {\r\n                if (res.hasOwnProperty(key)) {\r\n                    slots.push(res[key]);\r\n                }\r\n            }\r\n            const action = {\r\n                type: ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n                data: slots.sort((a, b) => a.slotNo.localeCompare(b.slotNo)),\r\n            };\r\n            dispatch(action);\r\n        });\r\n    }\r\n};\r\n\r\nexport const asyncFetchSensors = () => {\r\n    return dispatch => {\r\n        fetchSensors().then(res => {\r\n            const sensors = res.sort((a, b) => a.address - b.address);\r\n            const action = {\r\n                type: ASYNC_FETCH_SENSORS,\r\n                data: sensors,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const toggleSensorElable = (sensorId, hasElabel) => {\r\n    return dispatch => {\r\n        toggleElable(sensorId, hasElabel).then(() => {\r\n            const action = {\r\n                type: TOGGLE_SENSOR_ELABLE,\r\n                data: {\r\n                    sensorId,\r\n                    hasElabel\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    };\r\n};\r\n\r\n\r\nexport const asyncFetchConnection = () => {\r\n    return dispatch => {\r\n        fetchConnections().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_CONNECTION,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const asyncDeleteConnection = id => {\r\n    return dispatch => {\r\n        deleteConnection(id).then(() => {\r\n            const action = {\r\n                type: DELETE_CONNECTION,\r\n                data: {\r\n                    id: id\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    }\r\n};\r\n\r\nexport const fetchEnableTabBarAction = () => {\r\n    return dispatch => {\r\n        fetchEnableTabBar().then(res => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: res.value === 'true',\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const setEnableTabBarAction = enable => {\r\n    return dispatch => {\r\n        setEnableTabBar(enable).then(() => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: enable,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const showHeader = show => {\r\n    return {\r\n        type: SET_ENABLE_HEADER,\r\n        data: show,\r\n    };\r\n};\r\n","export const parseDate = str => {\r\n    const groups = str.match(/^(\\d{4})-(\\d+)-(\\d+)\\s(\\d+):(\\d+):(\\d+)$/);\r\n    if (groups) {\r\n        const year = parseInt(groups[1]);\r\n        const month = parseInt(groups[2]);\r\n        const date = parseInt(groups[3]);\r\n        const hour = parseInt(groups[4]);\r\n        const min = parseInt(groups[5]);\r\n        const sec = parseInt(groups[6]);\r\n        const d = new Date();\r\n        d.setFullYear(year);\r\n        d.setMonth(month - 1);\r\n        d.setDate(date);\r\n        d.setHours(hour);\r\n        d.setMinutes(min);\r\n        d.setSeconds(sec);\r\n        return d;\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const parseTimstamp = str => {\r\n    const date = parseDate(str);\r\n    return date ? date.getTime() : -1;\r\n};\r\n","export const ERROR_STATE = {\r\n    4: '超载',\r\n    5: '欠载',\r\n    2: '离线',\r\n};\r\nexport const STATE_TABLE = {\r\n    1: '使用中',\r\n    2: '离线',\r\n    3: '已停用',\r\n    4: '超载',\r\n    5: '欠载',\r\n};\r\n\r\nexport const SENSOR_TYPES = {\r\n    0: '未知',\r\n    1: '普通货道',\r\n    2: '灵活货道',\r\n    3: '地堆货道',\r\n    4: '冰箱货道',\r\n    5: '吊篮货道',\r\n};\r\n","import {parseDate} from './datetimeUtils';\r\nimport {STATE_TABLE} from '../context/metadata';\r\n\r\nexport const asKg = g => {\r\n    return (g / 1000.0).toFixed(3);\r\n};\r\n\r\nexport const isWan = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isIncredible = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isDisable = state => {\r\n    return state === 3;\r\n};\r\n\r\nexport const isOffline = state => {\r\n    return state === 2;\r\n};\r\n\r\nconst connectionTypes = {\r\n    1: '串口',\r\n    2: '网络',\r\n};\r\n\r\nexport const asConnectionType = type => {\r\n    if (type in connectionTypes) {\r\n        return connectionTypes[type];\r\n    }\r\n    return `Unknown [${type}]`;\r\n};\r\n\r\nconst weightStateTable = {\r\n    1: 'stable',\r\n    2: 'dynamic',\r\n    3: 'underLoad',\r\n    4: 'overLoad',\r\n};\r\nexport const isStable = weightState => {\r\n    return weightState === 1;\r\n};\r\n\r\nexport const asWeightStateString = state => {\r\n    return state in weightStateTable ? weightStateTable[state] : state;\r\n};\r\nconst slotSortWeight = {\r\n    'S': 1,\r\n    'D': 2,\r\n    'F': 3,\r\n};\r\n\r\nconst compareBySlotNo = (a, b) => {\r\n    const aName = a.slotNo;\r\n    const bName = b.slotNo;\r\n    const aNames = aName.split('-');\r\n    const bNames = bName.split('-');\r\n    if (aNames.length !== bNames.length) {\r\n        return aNames.length - bNames.length;\r\n    }\r\n    for (let i = 0; i < aNames.length; i++) {\r\n        const aItem = parseInt(aNames[i]);\r\n        const bItem = parseInt(bNames[i]);\r\n        if (!(aItem && bItem)) {\r\n            continue;\r\n        }\r\n        if (aItem !== bItem) {\r\n            return aItem - bItem;\r\n        }\r\n    }\r\n    return 0;\r\n};\r\nexport const groupSlots = slots => {\r\n    const groups = {};\r\n    const putSlot = (name, slot) => {\r\n        if (name in groups) {\r\n            groups[name].push(slot);\r\n        } else {\r\n            groups[name] = [slot];\r\n        }\r\n    };\r\n    for (let slot of slots) {\r\n        const slotNo = slot.slotNo;\r\n        const noItems = slotNo.match(/^(\\w+)-(\\w+)-(\\w+)$/);\r\n        if (noItems) {\r\n            const groupName = `${noItems[1]}货架第${noItems[2]}层`;\r\n            putSlot(groupName, slot);\r\n        } else {\r\n            putSlot('未分组货道', slot);\r\n        }\r\n    }\r\n    const res = [];\r\n    for (let name in groups) {\r\n        if (!groups.hasOwnProperty(name)) {\r\n            continue;\r\n        }\r\n        const slots = groups[name];\r\n        res.push({\r\n            name,\r\n            slots: slots.sort(compareBySlotNo),\r\n        });\r\n    }\r\n    return res.sort((a, b) => {\r\n        const aWeight = slotSortWeight[a.name.substring(0, 1)];\r\n        const bWeight = slotSortWeight[b.name.substring(0, 1)];\r\n        if (aWeight !== bWeight) {\r\n            return aWeight - bWeight;\r\n        }\r\n        return a.name.localeCompare(b.name);\r\n    });\r\n};\r\n\r\nexport const asStateString = state => {\r\n    if (state in STATE_TABLE) {\r\n        return STATE_TABLE[state];\r\n    }\r\n    return 'Unknown State:' + state;\r\n};\r\n\r\nexport const asCount = data => {\r\n    const count = data.count;\r\n    const isStable = data.weightState === 1;\r\n    if (count === null) {\r\n        return '~❗';\r\n    }\r\n    if (isStable) {\r\n        return count;\r\n    }\r\n    return '~' + count;\r\n};\r\n\r\nconst thSensorStateTable = {\r\n    4: '过高',\r\n    5: '过低',\r\n    1: '正常',\r\n};\r\n\r\nexport const thSensorStateText = state => {\r\n    if (state in thSensorStateTable) {\r\n        return thSensorStateTable[state];\r\n    }\r\n    return '未知' + state;\r\n};\r\n\r\nexport const thSensorStateWarn = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const lastHighlightSlot = slots => {\r\n    if (!slots) {\r\n        return null;\r\n    }\r\n    debugger;\r\n    let lastTime = -1;\r\n    let lastSlot = null;\r\n    for (let slot of slots) {\r\n        if (!slot.skuUpdateTime) {\r\n            continue;\r\n        }\r\n        const skuUpdateTime = parseDate(slot.skuUpdateTime);\r\n        if (skuUpdateTime && skuUpdateTime['getTime']) {\r\n            const time = skuUpdateTime.getTime();\r\n            if (time - lastTime > 0) {\r\n                lastTime = time;\r\n                lastSlot = slot;\r\n            }\r\n        }\r\n    }\r\n    if (!lastSlot) {\r\n        lastSlot = slots[0];\r\n    }\r\n    return lastSlot;\r\n};\r\n","import {request} from './request';\r\n\r\nexport const doZeroAll = () => {\r\n    return request({\r\n        url: '/api/slot/zero-all',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const zeroOne = slotNo => {\r\n    const encodedSlotNo = encodeURIComponent(slotNo);\r\n    const apiUrl = `/api/slot/${encodedSlotNo}/zero`;\r\n    return request({\r\n        url: apiUrl,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllSlots = () => {\r\n    return request({\r\n        url: '/api/slot/_with-sensors',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDetail = id => {\r\n    return request({\r\n        url: `/api/slot/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const updateSlot = slot => {\r\n    return request({\r\n        url: `/api/slot/${slot.id}`,\r\n        method: 'post',\r\n        data: slot\r\n    });\r\n};\r\n\r\n\r\nexport const toggleELabelState = option => {\r\n    return request({\r\n        url: `/api/slot/${option.id}/has-e-label`,\r\n        method: 'post',\r\n        data: {hasElabel: option.hasELabel},\r\n    });\r\n};\r\n\r\nexport const highlightBySku = sku => {\r\n    return request({\r\n        url: '/api/slot/highlight',\r\n        method: 'post',\r\n        data: {\r\n            skuNo: sku\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllWithSensors = () => {\r\n    return request({\r\n        url: '/api/slot/_with-sensors',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setCompensationState = state => {\r\n    return request({\r\n        url: '/api/slot/_all-compensation',\r\n        method: 'post',\r\n        data: {\r\n            enableCompensation: state,\r\n        }\r\n    });\r\n};\r\n\r\nexport const mergeSlotsByIds = ids => {\r\n    return request({\r\n        url: '/api/slot/_merge',\r\n        method: 'post',\r\n        data: {\r\n            slotIds: ids,\r\n        }\r\n    });\r\n};\r\n\r\nexport const resetSlotBySlots = ids => {\r\n    return request({\r\n        url: '/api/slot/_reset-slot-sensors',\r\n        method: 'post',\r\n        data: {\r\n            slotIds: ids,\r\n        },\r\n    });\r\n};\r\n\r\nexport const toggleEnableState = slotId => {\r\n    return request({\r\n        url: `/api/slot/${slotId}/_toggle-enable`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const tare = id => {\r\n    return request({\r\n        url: `/api/slot/${id}/_tare`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const tareWithValue = slot => {\r\n    return request({\r\n        url: `/api/slot/${slot.id}/_tare-with-value`,\r\n        method: 'post',\r\n        data: slot,\r\n    });\r\n};\r\n\r\nexport const lockSlot = options => {\r\n    const {id} = options;\r\n    return request({\r\n        url: `/api/slot/${id}/_lock`,\r\n        method: 'post',\r\n        data: options,\r\n    });\r\n}\r\n","import React, {Component} from 'react';\r\nimport {asyncFetchDashboardSlotData, setTabBarState, setTitle, showHeader} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport './Dashboard.sass'\r\nimport {Flex, List, Modal, NoticeBar, SearchBar, Tabs, Toast, WingBlank} from 'antd-mobile';\r\nimport {\r\n    asCount,\r\n    asKg,\r\n    asStateString,\r\n    groupSlots,\r\n    isDisable,\r\n    isIncredible,\r\n    isOffline,\r\n    isWan,\r\n    thSensorStateText,\r\n    thSensorStateWarn,\r\n} from '../../util/DataConvertor';\r\nimport {highlightBySku, zeroOne} from '../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDashboardData} from \"../../api/dashboard\";\r\nimport {parseDate} from '../../util/datetimeUtils';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        slots: state.dashboardSlots\r\n    };\r\n};\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSlotData: (...args) => dispatch(asyncFetchDashboardSlotData(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        showHeader: (...args) => dispatch(showHeader(...args)),\r\n        showTabBar: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nconst TabItems = [\r\n    {\r\n        title: '重力货道数据',\r\n        key: 'dashboard',\r\n    },\r\n    {\r\n        title: '重力货道配置',\r\n        key: 'settings',\r\n    }\r\n];\r\nconst findLastNoticeSlot = slots => {\r\n    let lastTime = 0;\r\n    let res = null;\r\n    for (let slot of slots) {\r\n        let ts = slot.skuUpdateTime ? parseDate(slot.skuUpdateTime) : 0;\r\n        if (ts > lastTime) {\r\n            lastTime = ts;\r\n            res = slot;\r\n        }\r\n    }\r\n    return res;\r\n};\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.rootEle = document;\r\n        this.state = {\r\n            slots: [],\r\n            groupedSlots: [],\r\n            thSensors: [],\r\n            sensors: [],\r\n            sensorModalVisible: false,\r\n            operationSlot: {},\r\n            searchSkuNo: '',\r\n            noticeSlots: [],\r\n            lastNoticeSlot: null,\r\n        };\r\n        this.props.setTitle('Dashboard');\r\n        this.renderSlotCard = this.renderSlotCard.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startFetchData();\r\n        console.log(this.props);\r\n        this.props.showHeader(false);\r\n        this.props.showTabBar(false);\r\n        this.listenKeyPress();\r\n    }\r\n\r\n    listenKeyPress() {\r\n        this.rootEle.onkeypress = e => {\r\n            const sourceTagName = e.target.tagName.toLowerCase();\r\n            if (sourceTagName !== 'body') {\r\n                return;\r\n            }\r\n            const keyCode = e.keyCode;\r\n            if (keyCode === 13) {\r\n                this.triggerHighlight(this.state.searchSkuNo);\r\n            } else {\r\n                this.appendSearchSku(String.fromCharCode(keyCode));\r\n            }\r\n        };\r\n    }\r\n\r\n    appendSearchSku(c) {\r\n        const {searchSkuNo} = this.state;\r\n        this.setState({\r\n            searchSkuNo: searchSkuNo + c,\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.fetchTimer) {\r\n            clearInterval(this.fetchTimer);\r\n        }\r\n        this.props.showHeader(true);\r\n        this.props.showTabBar(true);\r\n        this.cancelKeyPress();\r\n    }\r\n\r\n    cancelKeyPress() {\r\n        this.rootEle.onkeypress = null;\r\n    }\r\n\r\n    startFetchData() {\r\n        this.fetchTimer = setInterval(() => {\r\n            fetchDashboardData().then(res => {\r\n                const slotData = res.slotData;\r\n                const thData = res.temperatureHumidityData;\r\n                const slots = [];\r\n                const thSensors = [];\r\n                for (let slotNo in slotData) {\r\n                    if (slotData.hasOwnProperty(slotNo)) {\r\n                        slots.push(slotData[slotNo]);\r\n                    }\r\n                }\r\n                for (let id in thData) {\r\n                    if (thData.hasOwnProperty(id)) {\r\n                        thSensors.push(thData[id]);\r\n                    }\r\n                }\r\n                const groupedSlots = groupSlots(slots);\r\n                this.setState({\r\n                    slots: slots,\r\n                    thSensors: thSensors,\r\n                    groupedSlots: groupedSlots,\r\n                });\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    renderThSensorCard(sensor) {\r\n        const {data} = sensor;\r\n        let {temperature, humidity} = data;\r\n        temperature = temperature && temperature.toFixed(1);\r\n        const tempStateText = thSensorStateText(data.temperatureState);\r\n        const tempWarn = thSensorStateWarn(data.temperatureState);\r\n        const humidityText = humidity && humidity.toFixed(1);\r\n        const tempClass = ['value'];\r\n        const stateClass = ['dot'];\r\n        const cardClass = ['th-card'];\r\n        if (tempWarn) {\r\n            stateClass.push('warn');\r\n            tempClass.push('warn');\r\n            cardClass.push('warn');\r\n        } else {\r\n            tempClass.push('ok');\r\n        }\r\n        const stateStr = asStateString(sensor.state);\r\n        const tempClassStr = tempClass.join(' ');\r\n        return (<div className={cardClass.join(' ')} key={sensor.id}>\r\n            <div className=\"card-header\">\r\n                <div className=\"no\">{sensor.no}</div>\r\n                <div className=\"state\"><span>{humidityText}%</span><span className={stateClass.join(' ')}/>\r\n                    {stateStr}\r\n                </div>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"inner\">\r\n                    <div className=\"item\">\r\n                        <span className=\"name\">温度:</span>\r\n                        <span className={tempClassStr}>{temperature}°C</span>\r\n                    </div>\r\n                    <div className=\"delimiter\"/>\r\n                    <div className=\"item\">\r\n                        <span className=\"name\">状态</span>\r\n                        <span className={tempClassStr}>{tempStateText}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n    renderThSensors() {\r\n        const {thSensors} = this.state;\r\n        return (<div className=\"th-sensor-group\">\r\n            <div className=\"title\">温湿度传感器</div>\r\n            <WingBlank className=\"sensors\">\r\n                {\r\n                    thSensors.map(sensor => this.renderThSensorCard(sensor))\r\n                }\r\n            </WingBlank>\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        const {lastNoticeSlot, searchSkuNo, noticeSlots, sensorModalVisible, operationSlot, sensors, groupedSlots} = this.state;\r\n        this.highlightSlotIds = {};\r\n        for (let slot of noticeSlots) {\r\n            this.highlightSlotIds[slot.id] = true;\r\n        }\r\n        return (\r\n            <div className=\"dashboard\">\r\n                <Tabs tabs={TabItems} onChange={(tab, index) => this.onTabChange(tab, index)}/>\r\n                <SearchBar\r\n                    value={searchSkuNo}\r\n                    onSubmit={e => this.triggerHighlight(e)}\r\n                    onChange={searchSkuNo => this.setState({searchSkuNo})}/>\r\n                <div className=\"notice-list\">\r\n                    {\r\n                        this.renderNoticeBar(lastNoticeSlot)\r\n                    }\r\n                </div>\r\n                <div className=\"slot-groups\">\r\n                    {\r\n                        groupedSlots.map(group => this.renderGroupItem(group))\r\n                    }\r\n                </div>\r\n                <div className=\"th-sensors\">\r\n                    {\r\n                        this.renderThSensors()\r\n                    }\r\n                </div>\r\n                <Modal visible={sensorModalVisible}\r\n                       title={`货道[${operationSlot.slotNo}]传感器`}\r\n                       transparent\r\n                       footer={[\r\n                           {\r\n                               text: '清零', onPress: () => this.doSlotZero(this.state.operationSlot)\r\n                           },\r\n                           {text: '关闭', onPress: () => this.setState({sensorModalVisible: false})},\r\n                       ]}\r\n                       onClose={() => this.setState({sensorModalVisible: false})}>\r\n                    <List renderHeader={() => 'Sensors'}>\r\n                        {\r\n                            sensors ? sensors.map(sensor => (<List.Item\r\n                                    extra={asStateString(sensor.state)}\r\n                                    key={sensor.id}>\r\n                                    {sensor.deviceSn}\r\n                                    <List.Item.Brief>{sensor.address485}</List.Item.Brief>\r\n                                </List.Item>)) :\r\n                                <List.Item>Empty List</List.Item>\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n                <div className=\"clear-float\"/>\r\n                <div className=\"bottom-white\">\r\n                    留白\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderNoticeBar(slot) {\r\n        if (!slot) {\r\n            return;\r\n        }\r\n        const content = [];\r\n        content.push(<span key={0}>{slot.skuName}</span>);\r\n        if (slot.skuShelfLifeOpenDays) {\r\n            content.push(<span key={1}>，开封后保质期</span>);\r\n            content.push((<span key={2} className=\"days\">{slot.skuShelfLifeOpenDays}</span>));\r\n            content.push(<span key={3}>天</span>);\r\n        } else {\r\n            content.push(<span key={1}>，开封后保质期未设置！</span>);\r\n        }\r\n        return (<NoticeBar className=\"notice\">\r\n            {content}\r\n        </NoticeBar>)\r\n    }\r\n\r\n    renderGroupItem(group) {\r\n        return (<div className=\"group-item\" key={group.name}>\r\n            <p className=\"group-name\">\r\n                {group.name}\r\n            </p>\r\n            <WingBlank>\r\n                <Flex className=\"slots\" wrap={\"wrap\"} justify=\"between\">\r\n                    {\r\n                        group.slots.map(slot => this.renderSlotCard(slot))\r\n                    }\r\n                </Flex>\r\n            </WingBlank>\r\n        </div>)\r\n    }\r\n\r\n    renderSlotCard(slot) {\r\n        const sensors = slot.sensors;\r\n        if (!sensors) {\r\n            return null;\r\n        }\r\n        const sku = slot.sku || {};\r\n        const data = slot.data || {};\r\n        let slotCardClassName = 'slot-card';\r\n        if (slot.id in this.highlightSlotIds) {\r\n            slotCardClassName += ' slot-card-highlight';\r\n        } else {\r\n            if (isWan(slot.state)) {\r\n                if (isDisable(slot.state)) {\r\n                    slotCardClassName += ' slot-card-disable';\r\n                } else if (isOffline(slot.state)) {\r\n                    slotCardClassName += ' slot-card-offline';\r\n                } else {\r\n                    slotCardClassName += ' slot-card-warn';\r\n                }\r\n            }\r\n        }\r\n        const incredible = isIncredible(data.toleranceState);\r\n        const state = asStateString(slot.state);\r\n        const weightInKg = asKg(data.weight);\r\n        const count = asCount(data);\r\n        return (<div key={slot.id}\r\n                     className={slotCardClassName}>\r\n            <Flex className=\"card-header\" justify=\"between\">\r\n                <div className=\"slot-no\">\r\n                    {slot.slotNo}\r\n                </div>\r\n                <div className=\"state\">\r\n                    <span className=\"weight\">({weightInKg}kg)</span>\r\n                    <span className=\"dot\"/>\r\n                    <span>{state}</span>\r\n                </div>\r\n            </Flex>\r\n            <Flex className=\"card-body\" justify=\"between\">\r\n                <div className=\"left\">\r\n                    <div className=\"sku-no\">SKU:{sku.skuNo}</div>\r\n                    <div className=\"sku-name\">{sku.name}</div>\r\n                </div>\r\n                <div className=\"delimiter\"/>\r\n                <div className={`right ${incredible ? 'right-incredible' : ''}`}\r\n                     onClick={() => this.onSlotCardClick(slot)}>\r\n                    <span className=\"pcs-value\">{count}</span>\r\n                    <span className=\"pcs-unit\">(数量)</span>\r\n                </div>\r\n            </Flex>\r\n        </div>);\r\n    }\r\n\r\n    onSlotCardClick(slot) {\r\n        this.setState({\r\n            operationSlot: slot,\r\n            sensors: slot.sensors,\r\n            sensorModalVisible: true,\r\n        });\r\n    }\r\n\r\n    triggerHighlight(skuNo) {\r\n        if (skuNo === '' || skuNo.trim() === '') {\r\n            Toast.show('Please Type a SkuNo!', 1, false);\r\n            return;\r\n        }\r\n        highlightBySku(skuNo).then(res => {\r\n            const lastNoticeSlot = findLastNoticeSlot(res);\r\n            this.setState({\r\n                noticeSlots: res,\r\n                lastNoticeSlot: lastNoticeSlot,\r\n            });\r\n            setTimeout(() => this.setState({noticeSlots: [], searchSkuNo: '', lastNoticeSlot: null}), 5000);\r\n        }).catch(err => {\r\n            this.setState({\r\n                searchSkuNo: '',\r\n            });\r\n            const {data} = err;\r\n            Modal.alert(`无法查询物料:${data.code}`, `无法查询物料号[${skuNo}]!(${data.msg})`);\r\n        });\r\n    }\r\n\r\n    onTabChange(tab, index) {\r\n        switch (index) {\r\n            case 0:\r\n                // dashboard\r\n                this.props.history.push({\r\n                    pathname: '/dashboard'\r\n                });\r\n                break;\r\n            case 1:\r\n                // settings\r\n                this.props.history.push({\r\n                    pathname: '/setting/'\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    doSlotZero(slot) {\r\n        const {slotNo} = slot;\r\n        Modal.alert(`清零${slotNo}?`, `确定清零货道[${slotNo}]?`, [\r\n            {text: '取消'},\r\n            {text: '确定', onPress: () => this.callDoZero(slotNo)}\r\n        ])\r\n    }\r\n\r\n    callDoZero(slotNo) {\r\n        zeroOne(slotNo).then(() => {\r\n            Toast.show(`slot[${slotNo}] Zero success!`, 3, false);\r\n        });\r\n    }\r\n}\r\n\r\nconst component = connect(mapState2Props, mapAction2Props)(Dashboard);\r\nexport default withRouter(component);\r\n","import {connect} from 'react-redux';\r\nimport {setTabBarState, setTitle, showHeader} from './actionCreators';\r\n\r\nconst mapState = (state, props) => {\r\n    return {\r\n        ...state,\r\n        ...props,\r\n    };\r\n};\r\nconst mapAction = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n        showHeader: (...args) => dispatch(showHeader(...args)),\r\n    };\r\n};\r\nexport const mapStateAndAction = (component) => {\r\n    return connect(mapState, mapAction)(component);\r\n};\r\n","import React, {Component} from 'react';\r\nimport {bool, func, object} from 'prop-types';\r\nimport './SlotCard.sass';\r\nimport {asKg, asStateString} from '../../util/DataConvertor';\r\nimport {ERROR_STATE} from '../../context/metadata';\r\n\r\nconst formatPcs = pcs => {\r\n    if (pcs === 0) {\r\n        return 0;\r\n    }\r\n    return pcs ? pcs : '-';\r\n};\r\nconst formatSkuNo = skuNo => {\r\n    return skuNo ? skuNo : '---------';\r\n};\r\n\r\nconst SLOT_CARD_CLASS_TABLE = {\r\n    1: 'slot-card-online',\r\n    2: 'slot-card-offline',\r\n    3: 'slot-card-disable',\r\n    4: 'slot-card-overload',\r\n    5: 'slot-card-under-load',\r\n};\r\n\r\nconst slotCardClass = (state, highLight) => {\r\n    const res = ['slot-card'];\r\n    if (highLight) {\r\n        res.push('slot-card-highlight');\r\n    } else {\r\n        res.push(SLOT_CARD_CLASS_TABLE[state]);\r\n    }\r\n    return res.join(' ');\r\n};\r\nconst TOLERANCE_STATE_CLASS_TABLE = {\r\n    1: 'count-credible',\r\n    2: 'count-incredible',\r\n};\r\nconst pcsClass = state => {\r\n    const res = ['count'];\r\n    res.push(TOLERANCE_STATE_CLASS_TABLE[state]);\r\n    return res.join(' ');\r\n};\r\n\r\nclass SlotCard extends Component {\r\n    static propTypes = {\r\n        slot: object.isRequired,\r\n        onClick: func.isRequired,\r\n        highLight: bool.isRequired,\r\n        errorOnly: bool.isRequired,\r\n    };\r\n\r\n    render() {\r\n        const {slot, onClick, highLight, errorOnly} = this.props;\r\n        if (!slot.sensors) {\r\n            return null;\r\n        }\r\n        if (errorOnly && !ERROR_STATE.hasOwnProperty(slot.state)) {\r\n            return null;\r\n        }\r\n        const {state, data, sku} = slot;\r\n        const {weight, count, toleranceState} = data;\r\n        const weightInKg = asKg(weight);\r\n        const stateStr = asStateString(state);\r\n        const pcs = formatPcs(count);\r\n        const skuNo = formatSkuNo(sku.skuNo);\r\n\r\n        const slotCardClassStr = slotCardClass(state, highLight);\r\n        const pcsClassStr = pcsClass(toleranceState);\r\n        const merged = slot.sensors.length > 1;\r\n        return (\r\n            <div className={slotCardClassStr}>\r\n                <div className=\"header\">\r\n                    <div className=\"slot-no\">{slot.slotNo}{merged ? '(合并货道)' : ''}</div>\r\n                    <div className=\"state\">\r\n                        <span className=\"weight\">({weightInKg}kg)</span>\r\n                        <div className=\"dot\"/>\r\n                        <span className=\"text\">{stateStr}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"body\">\r\n                    <div className=\"sku\">\r\n                        <div className=\"sku-no\">\r\n                            <span>SKU:</span>\r\n                            <span>{skuNo}</span>\r\n                        </div>\r\n                        <div className=\"sku-name\">\r\n                            {sku.name}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"delimiter\"/>\r\n                    <div className={pcsClassStr} onClick={() => onClick(slot)}>\r\n                        <span className=\"value\">\r\n                            {pcs}\r\n                        </span>\r\n                        <span className=\"label\">\r\n                            (数量)\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SlotCard;\r\n","import React, {Component} from 'react';\r\nimport {bool, func, object} from 'prop-types';\r\nimport './SlotGroup.sass';\r\nimport SlotCard from './SlotCard';\r\n\r\nconst isHighLight = (slot, highLightSlotTable) => {\r\n    const {id} = slot;\r\n    return highLightSlotTable.hasOwnProperty(id);\r\n};\r\n\r\nconst renderSlots = (slots, onCardClick, highLightSlotTable, errorOnly) => {\r\n    if (!slots) {\r\n        return;\r\n    }\r\n    return slots.map(slot => (\r\n        <SlotCard\r\n            highLight={isHighLight(slot, highLightSlotTable)}\r\n            slot={slot}\r\n            key={slot.id}\r\n            errorOnly={errorOnly}\r\n            onClick={slot => onCardClick(slot)}/>));\r\n};\r\n\r\nclass SlotGroup extends Component {\r\n    static propTypes = {\r\n        group: object.isRequired,\r\n        onCardClick: func.isRequired,\r\n        highlightSlotTable: object.isRequired,\r\n        errorOnly: bool.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const {group, onCardClick, highlightSlotTable, errorOnly} = this.props;\r\n        const {name, slots} = group;\r\n        return (\r\n            <div className=\"slot-group\">\r\n                <div className=\"group-name\">{name}</div>\r\n                <div className=\"slot-list\">\r\n                    {\r\n                        renderSlots(slots, onCardClick, highlightSlotTable, errorOnly)\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SlotGroup;\r\n","class FetcherTask {\r\n    constructor(config) {\r\n        const {fetchData, onNewData, duration, onError} = config;\r\n        this.fetchData = fetchData;\r\n        this.onNewData = onNewData;\r\n        this.duration = duration;\r\n        this.onError = onError;\r\n        this.running = true;\r\n    }\r\n\r\n    start() {\r\n        this.fetchData()\r\n            .then(res => {\r\n                this.onNewData(res);\r\n                this.runNext();\r\n            })\r\n            .catch(err => {\r\n                this.onError(err);\r\n                this.runNext();\r\n            });\r\n    }\r\n\r\n    runNext() {\r\n        if (!this.running) {\r\n            return;\r\n        }\r\n        this.timmer = setTimeout(() => {\r\n            this.start();\r\n        }, this.duration);\r\n    }\r\n\r\n    stop() {\r\n        this.running = false;\r\n        if (this.timmer) {\r\n            clearTimeout(this.timmer);\r\n        }\r\n    }\r\n}\r\n\r\nexport default FetcherTask;\r\n","import React, {Component} from 'react';\r\nimport {object} from 'prop-types';\r\nimport {asStateString, thSensorStateText} from '../../util/DataConvertor';\r\nimport './TempSensorCard.sass';\r\n\r\nconst formatTemp = temp => {\r\n    if (temp === 0) {\r\n        return 0;\r\n    }\r\n    return temp ? temp.toFixed(1) : '--';\r\n};\r\n\r\nconst CARD_CLASS_TABLE = {\r\n    1: 'temp-sensor-card-online',\r\n    2: 'temp-sensor-card-offline',\r\n    3: 'temp-sensor-card-disable',\r\n    4: 'temp-sensor-card-overload',\r\n    5: 'temp-sensor-card-under-load',\r\n};\r\nconst cardClass = state => {\r\n    const res = ['temp-sensor-card'];\r\n    res.push(CARD_CLASS_TABLE[state]);\r\n    return res.join(' ');\r\n};\r\nconst BODY_CLASS_TABLE = {\r\n    4: 'body-overflow',\r\n    5: 'body-overflow',\r\n    1: 'body-ok',\r\n};\r\nconst bodyClass = state => {\r\n    const res = ['body'];\r\n    res.push(BODY_CLASS_TABLE[state]);\r\n    return res.join(' ');\r\n};\r\n\r\nclass TempSensorCard extends Component {\r\n    static propTypes = {\r\n        sensor: object.isRequired,\r\n    };\r\n\r\n    render() {\r\n        const {sensor} = this.props;\r\n        const {no, data, state} = sensor;\r\n        const {humidity, temperature, temperatureState} = data;\r\n        const stateStr = asStateString(state);\r\n        const temp = formatTemp(temperature);\r\n        const tempState = thSensorStateText(temperatureState);\r\n\r\n        const cardClassStr = cardClass(state);\r\n        const bodyClassStr = bodyClass(temperatureState);\r\n        return (\r\n            <div className={cardClassStr}>\r\n                <div className=\"header\">\r\n                    <div className=\"slot-no\">{no}</div>\r\n                    <div className=\"state\">\r\n                        <span className=\"humidity\">({humidity}%)</span>\r\n                        <span className=\"dot\"/>\r\n                        <span className=\"text\">{stateStr}</span>\r\n                    </div>\r\n                </div>\r\n                <div className={bodyClassStr}>\r\n                    <div className=\"temp\">\r\n                        <span className=\"value\">{temp}°C</span>\r\n                        <span className=\"label\">(温度)</span>\r\n                    </div>\r\n                    <div className=\"delimiter\"/>\r\n                    <div className=\"state\">\r\n                        <span className=\"value\">{tempState}</span>\r\n                        <span className=\"label\">(状态)</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TempSensorCard;\r\n","import React, {Component} from 'react';\r\nimport {func, object} from 'prop-types';\r\nimport {Button, Flex, Modal, Toast} from 'antd-mobile';\r\nimport './SlotOperationModal.sass';\r\nimport {asStateString} from '../../util/DataConvertor';\r\nimport {toggleEnableState, zeroOne} from '../../api/slot';\r\n\r\nconst renderSensor = sensor => {\r\n    const state = asStateString(sensor.state);\r\n    return <div key={sensor.id} className=\"item\">\r\n        <div className=\"address\">\r\n            {sensor.address485}\r\n        </div>\r\n        <div className=\"state\">\r\n            {state}\r\n        </div>\r\n    </div>\r\n};\r\nconst renderSensors = sensors => {\r\n    if (!sensors || sensors.length <= 0) {\r\n        return null;\r\n    }\r\n    return sensors.map(renderSensor);\r\n};\r\n\r\nclass SlotOperationModal extends Component {\r\n    static propTypes = {\r\n        slot: object.isRequired,\r\n        onClose: func.isRequired,\r\n    };\r\n\r\n    doZero() {\r\n        const {slot} = this.props;\r\n        const {slotNo} = slot;\r\n        Modal.alert('清零确认', `确认清零货道[${slotNo}]？`, [\r\n            {\r\n                text: '取消',\r\n            },\r\n            {\r\n                text: '确认',\r\n                onPress() {\r\n                    zeroOne(slotNo).then(() => {\r\n                        Toast.show('清零成功', 3, false);\r\n                    });\r\n                },\r\n            }\r\n        ]);\r\n    }\r\n\r\n    toggleEnableState() {\r\n        const {slot} = this.props;\r\n        toggleEnableState(slot.id).then(res => {\r\n            Toast.show(`货道${res.slotNo}操作成功`, 3, false);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const _this = this;\r\n        const {slot, onClose} = this.props;\r\n        const title = `货道[${slot.slotNo}]操作`;\r\n        const {sensors} = slot;\r\n        return (\r\n            <Modal className=\"slot-operation-modal\"\r\n                   visible={true}\r\n                   maskClosable={true}\r\n                   title={title}\r\n                   transparent={true}\r\n                   onClose={onClose}>\r\n                <div className=\"slot\">\r\n                    {slot.slotNo}\r\n                </div>\r\n                <div className=\"sensors\">\r\n                    {\r\n                        renderSensors(sensors)\r\n                    }\r\n                </div>\r\n                <Flex className=\"action-btns\">\r\n                    <Flex.Item>\r\n                        <Button type=\"ghost\" onClick={() => _this.toggleEnableState()}>启/停用</Button>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <Button type=\"ghost\" onClick={() => this.doZero()}>清零</Button>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <Button type=\"ghost\" onClick={onClose}>关闭</Button>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SlotOperationModal;\r\n","import React, {Component} from 'react';\r\nimport {mapStateAndAction} from '../../store/storeUtils';\r\nimport './HomeDashboard.sass';\r\nimport SlotGroup from '../commons/SlotGroup';\r\nimport {Modal, NoticeBar, SearchBar, Toast, WingBlank} from 'antd-mobile';\r\nimport {ScanOutlined, WarningOutlined} from '@ant-design/icons';\r\nimport {highlightBySku} from '../../api/slot';\r\nimport {fetchDashboardData} from '../../api/dashboard';\r\nimport {groupSlots, lastHighlightSlot} from '../../util/DataConvertor';\r\nimport FetcherTask from '../../util/FetcherTask';\r\nimport TempSensorCard from '../commons/TempSensorCard';\r\nimport SlotOperationModal from '../commons/SlotOperationModal';\r\n\r\nconst SEARCH_NOTICE_BAR_AUTO_CLEAN_DURATION = 5000;\r\nconst asHighlightSlotTable = slots => {\r\n    const res = {};\r\n    for (let slot of slots) {\r\n        res[slot.id] = slot;\r\n    }\r\n    return res;\r\n};\r\nconst renderNoticeBar = slot => {\r\n    if (!slot) {\r\n        return;\r\n    }\r\n    const msg = [];\r\n    const {skuName, skuShelfLifeOpenDays} = slot;\r\n    msg.push(<span key={1}>{skuName}</span>);\r\n    if (skuShelfLifeOpenDays) {\r\n        msg.push(\r\n            <span key={2}>\r\n                ，开封后保质期\r\n                <b className=\"days\">{skuShelfLifeOpenDays}</b>\r\n                天\r\n            </span>\r\n        );\r\n    }\r\n    return (<NoticeBar\r\n        className=\"search-notice\"\r\n        icon={<ScanOutlined/>}>\r\n        {\r\n            msg\r\n        }\r\n    </NoticeBar>);\r\n};\r\n\r\nconst dict2List = dict => {\r\n    const res = [];\r\n    for (let key in dict) {\r\n        if (dict.hasOwnProperty(key)) {\r\n            res.push(dict[key]);\r\n        }\r\n    }\r\n    return res;\r\n};\r\n\r\nconst renderTempSensors = sensors => {\r\n    if (!sensors || sensors.length <= 0) {\r\n        return null;\r\n    }\r\n    return (<>\r\n        <p className=\"group-name\">温湿度传感器</p>\r\n        <div className=\"sensors\">\r\n            {\r\n                sensors.map(sensor => (<TempSensorCard sensor={sensor} key={sensor.id}/>))\r\n            }\r\n        </div>\r\n    </>);\r\n};\r\nconst SETTING_PAGE_DELAY = 500;\r\nconst ENTER_CHAR_CODE = 13;\r\n\r\nclass HomeDashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.rootDom = document;\r\n        this.state = {\r\n            searchValue: '',\r\n            highlightSlotTable: {},\r\n            noticeSlot: null,\r\n            groupedSlots: [],\r\n            tempSensors: [],\r\n            currentTab: 0,\r\n            slotOperationVisible: false,\r\n            selectedSlot: {},\r\n            errorNotice: null,\r\n            showErrorOnly: false,\r\n            searchErrorModal: {\r\n                visible: false,\r\n                msg: '',\r\n            },\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {setTitle, setTabBarState, showHeader} = this.props;\r\n        setTitle('数据看板');\r\n        setTabBarState(false);\r\n        showHeader(false);\r\n        this.initFetcher();\r\n        this.registerKeyPressHandler();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.fetcherTask) {\r\n            this.fetcherTask.stop();\r\n        }\r\n        this.cancelKeyPressHandler();\r\n    }\r\n\r\n    cancelKeyPressHandler() {\r\n        this.rootDom.onkeypress = null;\r\n    }\r\n\r\n    registerKeyPressHandler() {\r\n        const _this = this;\r\n        this.rootDom.onkeypress = e => {\r\n            const {tagName} = e.target;\r\n            if (tagName.toLowerCase() !== 'body') {\r\n                return;\r\n            }\r\n            const {keyCode} = e;\r\n            if (keyCode === ENTER_CHAR_CODE) {\r\n                _this.submitSearch();\r\n                return;\r\n            }\r\n            const char = String.fromCharCode(keyCode);\r\n            const {searchValue} = _this.state;\r\n            _this.setState({\r\n                searchValue: searchValue + char,\r\n            });\r\n        };\r\n    }\r\n\r\n    submitSearch() {\r\n        const {searchValue} = this.state;\r\n        this.searchSku(searchValue);\r\n    }\r\n\r\n    initFetcher() {\r\n        const _this = this;\r\n        this.fetcherTask = new FetcherTask({\r\n            fetchData: fetchDashboardData,\r\n            onNewData(data) {\r\n                _this.onDashboardDataRefresh(data);\r\n            },\r\n            duration: 1000,\r\n            onError(err) {\r\n                _this.onFetcherError(err);\r\n            }\r\n        });\r\n        this.fetcherTask.start();\r\n    }\r\n\r\n    onFetcherError(err) {\r\n        console.error('Error on fetch dashboard data!', err);\r\n        this.setState({errorNotice: err.toString()})\r\n    }\r\n\r\n    onDashboardDataRefresh(data) {\r\n        const {slotData, temperatureHumidityData} = data;\r\n        const groupedSlots = groupSlots(dict2List(slotData));\r\n        const tempSensors = dict2List(temperatureHumidityData);\r\n        this.setState({\r\n            groupedSlots,\r\n            tempSensors,\r\n            errorNotice: null,\r\n        });\r\n    }\r\n\r\n    searchSku(skuNo) {\r\n        if (!skuNo || !skuNo.trim()) {\r\n            Toast.show('请输入SKU', 1, false);\r\n            return;\r\n        }\r\n        const _this = this;\r\n        this.setState({searchValue: ''});\r\n        highlightBySku(skuNo).then(res => {\r\n            this.setState({\r\n                highlightSlotTable: asHighlightSlotTable(res),\r\n                noticeSlot: lastHighlightSlot(res),\r\n            });\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    highlightSlotTable: {},\r\n                    noticeSlot: null,\r\n                });\r\n            }, SEARCH_NOTICE_BAR_AUTO_CLEAN_DURATION);\r\n        }).catch(err => {\r\n            _this.showSearchErrorModal(true, err.data.msg);\r\n        });\r\n    }\r\n\r\n    showSearchErrorModal(show, msg) {\r\n        Toast.hide();\r\n        this.setState({\r\n            searchErrorModal: {\r\n                visible: show,\r\n                msg: msg,\r\n            }\r\n        });\r\n        if (this.closeSearchErrorTimmer) {\r\n            clearTimeout(this.closeSearchErrorTimmer);\r\n        }\r\n        if (show) {\r\n            this.closeSearchErrorTimmer = setTimeout(() => this.setState({\r\n                searchErrorModal: {\r\n                    visible: false,\r\n                    msg: '',\r\n                }\r\n            }), 10000);\r\n        } else {\r\n            this.setState({\r\n                searchErrorModal: {\r\n                    visible: false,\r\n                    msg: '',\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    switchPageWithDelay(path) {\r\n        this.setState({currentTab: 1});\r\n        Toast.loading('跳转中', 1, null, true);\r\n        const {history} = this.props;\r\n        setTimeout(() => {\r\n            history.push({\r\n                pathname: path,\r\n            });\r\n        }, SETTING_PAGE_DELAY);\r\n    }\r\n\r\n    onSlotCardClick(slot) {\r\n        this.setState({\r\n            selectedSlot: slot,\r\n            slotOperationVisible: true,\r\n        })\r\n    }\r\n\r\n    renderErrorNotice() {\r\n        const {errorNotice} = this.state;\r\n        if (!errorNotice) {\r\n            return null;\r\n        }\r\n        return (<NoticeBar icon={<WarningOutlined/>}>\r\n            {errorNotice}\r\n        </NoticeBar>)\r\n    }\r\n\r\n    renderSlotOperationModal() {\r\n        const {slotOperationVisible, selectedSlot} = this.state;\r\n        if (!slotOperationVisible) {\r\n            return null;\r\n        }\r\n        return (<SlotOperationModal\r\n            slot={selectedSlot}\r\n            onClose={() => this.setState({slotOperationVisible: false})}/>);\r\n    }\r\n\r\n    renderTabs() {\r\n        const {currentTab} = this.state;\r\n        const tab0Class = ['item'];\r\n        const tab1Class = ['item'];\r\n        const tab2Class = ['item'];\r\n        const tabsClass = [tab0Class, tab1Class, tab2Class];\r\n        tabsClass[currentTab].push('item-focus');\r\n        return (<div className=\"tabs-wrapper\">\r\n            <div className=\"tabs\">\r\n                <div className={tab0Class.join(' ')}\r\n                     onClick={() => this.setState({currentTab: 0, showErrorOnly: false,})}>\r\n                    <div className=\"text\">重力货道数据</div>\r\n                    <div className=\"focus\"/>\r\n                </div>\r\n                <div className={tab1Class.join(' ')} onClick={() => this.switchPageWithDelay('/setting/')}>\r\n                    <div className=\"text\">重力货道配置</div>\r\n                    <div className=\"focus\"/>\r\n                </div>\r\n                <div className={tab2Class.join(' ')}\r\n                     onClick={() => this.setState({currentTab: 2, showErrorOnly: true})}>\r\n                    <div className=\"text\">异常货道排查</div>\r\n                    <div className=\"focus\"/>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            searchValue,\r\n            noticeSlot,\r\n            groupedSlots,\r\n            tempSensors,\r\n            highlightSlotTable,\r\n            showErrorOnly,\r\n            searchErrorModal,\r\n        } = this.state;\r\n        const _this = this;\r\n        return (\r\n            <div className=\"home-dashboard\">\r\n                {\r\n                    this.renderErrorNotice()\r\n                }\r\n                {\r\n                    this.renderTabs()\r\n                }\r\n                <SearchBar value={searchValue}\r\n                           placeholder=\"请输入搜索的SKU号或扫描二维码\"\r\n                           onSubmit={text => this.searchSku(text)}\r\n                           onChange={text => this.setState({searchValue: text})}/>\r\n                {\r\n                    renderNoticeBar(noticeSlot)\r\n                }\r\n                <WingBlank className=\"slots\">\r\n                    {\r\n                        groupedSlots.map(group => <SlotGroup group={group}\r\n                                                             highlightSlotTable={highlightSlotTable}\r\n                                                             onCardClick={slot => this.onSlotCardClick(slot)}\r\n                                                             key={group.name}\r\n                                                             errorOnly={showErrorOnly}/>)\r\n                    }\r\n                </WingBlank>\r\n                <WingBlank className=\"temp-sensors\">\r\n                    {\r\n                        renderTempSensors(tempSensors)\r\n                    }\r\n                </WingBlank>\r\n                <div className=\"blank\">-</div>\r\n                {\r\n                    this.renderSlotOperationModal()\r\n                }\r\n                <Modal visible={searchErrorModal.visible}\r\n                       title=\"搜索提示\"\r\n                       footer={[{\r\n                           text: '知道了', onPress() {\r\n                               _this.showSearchErrorModal(false, '')\r\n                           }\r\n                       }]}\r\n                       transparent={true}>\r\n                    {searchErrorModal.msg}\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default mapStateAndAction(HomeDashboard);\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from 'antd-mobile';\r\nimport './FloatButton.sass';\r\n\r\nclass FloatButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.defaultPosition = {\r\n            right: 20,\r\n            bottom: 100,\r\n        };\r\n        this.state = {\r\n            down: false,\r\n        };\r\n    }\r\n\r\n    static propTypes = {\r\n        iconType: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func,\r\n    };\r\n\r\n    render() {\r\n        const {down} = this.state;\r\n        return (\r\n            <div className={\"floatButton \" + (down ? 'move' : '')}\r\n                 style={this.defaultPosition}\r\n                 onClick={e => this.callOnClick(e)}\r\n            >\r\n                <Icon type={this.props.iconType} className=\"icon\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    callOnClick(e) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport default FloatButton;\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Card, List, Modal, Picker, Switch, Toast} from \"antd-mobile\";\r\nimport {asyncFetchSensors, setTabBarState, setTitle, toggleSensorElable} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {reloadSensors, updateSensorType} from \"../../../api/sensor\";\r\nimport {SENSOR_TYPES} from '../../../context/metadata';\r\n\r\nconst TYPE_PICKER_DATA = [];\r\n\r\nfor (let key in SENSOR_TYPES) {\r\n    const name = SENSOR_TYPES[key];\r\n    const item = {\r\n        value: key,\r\n        label: name,\r\n    };\r\n    TYPE_PICKER_DATA.push(item);\r\n}\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSensors: (...args) => dispatch(asyncFetchSensors(...args)),\r\n        toggleSensorElable: (...args) => dispatch(toggleSensorElable(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    }\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        sensors: state.sensors,\r\n    };\r\n};\r\n\r\nclass SensorSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            typePickerVisible: false,\r\n            typePickerTitle: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('重力传感器设置');\r\n        this.props.fetchSensors();\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    renderCardListItem(sensor) {\r\n        const typeName = SENSOR_TYPES[sensor.type];\r\n        return (<List.Item key={sensor.id}>\r\n            <Card>\r\n                <Card.Header title={`地址:${sensor.address}`} extra={sensor.deviceSn}/>\r\n                <Card.Body>\r\n                    <List>\r\n                        <List.Item extra={<Switch checked={sensor.hasElabel}\r\n                                                  onChange={(e) => this.toggleElabel(sensor, e)}\r\n                                                  platform=\"android\"/>}>\r\n                            启用电子标签\r\n                        </List.Item>\r\n                        <List.Item arrow=\"horizontal\" onClick={() => this.toSensorDetails(sensor)}>\r\n                            传感器详细参数\r\n                        </List.Item>\r\n                        <List.Item arrow=\"horizontal\" extra={typeName}\r\n                                   onClick={() => this.showTypePicker(true, sensor)}>\r\n                            传感器类型\r\n                        </List.Item>\r\n                    </List>\r\n                </Card.Body>\r\n                <Card.Footer content={`绑定货道:[${sensor.slot && sensor.slot.slotNo}]`}\r\n                             extra={sensor.slot && sensor.slot.id}/>\r\n            </Card>\r\n        </List.Item>);\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.props;\r\n        const {typePickerVisible, typePickerTitle} = this.state;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <Card>\r\n                    <Card.Header title=\"传感器信息\" extra=\"WeightSensor\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <List.Item extra={sensors.length}>传感器数量</List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n                <List renderHeader={() => '传感器列表'}>\r\n                    {\r\n                        sensors.map(sensor => this.renderCardListItem(sensor))\r\n                    }\r\n                </List>\r\n                <Picker\r\n                    title={typePickerTitle}\r\n                    visible={typePickerVisible}\r\n                    data={TYPE_PICKER_DATA}\r\n                    cols={1}\r\n                    onDismiss={() => this.showTypePicker(false, null)}\r\n                    onOk={value => this.updateSensorType(value[0])}\r\n                />\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationActions()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateSensorType(type) {\r\n        const {id} = this.updatingTypeSensor;\r\n        const _this = this;\r\n        updateSensorType(id, type).then(() => {\r\n            Toast.show('传感器类型更新成功', 3, false);\r\n            _this.showTypePicker(false, null);\r\n            _this.props.fetchSensors();\r\n        });\r\n    }\r\n\r\n    showTypePicker(show, sensor) {\r\n        if (show) {\r\n            this.setState({typePickerVisible: true, typePickerTitle: `传感器类型[#${sensor.address}]`});\r\n            this.updatingTypeSensor = sensor;\r\n        } else {\r\n            this.setState({typePickerVisible: false, typePickerTitle: ''});\r\n        }\r\n    }\r\n\r\n    toSensorDetails(sensor) {\r\n        this.props.history.push({pathname: `/setting/${sensor.address}/sensor-details`});\r\n    }\r\n\r\n\r\n    toggleElabel(sensor, e) {\r\n        const sensorId = sensor.id;\r\n        this.props.toggleSensorElable(sensorId, e);\r\n    }\r\n\r\n    showOperationActions() {\r\n        const buttons = ['重新加载', '取消'];\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: '操作选择',\r\n            options: buttons,\r\n            cancelButtonIndex: buttons.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            if (index === 0) {\r\n                this.callReloadSensors();\r\n            }\r\n        })\r\n    }\r\n\r\n    callReloadSensors() {\r\n        Modal.alert('重新加载', '确定重新加载，该操作需等到一段时间（30s）才可生效?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '确定', onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('加载成功!', 1, false);\r\n                        })\r\n                    }\r\n                },\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(SensorSetting);\r\n","import React, {Component} from 'react';\r\nimport {List} from \"antd-mobile\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nclass SettingMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('设置');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"setting\">\r\n                <List renderHeader={() => '设置'}>\r\n                    <List.Item onClick={() => this.go('/setting/sensor')} arrow=\"horizontal\">\r\n                        重力传感器\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/th-sensor')} arrow=\"horizontal\">\r\n                        温湿度传感器\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/slot')} arrow=\"horizontal\">\r\n                        货道管理\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/connection')} arrow=\"horizontal\">\r\n                        连接管理\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/system')} arrow=\"horizontal\">\r\n                        系统信息\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\" onClick={() => this.go('/setting/system-check')}>\r\n                        系统检查\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/overview')} arrow=\"horizontal\">\r\n                        货道概览信息\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/extra-setting')} arrow=\"horizontal\">\r\n                        扩展页面设置\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    go(path) {\r\n        this.props.history.push({\r\n            pathname: path\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SettingMenu));\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Checkbox, List, Modal, Toast} from 'antd-mobile';\r\nimport {doZeroAll, fetchAllSlots, mergeSlotsByIds, resetSlotBySlots} from '../../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport './SlotSetting.sass';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst OperationActions = ['刷新', '全部清零', '合并选中货道', '拆分选中货道', '管理选中货道', '全选', '取消'];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\nconst isContinueSelected = slots => {\r\n    const selectedMap = {};\r\n    let selectedMinAddress = 999999;\r\n    for (let slot of slots) {\r\n        if (slot.selected) {\r\n            selectedMap[slot.address] = slot;\r\n            if (slot.address < selectedMinAddress) {\r\n                selectedMinAddress = slot.address;\r\n            }\r\n        }\r\n    }\r\n    delete selectedMap[selectedMinAddress];\r\n    while (Object.keys(selectedMap).length > 0) {\r\n        selectedMinAddress++;\r\n        const nextSelected = selectedMap[selectedMinAddress];\r\n        if (!nextSelected) {\r\n            return false;\r\n        }\r\n        delete selectedMap[selectedMinAddress];\r\n    }\r\n    return true;\r\n};\r\n\r\nclass SlotSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slots: [],\r\n            selectedNums: 0,\r\n            continueSelected: true,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(false);\r\n        this.props.setTitle('重力货道设置');\r\n        this.fetchSlots();\r\n    }\r\n\r\n    onItemClick(slot) {\r\n        const {slots} = this.state;\r\n        for (let s of slots) {\r\n            if (s.id === slot.id) {\r\n                s.selected = !s.selected;\r\n            }\r\n        }\r\n        const selectedNums = slots.filter(slot => slot.selected).length;\r\n        const continueSelected = isContinueSelected(slots);\r\n        this.setState({\r\n            slots: slots,\r\n            selectedNums: selectedNums,\r\n            continueSelected: continueSelected,\r\n        });\r\n    }\r\n\r\n    renderSlotSensors(sensors) {\r\n        if (sensors.length <= 0) {\r\n            return (<span className=\"msg\">该货道已被合并</span>);\r\n        }\r\n        return sensors.map(sensor => (<span className=\"sensor-dot\" key={sensor.id}>{sensor.address}</span>));\r\n    }\r\n\r\n    renderSlotItem(slot) {\r\n        const sensors = slot.sensors || [];\r\n        if (slot.id < 0 && sensors.length <= 0) {\r\n            return\r\n        }\r\n        if (slot.indivisible && sensors.length <= 0) {\r\n            return;\r\n        }\r\n        return (<Item key={slot.id} arrow=\"horizontal\" onClick={() => this.onItemClick(slot)}>\r\n            <div className=\"slot-item\">\r\n                <div className=\"cb-wrapper\">\r\n                    <Checkbox checked={slot.selected}/>\r\n                </div>\r\n                <div className=\"slot-no\">\r\n                    <span>{slot.slotNo}</span>\r\n                </div>\r\n                <div>\r\n                    {\r\n                        this.renderSlotSensors(sensors)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Item>);\r\n    }\r\n\r\n    render() {\r\n        const {slots, selectedNums, continueSelected} = this.state;\r\n        const _this = this;\r\n        const selectedNumStyle = continueSelected ? 'continue' : 'warn';\r\n        return (\r\n            <div className=\"slot-setting\">\r\n                <List renderHeader={() => '重力货道列表'} className=\"slots\">\r\n                    {\r\n                        slots.map(slot => _this.renderSlotItem(slot))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationSheet()}/>\r\n                <div className=\"fixed-tips\">\r\n                    <p>已选择：\r\n                        <span className={selectedNumStyle}>{selectedNums}</span>\r\n                        个\r\n                        <span className={selectedNumStyle}>{continueSelected ? '连续选择' : '未连续选择'}</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    findSelectedSlots() {\r\n        const {slots} = this.state;\r\n        return slots.filter(slot => slot.selected);\r\n    }\r\n\r\n    mergeSlot() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length < 2) {\r\n            Toast.show('请选中一个以上货道', 3, false);\r\n            return;\r\n        }\r\n        const slotNos = slots.map(slot => slot.slotNo).join(',');\r\n        const {continueSelected} = this.state;\r\n        if (!continueSelected) {\r\n            Modal.alert('无法合并不连续货道', '合并货道时需选择地址连续的货道！', [{text: '知道了'}]);\r\n            return;\r\n        }\r\n        Modal.alert('合并货道', `确认合并:${slotNos}?`, [\r\n            {\r\n                text: '取消',\r\n            },\r\n            {\r\n                text: '确定',\r\n                onPress: () => {\r\n                    mergeSlotsByIds(slots.map(slot => slot.id)).then(res => {\r\n                        this.fetchSlots();\r\n                    }).catch(err => {\r\n                        Toast.hide();\r\n                        const {data, status} = err;\r\n                        const {code, msg} = data;\r\n                        if (status === 200 && code === 400) {\r\n                            Modal.alert('操作提醒', msg, [{text: '知道了'}], 'android');\r\n                        }\r\n                    });\r\n                },\r\n            }\r\n        ]);\r\n    }\r\n\r\n    resetSlotSensor() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length < 1) {\r\n            Toast.show('请选中至少一个货道', 3, false);\r\n            return;\r\n        }\r\n        const slotNos = slots.map(slot => slot.slotNo).join(',');\r\n        Modal.alert('拆分货道', `确认拆分:${slotNos}?`, [\r\n            {\r\n                text: '取消',\r\n            },\r\n            {\r\n                text: '确定',\r\n                onPress: () => {\r\n                    resetSlotBySlots(slots.map(slot => slot.id)).then(() => {\r\n                        Toast.show('拆分成功', 3, false);\r\n                        this.fetchSlots();\r\n                    });\r\n                },\r\n            }\r\n        ]);\r\n    }\r\n\r\n    chooseAllSlotSensor() {\r\n        const {slots} = this.state;\r\n        const selected = slots.filter(slot => slot.selected).length !== slots.length;\r\n        for (let slot of slots) {\r\n            slot.selected = selected;\r\n        }\r\n        this.setState({slots});\r\n    }\r\n\r\n    toSelectedSlotDetails() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length !== 1) {\r\n            Toast.show('请选中一个货道', 3, false);\r\n            return;\r\n        }\r\n        const slot = slots[0];\r\n        this.toSlotDetail(slot);\r\n    }\r\n\r\n    showOperationSheet() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: OperationActions,\r\n            title: '操作选择',\r\n            cancelButtonIndex: OperationActions.length - 1,\r\n            destructiveButtonIndex: 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.fetchSlots();\r\n                    break;\r\n                case 1:\r\n                    this.doZeroAll();\r\n                    break;\r\n                case 2:\r\n                    this.mergeSlot();\r\n                    break;\r\n                case 3:\r\n                    this.resetSlotSensor();\r\n                    break;\r\n                case 4:\r\n                    this.toSelectedSlotDetails();\r\n                    break;\r\n                case 5:\r\n                    this.chooseAllSlotSensor();\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        })\r\n    }\r\n\r\n    toSlotDetail(slot) {\r\n        this.props.history.push({\r\n            pathname: `/setting/slot-detail/${slot.id}`,\r\n        });\r\n    }\r\n\r\n    doZeroAll() {\r\n        Modal.alert('确认清零？', '确认清零全部货道？', [\r\n            {\r\n                text: '清零',\r\n                onPress: () => {\r\n                    doZeroAll().then(() => {\r\n                        Toast.show('全部货道已经被清零!');\r\n                    });\r\n                },\r\n            },\r\n            {\r\n                text: '取消',\r\n            }\r\n        ]);\r\n    }\r\n\r\n    fetchSlots() {\r\n        fetchAllSlots().then(res => {\r\n            const slots = res.map(slot => {\r\n                slot.selected = false;\r\n                return slot;\r\n            }).sort((a, b) => a.address - b.address);\r\n            this.setState({slots})\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotSetting));\r\n","import React, {Component} from 'react';\r\nimport {asyncDeleteConnection, asyncFetchConnection, setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Card, Flex, InputItem, List, Modal, Picker, Progress, Toast, WingBlank} from 'antd-mobile';\r\nimport {asConnectionType} from '../../../util/DataConvertor';\r\nimport './ConnectionSetting.sass'\r\nimport {\r\n    createConnection,\r\n    fetchScanProgress,\r\n    refreshDeviceUsbId,\r\n    scanDevice,\r\n    scanPort,\r\n    startScanTempHumiSensors,\r\n} from '../../../api/connection';\r\nimport {connect} from 'react-redux';\r\nimport FetcherTask from '../../../util/FetcherTask';\r\n\r\nconst ConnectionOperations = [\r\n    '删除',\r\n    '扫描重力货道',\r\n    '扫描温湿度传感器',\r\n    '刷新USB设备ID',\r\n    '取消',\r\n];\r\nconst connectionTypes = [\r\n    {\r\n        label: '串口',\r\n        value: 1,\r\n    },\r\n    {\r\n        label: '网络',\r\n        value: 2,\r\n    }\r\n];\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchConnection: (...args) => dispatch(asyncFetchConnection(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        deleteConnection: (...args) => dispatch(asyncDeleteConnection(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        connections: state.connections,\r\n    };\r\n};\r\nconst SCAN_PROGRESS_FETC_DURATION = 1000;\r\nconst scanResultMap2Arr = result => {\r\n    const res = [];\r\n    for (let key in result) {\r\n        if (!result.hasOwnProperty(key)) {\r\n            continue;\r\n        }\r\n        const item = result[key];\r\n        res.push({\r\n            ...item,\r\n            address: key,\r\n        });\r\n    }\r\n    return res.sort((a, b) => a.address - b.address);\r\n};\r\nconst scanStateTable = {\r\n    1: '准备扫描',\r\n    2: '扫描中',\r\n    3: '扫描结束',\r\n};\r\n\r\nclass ConnectionSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            createDialogVisible: false,\r\n            create: {\r\n                type: null,\r\n                target: ''\r\n            },\r\n            serialPorts: [],\r\n            scanProgressVisible: false,\r\n            scanProgress: {\r\n                progress: 50,\r\n                start: 0,\r\n                end: 0,\r\n                address: -1,\r\n                result: [],\r\n                errors: [],\r\n                state: 1,\r\n            },\r\n            scanError: null,\r\n            tempHumScanProgressVisible: false,\r\n        };\r\n        this.props.setTitle('物理连接设置');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchConnection();\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    startFetchScanProgress() {\r\n        if (this.scanProgressFetcher) {\r\n            this.scanProgressFetcher.stop();\r\n        }\r\n        const _this = this;\r\n        this.scanProgressFetcher = new FetcherTask({\r\n            fetchData: fetchScanProgress,\r\n            onNewData: data => {\r\n                const {currentAddress, end, start, progress, scanResult, errors, state} = data;\r\n                const scanProgress = {\r\n                    progress: progress.toFixed(2),\r\n                    end: end,\r\n                    start: start,\r\n                    address: currentAddress,\r\n                    result: scanResultMap2Arr(scanResult),\r\n                    errors: errors,\r\n                    state: state,\r\n                };\r\n                _this.setState({scanProgress: scanProgress});\r\n                if (state === 3) {\r\n                    _this.scanProgressFetcher.stop();\r\n                    Modal.alert('扫描完成', '扫描完成', [\r\n                        {\r\n                            text: '确认',\r\n                            onPress() {\r\n                                _this.setState({scanProgressVisible: false});\r\n                            }\r\n                        }\r\n                    ]);\r\n                }\r\n            },\r\n            duration: SCAN_PROGRESS_FETC_DURATION,\r\n            onError: err => {\r\n                console.error('Fetch scan progress error!', err);\r\n                _this.setState({scanError: err.toString()});\r\n            },\r\n        });\r\n        this.scanProgressFetcher.start();\r\n        this.setState({\r\n            scanProgressVisible: true\r\n        });\r\n    }\r\n\r\n    stopFetchScanProgress() {\r\n        if (this.scanProgressFetcher) {\r\n            this.scanProgressFetcher.stop();\r\n            this.scanProgressFetcher = null;\r\n        }\r\n        this.setState({\r\n            scanProgressVisible: false,\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    tempHumScanProgressVisible(){\r\n        if (this.humidityScanning) {\r\n            this.humidityScanning.stop();\r\n        }\r\n        this.setState({\r\n            tempHumScanProgressVisible: true\r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    stopHumidityScanning() {\r\n        if (this.humidityScanning) {\r\n            this.humidityScanning.stop();\r\n            this.humidityScanning = null;\r\n        }\r\n        this.setState({\r\n            tempHumScanProgressVisible: false,\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {connections} = this.props;\r\n        const {createDialogVisible, scanProgressVisible, scanProgress, tempHumScanProgressVisible} = this.state;\r\n        const {create} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => '连接列表'}>\r\n                    {\r\n                        connections.map(connection => (\r\n                            <Item key={connection.id} arrow=\"horizontal\"\r\n                                  onClick={() => this.showConnectionOperations(connection)}>\r\n                                <Flex justify=\"between\" className=\"connectionItem\">\r\n                                    <span className=\"type\">{asConnectionType(connection.type)}</span>\r\n                                    <span className=\"target\">{connection.target}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                    <Item key=\"createButton\">\r\n                        <Button type=\"primary\" onClick={() => this.showCreateDialog()}>创建连接</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={createDialogVisible}\r\n                    transparent\r\n                    title=\"创建连接\"\r\n                    footer={[\r\n                        {text: '取消', onPress: () => this.setState({createDialogVisible: false})},\r\n                        {text: '创建', onPress: () => this.createConnection()},\r\n                    ]}\r\n                    onClose={() => this.setState({createDialogVisible: false})}>\r\n                    <List>\r\n                        <Picker data={connectionTypes} title=\"连接类型\" cols={1}\r\n                                extra=\"请选择\"\r\n                                onChange={e => this.setCreateType(e)}>\r\n                            <List.Item>\r\n                                <InputItem value={create.type && asConnectionType(create.type)}\r\n                                           disabled={true}\r\n                                           placeholder=\"类型\"/>\r\n                            </List.Item>\r\n                        </Picker>\r\n                        {\r\n                            (() => {\r\n                                const input = (<List.Item key=\"target\"><InputItem placeholder=\"Connection Target\"\r\n                                                                                  onChange={e => this.setCreateTarget(e)}\r\n                                                                                  value={create.target}\r\n                                                                                  disabled={this.state.create.type === 1}/></List.Item>);\r\n                                if (create.type === 1) {\r\n                                    return (<Picker data={this.state.serialPorts}\r\n                                                    extra=\"选择\"\r\n                                                    title=\"串口列表\"\r\n                                                    cols={1}\r\n                                                    onChange={arr => this.setCreateTargetSerial(arr)}>\r\n                                        {input}\r\n                                    </Picker>)\r\n                                } else {\r\n                                    return input;\r\n                                }\r\n                            })()\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n                <Modal visible={scanProgressVisible} title=\"重力传感器扫描进度\">\r\n                    <WingBlank>\r\n                        <Card>\r\n                            <Card.Header title=\"扫描进度\" extra={scanStateTable[scanProgress.state]}/>\r\n                            <Card.Body>\r\n                                <Progress percent={scanProgress.progress} position=\"normal\" className=\"Progress\"/>\r\n                                <Flex className=\"scan-overview\">\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">开始地址</p>\r\n                                        <p className=\"value\">{scanProgress.start}</p>\r\n                                    </Flex.Item>\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">结束地址</p>\r\n                                        <p className=\"value\">{scanProgress.end}</p>\r\n                                    </Flex.Item>\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">扫描进度</p>\r\n                                        <p className=\"value\">{scanProgress.progress}%</p>\r\n                                    </Flex.Item>\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">发现设备</p>\r\n                                        <p className=\"value\">{scanProgress.result.length}</p>\r\n                                    </Flex.Item>\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">正在扫描</p>\r\n                                        <p className=\"value\">ADDR:{scanProgress.address}</p>\r\n                                    </Flex.Item>\r\n                                </Flex>\r\n                                <Button type=\"primary\" onClick={() => this.stopFetchScanProgress()}>后台扫描</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <Flex>\r\n                            <Flex.Item>\r\n                                <List renderHeader={() => '扫描结果:'}>\r\n                                    {scanProgress.result.map(item => (\r\n                                        <List.Item key={item.address} extra={item.address}>\r\n                                            {item.sensorSn}/{item.elabelSn}\r\n                                        </List.Item>))}\r\n                                </List>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <List renderHeader={() => '错误信息:'}>\r\n                                    {\r\n                                        scanProgress.errors.map((item, index) => (\r\n                                            <List.Item key={index} extra={index}>{item}</List.Item>))\r\n                                    }\r\n                                </List>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </WingBlank>\r\n                </Modal>\r\n                <Modal title=\"温湿度传感器扫描进度\" visible={tempHumScanProgressVisible} >\r\n                    <WingBlank>\r\n                        <Card>\r\n                            <Card.Header title=\"扫描进度\"  extra={scanStateTable[scanProgress.state]}/>\r\n                            <Card.Body>\r\n                                <Progress  position=\"normal\" />\r\n                                <Flex className=\"scan-overview\">\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">开始地址</p>\r\n                                        <p className=\"value\">{scanProgress.start}</p>\r\n                                    </Flex.Item>\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">结束地址</p>\r\n                                        <p className=\"value\">{scanProgress.end}</p>\r\n                                    </Flex.Item>\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">扫描进度</p>\r\n                                        <p className=\"value\">{scanProgress.progress}%</p>\r\n                                    </Flex.Item>\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">发现设备</p>\r\n                                        <p className=\"value\">{scanProgress.result.length}</p>\r\n                                    </Flex.Item>\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">正在扫描</p>\r\n                                        <p className=\"value\">ADDR:{scanProgress.address}</p>\r\n                                    </Flex.Item>\r\n                                </Flex>\r\n                                <Button type=\"primary\" onClick={() => this.stopHumidityScanning()}>后台扫描</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <Flex>\r\n                            <Flex.Item>\r\n                                <List renderHeader={() => '扫描结果:'}>\r\n                                    {scanProgress.result.map(item => (\r\n                                        <List.Item key={item.address} extra={item.address}>\r\n                                            {item.sensorSn}/{item.elabelSn}\r\n                                        </List.Item>))}\r\n                                </List>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <List renderHeader={() => '错误信息:'}>\r\n                                    {\r\n                                        scanProgress.errors.map((item, index) => (\r\n                                            <List.Item key={index} extra={index}>{item}</List.Item>))\r\n                                    }\r\n                                </List>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </WingBlank>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    deleteConnection(connection) {\r\n        Modal.alert('删除连接!', '确定删除连接？',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '删除',\r\n                    onPress: () => {\r\n                        this.props.deleteConnection(connection.id);\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    scanConnection(connection) {\r\n        const _this = this;\r\n        Modal.alert('扫描重力传感器!', '扫描该连接下的传感器？?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '扫描',\r\n                    onPress: () => {\r\n                        scanDevice(connection.id).then(() => {\r\n                            _this.startFetchScanProgress();\r\n                            Toast.show('扫描已开始!', 2, false)\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    showCreateDialog() {\r\n        this.setState({\r\n            createDialogVisible: true\r\n        })\r\n    }\r\n\r\n    createConnection() {\r\n        createConnection(this.state.create).then(() => {\r\n            this.props.fetchConnection();\r\n            this.setState({\r\n                create: {},\r\n                createDialogVisible: false,\r\n            });\r\n        })\r\n    }\r\n\r\n    setCreateType(types) {\r\n        if (types.length < 1) {\r\n            Toast.show('请选择连接类型!');\r\n        }\r\n        const type = types[0];\r\n        const newCreate = {\r\n            type,\r\n            target: ''\r\n        };\r\n        this.setState({create: newCreate});\r\n        if (type === 1 && this.state.serialPorts.length <= 0) {\r\n            scanPort().then(res => {\r\n                const serialPorts = [];\r\n                for (const port of res) {\r\n                    serialPorts.push({\r\n                        label: port,\r\n                        value: port,\r\n                    });\r\n                }\r\n                this.setState({serialPorts});\r\n            });\r\n        }\r\n    }\r\n\r\n    setCreateTarget(e) {\r\n        const create = {\r\n            ...this.state.create,\r\n            target: e,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    setCreateTargetSerial(serialIndexList) {\r\n        if (!serialIndexList) {\r\n            Toast.show('请选择串口!');\r\n            return;\r\n        }\r\n        const port = serialIndexList[0];\r\n        const create = {\r\n            ...this.state.create,\r\n            target: port,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    startScanTHSensors(connection) {\r\n        Modal.alert('扫描温湿度传感器!', '扫描该连接下的温湿度传感器?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '扫描',\r\n                    onPress: () => {\r\n                        startScanTempHumiSensors(connection.id).then(() => {\r\n                            Toast.show('扫描已开始!', 2, false);\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    refreshDeviceUsbId(connection) {\r\n        const {id} = connection;\r\n        refreshDeviceUsbId(id).then(res => {\r\n            this.props.fetchConnection();\r\n            const {usbDeviceId} = res;\r\n            Toast.show(`ID:${usbDeviceId}`, 3, false);\r\n        });\r\n    }\r\n\r\n    showConnectionOperations(connection) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: `${connection.target} 操作`,\r\n            options: ConnectionOperations,\r\n            cancelButtonIndex: ConnectionOperations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.deleteConnection(connection);\r\n                    break;\r\n                case 1:\r\n                    this.scanConnection(connection);\r\n                    break;\r\n                case 2:\r\n                    this.startScanTHSensors(connection);\r\n                    break;\r\n                case 3:\r\n                    this.refreshDeviceUsbId(connection);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(ConnectionSetting);\r\n","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDetail, lockSlot, toggleELabelState, toggleEnableState, updateSlot, zeroOne} from '../../../api/slot';\r\nimport {ActionSheet, Button, InputItem, List, Modal, Switch, Toast, WingBlank} from 'antd-mobile';\r\nimport {setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport './SlotDetailSetting.sass';\r\n\r\nconst ActionButtons = [\r\n    '清零该货道',\r\n    '删除货道',\r\n    '停用/启用货道',\r\n    \"锁定该货道\",\r\n    '取消',\r\n];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\nconst CAN_UPDATE_SLOT_INFO = false;\r\n\r\n\r\nclass SlotDetailSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {}\r\n        };\r\n        this.slotId = this.props.match.params.id;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle(`${this.slotId} 货道设置`);\r\n        this.fetchSlotInfo();\r\n    }\r\n\r\n    fetchSlotInfo() {\r\n        fetchDetail(this.slotId).then(res => {\r\n            this.setState({slot: res});\r\n            this.props.setTitle(`${res.slotNo} 货道设置`);\r\n            ActionButtons[3] = res.indivisible ? '解锁该货道' : '锁定该货道';\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {slot} = this.state;\r\n        const sensors = slot.sensors || [];\r\n        return (\r\n            <div className=\"slotDetail\">\r\n                <List renderHeader={() => '货道信息'}>\r\n                    <InputItem placeholder=\"逻辑货道号\" value={slot.slotNo}\r\n                               onChange={text => this.setUpdateSlotProp({slotNo: text})}>货道号</InputItem>\r\n                    <InputItem placeholder=\"SKU名称\" value={slot.skuName}\r\n                               onChange={text => this.setUpdateSlotProp({skuName: text})}>SKU名称</InputItem>\r\n                    <InputItem placeholder=\"SKU号\" value={slot.skuNo}\r\n                               onChange={text => this.setUpdateSlotProp({skuNo: text})}>SKU号</InputItem>\r\n                    <InputItem placeholder=\"SKU单重\" value={slot.skuApw}\r\n                               type=\"money\"\r\n                               onChange={text => this.setUpdateSlotProp({skuApw: text})}>SKU单重</InputItem>\r\n                    <InputItem placeholder=\"SKU允差\" value={slot.skuTolerance}\r\n                               type=\"money\"\r\n                               onChange={text => this.setUpdateSlotProp({skuTolerance: text})}>SKU允差</InputItem>\r\n                    <InputItem placeholder=\"开封后保质天数\" value={slot.skuShelfLifeOpenDays}\r\n                               type=\"number\"\r\n                               onChange={text => this.setUpdateSlotProp({skuShelfLifeOpenDays: text})}>\r\n                        保质期\r\n                    </InputItem>\r\n                    <Item key=\"applyBtn\">\r\n                        <WingBlank><Button type=\"primary\" onClick={() => this.applyModify()}>保存</Button></WingBlank>\r\n                    </Item>\r\n                </List>\r\n                <List renderHeader={() => 'Operations'}>\r\n                    <List.Item\r\n                        key=\"hasELabel\"\r\n                        extra={<Switch\r\n                            checked={slot.hasElabel}\r\n                            onChange={state => this.toggleELabel(state)}\r\n                            platform=\"android\"/>}>\r\n                        启用电子标签\r\n                    </List.Item>\r\n                    <List.Item extra={<Switch\r\n                        checked={slot.indivisible}\r\n                        platform=\"android\"\r\n                        onChange={state => this.operateIndivisible(state)}/>}>\r\n                        锁定/解锁\r\n                    </List.Item>\r\n                </List>\r\n                <List renderHeader={() => '传感器列表'}>\r\n                    {\r\n                        sensors.map(sensor => (<List.Item key={sensor.id} extra={sensor.deviceSn}>\r\n                            {sensor.address}\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.openOperation()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    operateIndivisible(state) {\r\n        const title = state ? '确认锁定' : '确认解锁';\r\n        const message = state ? '确认标记该货道为锁定货道？' : '确认解锁当前货道？';\r\n        const _this = this;\r\n        if (state) {\r\n            Modal.alert(title, message, [{text: '取消'}, {\r\n                text: '确定',\r\n                onPress() {\r\n                    _this.doOperateIndivisible(state, null);\r\n                }\r\n            }]);\r\n        } else {\r\n            Modal.prompt(title, message,\r\n                [\r\n                    {\r\n                        text: '取消'\r\n                    },\r\n                    {\r\n                        text: '确认',\r\n                        onPress(password) {\r\n                            _this.doOperateIndivisible(state, password);\r\n                        }\r\n                    }], 'secure-text', null, ['请输入操作密码']);\r\n        }\r\n    }\r\n\r\n    doOperateIndivisible(state, password) {\r\n        const {id} = this.state.slot;\r\n        const options = {\r\n            indivisible: state,\r\n            password,\r\n            id,\r\n        };\r\n        const _this = this;\r\n        lockSlot(options).then(res => {\r\n            Toast.show(`已成功锁定${res}个货道!`, 3, false);\r\n            _this.fetchSlotInfo();\r\n        });\r\n    }\r\n\r\n    openOperation() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: '操作选择',\r\n            options: ActionButtons,\r\n            destructiveButtonIndex: 1,\r\n            cancelButtonIndex: ActionButtons.length - 1,\r\n        }, buttonIndex => {\r\n            switch (buttonIndex) {\r\n                case 0:\r\n                    this.doZero();\r\n                    break;\r\n                case 1:\r\n                    Toast.show('暂时不能删除货道', 2, false);\r\n                    break;\r\n                case 2:\r\n                    this.toggleEnableState();\r\n                    break;\r\n                case 3:\r\n                    this.showLockModal();\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    showLockModal() {\r\n        const {slot} = this.state;\r\n        const title = slot.indivisible ? '输入解锁密码？' : '输入锁定密码？';\r\n        const message = slot.indivisible ? '确认标记该货道为锁定货道？\\r\\n注意：该操作不可逆！' : '确认标记该货道为不可拆分货道？\\r\\n注意：该操作不可逆！';\r\n        const indivisible = slot.indivisible ? 'false' : 'true';\r\n        const states = slot.indivisible ? '解锁' : '锁定';\r\n        const _this = this;\r\n        Modal.prompt(title, message,\r\n            [\r\n                {\r\n                    text: '取消'\r\n                },\r\n                {\r\n                    text: '确认',\r\n                    onPress(password) {\r\n                        const options = {\r\n                            id: _this.slotId,\r\n                            password,\r\n                            indivisible,\r\n                        };\r\n                        lockSlot(options).then(res => {\r\n                            Toast.show(`${states}成功了${res}个货道`, 3, false);\r\n                            _this.fetchSlotInfo();\r\n                        });\r\n                    }\r\n                }], 'secure-text', null, [`请输入${states}密码`]);\r\n    }\r\n\r\n    toggleEnableState() {\r\n        toggleEnableState(this.slotId).then(res => {\r\n            Toast.show(`${res.slotNo}货道操作成功`, 3, false);\r\n        });\r\n    }\r\n\r\n    doZero() {\r\n        const {slot} = this.state;\r\n        zeroOne(slot.slotNo).then(() => {\r\n            Toast.show('清零成功!');\r\n        });\r\n    }\r\n\r\n    setUpdateSlotProp(props) {\r\n        const slot = {\r\n            ...this.state.slot,\r\n            ...props\r\n        };\r\n        this.setState({slot});\r\n    }\r\n\r\n    applyModify() {\r\n        Modal.alert(\"确认保存\", \"确认强制手动更新货道及物料信息？\", [\r\n            {text: '取消'},\r\n            {\r\n                text: '更新',\r\n                onPress() {\r\n                    if (!CAN_UPDATE_SLOT_INFO) {\r\n                        Modal.alert(\"不支持该操作\", \"暂不支持在平板上更新货道信息\", [{text: '知道了'}]);\r\n                        return;\r\n                    }\r\n                    updateSlot(this.state.slot).then(() => {\r\n                        Toast.show('Apply Success!');\r\n                    });\r\n                }\r\n            },\r\n        ]);\r\n    }\r\n\r\n    toggleELabel(hasELabel) {\r\n        toggleELabelState({id: this.slotId, hasELabel}).then(() => {\r\n            Toast.show('Toggle ELabel Success!');\r\n            this.fetchSlotInfo();\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotDetailSetting));\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Button, List, Modal, Switch, TextareaItem, Toast} from 'antd-mobile';\r\nimport {setEnableTabBarAction, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {fetchSystemInfo} from '../../../api/dashboard';\r\nimport {reloadLibPath} from '../../../api/serial';\r\nimport {stopWeightService} from '../../../api/sensor';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setProtocolVersion} from '../../../api/config';\r\n\r\nconst VERSION_SELECTOR_OPTIONS = ['V21', 'V22', '取消'];\r\nconst DATA_TO_SHOW = [\r\n    {\r\n        title: '应用名称',\r\n        key: 'appName',\r\n    },\r\n    {\r\n        title: '应用版本',\r\n        key: 'appVersion',\r\n    },\r\n    {\r\n        title: '数据库版本号',\r\n        key: 'application.db_version',\r\n    },\r\n    {\r\n        title: '数据库版本名称',\r\n        key: 'application.db_version_name',\r\n    },\r\n    {\r\n        title: '站点号',\r\n        key: 'application.station_id',\r\n    },\r\n    {\r\n        title: '显示导航栏',\r\n        key: 'application.ui.enable_tabBar',\r\n    },\r\n    {\r\n        title: '扩展页面地址',\r\n        key: 'extra.page_uri',\r\n    },\r\n    {\r\n        title: '进程ID',\r\n        key: 'pid',\r\n    },\r\n    {\r\n        title: '软滤波等级',\r\n        key: 'weight.soft_filter_level',\r\n    },\r\n];\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setEnableTabBar: (...args) => dispatch(setEnableTabBarAction(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass SystemSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemInfo: {},\r\n            libLoadVisible: false,\r\n            reloadLibPath: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('系统信息');\r\n        this.refreshConfig();\r\n    }\r\n\r\n    refreshConfig() {\r\n        fetchSystemInfo().then(res => {\r\n            this.setState({\r\n                systemInfo: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {systemInfo, libLoadVisible, reloadLibPath} = this.state;\r\n        const {enableTabBar} = this.props;\r\n        return (\r\n            <div className=\"systemSettings\">\r\n                <List renderHeader={() => '系统信息'}>\r\n                    {\r\n                        DATA_TO_SHOW.map(item => (<List.Item key={item.key} extra={systemInfo[item.key]}>\r\n                            {item.title}\r\n                        </List.Item>))\r\n                    }\r\n                    <Item key=\"libPath\" arrow=\"horizontal\"\r\n                          onClick={() => this.showLibLoadModal()}> 驱动路径: {systemInfo.libPath}</Item>\r\n                    <Item key=\"weight.protocol_version\" arrow=\"horizontal\"\r\n                          extra={systemInfo['weight.protocol_version']}\r\n                          onClick={() => this.showProtocolVersionSelector()}>\r\n                        协议版本\r\n                    </Item>\r\n                </List>\r\n                <List renderHeader={() => '系统设置'}>\r\n                    <Item\r\n                        key=\"tabBar\"\r\n                        extra={<Switch\r\n                            checked={enableTabBar}\r\n                            onChange={target => this.setEnableTabBar(target)}\r\n                            platform=\"android\"/>}>\r\n                        底部标签栏\r\n                    </Item>\r\n                    <Item key=\"systemProps\" arrow=\"horizontal\"\r\n                          onClick={() => this.props.history.push({pathname: '/setting/system-props'})}>\r\n                        JVM信息\r\n                    </Item>\r\n                    <Item key=\"stopService\">\r\n                        <Button type=\"warning\" onClick={() => this.stopWeightService()}>停止重力服务</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={libLoadVisible}\r\n                    title=\"重新加载驱动\"\r\n                    transparent\r\n                    maskClosable={true}\r\n                    footer={[\r\n                        {\r\n                            text: '取消',\r\n                            onPress: () => this.showLibLoadModal(false),\r\n                        },\r\n                        {\r\n                            text: '加载',\r\n                            onPress: () => this.reloadLibrary()\r\n                        },\r\n                    ]}>\r\n                    <TextareaItem\r\n                        placeholder=\"驱动路径!\"\r\n                        autoHeight\r\n                        value={reloadLibPath} onChange={e => this.setState({reloadLibPath: e})}/>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showProtocolVersionSelector() {\r\n        const _this = this;\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: VERSION_SELECTOR_OPTIONS,\r\n            cancelButtonIndex: VERSION_SELECTOR_OPTIONS.length - 1,\r\n            title: '协议版本',\r\n            message: '传感器协议版本选择'\r\n        }, value => {\r\n            let version;\r\n            switch (value) {\r\n                case 0:\r\n                    version = 1;\r\n                    break;\r\n                case 1:\r\n                    version = 2;\r\n                    break;\r\n                default:\r\n                    version = 0;\r\n            }\r\n            setProtocolVersion(version).then(() => {\r\n                Toast.show('协议版本设置成功', 3, false);\r\n                _this.refreshConfig();\r\n            });\r\n        });\r\n    }\r\n\r\n    setEnableTabBar(target) {\r\n        this.props.setEnableTabBar(target);\r\n    }\r\n\r\n    showLibLoadModal(show = true) {\r\n        const reloadLibPath = this.state.systemInfo.libPath;\r\n        this.setState({\r\n            reloadLibPath,\r\n            libLoadVisible: show\r\n        });\r\n    }\r\n\r\n    reloadLibrary() {\r\n        reloadLibPath(this.state.reloadLibPath).then(res => {\r\n            Toast.show(`加载成功: [${res}]`);\r\n            this.setState({\r\n                libLoadVisible: false,\r\n            })\r\n        })\r\n    }\r\n\r\n    stopWeightService() {\r\n        stopWeightService().then(() => {\r\n            Toast.show(\"重力服务已停止!\");\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props, mapAction2Props)(SystemSetting));\r\n","import {request} from './request';\r\n\r\nexport const reloadLibPath = path => {\r\n    return request({\r\n        url: '/api/serial/load-lib',\r\n        method: 'post',\r\n        data: {\r\n            libPath: path\r\n        }\r\n    })\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchSystemProps} from '../.././../api/dashboard';\r\nimport {List, TextareaItem} from 'antd-mobile';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    console.log(props, dispatch);\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\nconst {Item} = List;\r\n\r\nclass SystemPropsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemProps: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('JVM环境变量');\r\n        fetchSystemProps().then(res => {\r\n            const propList = [];\r\n            for (const name in res) {\r\n                if (res.hasOwnProperty(name)) {\r\n                    propList.push({\r\n                        name,\r\n                        value: res[name],\r\n                    });\r\n                }\r\n            }\r\n            this.setState({\r\n                systemProps: propList\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {systemProps} = this.state;\r\n        return (\r\n            <div className=\"systemProps\">\r\n                <List renderHeader={() => 'System Properties'}>\r\n                    {\r\n                        systemProps.map(p => (<Item key={p.name}>\r\n                            <div>{p.name}</div>\r\n                            <TextareaItem value={p.value} autoHeight labelNumber={5}/>\r\n                        </Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SystemPropsSetting);\r\n","import React, {Component} from 'react';\r\nimport {dumpAll} from '../../../api/sensor';\r\nimport {Button, List, Modal, TextareaItem, WingBlank} from 'antd-mobile';\r\n\r\nclass Overview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        dumpAll().then(res => {\r\n            const sensors = res.sort((a, b) => a.address - b.address);\r\n            this.setState({sensors})\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.state;\r\n        return (\r\n            <div className=\"overview\">\r\n                <List renderHeader={() => 'All Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => (\r\n                            <List.Item key={sensor.id}>\r\n                                {this.renderSensorItem(sensor)}\r\n                            </List.Item>\r\n                        ))\r\n                    }\r\n                </List>\r\n                <WingBlank>\r\n                    <Button onClick={() => this.refresh()} type=\"primary\">刷新</Button>\r\n                </WingBlank>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {slot, connection} = sensor;\r\n        return (<div onClick={() => this.onSensorClick(sensor)}>\r\n            传感器:[id:{sensor.id}/address:{sensor.address}]\r\n            货道:[id:{slot && slot.id}/No:{slot && slot.slotNo}]\r\n            连接:[id:{connection && connection.id}/{connection && connection.target}]\r\n        </div>);\r\n    }\r\n\r\n    onSensorClick(sensor) {\r\n        const {connection, slot} = sensor;\r\n        sensor.slot = null;\r\n        sensor.connection = null;\r\n        const list = (<List renderHeader={() => '传感器'}>\r\n            <TextareaItem value={JSON.stringify(sensor)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(connection)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(slot)} autoHeight/>\r\n        </List>);\r\n        Modal.alert('Sensor', list);\r\n    }\r\n}\r\n\r\nexport default Overview;\r\n","import React, {Component} from 'react';\r\nimport {disconnectTcp, fetchDatabaseTables, fetchStatusTable, resetDatabase} from '../../../api/systemStatus';\r\nimport {Button, Flex, InputItem, List, Modal, Picker, Switch, Toast} from 'antd-mobile';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {\r\n    fetchDisplayAutoUnit,\r\n    fetchSoftFilterLevel,\r\n    setDisplayAutoUnit,\r\n    updateSoftFilterLevel\r\n} from '../../../api/config';\r\nimport {setCompensationState} from '../../../api/slot';\r\nimport {cleanAllBackupSn, reloadSensors} from '../../../api/sensor';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\nconst renderConnectionStatus = status => {\r\n    if (status) {\r\n        return (<span style={{color: '#1F90E6'}}>Connected</span>)\r\n    } else {\r\n        return (<span style={{color: '#E94F4F'}}>Disconnected</span>)\r\n    }\r\n};\r\n\r\nconst SoftFilterLevelTable = {\r\n    0: '关闭[0]',\r\n    1: '低[1]',\r\n    2: '中[2]',\r\n    3: '高[3]',\r\n};\r\n\r\nconst SoftFilterLevels = [\r\n    {\r\n        label: SoftFilterLevelTable[3],\r\n        value: 3,\r\n        key: 3,\r\n    },\r\n    {\r\n        label: SoftFilterLevelTable[2],\r\n        value: 2,\r\n        key: 2,\r\n    },\r\n    {\r\n        label: SoftFilterLevelTable[1],\r\n        value: 1,\r\n        key: 1,\r\n    },\r\n    {\r\n        label: SoftFilterLevelTable[0],\r\n        value: 0,\r\n        key: 0,\r\n    },\r\n];\r\n\r\nconst doSetCompensationState = state => {\r\n    setCompensationState(state).then(() => {\r\n        Toast.show(`补偿${state ? '开启' : '关闭'}成功！`, 3, false);\r\n    });\r\n};\r\n\r\nclass SystemCheck extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            statusTable: {\r\n                tcpApi: {},\r\n            },\r\n            databaseTables: [],\r\n            softFilterLevel: -1,\r\n            softFilterLevelLabel: '',\r\n            displayAutoUnit: 'false',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('系统检查');\r\n        this.refreshStatusTable();\r\n        this.refreshSoftFilterLevel();\r\n        this.refreshDisplayAutoUnitState();\r\n    }\r\n\r\n    refreshSoftFilterLevel() {\r\n        fetchSoftFilterLevel().then(res => {\r\n            const {value} = res;\r\n            const level = parseInt(value);\r\n            this.setState({\r\n                softFilterLevelLabel: SoftFilterLevelTable[level],\r\n                softFilterLevel: level,\r\n            });\r\n        });\r\n    }\r\n\r\n    refreshDisplayAutoUnitState() {\r\n        fetchDisplayAutoUnit().then(res => {\r\n            const {value} = res;\r\n            this.setState({displayAutoUnit: value});\r\n        });\r\n    }\r\n\r\n    refreshStatusTable() {\r\n        fetchStatusTable().then(res => {\r\n            this.setState({\r\n                statusTable: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    refreshDatabaseTables() {\r\n        fetchDatabaseTables().then(res => {\r\n            this.setState({databaseTables: res,})\r\n        });\r\n    }\r\n\r\n    showCompensationOperations() {\r\n        Modal.operation([\r\n            {\r\n                text: '关闭补偿', onPress: () => {\r\n                    doSetCompensationState(false);\r\n                }\r\n            },\r\n            {\r\n                text: '开启补偿', onPress: () => {\r\n                    doSetCompensationState(true);\r\n                }\r\n            },\r\n        ]);\r\n    }\r\n\r\n    render() {\r\n        const _this = this;\r\n        const {statusTable, databaseTables, softFilterLevel, softFilterLevelLabel, displayAutoUnit} = this.state;\r\n        const {tcpApi} = statusTable;\r\n        return (\r\n            <div className=\"system-check\">\r\n                <List renderHeader={() => 'SCADA_API状态'}>\r\n                    <List.Item extra={renderConnectionStatus(tcpApi.connection)}>\r\n                        连接状态\r\n                    </List.Item>\r\n                    <List.Item extra={tcpApi.ip}>\r\n                        IP地址\r\n                    </List.Item>\r\n                    <List.Item extra={tcpApi.port}>\r\n                        端口\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\"\r\n                               onClick={() => this.props.history.push({pathname: '/setting/message-log'})}>\r\n                        交互日志\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <Flex justify=\"between\">\r\n                            <Flex.Item>\r\n                                <Button type=\"warning\" onClick={() => this.reconnectTcp()}>重新连接</Button>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <Button type=\"primary\" onClick={() => this.refreshStatusTable()}>刷新</Button>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </List.Item>\r\n                </List>\r\n                <List renderHeader={() => '传感器信息'}>\r\n                    <List.Item arrow=\"horizontal\"\r\n                               onClick={() => this.props.history.push({pathname: '/setting/sensor-healthy'})}>\r\n                        传感器健康\r\n                    </List.Item>\r\n                    <Picker data={SoftFilterLevels}\r\n                            cols={1}\r\n                            title=\"软件滤波等级\"\r\n                            value={softFilterLevel}\r\n                            onChange={value => {\r\n                                this.setSoftFilterLevel(value)\r\n                            }}>\r\n                        <InputItem value={softFilterLevelLabel}>软滤波等级</InputItem>\r\n                    </Picker>\r\n                    <List.Item extra=\"Disable/Enable\"\r\n                               onClick={() => this.showCompensationOperations()}>\r\n                        补偿管理\r\n                    </List.Item>\r\n                    <List.Item extra=\"强制刷新货道数据\"\r\n                               onClick={() => this.showReloadConfirm()}>\r\n                        重新加载\r\n                    </List.Item>\r\n                    <List.Item extra=\"清除备份SN并重新收集\"\r\n                               onClick={() => this.showCleanBackupSnConfirm()}>\r\n                        重新收集SN\r\n                    </List.Item>\r\n                    <List.Item\r\n                        extra={<Switch\r\n                            checked={displayAutoUnit === 'true'}\r\n                            onChange={value => {\r\n                                setDisplayAutoUnit(value).then(() => _this.refreshDisplayAutoUnitState())\r\n                            }}/>}>\r\n                        自动调整显示单位\r\n                    </List.Item>\r\n                </List>\r\n                <List renderHeader={() => '数据库信息'}>\r\n                    {databaseTables.map(tableName => (<List.Item key={tableName}>{tableName}</List.Item>))}\r\n                    <List.Item>\r\n                        <Flex>\r\n                            <Flex.Item>\r\n                                <Button type=\"warning\" onClick={() => this.showDbResetConfirm()}>重置数据库</Button>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <Button type=\"primary\"\r\n                                        onClick={() => this.refreshDatabaseTables()}>数据表</Button>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showCleanBackupSnConfirm() {\r\n        Modal.alert('重新收集SN', '确认清空备份SN并重新收集？', [\r\n            {text: '取消'},\r\n            {\r\n                text: '确认', onPress: () => {\r\n                    cleanAllBackupSn().then(res => {\r\n                        Toast.show('备份SN清空成功，操作记录数为：' + res, 3, false);\r\n                    });\r\n                }\r\n            },\r\n        ]);\r\n    }\r\n\r\n    showReloadConfirm() {\r\n        Modal.alert('重新加载', '确认重新加载货道数据?', [\r\n            {text: '取消'},\r\n            {\r\n                text: '确认', onPress: () => {\r\n                    reloadSensors().then(() => {\r\n                        Toast.show('重新加载成功', 3, false);\r\n                    });\r\n                }\r\n            },\r\n        ]);\r\n    }\r\n\r\n    setSoftFilterLevel(value) {\r\n        updateSoftFilterLevel(value[0]).then(() => {\r\n            Toast.show('滤波等级设置成功，重新加载后生效！', 3, false);\r\n            this.refreshSoftFilterLevel();\r\n        });\r\n    }\r\n\r\n    reconnectTcp() {\r\n        Modal.alert('确定重连', '确定段考连接并重新建立连接？?', [{text: '取消'}, {\r\n            text: '确定', onPress() {\r\n                disconnectTcp().then(() => {\r\n                    Toast.show('断开成功，系统将在3秒后重新连接!', 3, false);\r\n                });\r\n            }\r\n        }])\r\n    }\r\n\r\n    showDbResetConfirm() {\r\n        Modal.alert('清空数据库？',\r\n            '该操作将会清空数据库中全部内容，操作完成后需要对货道重新扫描并重新下发库位信息！（该操作无法恢复）',\r\n            [{text: '取消'}, {text: '确定', onPress: () => this.doDbReset()}])\r\n    }\r\n\r\n    doDbReset() {\r\n        resetDatabase().then(() => {\r\n            Modal.alert('Database Reset Success!', 'Reset success, please scan again!');\r\n        });\r\n    }\r\n}\r\n\r\nconst component = connect(null, mapAction2Props)(SystemCheck);\r\nexport default withRouter(component);\r\n","import {request} from './request';\r\n\r\nexport const fetchStatusTable = () => {\r\n    return request({\r\n        url: '/api/status/',\r\n        method: 'get',\r\n    })\r\n};\r\n\r\nexport const disconnectTcp = () => {\r\n    return request({\r\n        url: '/api/status/tcp-disconnect',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const fetchDatabaseTables = () => {\r\n    return request({\r\n        url: '/api/status/tables',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchMessageLog = () => {\r\n    return request({\r\n        url: '/api/status/message-log',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const resetDatabase = () => {\r\n    return request({\r\n        url: '/api/status/_db-reset',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const sensorParams = address => {\r\n    return request({\r\n        url: `/api/status/${address}/_details`,\r\n        method: 'get'\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchMessageLog} from '../../../api/systemStatus';\r\nimport {Card, List, TextareaItem} from \"antd-mobile\";\r\nimport './MessageLog.sass'\r\n\r\nconst renderMessageItem = (message, index) => {\r\n    return (<List.Item key={index}>\r\n        <Card className=\"message-item\">\r\n            <Card.Header title={message.action} extra={message.type}/>\r\n            <Card.Body>\r\n                <TextareaItem value={JSON.stringify(message.data)} rows={3}/>\r\n            </Card.Body>\r\n            <Card.Footer content={message.seqNo}/>\r\n        </Card>\r\n    </List.Item>);\r\n};\r\n\r\nclass MessageLog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            logs: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshLogs();\r\n        this.refreshTimmer = setInterval(() => {\r\n            this.refreshLogs();\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.refreshTimmer);\r\n    }\r\n\r\n    refreshLogs() {\r\n        fetchMessageLog().then(res => {\r\n            this.setState({\r\n                logs: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {logs} = this.state;\r\n        return (\r\n            <div className=\"message-log\">\r\n                <List renderHeader={() => 'Message Logs'}>\r\n                    {\r\n                        logs.map(renderMessageItem)\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageLog;\r\n","import React, {Component} from 'react';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {ActionSheet, Card, Flex, List, Modal, Progress, Toast} from 'antd-mobile';\r\nimport {cleanCounter, sensorHealthy} from '../../../api/healthy';\r\nimport {\r\n    tryRecoveryElabelAddress,\r\n    tryRecoverySensorAddress,\r\n    tryRecoverySensorAddressWithOriginSn\r\n} from '../../../api/sensor';\r\nimport {\r\n    abortFirmwareUpgrade,\r\n    eLabelFirmwareUpgrade,\r\n    fetchUpgradeProgress,\r\n    sensorFirmwareUpgrade\r\n} from '../../../api/firmware';\r\nimport './SensorHealthy.sass';\r\n\r\nconst operations = ['重置计数器', '刷新', '取消'];\r\nconst ClickOperations = ['传感器固件升级', '电子标签固件升级', '恢复传感器地址', '恢复电子标签地址', '取消'];\r\nconst WARN_RATE = 0.1;\r\nconst UPGRADE_PROGRESS_STATE_TABLE = {\r\n    0: '等待升级',\r\n    1: '升级成功',\r\n    2: '升级失败',\r\n    3: '升级中',\r\n};\r\n\r\nclass SensorHealthy extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: [],\r\n            upgradePercent: 0,\r\n            upgradeProgress: {},\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshSensors();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n    }\r\n\r\n    tryReleaseUpgradeProgressTimmer() {\r\n        if (this.upgradeFirmwareTimmer) {\r\n            clearTimeout(this.upgradeFirmwareTimmer);\r\n        }\r\n    }\r\n\r\n    refreshSensors() {\r\n        sensorHealthy().then(res => {\r\n            const healthyList = res.sort((a, b) => a.sensor.address - b.sensor.address);\r\n            this.setState({\r\n                sensors: healthyList,\r\n                showUpgradeProgress: false,\r\n            });\r\n        });\r\n    }\r\n\r\n    refreshUpgradeProgress(cb) {\r\n        fetchUpgradeProgress().then(res => {\r\n            this.setState({upgradeProgress: res});\r\n            cb(res);\r\n        });\r\n    }\r\n\r\n    doAbortFirmwareUpgrade() {\r\n        abortFirmwareUpgrade().then(() => {\r\n            Toast.show('升级已取消', 3, false);\r\n        });\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n    }\r\n\r\n    render() {\r\n        const {sensors, showUpgradeProgress, upgradeProgress} = this.state;\r\n        let upgradeProgressPercent = 0;\r\n        if (upgradeProgress.total !== undefined && upgradeProgress.current !== undefined && upgradeProgress.total !== 0) {\r\n            upgradeProgressPercent = upgradeProgress.current / upgradeProgress.total * 100;\r\n        }\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Sensor Healthy'}>\r\n                    {\r\n                        sensors.map(helthy => (<List.Item key={helthy.sensor.id}>\r\n                            {this.renderSensorCard(helthy)}\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <Modal visible={showUpgradeProgress}\r\n                       title=\"升级进度\"\r\n                       transparent\r\n                       maskClosable={false}\r\n                       onClose={() => this.onUpgradeProgressModalClose()}\r\n                       footer={[{\r\n                           text: 'Abort Upgrade',\r\n                           disabled: true,\r\n                           onPress: () => {\r\n                               this.onUpgradeProgressModalClose();\r\n                               this.doAbortFirmwareUpgrade();\r\n                           }\r\n                       }]}>\r\n                    <p>{UPGRADE_PROGRESS_STATE_TABLE[upgradeProgress.state]}</p>\r\n                    <p>{upgradeProgressPercent.toFixed(2)}%</p>\r\n                    <Progress percent={upgradeProgressPercent} position=\"normal\"/>\r\n                </Modal>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperations()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    recoveryElabelAddress(healthy) {\r\n        const {sensor} = healthy;\r\n        const {id, elabelSn} = sensor;\r\n        const content = (<p>确认使用序列号[{elabelSn}]恢复地址?</p>);\r\n        Modal.alert(`电子标签[${sensor.address}]地址恢复`, content, [\r\n            {\r\n                text: '确认', onPress: () => {\r\n                    tryRecoveryElabelAddress(id).then(res => {\r\n                        Toast.show(`${res.address}:恢复成功`, 3, false);\r\n                    });\r\n                }\r\n            },\r\n            {text: '取消'},\r\n        ]);\r\n    }\r\n\r\n    recoverySensorAddress(healthy) {\r\n        const {sensor} = healthy;\r\n        const {id, deviceSn, sensorSn} = sensor;\r\n        const content = (<p>初始SN:[{deviceSn}]<br/>备份SN:[{sensorSn}]<br/>确认使用该SN恢复地址?</p>);\r\n        Modal.alert(`传感器[${sensor.address}]地址恢复`, content, [\r\n            {\r\n                text: '使用新SN恢复', onPress: () => {\r\n                    tryRecoverySensorAddress(id).then(res => {\r\n                        Toast.show(`${res.address}:恢复成功`, 3, false);\r\n                    });\r\n                }\r\n            },\r\n            {\r\n                text: '使用原SN恢复', onPress: () => {\r\n                    tryRecoverySensorAddressWithOriginSn(id).then(res => {\r\n                        Toast.show(`${res.address}:恢复成功`, 3, false);\r\n                    });\r\n                }\r\n            },\r\n            {text: '取消'},\r\n        ]);\r\n    }\r\n\r\n    onCardClick(healthy) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: ClickOperations,\r\n            title: '操作菜单',\r\n            cancelButtonIndex: ClickOperations.length - 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.upgradeFirmware(healthy);\r\n                    break;\r\n                case 1:\r\n                    this.upgradeElabelFirmware(healthy);\r\n                    break;\r\n                case 2:\r\n                    this.recoverySensorAddress(healthy);\r\n                    break;\r\n                case 3:\r\n                    this.recoveryElabelAddress(healthy);\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    upgradeFirmware(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const total = packageCounter.totalSuccess + packageCounter.totalErrors;\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.totalErrors / total));\r\n        let title = '';\r\n        let content = '';\r\n        let warn = false;\r\n        const errorRateInPer = (errorsRate * 100).toFixed(2);\r\n        if (errorsRate > WARN_RATE) {\r\n            const minRate = (WARN_RATE * 100).toFixed(2);\r\n            title = '谨慎升级！！！';\r\n            content = `传感器${sensor.address}的网络丢包率为${errorRateInPer}%，在极限值${minRate}%下，建议通过串口升级！`;\r\n            warn = true;\r\n        } else {\r\n            title = '升级确认';\r\n            content = `传感${sensor.address}器的网络丢包率为${errorRateInPer}%,升级后请手动reload启动重力服务！`;\r\n            warn = false;\r\n        }\r\n        Modal.alert(title, content, [\r\n            {\r\n                text: warn ? '仍要升级' : '升级',\r\n                onPress: () => {\r\n                    this.doFirmwareUpgrade(sensor);\r\n                }\r\n            },\r\n            {\r\n                text: '取消升级',\r\n            }\r\n        ]);\r\n    }\r\n\r\n    upgradeElabelFirmware(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const total = packageCounter.elabelSuccess + packageCounter.elabelErrors;\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.elabelErrors / total));\r\n        let title = '';\r\n        let content = '';\r\n        let warn = false;\r\n        const errorRateInPer = (errorsRate * 100).toFixed(2);\r\n        if (errorsRate > WARN_RATE) {\r\n            const minRate = (WARN_RATE * 100).toFixed(2);\r\n            title = '谨慎升级！！！';\r\n            content = `电子标签器${sensor.address}的网络丢包率为${errorRateInPer}%，在极限值${minRate}%下，建议通过串口升级！`;\r\n            warn = true;\r\n        } else {\r\n            title = '升级确认';\r\n            content = `电子标签${sensor.address}器的网络丢包率为${errorRateInPer}%,升级后请手动reload启动重力服务！`;\r\n            warn = false;\r\n        }\r\n        Modal.alert(title, content, [\r\n            {\r\n                text: warn ? '仍要升级' : '升级',\r\n                onPress: () => {\r\n                    this.doElabelFirmwareUpgrade(sensor);\r\n                }\r\n            },\r\n            {\r\n                text: '取消升级',\r\n            }\r\n        ])\r\n    }\r\n\r\n    doFirmwareUpgrade(sensor) {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n        sensorFirmwareUpgrade(sensor.id).then(() => {\r\n            Toast.show('升级已完成', 2, false);\r\n            this.tryReleaseUpgradeProgressTimmer();\r\n        });\r\n        this.showUpgradeProgress();\r\n        this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n    }\r\n\r\n    doElabelFirmwareUpgrade(sensor) {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n        eLabelFirmwareUpgrade(sensor.id).then(() => {\r\n            Toast.show('升级已完成', 2, false);\r\n            this.tryReleaseUpgradeProgressTimmer();\r\n        });\r\n        this.showUpgradeProgress();\r\n        this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n    }\r\n\r\n    refreshUpgradeProgressCb() {\r\n        return () => {\r\n            this.upgradeFirmwareTimmer = setTimeout(() => {\r\n                this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n            }, 500);\r\n        };\r\n    }\r\n\r\n    showUpgradeProgress() {\r\n        this.setState({showUpgradeProgress: true});\r\n    }\r\n\r\n    onUpgradeProgressModalClose() {\r\n        this.setState({showUpgradeProgress: false});\r\n    }\r\n\r\n    renderSensorCard(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const zeroOffset = `ZeroOffset:${sensor.zeroReference}`;\r\n        const total = packageCounter.totalSuccess + packageCounter.totalErrors;\r\n        const successRate = total === 0 ? 0 : ((packageCounter.totalSuccess / total) * 100).toFixed(0);\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.totalErrors / total) * 100).toFixed(0);\r\n\r\n        const elabelSuccess = packageCounter.elabelSuccess;\r\n        const elabelErrors = packageCounter.elabelErrors;\r\n        const eLabelTotal = elabelErrors + elabelSuccess;\r\n        const elabelSuccessRate = eLabelTotal === 0 ? 0 : ((elabelSuccess / eLabelTotal) * 100).toFixed(0);\r\n        const elabelErrorosRate = eLabelTotal === 0 ? 0 : ((elabelErrors / eLabelTotal) * 100).toFixed(0);\r\n        const elabelContinueErrors = packageCounter.elabelContinueErrors;\r\n        return (<Card key={sensor.id} onClick={() => this.onCardClick(healthy)}>\r\n            <Card.Header title={sensor.address} extra={sensor.deviceSn}/>\r\n            <Card.Body className=\"healthy-package-counter\">\r\n                <Flex>\r\n                    <Flex.Item>\r\n                        <div className=\"total\">\r\n                            <p className=\"title\">SUCCESS</p>\r\n                            <p className=\"value\">{packageCounter.totalSuccess}/{successRate}%</p>\r\n                            <p className=\"title\">ELABEL SUCCESS</p>\r\n                            <p className=\"value\">{elabelSuccess}/{elabelSuccessRate}%</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <div className=\"error\">\r\n                            <p className=\"title\">ERRORS</p>\r\n                            <p className=\"value\">{packageCounter.totalErrors}/{errorsRate}%</p>\r\n                            <p className=\"title\">ELABEL ERRORS</p>\r\n                            <p className=\"value\">{elabelErrors}/{elabelErrorosRate}%</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <div className=\"continue\">\r\n                            <p className=\"title\">CONTINUE</p>\r\n                            <p className=\"value\">{packageCounter.continueErrors}</p>\r\n                            <p className=\"title\">ELABEL CONTINUE</p>\r\n                            <p className=\"value\">{elabelContinueErrors}</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            </Card.Body>\r\n            <Card.Footer content={zeroOffset}/>\r\n        </Card>);\r\n    }\r\n\r\n    showOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: operations,\r\n            title: 'Operations',\r\n            cancelButtonIndex: operations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    //Clean\r\n                    this.showCleanCounterConfirm();\r\n                    break;\r\n                case 1:\r\n                    this.refreshSensors();\r\n                    break;\r\n                case 2:\r\n                    //Cancel\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    showCleanCounterConfirm() {\r\n        Modal.alert('Clean Counter?', 'Clean counter?', [\r\n            {text: 'Cancel'},\r\n            {text: 'Yes', onPress: () => this.doCleanCounter()}\r\n        ]);\r\n    }\r\n\r\n    doCleanCounter() {\r\n        cleanCounter().then(() => {\r\n            Toast.show('Clean success!', 1, false);\r\n        })\r\n    }\r\n}\r\n\r\nexport default SensorHealthy;\r\n","import {request} from './request';\r\n\r\nexport const sensorHealthy = () => {\r\n    return request({\r\n        url: '/api/sensor-healthy/_healthy',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const cleanCounter = () => {\r\n    return request({\r\n        url: '/api/sensor-healthy/_clean-counter',\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const sensorFirmwareUpgrade = sensorId => {\r\n    return request({\r\n        url: `/api/firmware/${sensorId}/_upgrade`,\r\n        method: 'post',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const eLabelFirmwareUpgrade = sensorId => {\r\n    return request({\r\n        url: `/api/firmware/${sensorId}/_elabel-upgrade`,\r\n        method: 'post',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchUpgradeProgress = () => {\r\n    return request({\r\n        url: '/api/firmware/_upgrade-progress',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const abortFirmwareUpgrade = () => {\r\n    return request({\r\n        url: '/api/firmware/_abort-upgrade',\r\n        method: 'post',\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {sensorParams} from '../../../api/systemStatus';\r\nimport {ActionSheet, List} from 'antd-mobile';\r\nimport FloatButton from \"../../commons/FloatButton\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst operations = ['刷新', '取消'];\r\n\r\nclass SensorDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensor: {},\r\n            slot: {},\r\n            sensorParams: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('传感器详细参数');\r\n        this.props.setTabBarState(false);\r\n        const address = this.props.match.params.address;\r\n        this.refreshParams(address);\r\n    }\r\n\r\n    refreshParams(address) {\r\n        sensorParams(address).then(res => {\r\n            const {slot, sensor} = res;\r\n            delete res.slot;\r\n            delete res.sensor;\r\n            const params = [];\r\n            for (let name in res) {\r\n                if (!res.hasOwnProperty(name)) {\r\n                    continue;\r\n                }\r\n                params.push({\r\n                    name: name,\r\n                    value: res[name],\r\n                });\r\n            }\r\n            this.setState({\r\n                sensor: sensor,\r\n                slot: slot,\r\n                sensorParams: params,\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {sensor, slot, sensorParams} = this.state;\r\n        return (\r\n            <div className=\"sensor-details\">\r\n                <List renderHeader={() => '传感器基本信息'}>\r\n                    <List.Item extra={sensor.deviceSn}>序列号</List.Item>\r\n                    <List.Item extra={sensor.hasElabel ? 'yes' : 'no'}>电子标签</List.Item>\r\n                    <List.Item extra={sensor.address}>地址</List.Item>\r\n                    <List.Item extra={sensor.zeroReference}>零点偏移</List.Item>\r\n                    <List.Item extra={slot.slotNo}>绑定货道号</List.Item>\r\n                    <List.Item extra={slot.skuApw}>SKU单重</List.Item>\r\n                    <List.Item extra={slot.skuName}>SKU名称</List.Item>\r\n                    <List.Item extra={slot.skuTolerance}>SKU允差</List.Item>\r\n                    <List.Item extra={slot.skuNo}>SKU号</List.Item>\r\n                </List>\r\n                <List renderHeader={() => '传感器硬件信息'}>\r\n                    {\r\n                        sensorParams.map(param => (\r\n                            <List.Item key={param.name} extra={JSON.stringify(param.value)}>\r\n                                {param.name}\r\n                            </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperations()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: operations,\r\n            title: '操作选择',\r\n            cancelButtonIndex: operations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.refreshParams(this.props.match.params.address);\r\n                    break;\r\n                case 1:\r\n                    //Cancel\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SensorDetails);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {List} from 'antd-mobile';\r\nimport {fetchThSensors} from '../../../api/thSensor';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass ThSensorSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('温湿度传感器');\r\n        this.refreshSensors();\r\n    }\r\n\r\n    refreshSensors() {\r\n        fetchThSensors().then(res => {\r\n            this.setState({\r\n                sensors: res\r\n            });\r\n        });\r\n    }\r\n\r\n    toDetail(sensor) {\r\n        this.props.history.push({\r\n            pathname: `/setting/${sensor.id}/th-detail`,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.state;\r\n        return (\r\n            <div className=\"th-sensors\">\r\n                <List renderHeader={() => '温湿度传感器'}>\r\n                    {\r\n                        sensors.map(sensor => (\r\n                            <List.Item key={sensor.id} arrow=\"horizontal\" onClick={() => this.toDetail(sensor)}>\r\n                                {sensor.no} [{sensor.address}]\r\n                            </List.Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(ThSensorSetting);\r\n","import {request} from './request';\r\n\r\nexport const fetchThSensors = () => {\r\n    return request({\r\n        url: '/api/th-sensor/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchOneSensor = id => {\r\n    return request({\r\n        url: `/api/th-sensor/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setRange = data => {\r\n    return request({\r\n        url: `/api/th-sensor/${data.id}/_range`,\r\n        method: 'post',\r\n        data\r\n    });\r\n};\r\n\r\nexport const calibrateTemp = (id, temp) => {\r\n    return request({\r\n        url: `/api/th-sensor/${id}/_calibrate-temperature`,\r\n        method: 'post',\r\n        data: {\r\n            currentTemperature: temp,\r\n        },\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport './LineCharts.sass';\r\nimport PropTypes from 'prop-types';\r\nimport echarts from 'echarts';\r\n\r\nclass LineCharts extends Component {\r\n    static propTypes = {\r\n        width: PropTypes.number.isRequired,\r\n        height: PropTypes.number.isRequired,\r\n        xData: PropTypes.array.isRequired,\r\n        yData: PropTypes.array.isRequired,\r\n    };\r\n    static defaultProps = {\r\n        width: 1000,\r\n        height: 300,\r\n        xData: [],\r\n        yData: [],\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    onCanvasLoad(canvas) {\r\n        if (!canvas || canvas === this.canvas) {\r\n            return;\r\n        }\r\n        this.canvas = canvas;\r\n        this.charts = echarts.init(this.canvas);\r\n        this.refreshCharts();\r\n    }\r\n\r\n    refreshCharts() {\r\n        const {xData, yData} = this.props;\r\n        const series = [];\r\n        const names = [];\r\n        for (let y of yData) {\r\n            names.push(y.name);\r\n            series.push({\r\n                ...y,\r\n                type: 'line',\r\n            });\r\n        }\r\n        const option = {\r\n            tooltip: {\r\n                trigger: 'axis'\r\n            },\r\n            legend: {\r\n                data: names,\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                data: xData\r\n            },\r\n            yAxis: {\r\n                type: 'value'\r\n            },\r\n            series: series,\r\n        };\r\n        this.charts.setOption(option);\r\n    }\r\n\r\n    render() {\r\n        const {width, height} = this.props;\r\n        return (\r\n            <canvas ref={canvas => this.onCanvasLoad(canvas)}\r\n                    className=\"charts\"\r\n                    height={height}\r\n                    width={width}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LineCharts;\r\n","import React, {Component} from 'react';\r\nimport {calibrateTemp, fetchOneSensor, setRange} from '../../../api/thSensor';\r\nimport {reloadSensors} from '../../../api/sensor';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {Button, Card, Flex, InputItem, List, Modal, Toast} from 'antd-mobile';\r\nimport {fetchSensorDataLog} from '../../../api/tempHumidityLog';\r\nimport LineCharts from '../../commons/LineCharts';\r\nimport {thSensorStateText} from '../../../util/DataConvertor';\r\n\r\nconst maxAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass ThSensorDetailsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensor: {},\r\n            dataLogs: [],\r\n            chartsXData: [],\r\n            chartsYData: [],\r\n            currentTemp: '0',\r\n        };\r\n    }\r\n\r\n    refreshDataLog() {\r\n        fetchSensorDataLog(this.sensorId).then(res => {\r\n            const xData = [];\r\n            const tempData = [];\r\n            // const humiData = [];\r\n            // const maxHumiData = [];\r\n            // const minHumiData = [];\r\n            const maxTempData = [];\r\n            const minTempData = [];\r\n            for (let log of res) {\r\n                const {\r\n                    createTime,\r\n                    temperature,\r\n                    // humidity,\r\n                    // maxHumidity, minHumidity,\r\n                    maxTemperature, minTemperature\r\n                } = log;\r\n                const date = new Date(createTime);\r\n                const timeStr = `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\r\n                xData.push(timeStr);\r\n                tempData.push(temperature);\r\n                // humiData.push(humidity);\r\n                // maxHumiData.push(maxHumidity);\r\n                // minHumiData.push(minHumidity);\r\n                maxTempData.push(maxTemperature);\r\n                minTempData.push(minTemperature);\r\n            }\r\n            const yData = [\r\n                {name: '温度', data: tempData},\r\n                // {name: '湿度', data: humiData},\r\n                // maxHumiData, minHumiData,\r\n                {name: '温度上限', data: maxTempData}, {name: '温度下限', data: minTempData},\r\n            ];\r\n            this.setState({\r\n                dataLogs: res,\r\n                chartsXData: xData,\r\n                chartsYData: yData,\r\n            });\r\n            this.charts.refreshCharts();\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {id} = this.props.match.params;\r\n        this.sensorId = id;\r\n        this.props.setTitle('温湿度传感器报警范围');\r\n        this.refreshDataLog();\r\n        fetchOneSensor(id).then(res => {\r\n            this.setState({\r\n                sensor: res,\r\n            });\r\n        })\r\n    }\r\n\r\n    setSensorData(data) {\r\n        const {sensor} = this.state;\r\n        this.setState({\r\n            sensor: {\r\n                ...sensor,\r\n                ...data,\r\n            }\r\n        });\r\n    }\r\n\r\n    calibrateTemp() {\r\n        const {currentTemp} = this.state;\r\n        const {id} = this.props.match.params;\r\n        if (!currentTemp.match(/^-?\\d+\\.?\\d*$/)) {\r\n            Toast.show('请输入正确的温度值', 3, false);\r\n            return;\r\n        }\r\n        Modal.alert('确定标定？', '确定校准该温度传感器？', [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '确定',\r\n                    onPress() {\r\n                        calibrateTemp(id, currentTemp).then(res => {\r\n                            Toast.show('标定成功', 3, false);\r\n                        });\r\n                    }\r\n                }\r\n            ]\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const {sensor, dataLogs, chartsXData, chartsYData, currentTemp} = this.state;\r\n        return (\r\n            <div className=\"th-sensor-detail\">\r\n                <List renderHeader={() => '报警范围'}>\r\n                    <InputItem value={sensor.maxTemperature} labelNumber={10}\r\n                               onChange={text => this.setSensorData({maxTemperature: text})}>温度上限(°C)：</InputItem>\r\n                    <InputItem value={sensor.minTemperature} labelNumber={10}\r\n                               onChange={text => this.setSensorData({minTemperature: text})}>温度下限(°C)：</InputItem>\r\n                    <InputItem value={sensor.maxHumidity} labelNumber={10}\r\n                               onChange={text => this.setSensorData({maxHumidity: text})}>湿度上限( %)：</InputItem>\r\n                    <InputItem value={sensor.minHumidity} labelNumber={10}\r\n                               onChange={text => this.setSensorData({minHumidity: text})}>湿度下限( %)：</InputItem>\r\n                    <List.Item>\r\n                        <Button type=\"primary\" onClick={() => this.updateRange()}>保存</Button>\r\n                    </List.Item>\r\n                </List>\r\n                <Card>\r\n                    <Card.Header\r\n                        title=\"温度标定\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <InputItem value={currentTemp}\r\n                                       onChange={txt => this.setState({currentTemp: txt})}>当前温度：</InputItem>\r\n                            <List.Item>\r\n                                <Button type=\"primary\" onClick={() => this.calibrateTemp()}>标定</Button>\r\n                            </List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n                <Card>\r\n                    <Card.Header title=\"历史数据\"/>\r\n                    <Card.Body>\r\n                        <LineCharts width={500} height={300} xData={chartsXData} yData={chartsYData}\r\n                                    ref={charts => this.charts = charts}/>\r\n                    </Card.Body>\r\n                    <Card.Footer content={dataLogs.length}/>\r\n                </Card>\r\n                <List renderHeader={() => '温湿度日志'}>\r\n                    {\r\n                        dataLogs.map(log => (<List.Item key={log.id}>\r\n                            <Flex>\r\n                                <Flex.Item>{log.createTime}</Flex.Item>\r\n                                <Flex.Item>温度:{log.temperature}°C({thSensorStateText(log.temperatureState)})</Flex.Item>\r\n                                {/*<Flex.Item>湿度:{log.humidity}%({thSensorStateText(log.humidityState)})</Flex.Item>*/}\r\n                            </Flex>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateRange() {\r\n        setRange(this.state.sensor).then(res => {\r\n            this.setState({sensor: res});\r\n            this.showReloadConfirm();\r\n        });\r\n    }\r\n\r\n    showReloadConfirm() {\r\n        Modal.alert('重新加载', '数据已更新，是否重新加载生效？', [\r\n            {\r\n                text: 'No'\r\n            },\r\n            {\r\n                text: 'Yes',\r\n                onPress: () => {\r\n                    reloadSensors().then(() => {\r\n                        Toast.show('重新加载成功', 1, false);\r\n                    });\r\n                }\r\n            }\r\n        ]);\r\n    }\r\n}\r\n\r\nexport default connect(null, maxAction2Props)(ThSensorDetailsSetting);\r\n","import {request} from './request';\r\n\r\nexport const fetchSensorDataLog = sensorId => {\r\n    return request({\r\n        url: '/api/temp-humidity-log/_sensor-logs',\r\n        method: 'get',\r\n        params: {\r\n            sensorId: sensorId,\r\n        }\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {Button, Card, List, Modal, TextareaItem, Toast} from 'antd-mobile';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {fetchExtraPageUri, setExtraPageUri} from '../../../api/config';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass ExtraPageSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pageUri: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('扩展页面配置');\r\n        fetchExtraPageUri().then(res => {\r\n            this.setState({\r\n                pageUri: res.value,\r\n            });\r\n        }).catch(err => {\r\n            const data = err.data;\r\n            if (data) {\r\n                const {code} = data;\r\n                if (code === 404) {\r\n                    this.setState({\r\n                        pageUri: '页面路径未设置',\r\n                    })\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    setPageUri() {\r\n        const {pageUri} = this.state;\r\n        const pattern = /^[a-zA-z]+:\\/\\/[^\\\\s]*$/;\r\n        if (!pageUri.match(pattern)) {\r\n            Modal.alert('输入提示', '请输入正确的URI!', [{text: '知道了'}]);\r\n            return;\r\n        }\r\n        setExtraPageUri(pageUri).then(res => {\r\n            Toast.show('配置成功', 3, false);\r\n        });\r\n    }\r\n\r\n    gotoExtraPage() {\r\n        this.props.history.push({\r\n            pathname: '/extra',\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {pageUri} = this.state;\r\n        return (\r\n            <div className=\"extra-page-setting\">\r\n                <Card>\r\n                    <Card.Header\r\n                        title=\"页面配置\"\r\n                        extra=\"页面路径配置\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <TextareaItem title=\"页面路径\"\r\n                                          autoHeight\r\n                                          value={pageUri}\r\n                                          onChange={text => this.setState({pageUri: text})}/>\r\n                            <List.Item>\r\n                                <Button type=\"primary\" onClick={() => this.setPageUri()}>保存</Button>\r\n                            </List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n                <Card>\r\n                    <Card.Header\r\n                        title=\"页面入口\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <List.Item arrow=\"horizontal\" onClick={() => this.gotoExtraPage()}>\r\n                                进入扩展页面\r\n                            </List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(ExtraPageSetting);\r\n","import React, {Component} from 'react';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport SensorSetting from './setting/SensorSetting'\r\nimport SettingMenu from './setting/SettingMenu'\r\nimport SlotSetting from './setting/SlotSetting'\r\nimport ConnectionSetting from './setting/ConnectionSetting'\r\nimport SlotDetailSetting from './setting/SlotDetailSetting'\r\nimport SystemSetting from './setting/SystemSetting'\r\nimport SystemPropsSetting from './setting/SystemPropsSetting'\r\nimport Overview from './setting/Overview'\r\nimport SystemCheck from './setting/SystemCheck'\r\nimport MessageLog from './setting/MessageLog'\r\nimport SensorHealthy from './setting/SensorHealthy'\r\nimport SensorDetails from './setting/SensorDetails'\r\nimport ThSensorSetting from './setting/ThSensorSetting'\r\nimport ThSensorDetailsSetting from './setting/ThSensorDetailsSetting'\r\nimport ExtraPageSetting from './setting/ExtraPageSetting'\r\nimport {mapStateAndAction} from '../../store/storeUtils';\r\n\r\nclass Setting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {showHeader, setTabBarState} = this.props;\r\n        showHeader(true);\r\n        setTabBarState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/setting/\" component={SettingMenu} exact/>\r\n                    <Route path=\"/setting/sensor\" component={SensorSetting} exact/>\r\n                    <Route path=\"/setting/slot\" component={SlotSetting} exact/>\r\n                    <Route path=\"/setting/connection\" component={ConnectionSetting} exact/>\r\n                    <Route path=\"/setting/slot-detail/:id\" component={SlotDetailSetting} exact/>\r\n                    <Route path=\"/setting/system\" component={SystemSetting} exact/>\r\n                    <Route path=\"/setting/system-props\" component={SystemPropsSetting} exact/>\r\n                    {/*<Route path=\"/setting/slot-sensors/:id\" component={SlotSensorsSetting} exact/>*/}\r\n                    <Route path=\"/setting/overview\" component={Overview} exact/>\r\n                    <Route path=\"/setting/system-check\" component={SystemCheck} exact/>\r\n                    <Route path=\"/setting/message-log\" component={MessageLog} exact/>\r\n                    <Route path=\"/setting/sensor-healthy\" component={SensorHealthy} exact/>\r\n                    <Route path=\"/setting/th-sensor\" component={ThSensorSetting} exact/>\r\n                    <Route path=\"/setting/:address/sensor-details\" component={SensorDetails} exact/>\r\n                    <Route path=\"/setting/:id/th-detail\" component={ThSensorDetailsSetting} exact/>\r\n                    <Route path=\"/setting/extra-setting\" component={ExtraPageSetting} exact/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default mapStateAndAction(Setting);\r\n","import React, {Component} from 'react';\r\nimport {Button, InputItem, List, Toast} from \"antd-mobile\";\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport './Address.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Address extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('设备编址');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"address\">\r\n                <List renderHeader={() => '编址'}>\r\n                    <InputItem>设备SN</InputItem>\r\n                    <InputItem>地址</InputItem>\r\n                    <List.Item>\r\n                        <Button type=\"primary\">编址</Button>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中', 1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Address);\r\n","import React, {Component} from 'react';\r\nimport {setTitle} from \"../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport MessageLog from './setting/MessageLog';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Logs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Logs');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MessageLog/>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Logs);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {Carousel, List, WhiteSpace, WingBlank} from 'antd-mobile';\r\nimport './About.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass About extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            drawerOpen: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('About');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"about\">\r\n                <WhiteSpace/>\r\n                <WingBlank>\r\n                    <Carousel\r\n                        autoplay={true}\r\n                        infinite\r\n                        className=\"headerCarousel\"\r\n                    >\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#FF9808'}}>\r\n                            <div className=\"title\">\r\n                                磐石电气（常州）有限公司\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#3171FA'}}>\r\n                            <div className=\"title\">\r\n                                MonolithIoT\r\n                            </div>\r\n                        </div>\r\n                    </Carousel>\r\n                </WingBlank>\r\n                <WingBlank className=\"article\">\r\n                    <h1 className=\"title\">关于我们</h1>\r\n                    <div className=\"text\">\r\n                        <p>\r\n                            磐石电气(常州)有限公司,是一家高科技智能测量装备研发及生产企业，把传统体积，重量的测量数字化物联网化，可以与WMS,ERP，SAP等企业管理软件相结合，便于企业更直观的管理自己的仓储，物流等。磐石电气下设研发部，工程部，业务部，有较强的设计，研发和生产能力，可为客户提供嵌入式计算机系统产品设计，开发，系统集成，工程实施等服务。\r\n                        </p>\r\n                        <p>\r\n                            随着公司的发展，主要产品有自主研发的智能数字卷尺，智能手动叉车秤，安卓智能称重终端，静态/动态DWS等各种物联网类智能称重量方设备及软件定制系统,可为客户最大程度地提供智能化系统化的测量系统解决方案。产品广泛应用于快递物流、生鲜供应、港口订舱、仓储、工业离散制造及各种以长度(含面\r\n                            积、体积)测量为手段的民用、商用用途中。凭着可靠的产品质量和良好的售后服务，我公司已与顺丰、中国邮政、京东、国际快递DHL、华为等多家知名企业合作。\r\n                        </p>\r\n                        <p>\r\n                            目前公司已申请中国专利24项,美国专利1项，并拥有一支以博士、硕士为主的优秀研发团队，具有较高的研发能力和管理水平，现有多名员工曾在外企作为技术骨干，承传欧美设计制造理念，并采用先进的产品生命周期管理（PLM），重视产品质量，为公司产品的技术引领、技术创新和公司的可持续发展奠定了坚实基础。\r\n                        </p>\r\n                    </div>\r\n                </WingBlank>\r\n                <List renderHeader=\"TestEntries\">\r\n                    <List.Item arrow=\"horizontal\" onClick={() => {\r\n                        this.props.history.push({pathname: '/pid'})\r\n                    }}>\r\n                        PID Animation\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\" onClick={() => {\r\n                        this.props.history.push({pathname: '/dstar'})\r\n                    }}>\r\n                        DStar Animation\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\" onClick={() => {\r\n                        this.props.history.push({pathname: '/slide'})\r\n                    }}>\r\n                        Slide Animation\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(About);\r\n","import React, {Component} from 'react';\r\nimport {List} from 'antd-mobile';\r\nimport './PidAnimation.sass';\r\n\r\nconst currentColor = '#3171FA';\r\nconst targetColor = '#666666';\r\n// 比例参数\r\nconst P = 0.6;\r\n// 积分参数\r\nconst I = 0.02;\r\n// 微分参数\r\nconst D = 0.1;\r\n\r\nconst CanvasWidth = 300, CanvasHeight = 300;\r\nconst PointSize = 4;\r\n\r\nclass PidAnimation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            target: {\r\n                x: 150,\r\n                y: 150,\r\n            },\r\n            current: {\r\n                x: 150,\r\n                y: 150,\r\n            },\r\n        };\r\n        this.xSum = 0;\r\n        this.lastErrorX = 0;\r\n        this.ySum = 0;\r\n        this.lastErrorY = 0;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timmer = setInterval(() => {\r\n            this.onTimer();\r\n        }, 10);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timmer);\r\n    }\r\n\r\n    render() {\r\n        const {target, current} = this.state;\r\n        return (\r\n            <div className=\"pid\">\r\n                <div className=\"wrapper\">\r\n                    <List renderHeader={() => 'Params'}>\r\n                        <List.Item extra={P}>P</List.Item>\r\n                        <List.Item extra={I}>I</List.Item>\r\n                        <List.Item extra={D}>D</List.Item>\r\n                        <List.Item extra={`${current.x},${current.y}`}>Current</List.Item>\r\n                        <List.Item extra={`${target.x},${target.y}`}>Target</List.Item>\r\n                    </List>\r\n                    <canvas ref={canvas => this.onCanvasLoad(canvas)} width={CanvasWidth} height={CanvasHeight}>\r\n                        Unsupported Canvas\r\n                    </canvas>\r\n                </div>\r\n                <div className=\"stake\">None</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onCanvasLoad(canvas) {\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n        if (this.canvas === canvas) {\r\n            return;\r\n        }\r\n        this.canvas = canvas;\r\n        canvas.onclick = e => {\r\n            const {offsetX, offsetY} = e;\r\n            this.onCanvasClick(offsetX, offsetY);\r\n        };\r\n        this.canvasContext = canvas.getContext('2d');\r\n        this.reDrawPoint();\r\n    }\r\n\r\n    onCanvasClick(x, y) {\r\n        this.xSum = 0;\r\n        this.ySum = 0;\r\n        this.setState({\r\n            target: {\r\n                x: x,\r\n                y: y,\r\n            }\r\n        });\r\n        this.reDrawPoint();\r\n    }\r\n\r\n    reDrawPoint() {\r\n        const {target, current} = this.state;\r\n        this.canvasContext.clearRect(0, 0, CanvasWidth, CanvasHeight);\r\n        this.canvasContext.fillStyle = targetColor;\r\n        this.canvasContext.fillRect(target.x, target.y, PointSize, PointSize);\r\n        this.canvasContext.fillStyle = currentColor;\r\n        this.canvasContext.fillRect(current.x, current.y, PointSize, PointSize);\r\n    }\r\n\r\n    onTimer() {\r\n        const {target, current} = this.state;\r\n\r\n        const errorX = (target.x - current.x) / 10;\r\n        this.xSum += errorX;\r\n        const derivativeX = (errorX - this.lastErrorX) / 10;\r\n        this.lastErrorX = errorX;\r\n\r\n        let outX = current.x + (P * errorX + I * this.xSum + D * derivativeX);\r\n        outX = Math.min(outX, CanvasWidth - PointSize);\r\n        outX = Math.max(outX, 0);\r\n        outX = parseInt(outX);\r\n\r\n        const errorY = (target.y - current.y) / 10;\r\n        this.ySum += errorY;\r\n        const derivativeY = (errorY - this.lastErrorY) / 10;\r\n        this.lastErrorY = errorY;\r\n\r\n        let outY = current.y + (P * errorY + I * this.ySum + D * derivativeY);\r\n        outY = Math.min(outY, CanvasHeight - PointSize);\r\n        outY = Math.max(outY, 0);\r\n        outY = parseInt(outY);\r\n        if (current.x === outX && current.y === outY) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            current: {\r\n                x: outX,\r\n                y: outY,\r\n            }\r\n        });\r\n        this.reDrawPoint();\r\n    }\r\n}\r\n\r\nexport default PidAnimation;\r\n","const SQRT2 = 1.4142135623730951;\r\n\r\nconst calcDistance = (pa, pb) => {\r\n    const dx = Math.abs(pa.tx - pb.tx);\r\n    const dy = Math.abs(pa.ty - pb.ty);\r\n    return Math.max(dx, dy);\r\n};\r\nconst calcCoast = (current, dx, dy) => {\r\n    if (dx === 0) {\r\n        return Math.abs(dy);\r\n    }\r\n    if (dy === 0) {\r\n        return Math.abs(dx);\r\n    }\r\n    return SQRT2;\r\n};\r\nconst pointEquals = (pa, pb) => {\r\n    return pa.tx === pb.tx && pa.ty === pb.ty;\r\n};\r\nconst MAX_STEP = 1000;\r\nconst calcMin = (list, current, target) => {\r\n    let minCoastPoint = list[0];\r\n    let minNum = 999999999;\r\n    for (const point of list) {\r\n        const coast = calcCoast(point, point.tx - current.tx, point.ty - current.ty);\r\n        const distance = calcDistance(point, target);\r\n        const num = coast + distance;\r\n        if (num < minNum) {\r\n            minNum = num;\r\n            minCoastPoint = point;\r\n        }\r\n    }\r\n    return minCoastPoint;\r\n};\r\n\r\nclass CloseList {\r\n    constructor() {\r\n        this.pointTable = {};\r\n        this.priority = 0;\r\n    }\r\n\r\n    push(point) {\r\n        this.priority++;\r\n        point.priority = this.priority;\r\n        this.pointTable[point.key] = point;\r\n    }\r\n\r\n    hasKey(key) {\r\n        return this.pointTable.hasOwnProperty(key);\r\n    }\r\n\r\n    asPath() {\r\n        const res = [];\r\n        for (const key in this.pointTable) {\r\n            if (!this.pointTable.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            res.push(this.pointTable[key]);\r\n        }\r\n        return res.sort((a, b) => b.priority - a.priority);\r\n    }\r\n}\r\n\r\nclass DStar {\r\n    constructor(props) {\r\n        const {onRePlan, start, target, requestPoint, onError, mapSize, updateCurrent} = props;\r\n        this.onRePlan = onRePlan;\r\n        this.current = start;\r\n        this.target = target;\r\n        this.requestPoint = requestPoint;\r\n        this.onError = onError;\r\n        this.mapSize = mapSize;\r\n        this.updateCurrent = updateCurrent;\r\n        this.wallCache = {};\r\n        this.planPath = [];\r\n        this.planPathIndex = 0;\r\n    }\r\n\r\n    setTarget(point) {\r\n        this.target = point;\r\n    }\r\n\r\n    firstPlan() {\r\n        return this.rePlan();\r\n    }\r\n\r\n    rePlan() {\r\n        let current = this.current;\r\n        const target = this.target;\r\n        let steps = 0;\r\n        let nextPoint = target;\r\n        const closeList = new CloseList();\r\n        closeList.push(target);\r\n        while (!pointEquals(current, nextPoint)) {\r\n            steps++;\r\n            if (steps > MAX_STEP) {\r\n                this.onError('Target is not available! Step overflow1');\r\n                return;\r\n            }\r\n            nextPoint = this.nextStep(current, nextPoint, closeList);\r\n            if (nextPoint == null) {\r\n                this.onError('Target is not available! Open list null!');\r\n                return;\r\n            }\r\n            closeList.push(nextPoint);\r\n        }\r\n        const planPath = closeList.asPath();\r\n        this.planPath = planPath;\r\n        this.planPathIndex = 0;\r\n        this.onRePlan(planPath);\r\n        return closeList;\r\n    }\r\n\r\n    nextStep(target, current, closeList) {\r\n        let openList = [];\r\n        openList.push(this.nearPoint(current, closeList, 1, 1));\r\n        openList.push(this.nearPoint(current, closeList, 1, 0));\r\n        openList.push(this.nearPoint(current, closeList, 1, -1));\r\n        openList.push(this.nearPoint(current, closeList, 0, 1));\r\n        openList.push(this.nearPoint(current, closeList, 0, -1));\r\n        openList.push(this.nearPoint(current, closeList, -1, 1));\r\n        openList.push(this.nearPoint(current, closeList, -1, 0));\r\n        openList.push(this.nearPoint(current, closeList, -1, -1));\r\n        openList = openList.filter(point => point !== null);\r\n        if (openList.length <= 0) {\r\n            return null;\r\n        }\r\n        return calcMin(openList, current, target);\r\n    }\r\n\r\n    nearPoint(point, closeList, dx, dy) {\r\n        const xMax = this.mapSize.width;\r\n        const yMax = this.mapSize.height;\r\n        const nextX = point.tx + dx;\r\n        const nextY = point.ty + dy;\r\n        if (nextX > xMax || nextX < 0 || nextY > yMax || nextY < 0) {\r\n            return null;\r\n        }\r\n        const key = `${nextX}/${nextY}`;\r\n        if (closeList.hasKey(key)) {\r\n            return null;\r\n        }\r\n        if (this.wallCache.hasOwnProperty(key)) {\r\n            return null;\r\n        }\r\n        return {\r\n            tx: nextX,\r\n            ty: nextY,\r\n            key: key,\r\n        };\r\n    }\r\n\r\n    go() {\r\n        this.updateNearPointInfo();\r\n        this.planPathIndex++;\r\n        if (this.planPathIndex >= this.planPath.length) {\r\n            return;\r\n        }\r\n        const point = this.planPath[this.planPathIndex];\r\n        if (this.wallCache.hasOwnProperty(point.key)) {\r\n            this.planPath = [];\r\n            this.planPathIndex = 0;\r\n            this.rePlan();\r\n            return;\r\n        }\r\n        this.current = point;\r\n        this.updateCurrent(point);\r\n    }\r\n\r\n    updateNearPointInfo() {\r\n        const current = this.current;\r\n        this.updatePointInfo(current, 1, 1);\r\n        this.updatePointInfo(current, 1, 0);\r\n        this.updatePointInfo(current, 1, -1);\r\n        this.updatePointInfo(current, 0, 1);\r\n        this.updatePointInfo(current, 0, -1);\r\n        this.updatePointInfo(current, -1, 1);\r\n        this.updatePointInfo(current, -1, 0);\r\n        this.updatePointInfo(current, -1, -1);\r\n    }\r\n\r\n    updatePointInfo(base, xOffset, yOffset) {\r\n        const x = base.tx + xOffset;\r\n        const y = base.ty + yOffset;\r\n        const {width, height} = this.mapSize;\r\n        if (x > width || y > height || x < 0 || y < 0) {\r\n            return;\r\n        }\r\n        const point = this.requestPoint(x, y);\r\n        if (point == null) {\r\n            // 为墙\r\n            this.wallCache[`${x}/${y}`] = {\r\n                tx: x,\r\n                ty: y,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport default DStar;\r\n","import DStar from './DStar';\r\n\r\nconst HEIGHT_STEP = 10;\r\nconst WIDTH_STEP = 10;\r\nconst BACKGROUND_LINE_COLOR = '#AAAAAA';\r\nconst WALL_COLOR = '#666666';\r\nconst CURRENT_COLOR = '#FF8800';\r\nconst TARGET_COLOR = '#FF0000';\r\nconst PLAN_PATH_COLOR = '#3271FA';\r\nconst PLAN_PATH_POINT_RADIUS = 3;\r\nconst PLAN_PATH_POINT_X_OFFSET = WIDTH_STEP / 2;\r\nconst PLAN_PATH_POINT_Y_OFFSET = HEIGHT_STEP / 2;\r\nexport const CLICK_ACTION_ADD_WALL = 0x00;\r\nexport const CLICK_ACTION_REMOVE_WALL = 0x01;\r\nexport const CLICK_ACTION_MARK_TARGET = 0x02;\r\n\r\nconst getPressPoint = e => {\r\n    const {offsetX, offsetY} = e;\r\n    const tx = Math.floor(offsetX / WIDTH_STEP);\r\n    const x = tx * WIDTH_STEP;\r\n    const ty = Math.floor(offsetY / HEIGHT_STEP);\r\n    const y = ty * HEIGHT_STEP;\r\n    const key = `${tx}/${ty}`;\r\n    return {x, y, tx, ty, key};\r\n};\r\n\r\nconst drawCross = (ctx, point, color) => {\r\n    ctx.strokeStyle = color;\r\n    ctx.beginPath();\r\n    ctx.moveTo(point.x, point.y);\r\n    ctx.lineTo(point.x + WIDTH_STEP, point.y + HEIGHT_STEP);\r\n    ctx.moveTo(point.x, point.y + HEIGHT_STEP);\r\n    ctx.lineTo(point.x + WIDTH_STEP, point.y);\r\n    ctx.stroke();\r\n};\r\n\r\nclass DStarBoard {\r\n    constructor(props) {\r\n        const _this = this;\r\n        const {canvas, height, width, onMessage, onRePlan} = props;\r\n        this.canvas = canvas;\r\n        this.height = height;\r\n        this.width = width;\r\n        this.onMessage = onMessage;\r\n        this.onRePlan = onRePlan;\r\n        this.wallList = {};\r\n        this.clickAction = CLICK_ACTION_ADD_WALL;\r\n        this.currentPoint = {x: 100, y: 100, tx: 10, ty: 10, key: '10/10'};\r\n        this.targetPoint = {x: 300, y: 300, tx: 30, ty: 30, key: '30/30'};\r\n        this.planPath = [];\r\n        this.canvas.onclick = e => {\r\n            _this.onCanvasPress(e);\r\n        };\r\n    }\r\n\r\n    setup() {\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.rePaint();\r\n        this.setupDStar();\r\n    }\r\n\r\n    setupTimer() {\r\n        this.shutdown();\r\n        const _this = this;\r\n        this.timer = setInterval(() => {\r\n            _this.go();\r\n        }, 100);\r\n    }\r\n\r\n    shutdown() {\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n\r\n    go() {\r\n        this.dStar.go();\r\n    }\r\n\r\n    setupDStar() {\r\n        const _this = this;\r\n        const width = this.width;\r\n        const height = this.height;\r\n        const start = this.currentPoint;\r\n        const target = this.targetPoint;\r\n        this.dStar = new DStar({\r\n            onRePlan(list) {\r\n                console.log('Re Plan', list);\r\n                _this.planPath = list;\r\n                _this.rePaint();\r\n                _this.onRePlan(list);\r\n            },\r\n            start,\r\n            target,\r\n            requestPoint(x, y) {\r\n                const key = `${x}/${y}`;\r\n                if (_this.wallList.hasOwnProperty(key)) {\r\n                    return null;\r\n                }\r\n                return {tx: x, ty: y};\r\n            },\r\n            onError(err) {\r\n                console.log(err);\r\n                _this.onMessage(err);\r\n            },\r\n            updateCurrent(point) {\r\n                _this.currentPoint = point;\r\n                _this.rePaint();\r\n            },\r\n            mapSize: {\r\n                width,\r\n                height,\r\n            }\r\n        });\r\n        this.dStar.firstPlan();\r\n    }\r\n\r\n    onCanvasPress(e) {\r\n        const point = getPressPoint(e);\r\n        switch (this.clickAction) {\r\n            case CLICK_ACTION_ADD_WALL:\r\n                this.addWall(point);\r\n                break;\r\n            case CLICK_ACTION_REMOVE_WALL:\r\n                this.removeWall(point);\r\n                break;\r\n            case CLICK_ACTION_MARK_TARGET:\r\n                this.markTarget(point);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    markTarget(point) {\r\n        this.targetPoint = point;\r\n        this.dStar.setTarget(point);\r\n        this.dStar.firstPlan();\r\n    }\r\n\r\n    removeWall(point) {\r\n        const {key} = point;\r\n        delete this.wallList[key];\r\n        this.rePaint();\r\n    }\r\n\r\n    addWall(point) {\r\n        const {key} = point;\r\n        if (key in this.wallList) {\r\n            return;\r\n        }\r\n        this.wallList[key] = point;\r\n        this.rePaint();\r\n    }\r\n\r\n    rePaint() {\r\n        this.ctx.clearRect(0, 0, this.width, this.height);\r\n        this.drawBackground();\r\n        this.drawWall();\r\n        this.drawCurrent();\r\n        this.drawTarget();\r\n        this.drawPlanPath();\r\n    }\r\n\r\n\r\n    drawPlanPath() {\r\n        const planPath = this.planPath;\r\n        const ctx = this.ctx;\r\n        ctx.strokeStyle = PLAN_PATH_COLOR;\r\n        ctx.beginPath();\r\n        for (const point of planPath) {\r\n            point.x = point.tx * WIDTH_STEP;\r\n            point.y = point.ty * HEIGHT_STEP;\r\n            ctx.moveTo(point.x + PLAN_PATH_POINT_X_OFFSET, point.y + PLAN_PATH_POINT_Y_OFFSET);\r\n            ctx.arc(point.x + PLAN_PATH_POINT_X_OFFSET, point.y + PLAN_PATH_POINT_Y_OFFSET, PLAN_PATH_POINT_RADIUS, 0, Math.PI * 2);\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n    drawBackground() {\r\n        const ctx = this.ctx;\r\n        const width = this.width;\r\n        const height = this.height;\r\n        ctx.strokeStyle = BACKGROUND_LINE_COLOR;\r\n        for (let x = 0; x < width; x += WIDTH_STEP) {\r\n            ctx.moveTo(x, 0);\r\n            ctx.lineTo(x, height);\r\n        }\r\n        for (let y = 0; y < height; y += HEIGHT_STEP) {\r\n            ctx.moveTo(0, y);\r\n            ctx.lineTo(width, y);\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n    drawCurrent() {\r\n        const current = this.currentPoint;\r\n        const ctx = this.ctx;\r\n        drawCross(ctx, current, CURRENT_COLOR);\r\n    }\r\n\r\n    drawTarget() {\r\n        const target = this.targetPoint;\r\n        const ctx = this.ctx;\r\n        drawCross(ctx, target, TARGET_COLOR);\r\n    }\r\n\r\n    drawWall() {\r\n        const ctx = this.ctx;\r\n        ctx.fillStyle = WALL_COLOR;\r\n        for (const key in this.wallList) {\r\n            if (!this.wallList.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            const wall = this.wallList[key];\r\n            ctx.fillRect(wall.x, wall.y, WIDTH_STEP, HEIGHT_STEP);\r\n        }\r\n    }\r\n\r\n    checkCanvasChanged(canvas) {\r\n        return canvas !== this.canvas;\r\n    }\r\n\r\n    setClickAction(action) {\r\n        this.clickAction = action;\r\n    }\r\n}\r\n\r\nexport default DStarBoard;\r\n","import React, {Component} from 'react';\r\nimport './DStarAnimation.sass';\r\nimport {mapStateAndAction} from '../../store/storeUtils';\r\nimport {Button, List} from 'antd-mobile';\r\nimport DStarBoard, {\r\n    CLICK_ACTION_ADD_WALL,\r\n    CLICK_ACTION_MARK_TARGET,\r\n    CLICK_ACTION_REMOVE_WALL\r\n} from '../../util/DStarBoard';\r\n\r\nconst CLICK_ACTION_NAMES = {};\r\nCLICK_ACTION_NAMES[CLICK_ACTION_ADD_WALL] = 'Add Wall';\r\nCLICK_ACTION_NAMES[CLICK_ACTION_REMOVE_WALL] = 'Remove Wall';\r\nCLICK_ACTION_NAMES[CLICK_ACTION_MARK_TARGET] = 'Mark Target';\r\n\r\nclass DStarAnimation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clickAction: CLICK_ACTION_ADD_WALL,\r\n            message: '',\r\n            rePlanSteps: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('D* Animation');\r\n    }\r\n\r\n    onCanvasBind(canvas) {\r\n        const _this = this;\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n        if (this.board && !this.board.checkCanvasChanged(canvas)) {\r\n            return;\r\n        }\r\n        if (this.board) {\r\n            this.board.shutdown();\r\n            this.board = null;\r\n        }\r\n        this.board = new DStarBoard({\r\n            canvas,\r\n            height: 500,\r\n            width: 500,\r\n            onMessage(msg) {\r\n                _this.setState({message: msg})\r\n            },\r\n            onRePlan(pathList) {\r\n                _this.setState({rePlanSteps: pathList.length})\r\n            }\r\n        });\r\n        this.board.setup();\r\n    }\r\n\r\n    changeBoardClickAction() {\r\n        let {clickAction} = this.state;\r\n        if (!this.board) {\r\n            return;\r\n        }\r\n        clickAction++;\r\n        clickAction = clickAction % 3;\r\n        this.setState({clickAction: clickAction});\r\n        this.board.setClickAction(clickAction);\r\n    }\r\n\r\n    render() {\r\n        const {clickAction, message, rePlanSteps} = this.state;\r\n        const clickActionName = CLICK_ACTION_NAMES[clickAction];\r\n        return (\r\n            <div className=\"d-star\">\r\n                <List renderHeader={() => 'State'}>\r\n                    <List.Item extra={rePlanSteps}>\r\n                        RePlanSteps\r\n                    </List.Item>\r\n                    <List.Item extra={message}>\r\n                        Message\r\n                    </List.Item>\r\n                    <List.Item extra=\"click to change\" onClick={() => this.changeBoardClickAction()}>\r\n                        Click Action : ({clickActionName})\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <Button type=\"primary\" onClick={() => this.board.setupTimer()}>\r\n                            Start\r\n                        </Button>\r\n                    </List.Item>\r\n                </List>\r\n                <canvas className=\"board-canvas\" width={500} height={500} ref={canvas => this.onCanvasBind(canvas)}>\r\n                    Unsupported Canvas\r\n                </canvas>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default mapStateAndAction(DStarAnimation);\r\n","const BOX_LIST = [\r\n    {\r\n        mode: 'b',\r\n    },\r\n    {\r\n        mode: 'f',\r\n    },\r\n    {\r\n        mode: 'b',\r\n    },\r\n    {\r\n        mode: 'f',\r\n    },\r\n];\r\nconst BACKGROUND_COLOR = '#000000';\r\nconst FRAME_DURATION = 1000;\r\n\r\nconst BOX_SIZE = 20;\r\n// const FOCUS_BOX_SIZE = 40;\r\nconst BOX_MARGIN = 1;\r\n// const FOCUS_X = 45;\r\n// const NORMAL_L_X = 1;\r\n// const NORMAL_R_X = 1;\r\n// const SIZE_K = 20 / 46;\r\n// const SIZE_B = 900 / 46;\r\n// const getPosition = (x, y) => {\r\n//\r\n// };\r\n\r\nclass SlideDemoCanvas {\r\n    constructor(canvas) {\r\n        this.ctx = canvas.getContext('2d');\r\n        this.width = parseInt(canvas.getAttribute('width'));\r\n        this.height = parseInt(canvas.getAttribute('height'));\r\n        this.boxList = BOX_LIST;\r\n    }\r\n\r\n    setup() {\r\n        this.drawBackground();\r\n    }\r\n\r\n    nextFrame() {\r\n        this.drawBackground();\r\n        let x = 0;\r\n        let y = 0;\r\n        for (const box of this.boxList) {\r\n            const res = this.drawBox(x, y, box.mode);\r\n            x = res.x + BOX_MARGIN;\r\n            y = res.y;\r\n        }\r\n    }\r\n\r\n    drawBox(x, y, mode) {\r\n        const ctx = this.ctx;\r\n        if (mode === 'b') {\r\n            ctx.fillStyle = '#FFFFFF';\r\n            ctx.fillRect(x, y, BOX_SIZE, BOX_SIZE);\r\n        } else {\r\n            ctx.strokeStyle = '#FFFFFF';\r\n            ctx.beginPath();\r\n            ctx.rect(x, y, BOX_SIZE, BOX_SIZE);\r\n            ctx.stroke();\r\n        }\r\n        console.log(x, y, mode);\r\n        return {x: x + BOX_SIZE, y: y}\r\n    }\r\n\r\n    drawBackground() {\r\n        this.ctx.fillStyle = BACKGROUND_COLOR;\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n    }\r\n\r\n    nextBox() {\r\n        const last = this.boxList.pop();\r\n        this.boxList.unshift(last);\r\n        console.log(this.boxList);\r\n    }\r\n\r\n    play() {\r\n        this.timmer = setInterval(() => {\r\n            this.nextFrame();\r\n        }, FRAME_DURATION);\r\n    }\r\n\r\n    stop() {\r\n        if (this.timmer) {\r\n            clearInterval(this.timmer);\r\n        }\r\n    }\r\n}\r\n\r\nexport default SlideDemoCanvas;\r\n","import React, {Component} from 'react';\r\nimport {mapStateAndAction} from '../../store/storeUtils';\r\nimport {List} from 'antd-mobile';\r\nimport './SlideAnimation.sass';\r\nimport SlideDemoCanvas from '../../util/SlideDemoCanvas';\r\n\r\nclass SlideAnimation extends Component {\r\n    componentDidMount() {\r\n        this.props.setTitle('Slide Animation');\r\n    }\r\n\r\n    onSlideAnimationCanvasBind(canvas) {\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n        if (this.slideCanvas || this.slideCanvas !== canvas) {\r\n            if (this.slideDemoBoard) {\r\n                this.slideDemoBoard.stop();\r\n            }\r\n            this.slideCanvas = canvas;\r\n            this.slideDemoBoard = new SlideDemoCanvas(canvas);\r\n            this.slideDemoBoard.setup();\r\n            this.slideDemoBoard.play();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.slideDemoBoard) {\r\n            this.slideDemoBoard.stop();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"slide-animation\">\r\n                <List renderHeader={() => 'Slide Animation Demo'}>\r\n                    <List.Item extra=\"Wold!\">\r\n                        Hello\r\n                    </List.Item>\r\n                </List>\r\n                <div className=\"canvas-wrapper\">\r\n                    <canvas ref={canvas => this.onSlideAnimationCanvasBind(canvas)} width=\"128\" height=\"64\">\r\n                        Unsupported Canvas\r\n                    </canvas>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default mapStateAndAction(SlideAnimation);","import React, {Component} from 'react';\r\nimport './ExtraPage.sass';\r\nimport {fetchExtraPageUri} from '../../api/config';\r\nimport {NoticeBar} from 'antd-mobile';\r\nimport {WarningOutlined} from '@ant-design/icons';\r\n\r\nclass ExtraPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pageUri: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchExtraPageUri().then(res => {\r\n            this.setState({\r\n                pageUri: res.value,\r\n            })\r\n        });\r\n    }\r\n\r\n    renderFrame() {\r\n        const {pageUri} = this.state;\r\n        if (pageUri) {\r\n            return (<iframe title=\"inner\" src={pageUri}>IFrame</iframe>);\r\n        } else {\r\n            return (<NoticeBar icon={<WarningOutlined/>}>页面地址未设置</NoticeBar>);\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"extra\">\r\n                {\r\n                    this.renderFrame()\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExtraPage;\r\n","import React, {Component} from 'react';\r\nimport {mapStateAndAction} from '../../store/storeUtils';\r\nimport FetcherTask from '../../util/FetcherTask';\r\nimport {fetchDashboardDataByPrefix} from '../../api/dashboard';\r\nimport {ActionSheet, InputItem, Modal, Steps, Toast, WingBlank} from 'antd-mobile';\r\nimport SlotCard from '../commons/SlotCard';\r\nimport './AsbogDashboard.sass';\r\nimport {tare, tareWithValue, zeroOne} from '../../api/slot';\r\nimport {calibrateWithSpan, calibrateZero} from '../../api/sensor';\r\n\r\nconst FETCHER_DURATION = 1000;\r\nconst prefix = \"#\";\r\nconst prettySlotData = data => {\r\n    const {slotData} = data;\r\n    const res = [];\r\n    for (const key in slotData) {\r\n        if (!slotData.hasOwnProperty(key)) {\r\n            continue;\r\n        }\r\n        const slot = slotData[key];\r\n        res.push(slot);\r\n    }\r\n    return res.sort((a, b) => a.slotNo.localeCompare(b.slotNo));\r\n};\r\nconst OPERATIONS = [\r\n    '预置皮重',\r\n    '手动去皮',\r\n    '货道清零',\r\n    '单重取样',\r\n    '货道校准',\r\n    '取消',\r\n];\r\n\r\nclass AsbogDashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slotData: [],\r\n            calibrateVisible: false,\r\n            calibrateStep: 0,\r\n            calibrateSlot: {},\r\n            calibrateSpan: 10.00,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.showHeader(false);\r\n        this.props.setTabBarState(false);\r\n        this.startFetchData();\r\n    }\r\n\r\n    startFetchData() {\r\n        if (this.dataFetcher) {\r\n            this.dataFetcher.stop();\r\n        }\r\n        const _this = this;\r\n        this.dataFetcher = new FetcherTask({\r\n            fetchData() {\r\n                return fetchDashboardDataByPrefix(prefix);\r\n            },\r\n            onNewData(data) {\r\n                const slotData = prettySlotData(data);\r\n                _this.setState({slotData: slotData});\r\n            },\r\n            duration: FETCHER_DURATION,\r\n            onError(err) {\r\n                console.log(err);\r\n            }\r\n        });\r\n        this.dataFetcher.start();\r\n    }\r\n\r\n    showSlotOperations(slot) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: '操作',\r\n            options: OPERATIONS,\r\n            cancelButtonIndex: OPERATIONS.length - 1,\r\n        }, key => {\r\n            switch (key) {\r\n                case 0:\r\n                    this.tareWithValue(slot);\r\n                    break;\r\n                case 1:\r\n                    this.tare(slot);\r\n                    break;\r\n                case 2:\r\n                    zeroOne(slot.slotNo).then(() => {\r\n                        Toast.show('货道清零成功', 3, false);\r\n                    });\r\n                    break;\r\n                case 4:\r\n                    this.showCalibrate(true, slot);\r\n                    break;\r\n                default:\r\n                // Do nothing\r\n            }\r\n        })\r\n    }\r\n\r\n    showCalibrate(show, slot) {\r\n        if (show && slot.sensors.length !== 1) {\r\n            Toast.show('暂不支持组合货道标定', 3, false);\r\n            return;\r\n        }\r\n        this.setState({calibrateVisible: show, calibrateSlot: slot, calibrateStep: 0,});\r\n    }\r\n\r\n    tare(slot) {\r\n        Modal.alert('确认去皮', '确认去皮？', [{text: '取消'}, {\r\n            text: '确认', onPress() {\r\n                tare(slot.id).then(res => {\r\n                    Toast.show(`货道[${res.slotNo}]去皮成功`, 3, false);\r\n                });\r\n            }\r\n        }]);\r\n    }\r\n\r\n    tareWithValue(slot) {\r\n        Modal.prompt('预置皮重', '请输入皮重', tare => {\r\n            if (!tare || !/^\\d+\\.?\\d*$/.test(tare)) {\r\n                Toast.show('请输入合法的重量数据', 3, false);\r\n                return;\r\n            }\r\n            tareWithValue({\r\n                id: slot.id,\r\n                tareValue: tare,\r\n            }).then(res => {\r\n                Toast.show(`货道${res.slotNo}预置皮重成功`, 3, false);\r\n            });\r\n        });\r\n    }\r\n\r\n    onCalibrateNext() {\r\n        const {calibrateStep, calibrateSlot, calibrateSpan} = this.state;\r\n        if (calibrateStep >= 2) {\r\n            this.showCalibrate(false, {});\r\n            return;\r\n        }\r\n        const _this = this;\r\n        const sensor = calibrateSlot.sensors[0];\r\n        switch (calibrateStep) {\r\n            case 0:\r\n                calibrateZero(sensor.id).then(res => {\r\n                    Toast.show(`传感器${res.address}零点校准成功`, 3, false);\r\n                    _this.setState({calibrateStep: calibrateStep + 1});\r\n                });\r\n                break;\r\n            case 1:\r\n                calibrateWithSpan({id: sensor.id, span: calibrateSpan}).then(res => {\r\n                    Toast.show(`传感器${res.address}砝码校准成功`, 3, false);\r\n                    _this.setState({calibrateStep: calibrateStep + 1});\r\n                });\r\n                break;\r\n            default:\r\n            // Do nothing\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const _this = this;\r\n        const {slotData, calibrateStep, calibrateVisible, calibrateSpan, calibrateSlot} = this.state;\r\n        return (\r\n            <div className=\"asbog-dashboard\">\r\n                <WingBlank className=\"slots-wrapper\">\r\n                    {\r\n                        slotData.map(slot => (\r\n                            <SlotCard key={slot.id}\r\n                                      slot={slot}\r\n                                      onClick={slot => this.showSlotOperations(slot)}\r\n                                      highLight={false}\r\n                                      errorOnly={false}/>))\r\n                    }\r\n                </WingBlank>\r\n                <Modal visible={calibrateVisible} title={`货道[${calibrateSlot.slotNo}]标定`} transparent\r\n                       maskClosable={false}\r\n                       footer={[{\r\n                           text: '退出', onPress: () => _this.showCalibrate(false, {})\r\n                       }, {\r\n                           text: calibrateStep === 2 ? '完成' : '下一步', onPress: () => _this.onCalibrateNext()\r\n                       }]}>\r\n                    标定进度\r\n                    <Steps current={calibrateStep}>\r\n                        <Steps.Step title=\"零点标定\"/>\r\n                        <Steps.Step title=\"砝码标定\"/>\r\n                        <Steps.Step title=\"标定完成\"/>\r\n                    </Steps>\r\n                    <div className=\"span-wrapper\">\r\n                        <InputItem placeholder=\"请输入砝码重量\" value={calibrateSpan}\r\n                                   onChange={text => this.setState({calibrateSpan: text})}>砝码(kg):</InputItem>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default mapStateAndAction(AsbogDashboard);\r\n","import React, {Component} from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Dashboard from './content/Dashboard'\r\nimport HomeDashboard from './content/HomeDashboard'\r\nimport Setting from './content/Setting';\r\nimport Address from './content/Address';\r\nimport Logs from './content/Logs';\r\nimport About from './content/About';\r\nimport PidAnimation from './content/PidAnimation';\r\nimport DStarAnimation from './content/DStarAnimation';\r\nimport SlideAnimation from './content/SlideAnimation';\r\nimport ExtraPage from './content/ExtraPage';\r\nimport AsbogDashboard from './content/AsbogDashboard';\r\nimport './AppContent.sass';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"appContent\">\r\n                {\r\n                    this.props.showHeader ? <div className=\"headerMask\"/> : null\r\n                }\r\n                <Switch>\r\n                    <Route path=\"/dashboard\" component={Dashboard} exact/>\r\n                    <Route path=\"/\" component={HomeDashboard} exact/>\r\n                    <Route path=\"/setting**\" component={Setting} exact/>\r\n                    <Route path=\"/address\" component={Address} exact/>\r\n                    <Route path=\"/logs\" component={Logs} exact/>\r\n                    <Route path=\"/about\" component={About} exact/>\r\n                    <Route path=\"/pid\" component={PidAnimation} exact/>\r\n                    <Route path=\"/extra\" component={ExtraPage} exact/>\r\n                    <Route path=\"/dstar\" component={DStarAnimation} exact/>\r\n                    <Route path=\"/slide\" component={SlideAnimation} exact/>\r\n                    <Route path=\"/asbog\" component={AsbogDashboard} exact/>\r\n                </Switch>\r\n                <div className=\"tabBarMask\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, null)(AppContent);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Modal, NavBar, Popover, Toast} from \"antd-mobile\";\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\nimport './AppHeader.sass';\r\nimport {reloadSensors} from \"../api/sensor\";\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        title: state.globalTitle,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppHeader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            popoverVisible: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.showHeader) {\r\n            return null;\r\n        }\r\n        const {title} = this.props;\r\n        return (\r\n            <div className=\"appHeader\">\r\n                <NavBar\r\n                    leftContent={<Icon type=\"left\" onClick={() => this.onBackClick()}/>}\r\n                    rightContent={this.rightContent()}\r\n                    mode=\"light\"\r\n                >{title}</NavBar>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    rightContent() {\r\n        const {popoverVisible} = this.state;\r\n        const Item = Popover.Item;\r\n        return (<Popover mask\r\n                         visible={popoverVisible}\r\n                         overlay={[\r\n                             (<Item key=\"about\" value=\"about\"\r\n                                    data-seed=\"logId\">关于我们</Item>),\r\n                             (<Item key=\"settings\" value=\"settings\"\r\n                                    style={{whiteSpace: 'nowrap'}}>货道设置</Item>),\r\n                             (<Item key=\"reload\" value=\"reload\"\r\n                                    style={{whiteSpace: 'nowrap'}}>重新加载</Item>),\r\n                         ]}\r\n                         onSelect={e => this.onPopoverSelect(e)}\r\n        >\r\n            <Icon type=\"ellipsis\"/>\r\n        </Popover>);\r\n    }\r\n\r\n    onBackClick() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    onPopoverSelect(e) {\r\n        switch (e.key) {\r\n            case 'about':\r\n                this.props.history.push({\r\n                    pathname: '/about',\r\n                });\r\n                break;\r\n            case 'settings':\r\n                this.props.history.push({\r\n                    pathname: '/setting/',\r\n                });\r\n                break;\r\n            case 'reload':\r\n                this.doReloadSensors();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({\r\n            popoverVisible: false\r\n        });\r\n    }\r\n\r\n    doReloadSensors() {\r\n        Modal.alert('Reload Sensors', 'Reload sensors from database into weightService',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                },\r\n                {\r\n                    text: 'Yes',\r\n                    onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('Reload Success!');\r\n                        });\r\n                    },\r\n                },\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props)(AppHeader));\r\n","import {createBrowserHistory} from 'history';\r\nimport {setRouterPath} from '../store/actionCreators'\r\nimport store from '../store';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst notifyPathChanged = location => {\r\n    const info = {\r\n        pathname: location.pathname,\r\n        search: location.search,\r\n        hash: location.hash\r\n    };\r\n    const action = setRouterPath(info);\r\n    store.dispatch(action);\r\n};\r\nhistory.listen((action) => {\r\n    notifyPathChanged(action.location);\r\n});\r\n\r\n\r\nnotifyPathChanged(history.location);\r\nexport default history;\r\n","const printBanner = () => {\r\n    console.log(\r\n        '%cMonolithIoT%cPoweredBy%cLevent8421',\r\n        'color:#108EE9;font-size:50px;font-family:Microsoft-yahei;background-color:#F5F5F9',\r\n        'color:#FF8800;background-color:#F5F5F9',\r\n        'color:#108EE9;background-color:#F5F5F9'\r\n    );\r\n};\r\nexport default printBanner;\r\n","import React from 'react'\nimport './App.css'\nimport store from './store'\nimport {Provider} from 'react-redux'\nimport AppTabBar from './component/AppTabBar'\nimport AppContent from './component/AppContent'\nimport AppHeader from './component/AppHeader'\nimport {HashRouter as Router} from 'react-router-dom'\nimport history from './util/History'\nimport {fetchEnableTabBarAction} from './store/actionCreators';\nimport consoleBanner from './util/consoleBanner';\n\nclass App extends React.Component {\n    componentDidMount() {\n        store.dispatch(fetchEnableTabBarAction());\n        consoleBanner();\n    }\n\n    render() {\n        return (\n            <Router history={history}>\n                <Provider store={store}>\n                    <div className=\"app-content\">\n                        <AppHeader/>\n                        <AppContent/>\n                        <AppTabBar/>\n                    </div>\n                </Provider>\n            </Router>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import 'babel-polyfill'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\n\n/*ReactDOM.render(\n    <React.StrictMode>\n        <App/>,\n    </React.StrictMode>,\n    document.getElementById('root')\n);*/\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}