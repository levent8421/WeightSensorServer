{"version":3,"sources":["store/reducer.js","store/actionTypes.js","store/index.js","component/AppTabBar.jsx","api/request.js","util/httpUtils.js","api/dashboard.js","api/sensor.js","api/config.js","store/actionCreators.js","api/connection.js","util/datetimeUtils.js","util/DataConvertor.js","api/slot.js","component/content/Dashboard.jsx","store/storeUtils.js","component/commons/SlotCard.jsx","component/commons/SlotGroup.jsx","util/FetcherTask.js","component/commons/TempSensorCard.jsx","component/commons/SlotOperationModal.jsx","component/content/HomeDashboard.jsx","component/commons/FloatButton.jsx","component/content/setting/SensorSetting.jsx","component/content/setting/SettingMenu.jsx","component/content/setting/SlotSetting.jsx","component/content/setting/ConnectionSetting.jsx","component/content/setting/SlotDetailSetting.jsx","component/content/setting/SystemSetting.jsx","api/serial.js","component/content/setting/SystemPropsSetting.jsx","component/content/setting/SlotSensorsSetting.jsx","component/content/setting/Overview.jsx","component/content/setting/SystemCheck.jsx","api/systemStatus.js","component/content/setting/MessageLog.jsx","component/content/setting/SensorHealthy.jsx","api/healthy.js","api/firmware.js","component/content/setting/SensorDetails.jsx","component/content/setting/ThSensorSetting.jsx","api/thSensor.js","component/commons/LineCharts.jsx","component/content/setting/ThSensorDetailsSetting.jsx","api/tempHumidityLog.js","component/content/setting/ExtraPageSetting.jsx","component/content/Setting.jsx","component/content/Address.jsx","component/content/Logs.jsx","component/content/About.jsx","component/content/PidAnimation.jsx","component/content/ExtraPage.jsx","component/AppContent.jsx","component/AppHeader.jsx","util/History.js","util/consoleBanner.js","App.js","serviceWorker.js","index.js"],"names":["defaultState","showTabBar","enableTabBar","showHeader","globalTitle","routerPath","dashboardSlots","sensors","connections","user","name","actionTable","registerReducer","type","reducer","state","action","data","sensorId","hasElabel","sensor","id","JSON","parse","stringify","filter","connection","allEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","handler","AppTabBar","props","path","this","className","unselectedTintColor","tintColor","barTintColor","hidden","tabBarPosition","Item","title","selected","icon","selectedIcon","onPress","pushPath","setState","history","push","pathname","React","Component","withRouter","connect","hideLoading","hide","showError","msg","fail","request","options","showLoadingToast","loading","Promise","resolve","reject","axios","httpRequest","then","res","status","body","code","catch","err","errStr","toString","fetchDashboardData","url","method","reloadSensors","fetchExtraPageUri","setTabBarState","show","setTitle","asyncFetchDashboardSlotData","dispatch","slots","key","hasOwnProperty","sort","a","b","slotNo","localeCompare","asyncFetchSensors","address","toggleSensorElable","toggleElable","asyncFetchConnection","asyncDeleteConnection","deleteConnection","fetchEnableTabBarAction","value","setEnableTabBarAction","enable","setEnableTabBar","parseDate","str","groups","match","year","parseInt","month","date","hour","min","sec","d","Date","setFullYear","setMonth","setDate","setHours","setMinutes","setSeconds","asKg","g","toFixed","connectionTypes","1","2","asConnectionType","slotSortWeight","compareBySlotNo","aName","bName","aNames","split","bNames","length","i","aItem","bItem","groupSlots","putSlot","slot","noItems","aWeight","substring","bWeight","stateTable","3","4","5","asStateString","thSensorStateTable","thSensorStateText","lastHighlightSlot","lastTime","lastSlot","skuUpdateTime","time","getTime","zeroOne","encodedSlotNo","encodeURIComponent","fetchDetail","highlightBySku","sku","skuNo","TabItems","Dashboard","rootEle","document","groupedSlots","thSensors","sensorModalVisible","operationSlot","searchSkuNo","noticeSlots","lastNoticeSlot","renderSlotCard","bind","startFetchData","listenKeyPress","onkeypress","e","target","tagName","toLowerCase","keyCode","triggerHighlight","appendSearchSku","String","fromCharCode","c","fetchTimer","clearInterval","cancelKeyPress","setInterval","slotData","thData","temperatureHumidityData","temperature","humidity","tempStateText","temperatureState","tempWarn","humidityText","tempClass","stateClass","cardClass","stateStr","tempClassStr","join","no","map","renderThSensorCard","highlightSlotIds","tabs","onChange","tab","index","onTabChange","onSubmit","renderNoticeBar","group","renderGroupItem","renderThSensors","visible","transparent","footer","text","doSlotZero","onClose","renderHeader","extra","deviceSn","Brief","address485","content","skuName","skuShelfLifeOpenDays","wrap","justify","slotCardClassName","isWan","isDisable","isOffline","incredible","isIncredible","toleranceState","weightInKg","weight","count","isStable","weightState","asCount","onClick","onSlotCardClick","trim","ts","findLastNoticeSlot","setTimeout","alert","callDoZero","component","fetchSlotData","mapState","mapAction","mapStateAndAction","SLOT_CARD_CLASS_TABLE","TOLERANCE_STATE_CLASS_TABLE","SlotCard","highLight","pcs","formatPcs","formatSkuNo","slotCardClassStr","slotCardClass","pcsClassStr","pcsClass","isHighLight","highLightSlotTable","SlotGroup","onCardClick","highlightSlotTable","renderSlots","FetcherTask","config","fetchData","onNewData","duration","onError","running","runNext","timmer","start","clearTimeout","CARD_CLASS_TABLE","BODY_CLASS_TABLE","TempSensorCard","temp","formatTemp","tempState","cardClassStr","bodyClassStr","bodyClass","renderSensor","SlotOperationModal","_this","maskClosable","doZero","renderSensors","asHighlightSlotTable","dict2List","dict","rootDom","searchValue","noticeSlot","tempSensors","currentTab","slotOperationVisible","selectedSlot","errorNotice","initFetcher","registerKeyPressHandler","fetcherTask","stop","cancelKeyPressHandler","char","submitSearch","searchSku","onDashboardDataRefresh","onFetcherError","console","error","WarningOutlined","tab1Class","tab2Class","toSettingPage","renderErrorNotice","renderTabs","placeholder","ScanOutlined","renderSlotOperationModal","FloatButton","defaultPosition","right","bottom","down","style","callOnClick","iconType","SensorSetting","fetchSensors","Header","Body","checked","toggleElabel","platform","arrow","toSensorDetails","Footer","showOperationActions","buttons","showActionSheetWithOptions","cancelButtonIndex","destructiveButtonIndex","callReloadSensors","SettingMenu","go","OperationActions","SlotSetting","selectedNums","continueSelected","fetchSlots","s","selectedMap","selectedMinAddress","Object","keys","isContinueSelected","onItemClick","renderSlotSensors","selectedNumStyle","renderSlotItem","showOperationSheet","findSelectedSlots","slotNos","ids","slotIds","toSlotDetail","doZeroAll","mergeSlot","resetSlotSensor","toSelectedSlotDetails","chooseAllSlotSensor","ConnectionOperations","label","ConnectionSetting","createDialogVisible","create","serialPorts","fetchConnection","showConnectionOperations","showCreateDialog","createConnection","cols","setCreateType","disabled","input","setCreateTarget","arr","setCreateTargetSerial","types","newCreate","port","serialIndexList","connectionId","scanConnection","startScanTHSensors","ActionButtons","SlotDetailSetting","slotId","params","fetchSlotInfo","setUpdateSlotProp","skuApw","skuTolerance","applyModify","toggleELabel","openOperation","buttonIndex","hasELabel","option","SystemSetting","systemInfo","libLoadVisible","reloadLibPath","appName","appVersion","dbVersion","dbVersionName","pid","showLibLoadModal","libPath","stopWeightService","reloadLibrary","autoHeight","SystemPropsSetting","systemProps","propList","p","labelNumber","log","SENSOR_OPERATIONS","SlotSensorsSetting","sensorRemoveMode","allSlots","sensorPickerData","changed","pickerData","children","sensorItem","openSensorOperations","v","onSelectSensor","oldSensor","selectedSensor","selectedSensors","renderSensorItem","addSensor","applySensors","removeSensor","newSensors","sensorIds","setSlotByIds","Overview","refresh","onSensorClick","list","SoftFilterLevelTable","0","SoftFilterLevels","doSetCompensationState","enableCompensation","setCompensationState","SystemCheck","statusTable","tcpApi","databaseTables","softFilterLevel","softFilterLevelLabel","refreshStatusTable","refreshSoftFilterLevel","level","operation","color","ip","reconnectTcp","setSoftFilterLevel","showCompensationOperations","showReloadConfirm","showCleanBackupSnConfirm","tableName","showDbResetConfirm","refreshDatabaseTables","updateSoftFilterLevel","doDbReset","renderMessageItem","message","rows","seqNo","MessageLog","logs","refreshLogs","refreshTimmer","operations","ClickOperations","UPGRADE_PROGRESS_STATE_TABLE","SensorHealthy","upgradePercent","upgradeProgress","refreshSensors","tryReleaseUpgradeProgressTimmer","upgradeFirmwareTimmer","healthyList","showUpgradeProgress","cb","upgradeProgressPercent","undefined","total","current","helthy","renderSensorCard","onUpgradeProgressModalClose","doAbortFirmwareUpgrade","percent","position","showOperations","healthy","elabelSn","tryRecoveryElabelAddress","sensorSn","tryRecoverySensorAddress","tryRecoverySensorAddressWithOriginSn","upgradeFirmware","upgradeElabelFirmware","recoverySensorAddress","recoveryElabelAddress","packageCounter","totalSuccess","totalErrors","errorsRate","warn","errorRateInPer","minRate","doFirmwareUpgrade","elabelSuccess","elabelErrors","doElabelFirmwareUpgrade","refreshUpgradeProgress","refreshUpgradeProgressCb","zeroOffset","zeroReference","successRate","eLabelTotal","elabelSuccessRate","elabelErrorosRate","elabelContinueErrors","continueErrors","showCleanCounterConfirm","doCleanCounter","SensorDetails","sensorParams","refreshParams","param","ThSensorSetting","toDetail","LineCharts","canvas","charts","echarts","init","refreshCharts","xData","yData","series","names","y","tooltip","trigger","legend","xAxis","yAxis","setOption","width","height","ref","onCanvasLoad","defaultProps","ThSensorDetailsSetting","dataLogs","chartsXData","chartsYData","currentTemp","tempData","maxTempData","minTempData","createTime","maxTemperature","minTemperature","timeStr","getHours","getMinutes","getSeconds","refreshDataLog","fetchOneSensor","currentTemperature","calibrateTemp","setSensorData","maxHumidity","minHumidity","updateRange","txt","ExtraPageSetting","pageUri","uri","createIfNotExists","setPageUri","gotoExtraPage","exact","Address","info","Logs","About","drawerOpen","autoplay","infinite","backgroundColor","I","PidAnimation","x","xSum","lastErrorX","ySum","lastErrorY","onTimer","onclick","offsetX","offsetY","onCanvasClick","canvasContext","getContext","reDrawPoint","clearRect","fillStyle","fillRect","errorX","derivativeX","outX","Math","CanvasWidth","max","errorY","derivativeY","outY","CanvasHeight","ExtraPage","src","renderFrame","AppContent","HomeDashboard","Setting","AppHeader","popoverVisible","leftContent","onBackClick","rightContent","mode","mask","overlay","data-seed","whiteSpace","onSelect","onPopoverSelect","goBack","doReloadSensors","createBrowserHistory","notifyPathChanged","location","setRouterPath","search","hash","listen","printBanner","App","consoleBanner","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iqDAaMA,EAAe,CACjBC,YAAY,EACZC,cAAc,EACdC,YAAY,EACZC,YAAa,2BACbC,WAAY,KACZC,eAAgB,GAChBC,QAAS,GACTC,YAAa,GACbC,KAAM,CACFC,KAAM,gBAGRC,EAAc,GACdC,EAAkB,SAACC,EAAMC,GAC3BH,EAAYE,GAAQC,GAExBF,EC5BgC,cD4BE,SAACG,EAAOC,GACtC,OAAO,eACAD,EADP,CAEId,WAAYe,EAAOC,UAG3BL,EChC+B,mBDgCE,SAACG,EAAOC,GACrC,OAAO,eACAD,EADP,CAEIV,WAAYW,EAAOC,UAI3BL,ECrC+C,mCDqCE,SAACG,EAAOC,GACrD,OAAO,eACAD,EADP,CAEIT,eAAgBU,EAAOC,UAI/BL,EC1CyB,aD0CE,SAACG,EAAOC,GAC/B,OAAO,eACAD,EADP,CAEIX,YAAaY,EAAOC,UAG5BL,EC9CmC,uBD8CE,SAACG,EAAOC,GACzC,OAAO,eACAD,EADP,CAEIR,QAASS,EAAOC,UAIxBL,ECnDoC,wBDmDE,SAACG,EAAOC,GAC1C,IADqD,EAC/CT,EAAUQ,EAAMR,QAChBW,EAAWF,EAAOC,KAAKC,SACvBC,EAAYH,EAAOC,KAAKE,UAHuB,cAIlCZ,GAJkC,IAIrD,2BAA4B,CAAC,IAApBa,EAAmB,QACxB,GAAIA,EAAOC,KAAOH,EAAU,CACxBE,EAAOD,UAAYA,EACnB,QAP6C,8BAUrD,OAAO,eACAJ,EADP,CAEIR,QAASe,KAAKC,MAAMD,KAAKE,UAAUjB,SAI3CK,ECjEsC,2BDiEE,SAACG,EAAOC,GAC5C,OAAO,eACAD,EADP,CAEIP,YAAaQ,EAAOC,UAG5BL,ECrEiC,qBDqEE,SAACG,EAAOC,GACvC,IAAMK,EAAKL,EAAOC,KAAKI,GACjBb,EAAcO,EAAMP,YAAYiB,QAAO,SAAAC,GAAU,OAAIA,EAAWL,KAAOA,KAC7E,OAAO,eACAN,EADP,CAEIP,mBAGRI,EC3EkC,qBD2EE,SAACG,EAAOC,GACxC,OAAO,eACAD,EADP,CAEIb,aAAcc,EAAOC,UAG7BL,EC/EiC,qBD+EE,SAACG,EAAOC,GACvC,OAAO,eACAD,EADP,CAEIZ,WAAYa,EAAOC,UAGZ,I,SEpGTU,GADgBC,OAAOC,qCAAuCD,OAAOC,qCAAqC,IAAMC,KACnFC,YAAgBC,MAGpCC,EAFDC,aFmGC,WAAmC,IAAlCnB,EAAiC,uDAAzBf,EAAcgB,EAAW,uCACvCH,EAAOG,EAAOH,KACpB,GAAIA,KAAQF,EAAa,CACrB,IAAMwB,EAAUxB,EAAYE,GAC5B,OAAOsB,EAAQpB,EAAOC,GAE1B,OAAOD,IEzGwBY,G,8DCS7BS,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACTuB,KAAM,KAHK,E,qDAOT,IAAD,OACCrC,EAAasC,KAAKF,MAAMpC,YAAcsC,KAAKF,MAAMnC,aAChDoC,EAAQC,KAAKxB,MAAbuB,KACP,OAAIrC,EAEI,yBAAKuC,UAAU,aACX,uBACIC,oBAAoB,UACpBC,UAAU,UACVC,aAAa,QACbC,QAASL,KAAKF,MAAMpC,WACpB4C,eAAe,UACf,sBAAQC,KAAR,CAAaC,MAAM,eACNC,SAAmB,MAATV,EACVW,KAAM,uBAAGT,UAAU,uBAAb,UACNU,aAAc,uBAAGV,UAAU,yCAAb,UACdW,QAAS,kBAAM,EAAKC,SAAS,QAC1C,sBAAQN,KAAR,CAAaC,MAAM,eACNC,SAAmB,WAATV,EACVW,KAAM,kBAAC,IAAD,CAAWT,UAAU,eAC3BU,aAAc,uBAAGV,UAAU,yCAAb,UACdW,QAAS,kBAAM,EAAKC,SAAS,aAC1C,sBAAQN,KAAR,CAAaC,MAAM,eACNC,SAAmB,UAATV,EACVW,KAAM,uBAAGT,UAAU,uBAAb,UACNU,aAAc,uBAAGV,UAAU,yCAAb,UACdW,QAAS,kBAAM,EAAKC,SAAS,YAC1C,sBAAQN,KAAR,CAAaC,MAAM,eACNC,SAAmB,aAATV,EACVW,KAAM,uBAAGT,UAAU,uBAAb,UACNU,aAAc,uBAAGV,UAAU,yCAAb,UACdW,QAAS,kBAAM,EAAKC,SAAS,eAC1C,sBAAQN,KAAR,CAAaC,MAAM,eACNC,SAAmB,aAATV,EACVW,KAAM,uBAAGT,UAAU,uBAAb,UACNU,aAAc,uBAAGV,UAAU,yCAAb,UACdW,QAAS,kBAAM,EAAKC,SAAS,iBAI/C,O,+BAINd,GACLC,KAAKc,SAAS,CACVf,SAEJC,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAUlB,Q,GAzDEmB,IAAMC,WA8DfC,cAAWC,aAtEF,SAAC7C,EAAOsB,GAC5B,OAAO,eACAA,EADP,CAEIpC,WAAYc,EAAMd,WAClBC,aAAca,EAAMb,iBAkEF0D,CAAyBxB,I,0OC1EnD,IAGMyB,EAAc,WAChB,IAAMC,QAEJC,EAAY,SAACC,GACf,IAAMC,KAAKD,IAIR,SAASE,EAAQC,GACpB,IAAMC,GAAoBD,EAAQN,YAIlC,OAHIO,GAZJ,IAAMC,QAAQ,UAAW,GAelB,IAAIC,SAAQ,SAACC,EAASC,ICjB1B,SAAqBL,GACxB,OAAOM,IAAMN,IDiBTO,CAAYP,GACPQ,MAAK,SAAAC,GAIF,GAHIR,GACAP,IAEe,MAAfe,EAAIC,OAGJ,OAFAd,EAAU,wBAAD,OAAyBa,EAAIC,cACtCL,EAAOI,GAGX,IAAME,EAAOF,EAAI3D,KACjB,GAAkB,MAAd6D,EAAKC,KAGL,OAFAhB,EAAU,UAAD,OAAWe,EAAKC,KAAhB,aAAyBD,EAAKd,WACvCQ,EAAOI,GAGXL,EAAQO,EAAK7D,SACd+D,OAAM,SAAAC,GACDb,GACAP,IAEJ,IAAMqB,EAASD,EAAIE,WACnBpB,EAAUmB,GACVV,EAAOS,SEzChB,IAsBMG,EAAqB,WAC9B,OAAOlB,EAAQ,CACXmB,IAAK,uBACLC,OAAQ,MACRzB,aAAa,KCRR0B,EAAgB,WACzB,OAAOrB,EAAQ,CACXmB,IAAK,qBACLC,OAAQ,UCcHE,EAAoB,WAC7B,OAAOtB,EAAQ,CACXmB,IAAK,6BACLC,OAAQ,SChBHG,EAAiB,SAAAC,GAC1B,MAAO,CACH7E,KRxBwB,aQyBxBI,KAAMyE,IAUDC,EAAW,SAAA5C,GACpB,MAAO,CACHlC,KR/BiB,YQgCjBI,KAAM8B,IAGD6C,GAA8B,WACvC,OAAO,SAAAC,GHzCA3B,EAAQ,CACXmB,IAAK,2BACLC,OAAQ,MACRzB,aAAa,IGuCGc,MAAK,SAAAC,GACjB,IAAMkB,EAAQ,GACd,IAAK,IAAMC,KAAOnB,EACVA,EAAIoB,eAAeD,IACnBD,EAAMvC,KAAKqB,EAAImB,IAGvB,IAAM/E,EAAS,CACXH,KR/C+B,kCQgD/BI,KAAM6E,EAAMG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAAOC,cAAcF,EAAEC,YAExDP,EAAS7E,QAKRsF,GAAoB,WAC7B,OAAO,SAAAT,GF3DA3B,EAAQ,CACXmB,IAAK,yBACLC,OAAQ,QE0DOX,MAAK,SAAAC,GAChB,IAAMrE,EAAUqE,EAAIqB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEK,QAAUJ,EAAEI,WAKjDV,EAJe,CACXhF,KRxDmB,sBQyDnBI,KAAMV,SAQTiG,GAAqB,SAACtF,EAAUC,GACzC,OAAO,SAAA0E,IFnEiB,SAAC3E,EAAUC,GACnC,OAAO+C,EAAQ,CACXmB,IAAI,eAAD,OAAiBnE,EAAjB,cACHoE,OAAQ,OACRrE,KAAM,CACFE,UAAWA,ME+DfsF,CAAavF,EAAUC,GAAWwD,MAAK,WAQnCkB,EAPe,CACXhF,KRnEoB,uBQoEpBI,KAAM,CACFC,WACAC,oBASPuF,GAAuB,WAChC,OAAO,SAAAb,GCzFA3B,EAAQ,CACXmB,IAAK,mBACLC,OAAQ,QDwFWX,MAAK,SAAAC,GAKpBiB,EAJe,CACXhF,KRjFsB,0BQkFtBI,KAAM2D,SAOT+B,GAAwB,SAAAtF,GACjC,OAAO,SAAAwE,IC/FqB,SAAAxE,GAC5B,OAAO6C,EAAQ,CACXmB,IAAI,mBAAD,OAAqBhE,GACxBiE,OAAQ,YD6FRsB,CAAiBvF,GAAIsD,MAAK,WAOtBkB,EANe,CACXhF,KR3FiB,oBQ4FjBI,KAAM,CACFI,GAAIA,UAQXwF,GAA0B,WACnC,OAAO,SAAAhB,GDlHA3B,EAAQ,CACXmB,IAAK,2CACLC,OAAQ,QCiHYX,MAAK,SAAAC,GACrB,IAAM5D,EAAS,CACXH,KRvGkB,oBQwGlBI,KAAoB,SAAd2D,EAAIkC,OAEdjB,EAAS7E,QAKR+F,GAAwB,SAAAC,GACjC,OAAO,SAAAnB,IDxHoB,SAAAmB,GAC3B,OAAO9C,EAAQ,CACXmB,IAAK,2CACLC,OAAQ,OACRrE,KAAM,CACF6F,MAAOE,MCoHXC,CAAgBD,GAAQrC,MAAK,WAKzBkB,EAJe,CACXhF,KRnHkB,oBQoHlBI,KAAM+F,SAOT7G,GAAa,SAAAuF,GACtB,MAAO,CACH7E,KR3HyB,oBQ4HzBI,KAAMyE,IEhJDwB,I,OAAY,SAAAC,GACrB,IAAMC,EAASD,EAAIE,MAAM,4CACzB,GAAID,EAAQ,CACR,IAAME,EAAOC,SAASH,EAAO,IACvBI,EAAQD,SAASH,EAAO,IACxBK,EAAOF,SAASH,EAAO,IACvBM,EAAOH,SAASH,EAAO,IACvBO,EAAMJ,SAASH,EAAO,IACtBQ,EAAML,SAASH,EAAO,IACtBS,EAAI,IAAIC,KAOd,OANAD,EAAEE,YAAYT,GACdO,EAAEG,SAASR,EAAQ,GACnBK,EAAEI,QAAQR,GACVI,EAAEK,SAASR,GACXG,EAAEM,WAAWR,GACbE,EAAEO,WAAWR,GACNC,EAEX,OAAO,IChBEQ,GAAO,SAAAC,GAChB,OAAQA,EAAI,KAAQC,QAAQ,IAmB1BC,GAAkB,CACpBC,EAAG,eACHC,EAAG,gBAGMC,GAAmB,SAAA9H,GAC5B,OAAIA,KAAQ2H,GACDA,GAAgB3H,GAErB,YAAN,OAAmBA,EAAnB,MAgBE+H,GAAiB,CACnB,EAAK,EACL,EAAK,EACL,EAAK,GAGHC,GAAkB,SAAC3C,EAAGC,GACxB,IAAM2C,EAAQ5C,EAAEE,OACV2C,EAAQ5C,EAAEC,OACV4C,EAASF,EAAMG,MAAM,KACrBC,EAASH,EAAME,MAAM,KAC3B,GAAID,EAAOG,SAAWD,EAAOC,OACzB,OAAOH,EAAOG,OAASD,EAAOC,OAElC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAOG,OAAQC,IAAK,CACpC,IAAMC,EAAQ9B,SAASyB,EAAOI,IACxBE,EAAQ/B,SAAS2B,EAAOE,IAC9B,GAAMC,GAASC,GAGXD,IAAUC,EACV,OAAOD,EAAQC,EAGvB,OAAO,GAEEC,GAAa,SAAAzD,GACtB,IAD+B,EACzBsB,EAAS,GACToC,EAAU,SAAC9I,EAAM+I,GACf/I,KAAQ0G,EACRA,EAAO1G,GAAM6C,KAAKkG,GAElBrC,EAAO1G,GAAQ,CAAC+I,IANO,cASd3D,GATc,IAS/B,2BAAwB,CAAC,IAAhB2D,EAAe,QAEdC,EADSD,EAAKrD,OACGiB,MAAM,uBAC7B,GAAIqC,EAEAF,EADe,UAAME,EAAQ,GAAd,6BAAsBA,EAAQ,GAA9B,UACID,QAEnBD,EAAQ,iCAASC,IAhBM,8BAmB/B,IAAM7E,EAAM,GACZ,IAAK,IAAIlE,KAAQ0G,EACb,GAAKA,EAAOpB,eAAetF,GAA3B,CAGA,IAAMoF,EAAQsB,EAAO1G,GACrBkE,EAAIrB,KAAK,CACL7C,OACAoF,MAAOA,EAAMG,KAAK4C,MAG1B,OAAOjE,EAAIqB,MAAK,SAACC,EAAGC,GAChB,IAAMwD,EAAUf,GAAe1C,EAAExF,KAAKkJ,UAAU,EAAG,IAC7CC,EAAUjB,GAAezC,EAAEzF,KAAKkJ,UAAU,EAAG,IACnD,OAAID,IAAYE,EACLF,EAAUE,EAEd3D,EAAExF,KAAK2F,cAAcF,EAAEzF,UAIhCoJ,GAAa,CACfrB,EAAG,qBACHC,EAAG,eACHqB,EAAG,qBACHC,EAAG,eACHC,EAAG,gBAEMC,GAAgB,SAAAnJ,GACzB,OAAIA,KAAS+I,GACFA,GAAW/I,GAEf,iBAAmBA,GAexBoJ,GAAqB,CACvBH,EAAG,eACHC,EAAG,eACHxB,EAAG,gBAGM2B,GAAoB,SAAArJ,GAC7B,OAAIA,KAASoJ,GACFA,GAAmBpJ,GAEvB,eAAOA,GAOLsJ,GAAoB,SAAAvE,GAC7B,IAAKA,EACD,OAAO,KAEX,IAJsC,EAIlCwE,GAAY,EACZC,EAAW,KALuB,cAMrBzE,GANqB,IAMtC,2BAAwB,CAAC,IAAhB2D,EAAe,QACpB,GAAKA,EAAKe,cAAV,CAGA,IAAMA,EAAgBtD,GAAUuC,EAAKe,eACrC,GAAIA,GAAiBA,EAAcxE,eAAe,WAAY,CAC1D,IAAMyE,EAAOD,EAAcE,UACvBD,EAAOH,EAAW,IAClBA,EAAWG,EACXF,EAAWd,MAfe,8BAsBtC,OAHKc,IACDA,EAAWzE,EAAM,IAEdyE,GCzKEI,GAAU,SAAAvE,GACnB,IAAMwE,EAAgBC,mBAAmBzE,GAEzC,OAAOlC,EAAQ,CACXmB,IAFQ,oBAAgBuF,EAAhB,SAGRtF,OAAQ,UAYHwF,GAAc,SAAAzJ,GACvB,OAAO6C,EAAQ,CACXmB,IAAI,aAAD,OAAehE,GAClBiE,OAAQ,SAsBHyF,GAAiB,SAAAC,GAC1B,OAAO9G,EAAQ,CACXmB,IAAK,sBACLC,OAAQ,OACRrE,KAAM,CACFgK,MAAOD,MClBbE,GAAW,CACb,CACInI,MAAO,uCACPgD,IAAK,aAET,CACIhD,MAAO,uCACPgD,IAAK,aAgBPoF,G,kDACF,WAAY9I,GAAQ,IAAD,8BACf,cAAMA,IACD+I,QAAUC,SACf,EAAKtK,MAAQ,CACT+E,MAAO,GACPwF,aAAc,GACdC,UAAW,GACXhL,QAAS,GACTiL,oBAAoB,EACpBC,cAAe,GACfC,YAAa,GACbC,YAAa,GACbC,eAAgB,MAEpB,EAAKvJ,MAAMsD,SAAS,aACpB,EAAKkG,eAAiB,EAAKA,eAAeC,KAApB,gBAfP,E,gEAmBfvJ,KAAKwJ,iBACLxJ,KAAKF,MAAMlC,YAAW,GACtBoC,KAAKF,MAAMpC,YAAW,GACtBsC,KAAKyJ,mB,uCAGS,IAAD,OACbzJ,KAAK6I,QAAQa,WAAa,SAAAC,GAEtB,GAAsB,SADAA,EAAEC,OAAOC,QAAQC,cACvC,CAGA,IAAMC,EAAUJ,EAAEI,QACF,KAAZA,EACA,EAAKC,iBAAiB,EAAKxL,MAAM2K,aAEjC,EAAKc,gBAAgBC,OAAOC,aAAaJ,Q,sCAKrCK,GAAI,IACTjB,EAAenJ,KAAKxB,MAApB2K,YACPnJ,KAAKc,SAAS,CACVqI,YAAaA,EAAciB,M,6CAK3BpK,KAAKqK,YACLC,cAActK,KAAKqK,YAEvBrK,KAAKF,MAAMlC,YAAW,GACtBoC,KAAKF,MAAMpC,YAAW,GACtBsC,KAAKuK,mB,uCAILvK,KAAK6I,QAAQa,WAAa,O,uCAGZ,IAAD,OACb1J,KAAKqK,WAAaG,aAAY,WAC1B3H,IAAqBT,MAAK,SAAAC,GACtB,IAAMoI,EAAWpI,EAAIoI,SACfC,EAASrI,EAAIsI,wBACbpH,EAAQ,GACRyF,EAAY,GAClB,IAAK,IAAInF,KAAU4G,EACXA,EAAShH,eAAeI,IACxBN,EAAMvC,KAAKyJ,EAAS5G,IAG5B,IAAK,IAAI/E,KAAM4L,EACPA,EAAOjH,eAAe3E,IACtBkK,EAAUhI,KAAK0J,EAAO5L,IAG9B,IAAMiK,EAAe/B,GAAWzD,GAChC,EAAKzC,SAAS,CACVyC,MAAOA,EACPyF,UAAWA,EACXD,aAAcA,SAGvB,O,yCAGYlK,GAAS,IACjBH,EAAQG,EAARH,KACFkM,EAAyBlM,EAAzBkM,YAAaC,EAAYnM,EAAZmM,SAClBD,EAAcA,GAAeA,EAAY5E,QAAQ,GACjD,IAAM8E,EAAgBjD,GAAkBnJ,EAAKqM,kBACvCC,EFDO,IECsBtM,EAAKqM,iBAClCE,EAAeJ,GAAYA,EAAS7E,QAAQ,GAC5CkF,EAAY,CAAC,SACbC,EAAa,CAAC,OACdC,EAAY,CAAC,WACfJ,GACAG,EAAWnK,KAAK,QAChBkK,EAAUlK,KAAK,QACfoK,EAAUpK,KAAK,SAEfkK,EAAUlK,KAAK,MAEnB,IAAMqK,EAAW1D,GAAc9I,EAAOL,OAChC8M,EAAeJ,EAAUK,KAAK,KACpC,OAAQ,yBAAKtL,UAAWmL,EAAUG,KAAK,KAAM/H,IAAK3E,EAAOC,IACrD,yBAAKmB,UAAU,eACX,yBAAKA,UAAU,MAAMpB,EAAO2M,IAC5B,yBAAKvL,UAAU,SAAQ,8BAAOgL,EAAP,KAA4B,0BAAMhL,UAAWkL,EAAWI,KAAK,OAC/EF,IAGT,yBAAKpL,UAAU,aACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,QACX,0BAAMA,UAAU,QAAhB,iBACA,0BAAMA,UAAWqL,GAAeV,EAAhC,UAEJ,yBAAK3K,UAAU,cACf,yBAAKA,UAAU,QACX,0BAAMA,UAAU,QAAhB,gBACA,0BAAMA,UAAWqL,GAAeR,S,wCAOjC,IAAD,OACP9B,EAAahJ,KAAKxB,MAAlBwK,UACP,OAAQ,yBAAK/I,UAAU,mBACnB,yBAAKA,UAAU,SAAf,wCACA,uBAAWA,UAAU,WAEb+I,EAAUyC,KAAI,SAAA5M,GAAM,OAAI,EAAK6M,mBAAmB7M,U,+BAMtD,IAAD,SACwGmB,KAAKxB,MAA3G6K,EADF,EACEA,eAAgBF,EADlB,EACkBA,YAAaC,EAD/B,EAC+BA,YAAaH,EAD5C,EAC4CA,mBAAoBC,EADhE,EACgEA,cAAelL,EAD/E,EAC+EA,QAAS+K,EADxF,EACwFA,aAC7F/I,KAAK2L,iBAAmB,GAFnB,oBAGYvC,GAHZ,IAGL,2BAA8B,CAAC,IAAtBlC,EAAqB,QAC1BlH,KAAK2L,iBAAiBzE,EAAKpI,KAAM,GAJhC,8BAML,OACI,yBAAKmB,UAAU,aACX,uBAAM2L,KAAMjD,GAAUkD,SAAU,SAACC,EAAKC,GAAN,OAAgB,EAAKC,YAAYF,EAAKC,MACtE,uBACIxH,MAAO4E,EACP8C,SAAU,SAAAtC,GAAC,OAAI,EAAKK,iBAAiBL,IACrCkC,SAAU,SAAA1C,GAAW,OAAI,EAAKrI,SAAS,CAACqI,mBAC5C,yBAAKlJ,UAAU,eAEPD,KAAKkM,gBAAgB7C,IAG7B,yBAAKpJ,UAAU,eAEP8I,EAAa0C,KAAI,SAAAU,GAAK,OAAI,EAAKC,gBAAgBD,OAGvD,yBAAKlM,UAAU,cAEPD,KAAKqM,mBAGb,uBAAOC,QAASrD,EACTzI,MAAK,uBAAQ0I,EAAcrF,OAAtB,uBACL0I,aAAW,EACXC,OAAQ,CACJ,CACIC,KAAM,eAAM7L,QAAS,kBAAM,EAAK8L,WAAW,EAAKlO,MAAM0K,iBAE1D,CAACuD,KAAM,eAAM7L,QAAS,kBAAM,EAAKE,SAAS,CAACmI,oBAAoB,OAEnE0D,QAAS,kBAAM,EAAK7L,SAAS,CAACmI,oBAAoB,MACrD,uBAAM2D,aAAc,iBAAM,YAElB5O,EAAUA,EAAQyN,KAAI,SAAA5M,GAAM,OAAK,sBAAM0B,KAAN,CACzBsM,MAAOlF,GAAc9I,EAAOL,OAC5BgF,IAAK3E,EAAOC,IACXD,EAAOiO,SACR,sBAAMvM,KAAKwM,MAAX,KAAkBlO,EAAOmO,gBAE7B,sBAAMzM,KAAN,qBAIhB,yBAAKN,UAAU,gBACf,yBAAKA,UAAU,gBAAf,mB,sCAOIiH,GACZ,GAAKA,EAAL,CAGA,IAAM+F,EAAU,GAShB,OARAA,EAAQjM,KAAK,0BAAMwC,IAAK,GAAI0D,EAAKgG,UAC7BhG,EAAKiG,sBACLF,EAAQjM,KAAK,0BAAMwC,IAAK,GAAX,+CACbyJ,EAAQjM,KAAM,0BAAMwC,IAAK,EAAGvD,UAAU,QAAQiH,EAAKiG,uBACnDF,EAAQjM,KAAK,0BAAMwC,IAAK,GAAX,YAEbyJ,EAAQjM,KAAK,0BAAMwC,IAAK,GAAX,uEAET,uBAAWvD,UAAU,UACxBgN,M,sCAIOd,GAAQ,IAAD,OACnB,OAAQ,yBAAKlM,UAAU,aAAauD,IAAK2I,EAAMhO,MAC3C,uBAAG8B,UAAU,cACRkM,EAAMhO,MAEX,2BACI,uBAAM8B,UAAU,QAAQmN,KAAM,OAAQC,QAAQ,WAEtClB,EAAM5I,MAAMkI,KAAI,SAAAvE,GAAI,OAAI,EAAKoC,eAAepC,W,qCAOjDA,GAAO,IAAD,OAEjB,IADgBA,EAAKlJ,QAEjB,OAAO,KAEX,IAAMyK,EAAMvB,EAAKuB,KAAO,GAClB/J,EAAOwI,EAAKxI,MAAQ,GACtB4O,EAAoB,YACpBpG,EAAKpI,MAAMkB,KAAK2L,iBAChB2B,GAAqB,uBFzSZ,SAAA9O,GACjB,OAAiB,IAAVA,EE0SK+O,CAAMrG,EAAK1I,UFnSF,SAAAA,GACrB,OAAiB,IAAVA,EEmSSgP,CAAUtG,EAAK1I,QFhSV,SAAAA,GACrB,OAAiB,IAAVA,EEiSgBiP,CAAUvG,EAAK1I,OAGtB8O,GAAqB,kBAFrBA,GAAqB,qBAFrBA,GAAqB,sBAQjC,IAAMI,EFjTc,SAAAlP,GACxB,OAAiB,IAAVA,EEgTgBmP,CAAajP,EAAKkP,gBAC/BpP,EAAQmJ,GAAcT,EAAK1I,OAC3BqP,EAAa/H,GAAKpH,EAAKoP,QACvBC,EF/LS,SAAArP,GACnB,IAAMqP,EAAQrP,EAAKqP,MACbC,EAAgC,IAArBtP,EAAKuP,YACtB,OAAc,OAAVF,EACO,UAEPC,EACOD,EAEJ,IAAMA,EEsLKG,CAAQxP,GACtB,OAAQ,yBAAK8E,IAAK0D,EAAKpI,GACVmB,UAAWqN,GACpB,uBAAMrN,UAAU,cAAcoN,QAAQ,WAClC,yBAAKpN,UAAU,WACViH,EAAKrD,QAEV,yBAAK5D,UAAU,SACX,0BAAMA,UAAU,UAAhB,IAA2B4N,EAA3B,OACA,0BAAM5N,UAAU,QAChB,8BAAOzB,KAGf,uBAAMyB,UAAU,YAAYoN,QAAQ,WAChC,yBAAKpN,UAAU,QACX,yBAAKA,UAAU,UAAf,OAA6BwI,EAAIC,OACjC,yBAAKzI,UAAU,YAAYwI,EAAItK,OAEnC,yBAAK8B,UAAU,cACf,yBAAKA,UAAS,gBAAWyN,EAAa,mBAAqB,IACtDS,QAAS,kBAAM,EAAKC,gBAAgBlH,KACrC,0BAAMjH,UAAU,aAAa8N,GAC7B,0BAAM9N,UAAU,YAAhB,uB,sCAMAiH,GACZlH,KAAKc,SAAS,CACVoI,cAAehC,EACflJ,QAASkJ,EAAKlJ,QACdiL,oBAAoB,M,uCAIXP,GAAQ,IAAD,OACN,KAAVA,GAAiC,KAAjBA,EAAM2F,OAI1B7F,GAAeE,GAAOtG,MAAK,SAAAC,GACvB,IAAMgH,EAxTS,SAAA9F,GACvB,IADgC,EAC5BwE,EAAW,EACX1F,EAAM,KAFsB,cAGfkB,GAHe,IAGhC,2BAAwB,CAAC,IAAhB2D,EAAe,QAChBoH,EAAKpH,EAAKe,cAAgBtD,GAAUuC,EAAKe,eAAiB,EAC1DqG,EAAKvG,IACLA,EAAWuG,EACXjM,EAAM6E,IAPkB,8BAUhC,OAAO7E,EA8SwBkM,CAAmBlM,GAC1C,EAAKvB,SAAS,CACVsI,YAAa/G,EACbgH,eAAgBA,IAEpBmF,YAAW,kBAAM,EAAK1N,SAAS,CAACsI,YAAa,GAAID,YAAa,GAAIE,eAAgB,SAAQ,QAC3F5G,OAAM,SAAAC,GACL,EAAK5B,SAAS,CACVqI,YAAa,KAFL,IAILzK,EAAQgE,EAARhE,KACP,IAAM+P,MAAN,+CAAsB/P,EAAK8D,MAA3B,qDAA8CkG,EAA9C,cAAyDhK,EAAK+C,IAA9D,SAfA,IAAM0B,KAAK,uBAAwB,GAAG,K,kCAmBlC2I,EAAKC,GACb,OAAQA,GACJ,KAAK,EAED/L,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAU,eAEd,MACJ,KAAK,EAEDjB,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAU,iB,iCAQfiG,GAAO,IAAD,OACNrD,EAAUqD,EAAVrD,OACP,IAAM4K,MAAN,sBAAiB5K,EAAjB,oDAAsCA,EAAtC,MAAkD,CAC9C,CAAC4I,KAAM,gBACP,CAACA,KAAM,eAAM7L,QAAS,kBAAM,EAAK8N,WAAW7K,S,iCAIzCA,GACPuE,GAAQvE,GAAQzB,MAAK,WACjB,IAAMe,KAAN,eAAmBU,EAAnB,mBAA4C,GAAG,U,GAvVnC1C,aA4VlBwN,GAAYtN,aAnYK,SAAC7C,EAAOsB,GAC3B,OAAO,eACAA,EADP,CAEIyD,MAAO/E,EAAMT,oBAGG,SAACuF,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEI8O,cAAe,kBAAatL,EAASD,GAA2B,WAA3B,eACrCD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,eAChCxF,WAAY,kBAAa0F,EAAS1F,GAAU,WAAV,eAClCF,WAAY,kBAAa4F,EAASJ,EAAc,WAAd,mBAuXxB7B,CAAyCuH,IAC5CxH,eAAWuN,ICvZpBE,GAAW,SAACrQ,EAAOsB,GACrB,OAAO,eACAtB,EADP,GAEOsB,IAGLgP,GAAY,SAACxL,EAAUxD,GACzB,OAAO,eACAA,EADP,CAEIsD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,eAChCF,eAAgB,kBAAaI,EAASJ,EAAc,WAAd,eACtCtF,WAAY,kBAAa0F,EAAS1F,GAAU,WAAV,kBAG7BmR,GAAoB,SAACJ,GAC9B,OAAOtN,YAAQwN,GAAUC,GAAlBzN,CAA6BsN,ICHlCK,I,qBAAwB,CAC1B9I,EAAG,mBACHC,EAAG,oBACHqB,EAAG,oBACHC,EAAG,qBACHC,EAAG,yBAYDuH,GAA8B,CAChC/I,EAAG,iBACHC,EAAG,oBAgEQ+I,G,uKAjDD,IAAD,EAC8BlP,KAAKF,MAAjCoH,EADF,EACEA,KAAMiH,EADR,EACQA,QAASgB,EADjB,EACiBA,UACtB,IAAKjI,EAAKlJ,QACN,OAAO,KAHN,IAKEQ,EAAoB0I,EAApB1I,MAAOE,EAAawI,EAAbxI,KAAM+J,EAAOvB,EAAPuB,IACbqF,EAAiCpP,EAAjCoP,OAAQC,EAAyBrP,EAAzBqP,MAAOH,EAAkBlP,EAAlBkP,eAChBC,EAAa/H,GAAKgI,GAClBzC,EAAW1D,GAAcnJ,GACzB4Q,EArDI,SAAAA,GACd,OAAY,IAARA,EACO,EAEJA,GAAY,IAiDHC,CAAUtB,GAChBrF,EAhDM,SAAAA,GAChB,OAAOA,GAAgB,YA+CL4G,CAAY7G,EAAIC,OAExB6G,EAtCQ,SAAC/Q,EAAO2Q,GAC1B,IAAM9M,EAAM,CAAC,aAMb,OALI8M,EACA9M,EAAIrB,KAAK,uBAETqB,EAAIrB,KAAKgO,GAAsBxQ,IAE5B6D,EAAIkJ,KAAK,KA+BaiE,CAAchR,EAAO2Q,GACxCM,EA1BG,SAAAjR,GACb,IAAM6D,EAAM,CAAC,SAEb,OADAA,EAAIrB,KAAKiO,GAA4BzQ,IAC9B6D,EAAIkJ,KAAK,KAuBQmE,CAAS9B,GAC7B,OACI,yBAAK3N,UAAWsP,GACZ,yBAAKtP,UAAU,UACX,yBAAKA,UAAU,WAAWiH,EAAKrD,QAC/B,yBAAK5D,UAAU,SACX,0BAAMA,UAAU,UAAhB,IAA2B4N,EAA3B,OACA,yBAAK5N,UAAU,QACf,0BAAMA,UAAU,QAAQoL,KAGhC,yBAAKpL,UAAU,QACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,sCACA,8BAAOyI,IAEX,yBAAKzI,UAAU,YACVwI,EAAItK,OAGb,yBAAK8B,UAAU,cACf,yBAAKA,UAAWwP,EAAatB,QAAS,kBAAMA,EAAQjH,KAChD,0BAAMjH,UAAU,SACXmP,GAEL,0BAAMnP,UAAU,SAAhB,yB,GA9CDkB,aCrCjBwO,GAAc,SAACzI,EAAM0I,GAAwB,IACxC9Q,EAAMoI,EAANpI,GACP,OAAO8Q,EAAmBnM,eAAe3E,IA2C9B+Q,G,kDArBX,WAAY/P,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,GAFE,E,qDAKT,IAAD,EAC4CwB,KAAKF,MAA/CqM,EADF,EACEA,MAAO2D,EADT,EACSA,YAAaC,EADtB,EACsBA,mBACpB5R,EAAegO,EAAfhO,KAAMoF,EAAS4I,EAAT5I,MACb,OACI,yBAAKtD,UAAU,cACX,yBAAKA,UAAU,cAAc9B,GAC7B,yBAAK8B,UAAU,aA9BX,SAACsD,EAAOuM,EAAaF,GACrC,GAAKrM,EAGL,OAAOA,EAAMkI,KAAI,SAAAvE,GAAI,OACjB,kBAAC,GAAD,CACIiI,UAAWQ,GAAYzI,EAAM0I,GAC7B1I,KAAMA,EACN1D,IAAK0D,EAAKpI,GACVqP,QAAS,SAAAjH,GAAI,OAAI4I,EAAY5I,SAuBjB8I,CAAYzM,EAAOuM,EAAaC,S,GApBhC5O,a,sBCiBT8O,G,WAtCX,WAAYC,GAAS,wBACVC,EAA2CD,EAA3CC,UAAWC,EAAgCF,EAAhCE,UAAWC,EAAqBH,EAArBG,SAAUC,EAAWJ,EAAXI,QACvCtQ,KAAKmQ,UAAYA,EACjBnQ,KAAKoQ,UAAYA,EACjBpQ,KAAKqQ,SAAWA,EAChBrQ,KAAKsQ,QAAUA,EACftQ,KAAKuQ,SAAU,E,oDAGV,IAAD,OACJvQ,KAAKmQ,YACA/N,MAAK,SAAAC,GACF,EAAK+N,UAAU/N,GACf,EAAKmO,aAER/N,OAAM,SAAAC,GACH,EAAK4N,QAAQ5N,GACb,EAAK8N,e,gCAIN,IAAD,OACDxQ,KAAKuQ,UAGVvQ,KAAKyQ,OAASjC,YAAW,WACrB,EAAKkC,UACN1Q,KAAKqQ,a,6BAIRrQ,KAAKuQ,SAAU,EACXvQ,KAAKyQ,QACLE,aAAa3Q,KAAKyQ,Y,KCtBxBG,I,OAAmB,CACrB1K,EAAG,0BACHC,EAAG,2BACHqB,EAAG,2BACHC,EAAG,4BACHC,EAAG,gCAODmJ,GAAmB,CACrBpJ,EAAG,gBACHC,EAAG,gBACHxB,EAAG,WAiDQ4K,G,uKApCD,IACCjS,EAAUmB,KAAKF,MAAfjB,OACA2M,EAAmB3M,EAAnB2M,GAAI9M,EAAeG,EAAfH,KAAMF,EAASK,EAATL,MACVqM,EAA2CnM,EAA3CmM,SAAUD,EAAiClM,EAAjCkM,YAAaG,EAAoBrM,EAApBqM,iBACxBM,EAAW1D,GAAcnJ,GACzBuS,EAxCK,SAAAA,GACf,OAAa,IAATA,EACO,EAEJA,EAAOA,EAAK/K,QAAQ,GAAK,KAoCfgL,CAAWpG,GAClBqG,EAAYpJ,GAAkBkD,GAE9BmG,EA7BI,SAAA1S,GACd,IAAM6D,EAAM,CAAC,oBAEb,OADAA,EAAIrB,KAAK4P,GAAiBpS,IACnB6D,EAAIkJ,KAAK,KA0BSH,CAAU5M,GACzB2S,EApBI,SAAA3S,GACd,IAAM6D,EAAM,CAAC,QAEb,OADAA,EAAIrB,KAAK6P,GAAiBrS,IACnB6D,EAAIkJ,KAAK,KAiBS6F,CAAUrG,GAC/B,OACI,yBAAK9K,UAAWiR,GACZ,yBAAKjR,UAAU,UACX,yBAAKA,UAAU,WAAWuL,GAC1B,yBAAKvL,UAAU,SACX,0BAAMA,UAAU,YAAhB,IAA6B4K,EAA7B,MACA,0BAAM5K,UAAU,QAChB,0BAAMA,UAAU,QAAQoL,KAGhC,yBAAKpL,UAAWkR,GACZ,yBAAKlR,UAAU,QACX,0BAAMA,UAAU,SAAS8Q,EAAzB,SACA,0BAAM9Q,UAAU,SAAhB,mBAEJ,yBAAKA,UAAU,cACf,yBAAKA,UAAU,SACX,0BAAMA,UAAU,SAASgR,GACzB,0BAAMhR,UAAU,SAAhB,yB,GAjCKkB,aC5BvBkQ,I,OAAe,SAAAxS,GACjB,IAAML,EAAQmJ,GAAc9I,EAAOL,OACnC,OAAO,yBAAKgF,IAAK3E,EAAOC,GAAImB,UAAU,QAClC,yBAAKA,UAAU,WACVpB,EAAOmO,YAEZ,yBAAK/M,UAAU,SACVzB,MA0EE8S,G,uKAzDD,IAECzN,EADQ7D,KAAKF,MAAboH,KACArD,OACP,IAAM4K,MAAM,2BAAZ,+CAA8B5K,EAA9B,WAA0C,CACtC,CACI4I,KAAM,gBAEV,CACIA,KAAM,eACN7L,QAFJ,WAGQwH,GAAQvE,GAAQzB,MAAK,WACjB,IAAMe,KAAK,2BAAQ,GAAG,Y,+BAQtC,IAAMoO,EAAQvR,KADT,EAEmBA,KAAKF,MAAtBoH,EAFF,EAEEA,KAAMyF,EAFR,EAEQA,QACPnM,EAAK,uBAAS0G,EAAKrD,OAAd,iBACJ7F,EAAWkJ,EAAXlJ,QACP,OACI,uBAAOiC,UAAU,uBACVqM,SAAS,EACTkF,cAAc,EACdhR,MAAOA,EACP+L,aAAa,EACbI,QAASA,EACTH,OACI,CACI,CACIC,KAAM,eACN7L,QAAS+L,GAEb,CACIF,KAAM,eACN7L,QAFJ,WAGQ2Q,EAAME,aAKzB,yBAAKxR,UAAU,QACViH,EAAKrD,QAEV,yBAAK5D,UAAU,WA5DT,SAAAjC,GAClB,OAAKA,GAAWA,EAAQ4I,QAAU,EACvB,KAEJ5I,EAAQyN,IAAI4F,IA0DCK,CAAc1T,S,GAvDLmD,aCX3BwQ,GAAuB,SAAApO,GACzB,IADkC,EAC5BlB,EAAM,GADsB,cAEjBkB,GAFiB,IAElC,2BAAwB,CAAC,IAAhB2D,EAAe,QACpB7E,EAAI6E,EAAKpI,IAAMoI,GAHe,8BAKlC,OAAO7E,GA2BLuP,GAAY,SAAAC,GACd,IAAMxP,EAAM,GACZ,IAAK,IAAImB,KAAOqO,EACRA,EAAKpO,eAAeD,IACpBnB,EAAIrB,KAAK6Q,EAAKrO,IAGtB,OAAOnB,GAwOI0M,M,kDApNX,WAAYjP,GAAQ,IAAD,8BACf,cAAMA,IACDgS,QAAUhJ,SACf,EAAKtK,MAAQ,CACTuT,YAAa,GACbhC,mBAAoB,GACpBiC,WAAY,KACZjJ,aAAc,GACdkJ,YAAa,GACbC,WAAY,EACZC,sBAAsB,EACtBC,aAAc,GACdC,YAAa,MAZF,E,gEAgBE,IAAD,EAC+BrS,KAAKF,MAA7CsD,EADS,EACTA,SAAUF,EADD,EACCA,eAAgBtF,EADjB,EACiBA,WACjCwF,EAAS,4BACTF,GAAe,GACftF,GAAW,GACXoC,KAAKsS,cACLtS,KAAKuS,4B,6CAIDvS,KAAKwS,aACLxS,KAAKwS,YAAYC,OAErBzS,KAAK0S,0B,8CAIL1S,KAAK8R,QAAQpI,WAAa,O,gDAI1B,IAAM6H,EAAQvR,KACdA,KAAK8R,QAAQpI,WAAa,SAAAC,GAEtB,GAA8B,SADZA,EAAEC,OAAbC,QACKC,cAAZ,CAF2B,IAKpBC,EAAWJ,EAAXI,QACP,GA/CY,KA+CRA,EAAJ,CAIA,IAAM4I,EAAOzI,OAAOC,aAAaJ,GAC1BgI,EAAeR,EAAM/S,MAArBuT,YACPR,EAAMzQ,SAAS,CACXiR,YAAaA,EAAcY,SAN3BpB,EAAMqB,mB,qCAWF,IACLb,EAAe/R,KAAKxB,MAApBuT,YACP/R,KAAK6S,UAAUd,K,oCAIf,IAAMR,EAAQvR,KACdA,KAAKwS,YAAc,IAAIvC,GAAY,CAC/BE,UAAWtN,EACXuN,UAF+B,SAErB1R,GACN6S,EAAMuB,uBAAuBpU,IAEjC2R,SAAU,IACVC,QAN+B,SAMvB5N,GACJ6O,EAAMwB,eAAerQ,MAG7B1C,KAAKwS,YAAY9B,U,qCAGNhO,GACXsQ,QAAQC,MAAM,iCAAkCvQ,GAChD1C,KAAKc,SAAS,CAACuR,YAAa3P,EAAIE,e,6CAGblE,GAAO,IACnB+L,EAAqC/L,EAArC+L,SAAUE,EAA2BjM,EAA3BiM,wBACX5B,EAAe/B,GAAW4K,GAAUnH,IACpCwH,EAAcL,GAAUjH,GAC9B3K,KAAKc,SAAS,CACViI,eACAkJ,cACAI,YAAa,S,gCAIX3J,GAAQ,IAAD,OACRA,GAAUA,EAAM2F,QAIrBrO,KAAKc,SAAS,CAACiR,YAAa,KAC5BvJ,GAAeE,GAAOtG,MAAK,SAAAC,GACvB,EAAKvB,SAAS,CACViP,mBAAoB4B,GAAqBtP,GACzC2P,WAAYlK,GAAkBzF,KAElCmM,YAAW,WACP,EAAK1N,SAAS,CACViP,mBAAoB,GACpBiC,WAAY,SAtKc,SA0JlC,IAAM7O,KAAK,wBAAU,GAAG,K,sCAmB5BnD,KAAKc,SAAS,CAACoR,WAAY,IAC3B,IAAMpQ,QAAQ,qBAAO,EAAG,MAAM,GAFlB,IAGLf,EAAWf,KAAKF,MAAhBiB,QACPyN,YAAW,WACPzN,EAAQC,KAAK,CACTC,SAAU,gBA1HC,O,sCA+HPiG,GACZlH,KAAKc,SAAS,CACVsR,aAAclL,EACdiL,sBAAsB,M,0CAIT,IACVE,EAAerS,KAAKxB,MAApB6T,YACP,OAAKA,EAGG,uBAAW3R,KAAM,kBAACwS,GAAA,EAAD,OACpBb,GAHM,O,iDAOa,IAAD,SACsBrS,KAAKxB,MAA3C2T,EADgB,EAChBA,qBAAsBC,EADN,EACMA,aAC7B,OAAKD,EAGG,kBAAC,GAAD,CACJjL,KAAMkL,EACNzF,QAAS,kBAAM,EAAK7L,SAAS,CAACqR,sBAAsB,OAJ7C,O,mCAOD,IAAD,OAEHgB,EAAY,CAAC,QACbC,EAAY,CAAC,QAMnB,OALmB,IAHEpT,KAAKxB,MAAnB0T,WAIHiB,EAAUnS,KAAK,cAEfoS,EAAUpS,KAAK,cAEX,yBAAKf,UAAU,gBACnB,yBAAKA,UAAU,QACX,yBAAKA,UAAWkT,EAAU5H,KAAK,KAAM4C,QAAS,kBAAM,EAAKrN,SAAS,CAACoR,WAAY,MAC3E,yBAAKjS,UAAU,QAAf,wCACA,yBAAKA,UAAU,WAEnB,yBAAKA,UAAWmT,EAAU7H,KAAK,KAAM4C,QAAS,kBAAM,EAAKkF,kBACrD,yBAAKpT,UAAU,QAAf,wCACA,yBAAKA,UAAU,e,+BAMrB,IA9LYjC,EA8Lb,SAC4EgC,KAAKxB,MAA/EuT,EADF,EACEA,YAAaC,EADf,EACeA,WAAYjJ,EAD3B,EAC2BA,aAAckJ,EADzC,EACyCA,YAAalC,EADtD,EACsDA,mBAC3D,OACI,yBAAK9P,UAAU,kBAEPD,KAAKsT,oBAGLtT,KAAKuT,aAET,uBAAWhP,MAAOwN,EACPyB,YAAY,oFACZvH,SAAU,SAAAQ,GAAI,OAAI,EAAKoG,UAAUpG,IACjCZ,SAAU,SAAAY,GAAI,OAAI,EAAK3L,SAAS,CAACiR,YAAatF,OA9OjD,SAAAvF,GACpB,GAAKA,EAAL,CAGA,IAAMzF,EAAM,GACLyL,EAAiChG,EAAjCgG,QAASC,EAAwBjG,EAAxBiG,qBAWhB,OAVA1L,EAAIT,KAAK,0BAAMwC,IAAK,GAAI0J,IACpBC,GACA1L,EAAIT,KACA,0BAAMwC,IAAK,GAAX,6CAEI,uBAAGvD,UAAU,QAAQkN,GAFzB,WAOA,uBACJlN,UAAU,gBACVS,KAAM,kBAAC+S,GAAA,EAAD,OAEFhS,IA4NQyK,CAAgB8F,GAEpB,uBAAW/R,UAAU,SAEb8I,EAAa0C,KAAI,SAAAU,GAAK,OAAI,kBAAC,GAAD,CAAWA,MAAOA,EACP4D,mBAAoBA,EACpBD,YAAa,SAAA5I,GAAI,OAAI,EAAKkH,gBAAgBlH,IAC1C1D,IAAK2I,EAAMhO,WAGxD,uBAAW8B,UAAU,kBAvNXjC,EAyNgBiU,IAxNtBjU,EAAQ4I,QAAU,EACvB,KAEH,oCACJ,uBAAG3G,UAAU,cAAb,wCACA,yBAAKA,UAAU,WAEPjC,EAAQyN,KAAI,SAAA5M,GAAM,OAAK,kBAAC,GAAD,CAAgBA,OAAQA,EAAQ2E,IAAK3E,EAAOC,WAoNnE,yBAAKmB,UAAU,SAAf,KAEID,KAAK0T,gC,GA9MGvS,c,+HC/BbwS,I,yDAnCX,WAAY7T,GAAQ,IAAD,8BACf,cAAMA,IACD8T,gBAAkB,CACnBC,MAAO,GACPC,OAAQ,KAEZ,EAAKtV,MAAQ,CACTuV,MAAM,GAPK,E,qDAgBT,IAAD,OACEA,EAAQ/T,KAAKxB,MAAbuV,KACP,OACI,yBAAK9T,UAAW,gBAAkB8T,EAAO,OAAS,IAC7CC,MAAOhU,KAAK4T,gBACZzF,QAAS,SAAAxE,GAAC,OAAI,EAAKsK,YAAYtK,KAEhC,wBAAMrL,KAAM0B,KAAKF,MAAMoU,SAAUjU,UAAU,Y,kCAK3C0J,GACJ3J,KAAKF,MAAMqO,SACXnO,KAAKF,MAAMqO,QAAQxE,O,GA/BLxI,cCkBpBgT,G,kLAEEnU,KAAKF,MAAMsD,SAAS,8CACpBpD,KAAKF,MAAMsU,eACXpU,KAAKF,MAAMoD,gBAAe,K,+BAGpB,IAAD,OACElF,EAAWgC,KAAKF,MAAhB9B,QACP,OACI,yBAAKiC,UAAU,eACX,4BACI,uBAAMoU,OAAN,CAAa7T,MAAM,iCAAQqM,MAAM,iBACjC,uBAAMyH,KAAN,KACI,2BACI,sBAAM/T,KAAN,CAAWsM,MAAO7O,EAAQ4I,QAA1B,qCAIZ,uBAAMgG,aAAc,iBAAM,mCAElB5O,EAAQyN,KAAI,SAAA5M,GAAM,OAAK,sBAAM0B,KAAN,CAAWiD,IAAK3E,EAAOC,IAC1C,4BACI,uBAAMuV,OAAN,CAAa7T,MAAK,uBAAQ3B,EAAOmF,SAAW6I,MAAOhO,EAAOiO,WAC1D,uBAAMwH,KAAN,KACI,2BACI,sBAAM/T,KAAN,CAAWsM,MAAO,wBAAQ0H,QAAS1V,EAAOD,UAChBiN,SAAU,SAAClC,GAAD,OAAO,EAAK6K,aAAa3V,EAAQ8K,IAC3C8K,SAAS,aAFnC,wCAKA,sBAAMlU,KAAN,CAAWmU,MAAM,aAAavG,QAAS,kBAAM,EAAKwG,gBAAgB9V,KAAlE,gDAKR,uBAAM+V,OAAN,CAAa3H,QAAO,oCAAWpO,EAAOqI,MAAQrI,EAAOqI,KAAKrD,OAAtC,KACPgJ,MAAOhO,EAAOqI,MAAQrI,EAAOqI,KAAKpI,WAK/D,kBAAC,GAAD,CAAaoV,SAAS,WAAW/F,QAAS,kBAAM,EAAK0G,6B,sCAKjDhW,GACZmB,KAAKF,MAAMiB,QAAQC,KAAK,CAACC,SAAS,YAAD,OAAcpC,EAAOmF,QAArB,uB,mCAIxBnF,EAAQ8K,GACjB,IAAMhL,EAAWE,EAAOC,GACxBkB,KAAKF,MAAMmE,mBAAmBtF,EAAUgL,K,6CAGpB,IAAD,OACbmL,EAAU,CAAC,2BAAQ,gBACzB,KAAYC,2BAA2B,CACnCvU,MAAO,2BACPoB,QAASkT,EACTE,kBAAmBF,EAAQlO,OAAS,EACpCqO,uBAAwB,IACzB,SAAAlJ,GACe,IAAVA,GACA,EAAKmJ,yB,0CAMb,IAAMzG,MAAM,2BAAQ,iJAChB,CACI,CACIhC,KAAM,gBAEV,CACIA,KAAM,eAAM7L,QAAS,WACjBoC,IAAgBZ,MAAK,WACjB,IAAMe,KAAK,4BAAS,GAAG,c,GAhFvBhC,aAwFbE,gBA/FQ,SAAC7C,EAAOsB,GAC3B,OAAO,eACAA,EADP,CAEI9B,QAASQ,EAAMR,aAZC,SAACsF,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIsU,aAAc,kBAAa9Q,EAASS,GAAiB,WAAjB,eACpCE,mBAAoB,kBAAaX,EAASW,GAAkB,WAAlB,eAC1Cb,SAAU,kBAAaE,EAASF,EAAQ,WAAR,eAChCF,eAAgB,kBAAaI,EAASJ,EAAc,WAAd,mBAkG/B7B,CAAyC8S,ICjGlDgB,G,kDACF,WAAYrV,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,GACb,EAAKsB,MAAMsD,SAAS,gBAHL,E,gEAOfpD,KAAKF,MAAMoD,gBAAe,K,+BAGpB,IAAD,OACL,OACI,yBAAKjD,UAAU,WACX,uBAAM2M,aAAc,iBAAM,iBACtB,sBAAMrM,KAAN,CAAW4N,QAAS,kBAAM,EAAKiH,GAAG,oBAAoBV,MAAM,cAA5D,kCAGA,sBAAMnU,KAAN,CAAW4N,QAAS,kBAAM,EAAKiH,GAAG,uBAAuBV,MAAM,cAA/D,wCAGA,sBAAMnU,KAAN,CAAW4N,QAAS,kBAAM,EAAKiH,GAAG,kBAAkBV,MAAM,cAA1D,4BAGA,sBAAMnU,KAAN,CAAW4N,QAAS,kBAAM,EAAKiH,GAAG,wBAAwBV,MAAM,cAAhE,4BAGA,sBAAMnU,KAAN,CAAW4N,QAAS,kBAAM,EAAKiH,GAAG,oBAAoBV,MAAM,cAA5D,4BAGA,sBAAMnU,KAAN,CAAWmU,MAAM,aAAavG,QAAS,kBAAM,EAAKiH,GAAG,2BAArD,4BAGA,sBAAM7U,KAAN,CAAW4N,QAAS,kBAAM,EAAKiH,GAAG,sBAAsBV,MAAM,cAA9D,wCAGA,sBAAMnU,KAAN,CAAW4N,QAAS,kBAAM,EAAKiH,GAAG,2BAA2BV,MAAM,cAAnE,4C,yBAQb3U,GACCC,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAUlB,Q,GA9CIoB,aAmDXC,eAAWC,YAAQ,MA3DV,SAACiC,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIsD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,eAChCF,eAAgB,kBAAaI,EAASJ,EAAc,WAAd,mBAuDpB7B,CAA+B8T,K,8BCxDnDE,I,OAAmB,CAAC,eAAM,2BAAQ,uCAAU,uCAAU,uCAAU,eAAM,iBACrE9U,G,IAAAA,KA+BD+U,G,kDACF,WAAYxV,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACT+E,MAAO,GACPgS,aAAc,EACdC,kBAAkB,GALP,E,gEAUfxV,KAAKF,MAAMoD,gBAAe,GAC1BlD,KAAKF,MAAMsD,SAAS,wCACpBpD,KAAKyV,e,kCAGGvO,GAAO,IAAD,EACP3D,EAASvD,KAAKxB,MAAd+E,MADO,cAEAA,GAFA,IAEd,2BAAqB,CAAC,IAAbmS,EAAY,QACbA,EAAE5W,KAAOoI,EAAKpI,KACd4W,EAAEjV,UAAYiV,EAAEjV,WAJV,8BAOd,IAAM8U,EAAehS,EAAMrE,QAAO,SAAAgI,GAAI,OAAIA,EAAKzG,YAAUmG,OACnD4O,EA/Ca,SAAAjS,GACvB,IADgC,EAC1BoS,EAAc,GAChBC,EAAqB,OAFO,cAGfrS,GAHe,IAGhC,2BAAwB,CAAC,IAAhB2D,EAAe,QAChBA,EAAKzG,WACLkV,EAAYzO,EAAKlD,SAAWkD,EACxBA,EAAKlD,QAAU4R,IACfA,EAAqB1O,EAAKlD,WAPN,8BAYhC,WADO2R,EAAYC,GACZC,OAAOC,KAAKH,GAAa/O,OAAS,GAAG,CAGxC,IADqB+O,IADrBC,GAGI,OAAO,SAEJD,EAAYC,GAEvB,OAAO,EA2BsBG,CAAmBxS,GAC5CvD,KAAKc,SAAS,CACVyC,MAAOA,EACPgS,aAAcA,EACdC,iBAAkBA,M,wCAIRxX,GACd,OAAIA,EAAQ4I,QAAU,EACV,0BAAM3G,UAAU,OAAhB,8CAELjC,EAAQyN,KAAI,SAAA5M,GAAM,OAAK,0BAAMoB,UAAU,aAAauD,IAAK3E,EAAOC,IAAKD,EAAOmF,c,qCAGxEkD,GAAO,IAAD,OACXlJ,EAAUkJ,EAAKlJ,SAAW,GAChC,KAAIkJ,EAAKpI,GAAK,GAAKd,EAAQ4I,QAAU,GAGrC,OAAQ,kBAAC,GAAD,CAAMpD,IAAK0D,EAAKpI,GAAI4V,MAAM,aAAavG,QAAS,kBAAM,EAAK6H,YAAY9O,KAC3E,yBAAKjH,UAAU,aACX,yBAAKA,UAAU,cACX,wBAAUsU,QAASrN,EAAKzG,YAE5B,yBAAKR,UAAU,WACX,8BAAOiH,EAAKrD,SAEhB,6BAEQ7D,KAAKiW,kBAAkBjY,Q,+BAOjC,IAAD,SAC2CgC,KAAKxB,MAA9C+E,EADF,EACEA,MAAOgS,EADT,EACSA,aAAcC,EADvB,EACuBA,iBACtBjE,EAAQvR,KACRkW,EAAmBV,EAAmB,WAAa,OACzD,OACI,yBAAKvV,UAAU,gBACX,uBAAM2M,aAAc,iBAAM,wCAAU3M,UAAU,SAEtCsD,EAAMkI,KAAI,SAAAvE,GAAI,OAAIqK,EAAM4E,eAAejP,OAG/C,kBAAC,GAAD,CAAagN,SAAS,WAAW/F,QAAS,kBAAM,EAAKiI,wBACrD,yBAAKnW,UAAU,cACX,sDACI,0BAAMA,UAAWiW,GAAmBX,GADxC,SAGI,0BAAMtV,UAAWiW,GAAmBV,EAAmB,2BAAS,uC,0CAShF,OADgBxV,KAAKxB,MAAd+E,MACMrE,QAAO,SAAAgI,GAAI,OAAIA,EAAKzG,c,kCAGxB,IAAD,OACF8C,EAAQvD,KAAKqW,oBACnB,GAAI9S,EAAMqD,OAAS,EACf,IAAMzD,KAAK,yDAAa,GAAG,OAD/B,CAIA,IAAMmT,EAAU/S,EAAMkI,KAAI,SAAAvE,GAAI,OAAIA,EAAKrD,UAAQ0H,KAAK,KACzBvL,KAAKxB,MAAzBgX,iBAKP,IAAM/G,MAAM,2BAAZ,mCAA4B6H,EAA5B,KAAwC,CACpC,CACI7J,KAAM,gBAEV,CACIA,KAAM,eACN7L,QAAS,WZrEM,IAAA2V,KYsEKhT,EAAMkI,KAAI,SAAAvE,GAAI,OAAIA,EAAKpI,MZrEhD6C,EAAQ,CACXmB,IAAK,mBACLC,OAAQ,OACRrE,KAAM,CACF8X,QAASD,MYiE2CnU,MAAK,WAC7C,IAAMe,KAAK,2BAAQ,GAAG,GACtB,EAAKsS,oBAZjB,IAAMhH,MAAM,yDAAa,mGAAoB,CAAC,CAAChC,KAAM,2B,wCAmB1C,IAAD,OACRlJ,EAAQvD,KAAKqW,oBACnB,GAAI9S,EAAMqD,OAAS,EACf,IAAMzD,KAAK,yDAAa,GAAG,OAD/B,CAIA,IAAMmT,EAAU/S,EAAMkI,KAAI,SAAAvE,GAAI,OAAIA,EAAKrD,UAAQ0H,KAAK,KACpD,IAAMkD,MAAM,2BAAZ,mCAA4B6H,EAA5B,KAAwC,CACpC,CACI7J,KAAM,gBAEV,CACIA,KAAM,eACN7L,QAAS,WZlFO,IAAA2V,KYmFKhT,EAAMkI,KAAI,SAAAvE,GAAI,OAAIA,EAAKpI,MZlFjD6C,EAAQ,CACXmB,IAAK,gCACLC,OAAQ,OACRrE,KAAM,CACF8X,QAASD,MY8E4CnU,MAAK,WAC9C,IAAMe,KAAK,2BAAQ,GAAG,GACtB,EAAKsS,uB,4CAOF,IAAD,EACXlS,EAASvD,KAAKxB,MAAd+E,MACD9C,EAAW8C,EAAMrE,QAAO,SAAAgI,GAAI,OAAIA,EAAKzG,YAAUmG,SAAWrD,EAAMqD,OAFpD,cAGDrD,GAHC,IAGlB,2BAAwB,SACf9C,SAAWA,GAJF,8BAMlBT,KAAKc,SAAS,CAACyC,Y,8CAIf,IAAMA,EAAQvD,KAAKqW,oBACnB,GAAqB,IAAjB9S,EAAMqD,OAAV,CAIA,IAAMM,EAAO3D,EAAM,GACnBvD,KAAKyW,aAAavP,QAJd,IAAM/D,KAAK,6CAAW,GAAG,K,2CAOX,IAAD,OACjB,KAAY4R,2BAA2B,CACnCnT,QAASyT,GACT7U,MAAO,2BACPwU,kBAAmBK,GAAiBzO,OAAS,EAC7CqO,uBAAwB,IACzB,SAAAlJ,GACC,OAAQA,GACJ,KAAK,EACD,EAAK0J,aACL,MACJ,KAAK,EACD,EAAKiB,YACL,MACJ,KAAK,EACD,EAAKC,YACL,MACJ,KAAK,EACD,EAAKC,kBACL,MACJ,KAAK,EACD,EAAKC,wBACL,MACJ,KAAK,EACD,EAAKC,4B,mCAQR5P,GACTlH,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAS,wBAAD,OAA0BiG,EAAKpI,Q,kCZvOxC6C,EAAQ,CACXmB,IAAK,qBACLC,OAAQ,SY0OIX,MAAK,WACb,IAAMe,KAAK,gE,mCAIL,IAAD,OZhONxB,EAAQ,CACXmB,IAAK,0BACLC,OAAQ,QY+NQX,MAAK,SAAAC,GACjB,IAAMkB,EAAQlB,EAAIoJ,KAAI,SAAAvE,GAElB,OADAA,EAAKzG,UAAW,EACTyG,KACRxD,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEK,QAAUJ,EAAEI,WAChC,EAAKlD,SAAS,CAACyC,iB,GAjNDpC,aAsNXC,eAAWC,YAAQ,MApPV,SAACiC,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIoD,eAAgB,kBAAaI,EAASJ,EAAc,WAAd,eACtCE,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBAgPd/B,CAA+BiU,K,uFCvPnDyB,I,OAAuB,CACzB,eACA,uCACA,mDACA,iBAEE9Q,GAAkB,CACpB,CACI+Q,MAAO,eACPzS,MAAO,GAEX,CACIyS,MAAO,eACPzS,MAAO,IAmBT0S,G,kDACF,WAAYnX,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACT0Y,qBAAqB,EACrBC,OAAQ,CACJ7Y,KAAM,KACNsL,OAAQ,IAEZwN,YAAa,IAEjB,EAAKtX,MAAMsD,SAAS,wCAVL,E,gEAcfpD,KAAKF,MAAMuX,kBACXrX,KAAKF,MAAMoD,gBAAe,K,+BAGpB,IAAD,OACE3C,EADF,IACEA,KACAtC,EAAe+B,KAAKF,MAApB7B,YACAiZ,EAAuBlX,KAAKxB,MAA5B0Y,oBACAC,EAAUnX,KAAKxB,MAAf2Y,OACP,OACI,6BACI,uBAAMvK,aAAc,iBAAM,6BAElB3O,EAAYwN,KAAI,SAAAtM,GAAU,OACtB,kBAACoB,EAAD,CAAMiD,IAAKrE,EAAWL,GAAI4V,MAAM,aAC1BvG,QAAS,kBAAM,EAAKmJ,yBAAyBnY,KAC/C,uBAAMkO,QAAQ,UAAUpN,UAAU,kBAC9B,0BAAMA,UAAU,QAAQmG,GAAiBjH,EAAWb,OACpD,0BAAM2B,UAAU,UAAUd,EAAWyK,aAIrD,kBAACrJ,EAAD,CAAMiD,IAAI,gBACN,wBAAQlF,KAAK,UAAU6P,QAAS,kBAAM,EAAKoJ,qBAA3C,8BAGR,uBACIjL,QAAS4K,EACT3K,aAAW,EACX/L,MAAM,2BACNgM,OAAQ,CACJ,CAACC,KAAM,eAAM7L,QAAS,kBAAM,EAAKE,SAAS,CAACoW,qBAAqB,MAChE,CAACzK,KAAM,eAAM7L,QAAS,kBAAM,EAAK4W,sBAErC7K,QAAS,kBAAM,EAAK7L,SAAS,CAACoW,qBAAqB,MACnD,2BACI,wBAAQxY,KAAMuH,GAAiBzF,MAAM,2BAAOiX,KAAM,EAC1C5K,MAAM,qBACNhB,SAAU,SAAAlC,GAAC,OAAI,EAAK+N,cAAc/N,KACtC,sBAAMpJ,KAAN,KACI,wBAAWgE,MAAO4S,EAAO7Y,MAAQ8H,GAAiB+Q,EAAO7Y,MAC9CqZ,UAAU,EACVnE,YAAY,mBAI1B,WACG,IAAMoE,EAAS,sBAAMrX,KAAN,CAAWiD,IAAI,UAAS,wBAAWgQ,YAAY,oBACZ3H,SAAU,SAAAlC,GAAC,OAAI,EAAKkO,gBAAgBlO,IACpCpF,MAAO4S,EAAOvN,OACd+N,SAAqC,IAA3B,EAAKnZ,MAAM2Y,OAAO7Y,QAC9E,OAAoB,IAAhB6Y,EAAO7Y,KACC,wBAAQI,KAAM,EAAKF,MAAM4Y,YACjBvK,MAAM,eACNrM,MAAM,2BACNiX,KAAM,EACN5L,SAAU,SAAAiM,GAAG,OAAI,EAAKC,sBAAsBD,KACvDF,GAGEA,EAdd,Q,uCAwBRzY,GAAa,IAAD,OACzB,IAAMsP,MAAM,4BAAS,6CACjB,CACI,CACIhC,KAAM,gBAEV,CACIA,KAAM,eACN7L,QAAS,WACL,EAAKd,MAAMuE,iBAAiBlF,EAAWL,U,qCAM5CK,GACX,IAAMsP,MAAM,8CAAY,sEACpB,CACI,CACIhC,KAAM,gBAEV,CACIA,KAAM,eACN7L,QAAS,WhBnHH,IAAA9B,KgBoHSK,EAAWL,GhBnHnC6C,EAAQ,CACXmB,IAAI,mBAAD,OAAqBhE,EAArB,UACHiE,OAAQ,UgBiHkCX,MAAK,WAC3B,IAAMe,KAAK,kCAAU,GAAG,Y,yCAQ5CnD,KAAKc,SAAS,CACVoW,qBAAqB,M,yCAIT,IhBnJQ/X,EgBmJT,QhBnJSA,EgBoJPa,KAAKxB,MAAM2Y,OhBnJzBxV,EAAQ,CACXmB,IAAK,mBACLC,OAAQ,MACRrE,KAAMS,KgBgJ8BiD,MAAK,WACrC,EAAKtC,MAAMuX,kBACX,EAAKvW,SAAS,CACVqW,OAAQ,GACRD,qBAAqB,S,oCAKnBc,GAAQ,IAAD,OACbA,EAAMpR,OAAS,GACf,IAAMzD,KAAK,+CAEf,IAAM7E,EAAO0Z,EAAM,GACbC,EAAY,CACd3Z,OACAsL,OAAQ,IAEZ5J,KAAKc,SAAS,CAACqW,OAAQc,IACV,IAAT3Z,GAAc0B,KAAKxB,MAAM4Y,YAAYxQ,QAAU,GhB7JhDjF,EAAQ,CACXmB,IAAK,mBACLC,OAAQ,QgB4JOX,MAAK,SAAAC,GACZ,IADmB,EACb+U,EAAc,GADD,cAEA/U,GAFA,IAEnB,2BAAwB,CAAC,IAAd6V,EAAa,QACpBd,EAAYpW,KAAK,CACbgW,MAAOkB,EACP3T,MAAO2T,KALI,8BAQnB,EAAKpX,SAAS,CAACsW,qB,sCAKXzN,GACZ,IAAMwN,EAAM,eACLnX,KAAKxB,MAAM2Y,OADN,CAERvN,OAAQD,IAEZ3J,KAAKc,SAAS,CAACqW,a,4CAGGgB,GAClB,GAAKA,EAAL,CAIA,IAAMD,EAAOC,EAAgB,GACvBhB,EAAM,eACLnX,KAAKxB,MAAM2Y,OADN,CAERvN,OAAQsO,IAEZlY,KAAKc,SAAS,CAACqW,gBARX,IAAMhU,KAAK,qC,yCAWAhE,GACf,IAAMsP,MAAM,oDAAa,kFACrB,CACI,CACIhC,KAAM,gBAEV,CACIA,KAAM,eACN7L,QAAS,WhBzLW,IAAAwX,KgB0LSjZ,EAAWL,GhBzLjD6C,EAAQ,CACXmB,IAAI,mBAAD,OAAqBsV,EAArB,oBACHrV,OAAQ,UgBuLgDX,MAAK,WACzC,IAAMe,KAAK,kCAAU,GAAG,Y,+CAOvBhE,GAAa,IAAD,OACjC,KAAY4V,2BAA2B,CACnCvU,MAAM,GAAD,OAAKrB,EAAWyK,OAAhB,iBACLhI,QAASmV,GACT/B,kBAAmB+B,GAAqBnQ,OAAS,EACjDqO,uBAAwB,IACzB,SAAAlJ,GACC,OAAQA,GACJ,KAAK,EACD,EAAK1H,iBAAiBlF,GACtB,MACJ,KAAK,EACD,EAAKkZ,eAAelZ,GACpB,MACJ,KAAK,EACD,EAAKmZ,mBAAmBnZ,W,GAlNZgC,aA2NjBE,gBAlOQ,SAAC7C,EAAOsB,GAC3B,OAAO,eACAA,EADP,CAEI7B,YAAaO,EAAMP,iBAZH,SAACqF,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIuX,gBAAiB,kBAAa/T,EAASa,GAAoB,WAApB,eACvCf,SAAU,kBAAaE,EAASF,EAAQ,WAAR,eAChCiB,iBAAkB,kBAAaf,EAASc,GAAqB,WAArB,eACxClB,eAAgB,kBAAaI,EAASJ,EAAc,WAAd,mBAqO/B7B,CAAyC4V,IC3PlDsB,GAAgB,CAClB,iCACA,2BACA,gBAEGhY,G,IAAAA,KAQDiY,G,kDACF,WAAY1Y,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACT0I,KAAM,IAEV,EAAKuR,OAAS,EAAK3Y,MAAMgF,MAAM4T,OAAO5Z,GALvB,E,gEASfkB,KAAKF,MAAMsD,SAAX,UAAuBpD,KAAKyY,OAA5B,8BACAzY,KAAK2Y,kB,sCAGQ,IAAD,OACZpQ,GAAYvI,KAAKyY,QAAQrW,MAAK,SAAAC,GAC1B,EAAKvB,SAAS,CAACoG,KAAM7E,IACrB,EAAKvC,MAAMsD,SAAX,UAAuBf,EAAIwB,OAA3B,mC,+BAIE,IAAD,OACEqD,EAAQlH,KAAKxB,MAAb0I,KACP,OACI,yBAAKjH,UAAU,cACX,uBAAM2M,aAAc,iBAAM,6BACtB,kBAAC,GAAD,CAAMpJ,IAAI,UACN,wBAAWgQ,YAAY,iCAAQjP,MAAO2C,EAAKrD,OAChCgI,SAAU,SAAAY,GAAI,OAAI,EAAKmM,kBAAkB,CAAC/U,OAAQ4I,MAD7D,uBAGJ,kBAAC,GAAD,CAAMjJ,IAAI,WACN,wBAAWgQ,YAAY,kBAAQjP,MAAO2C,EAAKgG,QAChCrB,SAAU,SAAAY,GAAI,OAAI,EAAKmM,kBAAkB,CAAC1L,QAAST,MAD9D,oBAGJ,kBAAC,GAAD,CAAMjJ,IAAI,SACN,wBAAWgQ,YAAY,YAAOjP,MAAO2C,EAAKwB,MAC/BmD,SAAU,SAAAY,GAAI,OAAI,EAAKmM,kBAAkB,CAAClQ,MAAO+D,MAD5D,cAGJ,kBAAC,GAAD,CAAMjJ,IAAI,UACN,wBAAWgQ,YAAY,kBAAQjP,MAAO2C,EAAK2R,OAChCva,KAAK,SACLuN,SAAU,SAAAY,GAAI,OAAI,EAAKmM,kBAAkB,CAACC,OAAQpM,MAF7D,oBAIJ,kBAAC,GAAD,CAAMjJ,IAAI,gBACN,wBAAWgQ,YAAY,kBAAQjP,MAAO2C,EAAK4R,aAChCxa,KAAK,SACLuN,SAAU,SAAAY,GAAI,OAAI,EAAKmM,kBAAkB,CAACE,aAAcrM,MAFnE,oBAIJ,kBAAC,GAAD,CAAMjJ,IAAI,wBACN,wBAAWgQ,YAAY,6CAAUjP,MAAO2C,EAAKiG,qBAClC7O,KAAK,SACLuN,SAAU,SAAAY,GAAI,OAAI,EAAKmM,kBAAkB,CAACzL,qBAAsBV,MAF3E,uBAMJ,kBAAC,GAAD,CAAMjJ,IAAI,YACN,2BAAW,wBAAQlF,KAAK,UAAU6P,QAAS,kBAAM,EAAK4K,gBAA3C,mBAGnB,uBAAMnM,aAAc,iBAAM,eACtB,sBAAMrM,KAAN,CACIiD,IAAI,YACJqJ,MAAO,wBACH0H,QAASrN,EAAKtI,UACdiN,SAAU,SAAArN,GAAK,OAAI,EAAKwa,aAAaxa,IACrCiW,SAAS,aALjB,wCAQA,sBAAMlU,KAAN,CACImU,MAAM,aACNvG,QAAS,kBAAM,EAAKrO,MAAMiB,QAAQC,KAAK,CAACC,SAAS,yBAAD,OAA2BiG,EAAKpI,QAFpF,+CAMJ,kBAAC,GAAD,CAAaoV,SAAS,WAAW/F,QAAS,kBAAM,EAAK8K,sB,sCAKhD,IAAD,OACZ,KAAYlE,2BAA2B,CACnCvU,MAAO,2BACPoB,QAAS2W,GACTtD,uBAAwB,EACxBD,kBAAmBuD,GAAc3R,OAAS,IAC3C,SAAAsS,GACC,OAAQA,GACJ,KAAK,EACD,EAAKzH,SACL,MACJ,KAAK,EACD,IAAMtO,KAAK,mDAAY,GAAG,S,+BAQhC,IACC+D,EAAQlH,KAAKxB,MAAb0I,KACPkB,GAAQlB,EAAKrD,QAAQzB,MAAK,WACtB,IAAMe,KAAK,kC,wCAIDrD,GACd,IAAMoH,EAAI,eACHlH,KAAKxB,MAAM0I,KADR,GAEHpH,GAEPE,KAAKc,SAAS,CAACoG,W,oCdlGG,IAAAA,KcsGPlH,KAAKxB,MAAM0I,KdrGnBvF,EAAQ,CACXmB,IAAI,aAAD,OAAeoE,EAAKpI,IACvBiE,OAAQ,OACRrE,KAAMwI,KckGsB9E,MAAK,WAC7B,IAAMe,KAAK,uB,mCAINgW,GAAY,IdlGIC,EckGL,QdlGKA,EcmGP,CAACta,GAAIkB,KAAKyY,OAAQU,adlGjCxX,EAAQ,CACXmB,IAAI,aAAD,OAAesW,EAAOta,GAAtB,gBACHiE,OAAQ,OACRrE,KAAM,CAACE,UAAWwa,EAAOD,cc+FuB/W,MAAK,WACjD,IAAMe,KAAK,0BACX,EAAKwV,uB,GA3HexX,aAgIjBC,eAAWC,YAAQ,MAvIV,SAACiC,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIsD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBAoId/B,CAA+BmX,K,6BC9HnDa,G,kDACF,WAAYvZ,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACT8a,WAAY,GACZC,gBAAgB,EAChBC,cAAe,IALJ,E,gEASE,IAAD,OAChBxZ,KAAKF,MAAMsD,SAAS,4BtBvBjBzB,EAAQ,CACXmB,IAAK,8BACLC,OAAQ,QsBsBUX,MAAK,SAAAC,GACnB,EAAKvB,SAAS,CACVwY,WAAYjX,S,+BAKd,IAAD,OACE9B,EADF,IACEA,KADF,EAE+CP,KAAKxB,MAAlD8a,EAFF,EAEEA,WAAYC,EAFd,EAEcA,eAAgBC,EAF9B,EAE8BA,cAC5B7b,EAAgBqC,KAAKF,MAArBnC,aACP,OACI,yBAAKsC,UAAU,kBACX,uBAAM2M,aAAc,iBAAM,6BACtB,kBAACrM,EAAD,CAAMiD,IAAI,UAAUqJ,MAAOyM,EAAWG,SAAtC,4BACA,kBAAClZ,EAAD,CAAMiD,IAAI,aAAaqJ,MAAOyM,EAAWI,YAAzC,4BACA,kBAACnZ,EAAD,CAAMiD,IAAI,YAAYqJ,MAAOyM,EAAWK,WAAxC,kCACA,kBAACpZ,EAAD,CAAMiD,IAAI,gBAAgBqJ,MAAOyM,EAAWM,eAA5C,wCACA,kBAACrZ,EAAD,CAAMiD,IAAI,MAAMqJ,MAAOyM,EAAWO,KAAlC,kBACA,kBAACtZ,EAAD,CAAMiD,IAAI,UAAUkR,MAAM,aACpBvG,QAAS,kBAAM,EAAK2L,qBAD1B,8BACsDR,EAAWS,UAErE,uBAAMnN,aAAc,iBAAM,6BACtB,kBAACrM,EAAD,CACIiD,IAAI,SACJqJ,MAAO,wBACH0H,QAAS5W,EACTkO,SAAU,SAAAjC,GAAM,OAAI,EAAKlF,gBAAgBkF,IACzC6K,SAAS,aALjB,kCAQA,kBAAClU,EAAD,CAAMiD,IAAI,cAAckR,MAAM,aACxBvG,QAAS,kBAAM,EAAKrO,MAAMiB,QAAQC,KAAK,CAACC,SAAU,4BADxD,mBAIA,kBAACV,EAAD,CAAMiD,IAAI,eACN,wBAAQlF,KAAK,UAAU6P,QAAS,kBAAM,EAAK6L,sBAA3C,0CAGR,uBACI1N,QAASiN,EACT/Y,MAAM,uCACN+L,aAAW,EACXiF,cAAc,EACdhF,OAAQ,CACJ,CACIC,KAAM,eACN7L,QAAS,kBAAM,EAAKkZ,kBAAiB,KAEzC,CACIrN,KAAM,eACN7L,QAAS,kBAAM,EAAKqZ,oBAG5B,wBACIzG,YAAY,4BACZ0G,YAAU,EACV3V,MAAOiV,EAAe3N,SAAU,SAAAlC,GAAC,OAAI,EAAK7I,SAAS,CAAC0Y,cAAe7P,W,sCAMvEC,GACZ5J,KAAKF,MAAM4E,gBAAgBkF,K,yCAGA,IAAdzG,IAAa,yDACpBqW,EAAgBxZ,KAAKxB,MAAM8a,WAAWS,QAC5C/Z,KAAKc,SAAS,CACV0Y,gBACAD,eAAgBpW,M,sCAIP,IC5GQpD,ED4GT,QC5GSA,ED6GPC,KAAKxB,MAAMgb,cC5GtB7X,EAAQ,CACXmB,IAAK,uBACLC,OAAQ,OACRrE,KAAM,CACFqb,QAASha,MDwG2BqC,MAAK,SAAAC,GACzC,IAAMc,KAAN,qCAAqBd,EAArB,MACA,EAAKvB,SAAS,CACVyY,gBAAgB,S,0CrBzErB5X,EAAQ,CACXmB,IAAK,mCACLC,OAAQ,SqB6EYX,MAAK,WACrB,IAAMe,KAAK,sD,GAlGKhC,aAuGbC,eAAWC,aA9GH,SAAC7C,EAAOsB,GAC3B,OAAO,eACAA,EADP,CAEInC,aAAca,EAAMb,kBAVJ,SAAC2F,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIsD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,eAChCsB,gBAAiB,kBAAapB,EAASkB,GAAqB,WAArB,mBAiHrBnD,CAAyCgY,KEjH5D9Y,G,IAAAA,KAED4Z,G,kDACF,WAAYra,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACT4b,YAAa,IAHF,E,gEAOE,IAAD,OAChBpa,KAAKF,MAAMsD,SAAS,+BxBNjBzB,EAAQ,CACXmB,IAAK,8BACLC,OAAQ,QwBKWX,MAAK,SAAAC,GACpB,IAAMgY,EAAW,GACjB,IAAK,IAAMlc,KAAQkE,EACXA,EAAIoB,eAAetF,IACnBkc,EAASrZ,KAAK,CACV7C,OACAoG,MAAOlC,EAAIlE,KAIvB,EAAK2C,SAAS,CACVsZ,YAAaC,S,+BAKf,IACCD,EAAepa,KAAKxB,MAApB4b,YACP,OACI,yBAAKna,UAAU,eACX,uBAAM2M,aAAc,iBAAM,sBAElBwN,EAAY3O,KAAI,SAAA6O,GAAC,OAAK,kBAAC,GAAD,CAAM9W,IAAK8W,EAAEnc,MAC/B,6BAAMmc,EAAEnc,MACR,wBAAcoG,MAAO+V,EAAE/V,MAAO2V,YAAU,EAACK,YAAa,c,GAlCjDpZ,aA2ClBE,eAAQ,MApDC,SAACiC,EAAUxD,GAE/B,OADAkT,QAAQwH,IAAI1a,EAAOwD,GACZ,eACAxD,EADP,CAEIsD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBAgDzB/B,CAA+B8Y,IC5CxCM,I,OAAoB,CAAC,eAAM,iBAE3BC,G,kDACF,WAAY5a,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACT0I,KAAM,GACNlJ,QAAS,GACT2c,kBAAkB,EAClBC,SAAU,GACVC,iBAAkB,IAPP,E,gEAWE,IAAD,OAChB7a,KAAKF,MAAMsD,SAAS,8CADJ,IAETtE,EAAMkB,KAAKF,MAAMgF,MAAM4T,OAAvB5Z,GACPyJ,GAAYzJ,GAAIsD,MAAK,SAAAC,GACjB,IADwB,EAClBrE,EAAUqE,EAAIrE,QADI,cAELA,GAFK,IAExB,2BAA4B,SACjB8c,SAAU,GAHG,8BAKxB,EAAKha,SAAS,CACVoG,KAAM7E,EACNrE,QAASA,IAEb,EAAK8B,MAAMsD,SAAX,yCAA6Bf,EAAIwB,OAAjC,SlBuBDlC,EAAQ,CACXmB,IAAK,0BACLC,OAAQ,QkBvBcX,MAAK,SAAAC,GACvB,IAD8B,EACxB0Y,EAAa,GADW,cAEb1Y,GAFa,IAE9B,2BAAsB,CAAC,IAAD,EAAb6E,EAAa,QACZlJ,EAAUkJ,EAAKlJ,QACfgd,EAAW,GAFC,cAGChd,GAHD,IAGlB,2BAA4B,CAAC,IAApBa,EAAmB,QACxBmc,EAASha,KAAK,CACVuD,MAAO1F,EAAOC,GACdkY,MAAOnY,EAAOmF,WANJ,8BASlB+W,EAAW/Z,KAAK,CACZuD,MAAO2C,EAAKpI,GACZkY,MAAO9P,EAAKrD,OACZmX,SAAUA,KAdY,8BAiB9B,EAAKla,SAAS,CAAC8Z,SAAUvY,EAAKwY,iBAAkBE,S,uCAIvClc,GAAS,IAAD,SACwBmB,KAAKxB,MAA3Cmc,EADc,EACdA,iBAAkBE,EADJ,EACIA,iBACnBI,EACF,sBAAM1a,KAAN,CAAWiD,IAAK3E,EAAOC,GACZ4V,MAAM,aACNzU,UAAS,sBAAiBpB,EAAOic,QAAU,sBAAwB,IACnE3M,QAAS,kBAAM,EAAK+M,qBAAqBrc,IACzCgO,MAAO8N,EAAmB,2BAAS,IACzC9b,EAAOiO,UAEhB,OAAI6N,EACOM,EAEC,wBACJvc,KAAMmc,EACNrX,IAAK3E,EAAOC,GACZyF,MAAO,CAAC1F,EAAO4Z,OAAQ5Z,EAAOC,IAC9B2Y,KAAM,EACN5L,SAAU,SAAAsP,GAAC,OAAI,EAAKC,eAAevc,EAAQsc,KAAKF,K,qCAI7CI,EAAW5a,GACtB,IAaI6a,EAbE7C,EAAShY,EAAS,GAClB9B,EAAW8B,EAAS,GACtBsL,GAAS,EACPwP,EAAkBvb,KAAKxB,MAAMR,QACnC,IAAK,IAAI6I,KAAK0U,EAAiB,CAC3B,GAAKA,EAAgB9X,eAAeoD,GAGrB0U,EAAgB1U,GACpB/H,KAAOuc,EAAUvc,KACxBiN,EAAQlF,GAXgB,oBAef7G,KAAKxB,MAAMoc,UAfI,IAehC,2BAAsC,CAAC,IAA9B1T,EAA6B,QAClC,GAAIA,EAAKpI,KAAO2Z,EAAQ,CAAC,IAAD,gBACDvR,EAAKlJ,SADJ,IACpB,2BAAiC,CAAC,IAAzBa,EAAwB,QACzBA,EAAOC,KAAOH,IACdE,EAAOic,SAAU,EACjBQ,EAAiBzc,IAJL,8BAOpB,QAvBwB,kDA0BlB0c,GA1BkB,IA0BhC,2BAA+B,CAC3B,GAD2B,QACrBzc,KAAOwc,EAAexc,GAExB,YADA,IAAMqE,KAAK,kCAAU,GAAG,IA5BA,8BAgChCoY,EAAgBxP,GAASuP,EACzBtb,KAAKc,SAAS,CAAC9C,QAASud,M,+BAGlB,IAAD,SACqCvb,KAAKxB,MAAxC0I,EADF,EACEA,KAAMlJ,EADR,EACQA,QAAS2c,EADjB,EACiBA,iBACtB,OACI,6BACI,uBAAM/N,aAAc,iBAAM,6BACtB,sBAAMrM,KAAN,CAAWsM,MAAO3F,EAAKrD,QAAvB,sBACA,sBAAMtD,KAAN,CAAWsM,MAAO3F,EAAKgG,SAAvB,mBACA,sBAAM3M,KAAN,CAAWsM,MAAO3F,EAAKwB,OAAvB,cAEJ,uBAAMkE,aAAc,iBAAM,YAElB5O,EAAQyN,KAAI,SAAA5M,GAAM,OAAI,EAAK2c,iBAAiB3c,MAEhD,sBAAM0B,KAAN,KACI,2BACI,uBAAM8M,QAAS,WACX,sBAAM9M,KAAN,KACI,wBAAQjC,KAAK,UACL6P,QAAS,kBAAM,EAAKrN,SAAS,CAAC6Z,kBAAmB,EAAKnc,MAAMmc,qBAC/DA,EAAmB,2BAAS,iBAGrC,sBAAMpa,KAAN,KACI,wBAAQjC,KAAK,QAAQ6P,QAAS,kBAAM,EAAKsN,aACjC9D,SAAUgD,GADlB,iBAGJ,sBAAMpa,KAAN,KACI,wBAAQjC,KAAK,UAAUqZ,SAAUgD,EACzBxM,QAAS,kBAAM,EAAKuN,iBAD5B,wB,kCAWnB,IAAD,gBACW1b,KAAKxB,MAAMR,SADtB,IACR,2BAAuC,CACnC,GADmC,QACxBc,GAAK,EAEZ,YADA,IAAMqE,KAAK,oDAAa,GAAG,IAH3B,kCAODnF,EAAWgC,KAAKxB,MAAhBR,QACPA,EAAQgD,KAAK,CACTlC,IAAK,EACLgO,SAAU,qBACVgO,SAAS,IAEb9a,KAAKc,SAAS,CAAC9C,c,2CAGEa,GAAS,IAAD,OACEmB,KAAKxB,MAAzBmc,kBAIP,KAAY5F,2BACR,CACInT,QAAS6Y,GACTja,MAAM,sBAAD,OAAS3B,EAAOiO,UACrBkI,kBAAmB,EACnBC,uBAAwB,IAE5B,SAAAlJ,GACkB,IAAVA,GACA,IAAM0C,MAAM,iCAAZ,yCACa5P,EAAOiO,SADpB,KAEI,CACI,CAACL,KAAM,gBACP,CACIA,KAAM,eACN7L,QAAS,kBAAM,EAAK+a,aAAa9c,Y,mCAOhDA,GAAS,IACXb,EAAWgC,KAAKxB,MAAhBR,QACD4d,EAAa,GACnB,IAAK,IAAI/U,KAAK7I,EACV,GAAKA,EAAQyF,eAAeoD,GAA5B,CAGA,IAAM6O,EAAI1X,EAAQ6I,GACd6O,EAAE5W,KAAOD,EAAOC,IAGpB8c,EAAW5a,KAAK0U,GAEpB1V,KAAKc,SAAS,CAAC9C,QAAS4d,M,qCAGZ,IAAD,SACLC,EAAY7b,KAAKxB,MAAMR,QAAQyN,KAAI,SAAA0P,GAAC,OAAIA,EAAErc,MADrC,cAEI+c,GAFJ,IAEX,2BAA0B,CACtB,GADsB,SACZ,EAEN,YADA,IAAM1Y,KAAK,2BAA4B,GAAG,IAJvC,8BAQX,IAAM+D,EAAOlH,KAAKxB,MAAM0I,KACxB,IAAMuH,MAAM,uBAAwB,qCAAsC,CAAC,CAAChC,KAAM,UAAW,CACzFA,KAAM,QACN7L,QAAS,YxBzMO,SAACib,EAAWpD,GACpC,OAAO9W,EAAQ,CACXmB,IAAK,kCACLC,OAAQ,OACRrE,KAAM,CACFmd,YACApD,awBoMIqD,CAAaD,EAAW3U,EAAKpI,IAAIsD,MAAK,SAAAC,GAClC,IAAMc,KAAK,kBAD8B,MAElCnF,EAAW,EAAKQ,MAAhBR,QAFkC,cAG3BA,GAH2B,IAGzC,2BAAuB,SACjB8c,SAAU,GAJyB,8BAMzC,EAAKha,SAAS,CAAC9C,uB,GA5NFmD,aAmOlBE,eAAQ,MA3OC,SAACiC,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIsD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBAwOzB/B,CAA+BqZ,IClL/BqB,G,kDA5DX,WAAYjc,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACTR,QAAS,IAHE,E,gEAQfgC,KAAKgc,Y,gCAGE,IAAD,OzBgCHra,EAAQ,CACXmB,IAAK,wBACLC,OAAQ,QyBjCEX,MAAK,SAAAC,GACX,IAAMrE,EAAUqE,EAAIqB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEK,QAAUJ,EAAEI,WACjD,EAAKlD,SAAS,CAAC9C,iB,+BAIb,IAAD,OACEA,EAAWgC,KAAKxB,MAAhBR,QACP,OACI,yBAAKiC,UAAU,YACX,uBAAM2M,aAAc,iBAAM,gBAElB5O,EAAQyN,KAAI,SAAA5M,GAAM,OACd,sBAAM0B,KAAN,CAAWiD,IAAK3E,EAAOC,IAClB,EAAK0c,iBAAiB3c,QAKvC,2BACI,wBAAQsP,QAAS,kBAAM,EAAK6N,WAAW1d,KAAK,WAA5C,oB,uCAMCO,GAAS,IAAD,OACdqI,EAAoBrI,EAApBqI,KAAM/H,EAAcN,EAAdM,WACb,OAAQ,yBAAKgP,QAAS,kBAAM,EAAK8N,cAAcpd,KAAvC,0BACKA,EAAOC,GADZ,YACyBD,EAAOmF,QADhC,sBAEIkD,GAAQA,EAAKpI,GAFjB,OAEyBoI,GAAQA,EAAKrD,OAFtC,sBAGI1E,GAAcA,EAAWL,GAH7B,IAGkCK,GAAcA,EAAWyK,OAH3D,O,oCAOE/K,GAAS,IACZM,EAAoBN,EAApBM,WAAY+H,EAAQrI,EAARqI,KACnBrI,EAAOqI,KAAO,KACdrI,EAAOM,WAAa,KACpB,IAAM+c,EAAQ,uBAAMtP,aAAc,iBAAM,uBACpC,wBAAcrI,MAAOxF,KAAKE,UAAUJ,GAASqb,YAAU,IACvD,wBAAc3V,MAAOxF,KAAKE,UAAUE,GAAa+a,YAAU,IAC3D,wBAAc3V,MAAOxF,KAAKE,UAAUiI,GAAOgT,YAAU,KAEzD,IAAMzL,MAAM,SAAUyN,O,GAzDP/a,aCoBjBgb,GAAuB,CACzBC,EAAG,kBACHlW,EAAG,YACHC,EAAG,YACHqB,EAAG,aAGD6U,GAAmB,CACrB,CACIrF,MAAOmF,GAAqB,GAC5B5X,MAAO,EACPf,IAAK,GAET,CACIwT,MAAOmF,GAAqB,GAC5B5X,MAAO,EACPf,IAAK,GAET,CACIwT,MAAOmF,GAAqB,GAC5B5X,MAAO,EACPf,IAAK,GAET,CACIwT,MAAOmF,GAAqB,GAC5B5X,MAAO,EACPf,IAAK,IAIP8Y,GAAyB,SAAA9d,IpBeK,SAAAA,GAChC,OAAOmD,EAAQ,CACXmB,IAAK,8BACLC,OAAQ,OACRrE,KAAM,CACF6d,mBAAoB/d,MoBnB5Bge,CAAqBhe,GAAO4D,MAAK,WAC7B,IAAMe,KAAN,sBAAgB3E,EAAQ,eAAO,eAA/B,sBAA0C,GAAG,OAI/Cie,G,kDACF,WAAY3c,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACTke,YAAa,CACTC,OAAQ,IAEZC,eAAgB,GAChBC,iBAAkB,EAClBC,qBAAsB,IARX,E,gEAaf9c,KAAKF,MAAMsD,SAAS,4BACpBpD,KAAK+c,qBACL/c,KAAKgd,2B,+CAGiB,IAAD,OzB1DlBrb,EAAQ,CACXmB,IAAK,uCACLC,OAAQ,QyByDeX,MAAK,SAAAC,GAAQ,IACzBkC,EAASlC,EAATkC,MACD0Y,EAAQjY,SAAST,GACvB,EAAKzD,SAAS,CACVgc,qBAAsBX,GAAqBc,GAC3CJ,gBAAiBI,S,2CAKP,IAAD,OCvFdtb,EAAQ,CACXmB,IAAK,eACLC,OAAQ,QDsFWX,MAAK,SAAAC,GACpB,EAAKvB,SAAS,CACV4b,YAAara,S,8CAKA,IAAD,OCjFjBV,EAAQ,CACXmB,IAAK,qBACLC,OAAQ,QDgFcX,MAAK,SAAAC,GACvB,EAAKvB,SAAS,CAAC8b,eAAgBva,S,mDAKnC,IAAM6a,UAAU,CACZ,CACIzQ,KAAM,2BAAQ7L,QAAS,WACnB0b,IAAuB,KAG/B,CACI7P,KAAM,2BAAQ7L,QAAS,WACnB0b,IAAuB,S,+BAM7B,IAvGiBha,EAuGlB,SACwEtC,KAAKxB,MAA3Eke,EADF,EACEA,YAAaE,EADf,EACeA,eAAgBC,EAD/B,EAC+BA,gBAAiBC,EADhD,EACgDA,qBAC9CH,EAAUD,EAAVC,OACP,OACI,yBAAK1c,UAAU,gBACX,uBAAM2M,aAAc,iBAAM,0BACtB,sBAAMrM,KAAN,CAAWsM,OA7GAvK,EA6G8Bqa,EAAOxd,WA5G5DmD,EACQ,0BAAM0R,MAAO,CAACmJ,MAAO,YAArB,aAEA,0BAAMnJ,MAAO,CAACmJ,MAAO,YAArB,kBAyGI,4BAGA,sBAAM5c,KAAN,CAAWsM,MAAO8P,EAAOS,IAAzB,kBAGA,sBAAM7c,KAAN,CAAWsM,MAAO8P,EAAOzE,MAAzB,gBAGA,sBAAM3X,KAAN,CAAWmU,MAAM,aACNvG,QAAS,kBAAM,EAAKrO,MAAMiB,QAAQC,KAAK,CAACC,SAAU,2BAD7D,4BAIA,sBAAMV,KAAN,KACI,uBAAM8M,QAAQ,WACV,sBAAM9M,KAAN,KACI,wBAAQjC,KAAK,UAAU6P,QAAS,kBAAM,EAAKkP,iBAA3C,6BAEJ,sBAAM9c,KAAN,KACI,wBAAQjC,KAAK,UAAU6P,QAAS,kBAAM,EAAK4O,uBAA3C,oBAKhB,uBAAMnQ,aAAc,iBAAM,mCACtB,sBAAMrM,KAAN,CAAWmU,MAAM,aACNvG,QAAS,kBAAM,EAAKrO,MAAMiB,QAAQC,KAAK,CAACC,SAAU,8BAD7D,kCAIA,wBAAQvC,KAAM2d,GACN5E,KAAM,EACNjX,MAAM,uCACN+D,MAAOsY,EACPhR,SAAU,SAAAtH,GACN,EAAK+Y,mBAAmB/Y,KAEhC,wBAAWA,MAAOuY,GAAlB,mCAEJ,sBAAMvc,KAAN,CAAWsM,MAAM,iBACNsB,QAAS,kBAAM,EAAKoP,+BAD/B,4BAIA,sBAAMhd,KAAN,CAAWsM,MAAM,mDACNsB,QAAS,kBAAM,EAAKqP,sBAD/B,4BAIA,sBAAMjd,KAAN,CAAWsM,MAAM,2DACNsB,QAAS,kBAAM,EAAKsP,6BAD/B,+BAKJ,uBAAM7Q,aAAc,iBAAM,mCACrBgQ,EAAenR,KAAI,SAAAiS,GAAS,OAAK,sBAAMnd,KAAN,CAAWiD,IAAKka,GAAYA,MAC9D,sBAAMnd,KAAN,KACI,2BACI,sBAAMA,KAAN,KACI,wBAAQjC,KAAK,UAAU6P,QAAS,kBAAM,EAAKwP,uBAA3C,mCAEJ,sBAAMpd,KAAN,KACI,wBAAQjC,KAAK,UACL6P,QAAS,kBAAM,EAAKyP,0BAD5B,6B,iDAWxB,IAAMnP,MAAM,6BAAU,6EAAkB,CACpC,CAAChC,KAAM,gBACP,CACIA,KAAM,eAAM7L,QAAS,W1BtH1Be,EAAQ,CACXmB,IAAK,+BACLC,OAAQ,S0BqHuBX,MAAK,SAAAC,GACpB,IAAMc,KAAK,yFAAqBd,EAAK,GAAG,Y,0CAQxD,IAAMoM,MAAM,2BAAQ,gEAAe,CAC/B,CAAChC,KAAM,gBACP,CACIA,KAAM,eAAM7L,QAAS,WACjBoC,IAAgBZ,MAAK,WACjB,IAAMe,KAAK,uCAAU,GAAG,Y,yCAOzBoB,GAAQ,IAAD,QzBjMO,SAAAA,GACjC,OAAO5C,EAAQ,CACXmB,IAAK,uCACLC,OAAQ,OACRrE,KAAM,CACF6F,MAAOA,MyB6LXsZ,CAAsBtZ,EAAM,IAAInC,MAAK,WACjC,IAAMe,KAAK,yGAAqB,GAAG,GACnC,EAAK6Z,8B,qCAKT,IAAMvO,MAAM,2BAAQ,wFAAmB,CAAC,CAAChC,KAAM,gBAAO,CAClDA,KAAM,eAAM7L,QADsC,WC1NnDe,EAAQ,CACXmB,IAAK,6BACLC,OAAQ,SD0NgBX,MAAK,WACjB,IAAMe,KAAK,+FAAqB,GAAG,Y,2CAM7B,IAAD,OACjB,IAAMsL,MAAM,uCACR,ySACA,CAAC,CAAChC,KAAM,gBAAO,CAACA,KAAM,eAAM7L,QAAS,kBAAM,EAAKkd,kB,kCChNjDnc,EAAQ,CACXmB,IAAK,wBACLC,OAAQ,SDkNQX,MAAK,WACjB,IAAMqM,MAAM,0BAA2B,4C,GAzLzBtN,aA8LpBwN,GAAYtN,YAAQ,MAhPF,SAACiC,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIsD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBA6OtB/B,CAA+Bob,IAClCrb,eAAWuN,IEtPpBoP,I,OAAoB,SAACC,EAASjS,GAChC,OAAQ,sBAAMxL,KAAN,CAAWiD,IAAKuI,GACpB,wBAAM9L,UAAU,gBACZ,uBAAMoU,OAAN,CAAa7T,MAAOwd,EAAQvf,OAAQoO,MAAOmR,EAAQ1f,OACnD,uBAAMgW,KAAN,KACI,wBAAc/P,MAAOxF,KAAKE,UAAU+e,EAAQtf,MAAOuf,KAAM,KAE7D,uBAAMrJ,OAAN,CAAa3H,QAAS+Q,EAAQE,YA8C3BC,G,kDAxCX,WAAYre,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACT4f,KAAM,IAHK,E,gEAOE,IAAD,OAChBpe,KAAKqe,cACLre,KAAKse,cAAgB9T,aAAY,WAC7B,EAAK6T,gBACN,O,6CAIH/T,cAActK,KAAKse,iB,oCAGR,IAAD,ODZP3c,EAAQ,CACXmB,IAAK,0BACLC,OAAQ,QCWUX,MAAK,SAAAC,GACnB,EAAKvB,SAAS,CACVsd,KAAM/b,S,+BAKR,IACC+b,EAAQpe,KAAKxB,MAAb4f,KACP,OACI,yBAAKne,UAAU,eACX,uBAAM2M,aAAc,iBAAM,iBAElBwR,EAAK3S,IAAIsS,U,GAjCR5c,a,8BCAnBod,I,OAAa,CAAC,iCAAS,eAAM,iBAC7BC,GAAkB,CAAC,6CAAW,mDAAY,6CAAW,mDAAY,gBAEjEC,GAA+B,CACjCrC,EAAG,2BACHlW,EAAG,2BACHC,EAAG,2BACHqB,EAAG,sBA+UQkX,G,kDA3UX,WAAY5e,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACTR,QAAS,GACT2gB,eAAgB,EAChBC,gBAAiB,IALN,E,gEAUf5e,KAAK6e,mB,6CAIL7e,KAAK8e,oC,wDAID9e,KAAK+e,uBACLpO,aAAa3Q,KAAK+e,yB,uCAIR,IAAD,OChDVpd,EAAQ,CACXmB,IAAK,+BACLC,OAAQ,QD+CQX,MAAK,SAAAC,GACjB,IAAM2c,EAAc3c,EAAIqB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE9E,OAAOmF,QAAUJ,EAAE/E,OAAOmF,WACnE,EAAKlD,SAAS,CACV9C,QAASghB,EACTC,qBAAqB,S,6CAKVC,GAAK,IAAD,OE1CpBvd,EAAQ,CACXmB,IAAK,kCACLC,OAAQ,MACRzB,aAAa,IFwCUc,MAAK,SAAAC,GACxB,EAAKvB,SAAS,CAAC8d,gBAAiBvc,IAChC6c,EAAG7c,Q,+CErCJV,EAAQ,CACXmB,IAAK,+BACLC,OAAQ,SFwCeX,MAAK,WACxB,IAAMe,KAAK,iCAAS,GAAG,MAE3BnD,KAAK8e,oC,+BAGC,IAAD,SACmD9e,KAAKxB,MAAtDR,EADF,EACEA,QAASihB,EADX,EACWA,oBAAqBL,EADhC,EACgCA,gBACjCO,EAAyB,EAI7B,YAH8BC,IAA1BR,EAAgBS,YAAmDD,IAA5BR,EAAgBU,SAAmD,IAA1BV,EAAgBS,QAChGF,EAAyBP,EAAgBU,QAAUV,EAAgBS,MAAQ,KAG3E,6BACI,uBAAMzS,aAAc,iBAAM,mBAElB5O,EAAQyN,KAAI,SAAA8T,GAAM,OAAK,sBAAMhf,KAAN,CAAWiD,IAAK+b,EAAO1gB,OAAOC,IAChD,EAAK0gB,iBAAiBD,QAInC,uBAAOjT,QAAS2S,EACTze,MAAM,2BACN+L,aAAW,EACXiF,cAAc,EACd7E,QAAS,kBAAM,EAAK8S,+BACpBjT,OAAQ,CAAC,CACLC,KAAM,gBACNkL,UAAU,EACV/W,QAAS,WACL,EAAK6e,8BACL,EAAKC,6BAGhB,2BAAIjB,GAA6BG,EAAgBpgB,QACjD,2BAAI2gB,EAAuBnZ,QAAQ,GAAnC,KACA,wBAAU2Z,QAASR,EAAwBS,SAAS,YAExD,kBAAC,GAAD,CAAa1L,SAAS,WAAW/F,QAAS,kBAAM,EAAK0R,uB,4CAK3CC,GAAU,IACrBjhB,EAAUihB,EAAVjhB,OACAC,EAAgBD,EAAhBC,GAAIihB,EAAYlhB,EAAZkhB,SACL9S,EAAW,yEAAY8S,EAAZ,8BACjB,IAAMtR,MAAN,mCAAoB5P,EAAOmF,QAA3B,6BAA2CiJ,EAAS,CAChD,CACIR,KAAM,eAAM7L,QAAS,Y7B7CG,SAAA9B,GACpC,OAAO6C,EAAQ,CACXmB,IAAI,eAAD,OAAiBhE,EAAjB,6BACHiE,OAAQ,U6B2CIid,CAAyBlhB,GAAIsD,MAAK,SAAAC,GAC9B,IAAMc,KAAN,UAAcd,EAAI2B,QAAlB,6BAAkC,GAAG,QAIjD,CAACyI,KAAM,oB,4CAIOqT,GAAU,IACrBjhB,EAAUihB,EAAVjhB,OACAC,EAA0BD,EAA1BC,GAAIgO,EAAsBjO,EAAtBiO,SAAUmT,EAAYphB,EAAZohB,SACfhT,EAAW,8CAAUH,EAAV,IAAoB,6BAApB,mBAAgCmT,EAAhC,IAA0C,6BAA1C,6DACjB,IAAMxR,MAAN,6BAAmB5P,EAAOmF,QAA1B,6BAA0CiJ,EAAS,CAC/C,CACIR,KAAM,mCAAW7L,QAAS,Y7BzEF,SAAA9B,GACpC,OAAO6C,EAAQ,CACXmB,IAAI,eAAD,OAAiBhE,EAAjB,6BACHiE,OAAQ,U6BuEImd,CAAyBphB,GAAIsD,MAAK,SAAAC,GAC9B,IAAMc,KAAN,UAAcd,EAAI2B,QAAlB,6BAAkC,GAAG,QAIjD,CACIyI,KAAM,mCAAW7L,QAAS,Y7B1EU,SAAA9B,GAChD,OAAO6C,EAAQ,CACXmB,IAAI,eAAD,OAAiBhE,EAAjB,4CACHiE,OAAQ,U6BwEIod,CAAqCrhB,GAAIsD,MAAK,SAAAC,GAC1C,IAAMc,KAAN,UAAcd,EAAI2B,QAAlB,6BAAkC,GAAG,QAIjD,CAACyI,KAAM,oB,kCAIHqT,GAAU,IAAD,OACjB,KAAY/K,2BAA2B,CACnCnT,QAAS4c,GACThe,MAAO,2BACPwU,kBAAmBwJ,GAAgB5X,OAAS,IAC7C,SAAAmF,GACC,OAAQA,GACJ,KAAK,EACD,EAAKqU,gBAAgBN,GACrB,MACJ,KAAK,EACD,EAAKO,sBAAsBP,GAC3B,MACJ,KAAK,EACD,EAAKQ,sBAAsBR,GAC3B,MACJ,KAAK,EACD,EAAKS,sBAAsBT,S,sCAQ3BA,GAAU,IAAD,OACdjhB,EAA0BihB,EAA1BjhB,OAAQ2hB,EAAkBV,EAAlBU,eACTnB,EAAQmB,EAAeC,aAAeD,EAAeE,YACrDC,EAAuB,IAAVtB,EAAc,EAAMmB,EAAeE,YAAcrB,EAChE7e,EAAQ,GACRyM,EAAU,GACV2T,GAAO,EACLC,GAA+B,IAAbF,GAAkB3a,QAAQ,GAClD,GAAI2a,EArKM,GAqKkB,CACxB,IAAMG,EAAU,IAAkB9a,QAAQ,GAC1CxF,EAAQ,6CACRyM,EAAO,4BAASpO,EAAOmF,QAAhB,qDAAiC6c,EAAjC,0CAAwDC,EAAxD,uEACPF,GAAO,OAEPpgB,EAAQ,2BACRyM,EAAO,sBAAQpO,EAAOmF,QAAf,2DAAiC6c,EAAjC,0FACPD,GAAO,EAEX,IAAMnS,MAAMjO,EAAOyM,EAAS,CACxB,CACIR,KAAMmU,EAAO,2BAAS,eACtBhgB,QAAS,WACL,EAAKmgB,kBAAkBliB,KAG/B,CACI4N,KAAM,gC,4CAKIqT,GAAU,IAAD,OACpBjhB,EAA0BihB,EAA1BjhB,OAAQ2hB,EAAkBV,EAAlBU,eACTnB,EAAQmB,EAAeQ,cAAgBR,EAAeS,aACtDN,EAAuB,IAAVtB,EAAc,EAAMmB,EAAeS,aAAe5B,EACjE7e,EAAQ,GACRyM,EAAU,GACV2T,GAAO,EACLC,GAA+B,IAAbF,GAAkB3a,QAAQ,GAClD,GAAI2a,EApMM,GAoMkB,CACxB,IAAMG,EAAU,IAAkB9a,QAAQ,GAC1CxF,EAAQ,6CACRyM,EAAO,wCAAWpO,EAAOmF,QAAlB,qDAAmC6c,EAAnC,0CAA0DC,EAA1D,uEACPF,GAAO,OAEPpgB,EAAQ,2BACRyM,EAAO,kCAAUpO,EAAOmF,QAAjB,2DAAmC6c,EAAnC,0FACPD,GAAO,EAEX,IAAMnS,MAAMjO,EAAOyM,EAAS,CACxB,CACIR,KAAMmU,EAAO,2BAAS,eACtBhgB,QAAS,WACL,EAAKsgB,wBAAwBriB,KAGrC,CACI4N,KAAM,gC,wCAKA5N,GAAS,IE5OMF,EF4OP,OACtBqB,KAAK8e,mCE7OwBngB,EF8OPE,EAAOC,GE7O1B6C,EAAQ,CACXmB,IAAI,iBAAD,OAAmBnE,EAAnB,aACHoE,OAAQ,OACRzB,aAAa,KF0OoBc,MAAK,WAClC,IAAMe,KAAK,iCAAS,GAAG,GACvB,EAAK2b,qCAET9e,KAAKif,sBACLjf,KAAKmhB,uBAAuBnhB,KAAKohB,8B,8CAGbviB,GAAS,IE9OAF,EF8OD,OAC5BqB,KAAK8e,mCE/OwBngB,EFgPPE,EAAOC,GE/O1B6C,EAAQ,CACXmB,IAAI,iBAAD,OAAmBnE,EAAnB,oBACHoE,OAAQ,OACRzB,aAAa,KF4OoBc,MAAK,WAClC,IAAMe,KAAK,iCAAS,GAAG,GACvB,EAAK2b,qCAET9e,KAAKif,sBACLjf,KAAKmhB,uBAAuBnhB,KAAKohB,8B,iDAGT,IAAD,OACvB,OAAO,WACH,EAAKrC,sBAAwBvQ,YAAW,WACpC,EAAK2S,uBAAuB,EAAKC,8BAClC,Q,4CAKPphB,KAAKc,SAAS,CAACme,qBAAqB,M,oDAIpCjf,KAAKc,SAAS,CAACme,qBAAqB,M,uCAGvBa,GAAU,IAAD,OACfjhB,EAA0BihB,EAA1BjhB,OAAQ2hB,EAAkBV,EAAlBU,eACTa,EAAU,qBAAiBxiB,EAAOyiB,eAClCjC,EAAQmB,EAAeC,aAAeD,EAAeE,YACrDa,EAAwB,IAAVlC,EAAc,GAAMmB,EAAeC,aAAepB,EAAS,KAAKrZ,QAAQ,GACtF2a,EAAuB,IAAVtB,EAAc,GAAMmB,EAAeE,YAAcrB,EAAS,KAAKrZ,QAAQ,GAEpFgb,EAAgBR,EAAeQ,cAC/BC,EAAeT,EAAeS,aAC9BO,EAAcP,EAAeD,EAC7BS,EAAoC,IAAhBD,EAAoB,GAAMR,EAAgBQ,EAAe,KAAKxb,QAAQ,GAC1F0b,EAAoC,IAAhBF,EAAoB,GAAMP,EAAeO,EAAe,KAAKxb,QAAQ,GACzF2b,EAAuBnB,EAAemB,qBAC5C,OAAQ,wBAAMne,IAAK3E,EAAOC,GAAIqP,QAAS,kBAAM,EAAK2B,YAAYgQ,KAC1D,uBAAMzL,OAAN,CAAa7T,MAAO3B,EAAOmF,QAAS6I,MAAOhO,EAAOiO,WAClD,uBAAMwH,KAAN,CAAWrU,UAAU,2BACjB,2BACI,sBAAMM,KAAN,KACI,yBAAKN,UAAU,SACX,uBAAGA,UAAU,SAAb,WACA,uBAAGA,UAAU,SAASugB,EAAeC,aAArC,IAAoDc,EAApD,KACA,uBAAGthB,UAAU,SAAb,kBACA,uBAAGA,UAAU,SAAS+gB,EAAtB,IAAsCS,EAAtC,OAGR,sBAAMlhB,KAAN,KACI,yBAAKN,UAAU,SACX,uBAAGA,UAAU,SAAb,UACA,uBAAGA,UAAU,SAASugB,EAAeE,YAArC,IAAmDC,EAAnD,KACA,uBAAG1gB,UAAU,SAAb,iBACA,uBAAGA,UAAU,SAASghB,EAAtB,IAAqCS,EAArC,OAGR,sBAAMnhB,KAAN,KACI,yBAAKN,UAAU,YACX,uBAAGA,UAAU,SAAb,YACA,uBAAGA,UAAU,SAASugB,EAAeoB,gBACrC,uBAAG3hB,UAAU,SAAb,mBACA,uBAAGA,UAAU,SAAS0hB,OAKtC,uBAAM/M,OAAN,CAAa3H,QAASoU,O,uCAIZ,IAAD,OACb,KAAYtM,2BAA2B,CACnCnT,QAAS2c,GACT/d,MAAO,aACPwU,kBAAmBuJ,GAAW3X,OAAS,EACvCqO,uBAAwB,IACzB,SAAAlJ,GACC,OAAQA,GACJ,KAAK,EAED,EAAK8V,0BACL,MACJ,KAAK,EACD,EAAKhD,uB,gDAWM,IAAD,OACtB,IAAMpQ,MAAM,iBAAkB,iBAAkB,CAC5C,CAAChC,KAAM,UACP,CAACA,KAAM,MAAO7L,QAAS,kBAAM,EAAKkhB,uB,uCCjVnCngB,EAAQ,CACXmB,IAAK,qCACLC,OAAQ,SDoVOX,MAAK,WAChB,IAAMe,KAAK,iBAAkB,GAAG,U,GAvUhBhC,aGbtBod,GAAa,CAAC,eAAM,gBAEpBwD,G,kDACF,WAAYjiB,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACTK,OAAQ,GACRqI,KAAM,GACN8a,aAAc,IALH,E,gEAUfhiB,KAAKF,MAAMsD,SAAS,8CACpBpD,KAAKF,MAAMoD,gBAAe,GAC1B,IAAMc,EAAUhE,KAAKF,MAAMgF,MAAM4T,OAAO1U,QACxChE,KAAKiiB,cAAcje,K,oCAGTA,GAAU,IAAD,QLKC,SAAAA,GACxB,OAAOrC,EAAQ,CACXmB,IAAI,eAAD,OAAiBkB,EAAjB,aACHjB,OAAQ,SKPRif,CAAahe,GAAS5B,MAAK,SAAAC,GAAQ,IACxB6E,EAAgB7E,EAAhB6E,KAAMrI,EAAUwD,EAAVxD,cACNwD,EAAI6E,YACJ7E,EAAIxD,OACX,IAAM6Z,EAAS,GACf,IAAK,IAAIva,KAAQkE,EACRA,EAAIoB,eAAetF,IAGxBua,EAAO1X,KAAK,CACR7C,KAAMA,EACNoG,MAAOlC,EAAIlE,KAGnB,EAAK2C,SAAS,CACVjC,OAAQA,EACRqI,KAAMA,EACN8a,aAActJ,S,+BAKhB,IAAD,SACgC1Y,KAAKxB,MAAnCK,EADF,EACEA,OAAQqI,EADV,EACUA,KAAM8a,EADhB,EACgBA,aACrB,OACI,yBAAK/hB,UAAU,kBACX,uBAAM2M,aAAc,iBAAM,+CACtB,sBAAMrM,KAAN,CAAWsM,MAAOhO,EAAOiO,UAAzB,sBACA,sBAAMvM,KAAN,CAAWsM,MAAOhO,EAAOD,UAAY,MAAQ,MAA7C,4BACA,sBAAM2B,KAAN,CAAWsM,MAAOhO,EAAOmF,SAAzB,gBACA,sBAAMzD,KAAN,CAAWsM,MAAOhO,EAAOyiB,eAAzB,4BACA,sBAAM/gB,KAAN,CAAWsM,MAAO3F,EAAKrD,QAAvB,kCACA,sBAAMtD,KAAN,CAAWsM,MAAO3F,EAAK2R,QAAvB,mBACA,sBAAMtY,KAAN,CAAWsM,MAAO3F,EAAKgG,SAAvB,mBACA,sBAAM3M,KAAN,CAAWsM,MAAO3F,EAAK4R,cAAvB,mBACA,sBAAMvY,KAAN,CAAWsM,MAAO3F,EAAKwB,OAAvB,cAEJ,uBAAMkE,aAAc,iBAAM,+CAElBoV,EAAavW,KAAI,SAAAyW,GAAK,OAClB,sBAAM3hB,KAAN,CAAWiD,IAAK0e,EAAM/jB,KAAM0O,MAAO9N,KAAKE,UAAUijB,EAAM3d,QACnD2d,EAAM/jB,UAIvB,kBAAC,GAAD,CAAa+V,SAAS,WAAW/F,QAAS,kBAAM,EAAK0R,uB,uCAK/C,IAAD,OACb,KAAY9K,2BAA2B,CACnCnT,QAAS2c,GACT/d,MAAO,2BACPwU,kBAAmBuJ,GAAW3X,OAAS,EACvCqO,uBAAwB,IACzB,SAAAlJ,GACC,OAAQA,GACJ,KAAK,EACD,EAAKkW,cAAc,EAAKniB,MAAMgF,MAAM4T,OAAO1U,iB,GA7EnC7C,aAyFbE,eAAQ,MAlGC,SAACiC,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIsD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,eAChCF,eAAgB,kBAAaI,EAASJ,EAAc,WAAd,mBA8F/B7B,CAA+B0gB,IC5FxCI,G,kDACF,WAAYriB,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACTR,QAAS,IAHE,E,gEAQfgC,KAAKF,MAAMsD,SAAS,wCACpBpD,KAAK6e,mB,uCAGS,IAAD,OCvBVld,EAAQ,CACXmB,IAAK,kBACLC,OAAQ,QDsBSX,MAAK,SAAAC,GAClB,EAAKvB,SAAS,CACV9C,QAASqE,S,+BAKZxD,GACLmB,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAS,YAAD,OAAcpC,EAAOC,GAArB,kB,+BAIN,IAAD,OACEd,EAAWgC,KAAKxB,MAAhBR,QACP,OACI,yBAAKiC,UAAU,cACX,uBAAM2M,aAAc,iBAAM,yCAElB5O,EAAQyN,KAAI,SAAA5M,GAAM,OACd,sBAAM0B,KAAN,CAAWiD,IAAK3E,EAAOC,GAAI4V,MAAM,aAAavG,QAAS,kBAAM,EAAKiU,SAASvjB,KACtEA,EAAO2M,GADZ,KACkB3M,EAAOmF,QADzB,c,GAlCE7C,aA4CfE,eAAQ,MAnDC,SAACiC,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIsD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBAgDzB/B,CAA+B8gB,I,8BEpDxCE,G,kDAcF,WAAYviB,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,GAFE,E,yDAKN8jB,GACJA,GAAUA,IAAWtiB,KAAKsiB,SAG/BtiB,KAAKsiB,OAASA,EACdtiB,KAAKuiB,OAASC,KAAQC,KAAKziB,KAAKsiB,QAChCtiB,KAAK0iB,mB,sCAGQ,IAAD,IACW1iB,KAAKF,MAArB6iB,EADK,EACLA,MAAOC,EADF,EACEA,MACRC,EAAS,GACTC,EAAQ,GAHF,cAIEF,GAJF,IAIZ,2BAAqB,CAAC,IAAbG,EAAY,QACjBD,EAAM9hB,KAAK+hB,EAAE5kB,MACb0kB,EAAO7hB,KAAP,eACO+hB,EADP,CAEIzkB,KAAM,WARF,8BAWZ,IAAM8a,EAAS,CACX4J,QAAS,CACLC,QAAS,QAEbC,OAAQ,CACJxkB,KAAMokB,GAEVK,MAAO,CACH7kB,KAAM,WACNI,KAAMikB,GAEVS,MAAO,CACH9kB,KAAM,SAEVukB,OAAQA,GAEZ7iB,KAAKuiB,OAAOc,UAAUjK,K,+BAGhB,IAAD,SACmBpZ,KAAKF,MAAtBwjB,EADF,EACEA,MAAOC,EADT,EACSA,OACd,OACI,4BAAQC,IAAK,SAAAlB,GAAM,OAAI,EAAKmB,aAAanB,IACjCriB,UAAU,SACVsjB,OAAQA,EACRD,MAAOA,Q,GAhEFniB,aAAnBkhB,GAOKqB,aAAe,CAClBJ,MAAO,IACPC,OAAQ,IACRZ,MAAO,GACPC,MAAO,IA0DAP,UCzDTsB,G,kDACF,WAAY7jB,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACTK,OAAQ,GACR+kB,SAAU,GACVC,YAAa,GACbC,YAAa,GACbC,YAAa,KAPF,E,6DAWD,IC3BYplB,ED2Bb,QC3BaA,ED4BPqB,KAAKrB,SC3BrBgD,EAAQ,CACXmB,IAAK,sCACLC,OAAQ,MACR2V,OAAQ,CACJ/Z,SAAUA,MDuBoByD,MAAK,SAAAC,GACnC,IAD0C,EACpCsgB,EAAQ,GACRqB,EAAW,GAIXC,EAAc,GACdC,EAAc,GAPsB,cAQ1B7hB,GAR0B,IAQ1C,2BAAqB,CAAC,IAAbmY,EAAY,QAEb2J,EAKA3J,EALA2J,WACAvZ,EAIA4P,EAJA5P,YAGAwZ,EACA5J,EADA4J,eAAgBC,EAChB7J,EADgB6J,eAEdnf,EAAO,IAAIK,KAAK4e,GAChBG,EAAO,UAAMpf,EAAKqf,WAAX,YAAyBrf,EAAKsf,aAA9B,YAA8Ctf,EAAKuf,cAChE9B,EAAM3hB,KAAKsjB,GACXN,EAAShjB,KAAK4J,GAIdqZ,EAAYjjB,KAAKojB,GACjBF,EAAYljB,KAAKqjB,IAxBqB,8BA0B1C,IAAMzB,EAAQ,CACV,CAACzkB,KAAM,eAAMO,KAAMslB,GAGnB,CAAC7lB,KAAM,2BAAQO,KAAMulB,GAAc,CAAC9lB,KAAM,2BAAQO,KAAMwlB,IAE5D,EAAKpjB,SAAS,CACV8iB,SAAUvhB,EACVwhB,YAAalB,EACbmB,YAAalB,IAEjB,EAAKL,OAAOG,qB,0CAIC,IAAD,OACT5jB,EAAMkB,KAAKF,MAAMgF,MAAM4T,OAAvB5Z,GACPkB,KAAKrB,SAAWG,EAChBkB,KAAKF,MAAMsD,SAAS,gEACpBpD,KAAK0kB,iBFlEiB,SAAA5lB,GAC1B,OAAO6C,EAAQ,CACXmB,IAAI,kBAAD,OAAoBhE,GACvBiE,OAAQ,QEgER4hB,CAAe7lB,GAAIsD,MAAK,SAAAC,GACpB,EAAKvB,SAAS,CACVjC,OAAQwD,S,oCAKN3D,GAAO,IACVG,EAAUmB,KAAKxB,MAAfK,OACPmB,KAAKc,SAAS,CACVjC,OAAO,eACAA,EADD,GAECH,O,sCAKE,IACNqlB,EAAe/jB,KAAKxB,MAApBulB,YACAjlB,EAAMkB,KAAKF,MAAMgF,MAAM4T,OAAvB5Z,GACFilB,EAAYjf,MAAM,iBAIvB,IAAM2J,MAAM,iCAAS,qEAAe,CAC5B,CACIhC,KAAM,gBAEV,CACIA,KAAM,eACN7L,QAFJ,YFhFa,SAAC9B,EAAIiS,GAC9B,OAAOpP,EAAQ,CACXmB,IAAI,kBAAD,OAAoBhE,EAApB,2BACHiE,OAAQ,OACRrE,KAAM,CACFkmB,mBAAoB7T,ME8ER8T,CAAc/lB,EAAIilB,GAAa3hB,MAAK,SAAAC,GAChC,IAAMc,KAAK,2BAAQ,GAAG,UAXtC,IAAMA,KAAK,yDAAa,GAAG,K,+BAmBzB,IAAD,SAC6DnD,KAAKxB,MAAhEK,EADF,EACEA,OAAQ+kB,EADV,EACUA,SAAUC,EADpB,EACoBA,YAAaC,EADjC,EACiCA,YAAaC,EAD9C,EAC8CA,YACnD,OACI,yBAAK9jB,UAAU,oBACX,uBAAM2M,aAAc,iBAAM,6BACtB,wBAAWrI,MAAO1F,EAAOulB,eAAgB7J,YAAa,GAC3C1O,SAAU,SAAAY,GAAI,OAAI,EAAKqY,cAAc,CAACV,eAAgB3X,MADjE,yCAEA,wBAAWlI,MAAO1F,EAAOwlB,eAAgB9J,YAAa,GAC3C1O,SAAU,SAAAY,GAAI,OAAI,EAAKqY,cAAc,CAACT,eAAgB5X,MADjE,yCAEA,wBAAWlI,MAAO1F,EAAOkmB,YAAaxK,YAAa,GACxC1O,SAAU,SAAAY,GAAI,OAAI,EAAKqY,cAAc,CAACC,YAAatY,MAD9D,sCAEA,wBAAWlI,MAAO1F,EAAOmmB,YAAazK,YAAa,GACxC1O,SAAU,SAAAY,GAAI,OAAI,EAAKqY,cAAc,CAACE,YAAavY,MAD9D,sCAEA,sBAAMlM,KAAN,KACI,wBAAQjC,KAAK,UAAU6P,QAAS,kBAAM,EAAK8W,gBAA3C,kBAGR,4BACI,uBAAM5Q,OAAN,CACI7T,MAAM,6BACV,uBAAM8T,KAAN,KACI,2BACI,wBAAW/P,MAAOwf,EACPlY,SAAU,SAAAqZ,GAAG,OAAI,EAAKpkB,SAAS,CAACijB,YAAamB,MADxD,kCAEA,sBAAM3kB,KAAN,KACI,wBAAQjC,KAAK,UAAU6P,QAAS,kBAAM,EAAK0W,kBAA3C,oBAKhB,4BACI,uBAAMxQ,OAAN,CAAa7T,MAAM,6BACnB,uBAAM8T,KAAN,KACI,kBAAC,GAAD,CAAYgP,MAAO,IAAKC,OAAQ,IAAKZ,MAAOkB,EAAajB,MAAOkB,EACpDN,IAAK,SAAAjB,GAAM,OAAI,EAAKA,OAASA,MAE7C,uBAAM3N,OAAN,CAAa3H,QAAS2W,EAAShd,UAEnC,uBAAMgG,aAAc,iBAAM,mCAElBgX,EAASnY,KAAI,SAAA+O,GAAG,OAAK,sBAAMja,KAAN,CAAWiD,IAAKgX,EAAI1b,IACrC,2BACI,sBAAMyB,KAAN,KAAYia,EAAI2J,YAChB,sBAAM5jB,KAAN,qBAAeia,EAAI5P,YAAnB,SAAmC/C,GAAkB2S,EAAIzP,kBAAzD,c,oCAUb,IFzJKrM,EEyJN,QFzJMA,EE0JPsB,KAAKxB,MAAMK,OFzJjB8C,EAAQ,CACXmB,IAAI,kBAAD,OAAoBpE,EAAKI,GAAzB,WACHiE,OAAQ,OACRrE,UEsJ4B0D,MAAK,SAAAC,GAC7B,EAAKvB,SAAS,CAACjC,OAAQwD,IACvB,EAAKmb,yB,0CAKT,IAAM/O,MAAM,2BAAQ,6FAAmB,CACnC,CACIhC,KAAM,MAEV,CACIA,KAAM,MACN7L,QAAS,WACLoC,IAAgBZ,MAAK,WACjB,IAAMe,KAAK,uCAAU,GAAG,c,GAxKXhC,aAgLtBE,eAAQ,MAvLC,SAACiC,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIsD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBAoLzB/B,CAA+BsiB,IEpLxCwB,G,kDACF,WAAYrlB,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACT4mB,QAAS,IAHE,E,gEAOE,IAAD,OAChBplB,KAAKF,MAAMsD,SAAS,wCACpBH,IAAoBb,MAAK,SAAAC,GACrB,EAAKvB,SAAS,CACVskB,QAAS/iB,EAAIkC,WAElB9B,OAAM,SAAAC,GACL,IAAMhE,EAAOgE,EAAIhE,KACbA,IAEa,MADEA,EAAR8D,MAEH,EAAK1B,SAAS,CACVskB,QAAS,qD,mCAOf,IrCIaC,EqCHhBD,EAAWplB,KAAKxB,MAAhB4mB,QAEFA,EAAQtgB,MADG,4BrCEOugB,EqCGPD,ErCFbzjB,EAAQ,CACXmB,IAAK,6BACLC,OAAQ,OACRrE,KAAM,CACF6F,MAAO8gB,EACPC,mBAAmB,MqCHEljB,MAAK,SAAAC,GAC1B,IAAMc,KAAK,2BAAQ,GAAG,MAJtB,IAAMsL,MAAM,2BAAQ,2CAAc,CAAC,CAAChC,KAAM,0B,sCAS9CzM,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAU,a,+BAIR,IAAD,OACEmkB,EAAWplB,KAAKxB,MAAhB4mB,QACP,OACI,yBAAKnlB,UAAU,sBACX,4BACI,uBAAMoU,OAAN,CACI7T,MAAM,2BACNqM,MAAM,yCACV,uBAAMyH,KAAN,KACI,2BACI,wBAAc9T,MAAM,2BACN0Z,YAAU,EACV3V,MAAO6gB,EACPvZ,SAAU,SAAAY,GAAI,OAAI,EAAK3L,SAAS,CAACskB,QAAS3Y,OACxD,sBAAMlM,KAAN,KACI,wBAAQjC,KAAK,UAAU6P,QAAS,kBAAM,EAAKoX,eAA3C,oBAKhB,4BACI,uBAAMlR,OAAN,CACI7T,MAAM,6BACV,uBAAM8T,KAAN,KACI,2BACI,sBAAM/T,KAAN,CAAWmU,MAAM,aAAavG,QAAS,kBAAM,EAAKqX,kBAAlD,gD,GAtEGrkB,aAiFhBE,eAAQ,MAxFC,SAACiC,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIsD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBAqFzB/B,CAA+B8jB,ICpC/BpW,M,kDArCX,WAAYjP,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,GAFE,E,gEAKE,IAAD,EACqBwB,KAAKF,MAAnClC,EADS,EACTA,WAAYsF,EADH,EACGA,eACnBtF,GAAW,GACXsF,GAAe,K,+BAIf,OACI,kBAAC,KAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOnD,KAAK,YAAY4O,UAAWwG,GAAasQ,OAAK,IACrD,kBAAC,IAAD,CAAO1lB,KAAK,kBAAkB4O,UAAWwF,GAAesR,OAAK,IAC7D,kBAAC,IAAD,CAAO1lB,KAAK,gBAAgB4O,UAAW2G,GAAamQ,OAAK,IACzD,kBAAC,IAAD,CAAO1lB,KAAK,sBAAsB4O,UAAWsI,GAAmBwO,OAAK,IACrE,kBAAC,IAAD,CAAO1lB,KAAK,2BAA2B4O,UAAW6J,GAAmBiN,OAAK,IAC1E,kBAAC,IAAD,CAAO1lB,KAAK,kBAAkB4O,UAAW0K,GAAeoM,OAAK,IAC7D,kBAAC,IAAD,CAAO1lB,KAAK,wBAAwB4O,UAAWwL,GAAoBsL,OAAK,IACxE,kBAAC,IAAD,CAAO1lB,KAAK,4BAA4B4O,UAAW+L,GAAoB+K,OAAK,IAC5E,kBAAC,IAAD,CAAO1lB,KAAK,oBAAoB4O,UAAWoN,GAAU0J,OAAK,IAC1D,kBAAC,IAAD,CAAO1lB,KAAK,wBAAwB4O,UAAW8N,GAAagJ,OAAK,IACjE,kBAAC,IAAD,CAAO1lB,KAAK,uBAAuB4O,UAAWwP,GAAYsH,OAAK,IAC/D,kBAAC,IAAD,CAAO1lB,KAAK,0BAA0B4O,UAAW+P,GAAe+G,OAAK,IACrE,kBAAC,IAAD,CAAO1lB,KAAK,qBAAqB4O,UAAWwT,GAAiBsD,OAAK,IAClE,kBAAC,IAAD,CAAO1lB,KAAK,mCAAmC4O,UAAWoT,GAAe0D,OAAK,IAC9E,kBAAC,IAAD,CAAO1lB,KAAK,yBAAyB4O,UAAWgV,GAAwB8B,OAAK,IAC7E,kBAAC,IAAD,CAAO1lB,KAAK,yBAAyB4O,UAAWwW,GAAkBM,OAAK,U,GA/BrEtkB,cCPhBukB,I,0DACF,WAAY5lB,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,GACb,EAAKsB,MAAMsD,SAAS,4BAHL,E,qDAOf,OACI,yBAAKnD,UAAU,WACX,uBAAM2M,aAAc,iBAAM,iBACtB,8CACA,4CACA,sBAAMrM,KAAN,KACI,wBAAQjC,KAAK,WAAb,qB,0CAQhB,IAAMqnB,KAAK,qBAAO,EAAG,MAAM,O,GAtBbxkB,cA0BPE,eAAQ,MAjCC,SAACiC,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIsD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBA8BzB/B,CAA+BqkB,IC3BxCE,G,kDACF,WAAY9lB,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,GACb,EAAKsB,MAAMsD,SAAS,QAHL,E,qDAOf,OACI,kBAAC,GAAD,U,GATOjC,aAeJE,eAAQ,MAtBC,SAACiC,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIsD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBAmBzB/B,CAA+BukB,I,8DCdxCC,I,0DACF,WAAY/lB,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACTsnB,YAAY,GAHD,E,gEAQf9lB,KAAKF,MAAMsD,SAAS,W,+BAGd,IAAD,OACL,OACI,yBAAKnD,UAAU,SACX,6BACA,2BACI,wBACI8lB,UAAU,EACVC,UAAQ,EACR/lB,UAAU,kBAEV,yBAAKA,UAAU,eAAe+T,MAAO,CAACiS,gBAAiB,YACnD,yBAAKhmB,UAAU,SAAf,6EAIJ,yBAAKA,UAAU,eAAe+T,MAAO,CAACiS,gBAAiB,YACnD,yBAAKhmB,UAAU,SAAf,kBAMZ,uBAAWA,UAAU,WACjB,wBAAIA,UAAU,SAAd,4BACA,yBAAKA,UAAU,QACX,47BAGA,kvCAIA,o2BAKR,uBAAM2M,aAAa,eACf,sBAAMrM,KAAN,CAAWmU,MAAM,aAAavG,QAAS,WACnC,EAAKrO,MAAMiB,QAAQC,KAAK,CAACC,SAAU,WADvC,uB,GAlDAE,cA6DLE,eAAQ,MApEC,SAACiC,EAAUxD,GAC/B,OAAO,eACAA,EADP,CAEIsD,SAAU,kBAAaE,EAASF,EAAQ,WAAR,mBAiEzB/B,CAA+BwkB,ICjExCK,I,QAAI,KAiIKC,G,kDAzHX,WAAYrmB,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACToL,OAAQ,CACJwc,EAAG,IACHrD,EAAG,KAEPzD,QAAS,CACL8G,EAAG,IACHrD,EAAG,MAGX,EAAKsD,KAAO,EACZ,EAAKC,WAAa,EAClB,EAAKC,KAAO,EACZ,EAAKC,WAAa,EAfH,E,gEAkBE,IAAD,OAChBxmB,KAAKyQ,OAASjG,aAAY,WACtB,EAAKic,YACN,M,6CAIHnc,cAActK,KAAKyQ,U,+BAGb,IAAD,SACqBzQ,KAAKxB,MAAxBoL,EADF,EACEA,OAAQ0V,EADV,EACUA,QACf,OACI,yBAAKrf,UAAU,OACX,yBAAKA,UAAU,WACX,uBAAM2M,aAAc,iBAAM,WACtB,sBAAMrM,KAAN,CAAWsM,MA5CzB,IA4Cc,KACA,sBAAMtM,KAAN,CAAWsM,MAAOqZ,IAAlB,KACA,sBAAM3lB,KAAN,CAAWsM,MA1CzB,IA0Cc,KACA,sBAAMtM,KAAN,CAAWsM,MAAK,UAAKyS,EAAQ8G,EAAb,YAAkB9G,EAAQyD,IAA1C,WACA,sBAAMxiB,KAAN,CAAWsM,MAAK,UAAKjD,EAAOwc,EAAZ,YAAiBxc,EAAOmZ,IAAxC,WAEJ,4BAAQS,IAAK,SAAAlB,GAAM,OAAI,EAAKmB,aAAanB,IAASgB,MA5ClD,IA4CsEC,OA5ClD,KA4CpB,uBAIJ,yBAAKtjB,UAAU,SAAf,W,mCAKCqiB,GAAS,IAAD,OACZA,GAGDtiB,KAAKsiB,SAAWA,IAGpBtiB,KAAKsiB,OAASA,EACdA,EAAOoE,QAAU,SAAA/c,GAAM,IACZgd,EAAoBhd,EAApBgd,QAASC,EAAWjd,EAAXid,QAChB,EAAKC,cAAcF,EAASC,IAEhC5mB,KAAK8mB,cAAgBxE,EAAOyE,WAAW,MACvC/mB,KAAKgnB,iB,oCAGKZ,EAAGrD,GACb/iB,KAAKqmB,KAAO,EACZrmB,KAAKumB,KAAO,EACZvmB,KAAKc,SAAS,CACV8I,OAAQ,CACJwc,EAAGA,EACHrD,EAAGA,KAGX/iB,KAAKgnB,gB,oCAGM,IAAD,EACgBhnB,KAAKxB,MAAxBoL,EADG,EACHA,OAAQ0V,EADL,EACKA,QACftf,KAAK8mB,cAAcG,UAAU,EAAG,EAnFpB,IAAoB,KAoFhCjnB,KAAK8mB,cAAcI,UA5FP,UA6FZlnB,KAAK8mB,cAAcK,SAASvd,EAAOwc,EAAGxc,EAAOmZ,EApFnC,KAqFV/iB,KAAK8mB,cAAcI,UA/FN,UAgGblnB,KAAK8mB,cAAcK,SAAS7H,EAAQ8G,EAAG9G,EAAQyD,EAtFrC,O,gCAyFH,IAAD,EACoB/iB,KAAKxB,MAAxBoL,EADD,EACCA,OAAQ0V,EADT,EACSA,QAET8H,GAAUxd,EAAOwc,EAAI9G,EAAQ8G,GAAK,GACxCpmB,KAAKqmB,MAAQe,EACb,IAAMC,GAAeD,EAASpnB,KAAKsmB,YAAc,GACjDtmB,KAAKsmB,WAAac,EAElB,IAAIE,EAAOhI,EAAQ8G,GAxGjB,GAwG0BgB,EAASlB,GAAIlmB,KAAKqmB,KApG5C,GAoGuDgB,GACzDC,EAAOC,KAAKniB,IAAIkiB,EAAME,KACtBF,EAAOC,KAAKE,IAAIH,EAAM,GACtBA,EAAOtiB,SAASsiB,GAEhB,IAAMI,GAAU9d,EAAOmZ,EAAIzD,EAAQyD,GAAK,GACxC/iB,KAAKumB,MAAQmB,EACb,IAAMC,GAAeD,EAAS1nB,KAAKwmB,YAAc,GACjDxmB,KAAKwmB,WAAakB,EAElB,IAAIE,EAAOtI,EAAQyD,GAlHjB,GAkH0B2E,EAASxB,GAAIlmB,KAAKumB,KA9G5C,GA8GuDoB,GACzDC,EAAOL,KAAKniB,IAAIwiB,EAAMC,KACtBD,EAAOL,KAAKE,IAAIG,EAAM,GACtBA,EAAO5iB,SAAS4iB,GACZtI,EAAQ8G,IAAMkB,GAAQhI,EAAQyD,IAAM6E,IAGxC5nB,KAAKc,SAAS,CACVwe,QAAS,CACL8G,EAAGkB,EACHvE,EAAG6E,KAGX5nB,KAAKgnB,mB,GAtHc7lB,aC4BZ2mB,I,0DArCX,WAAYhoB,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACT4mB,SAAS,GAHE,E,gEAOE,IAAD,OAChBniB,IAAoBb,MAAK,SAAAC,GACrB,EAAKvB,SAAS,CACVskB,QAAS/iB,EAAIkC,a,oCAKV,IACJ6gB,EAAWplB,KAAKxB,MAAhB4mB,QACP,OAAIA,EACQ,4BAAQ5kB,MAAM,QAAQunB,IAAK3C,GAA3B,UAEA,uBAAW1kB,KAAM,kBAACwS,GAAA,EAAD,OAAjB,gD,+BAOZ,OACI,yBAAKjT,UAAU,SAEPD,KAAKgoB,mB,GA/BD7mB,cCclB8mB,I,0DACF,WAAYnoB,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,GAFE,E,qDAMf,OACI,yBAAKyB,UAAU,cAEPD,KAAKF,MAAMlC,WAAa,yBAAKqC,UAAU,eAAiB,KAE5D,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOF,KAAK,aAAa4O,UAAW/F,GAAW6c,OAAK,IACpD,kBAAC,IAAD,CAAO1lB,KAAK,IAAI4O,UAAWuZ,GAAezC,OAAK,IAC/C,kBAAC,IAAD,CAAO1lB,KAAK,aAAa4O,UAAWwZ,GAAS1C,OAAK,IAClD,kBAAC,IAAD,CAAO1lB,KAAK,WAAW4O,UAAW+W,GAASD,OAAK,IAChD,kBAAC,IAAD,CAAO1lB,KAAK,QAAQ4O,UAAWiX,GAAMH,OAAK,IAC1C,kBAAC,IAAD,CAAO1lB,KAAK,SAAS4O,UAAWkX,GAAOJ,OAAK,IAC5C,kBAAC,IAAD,CAAO1lB,KAAK,OAAO4O,UAAWwX,GAAcV,OAAK,IACjD,kBAAC,IAAD,CAAO1lB,KAAK,SAAS4O,UAAWmZ,GAAWrC,OAAK,KAEpD,yBAAKxlB,UAAU,oB,GAtBNkB,cA4BVE,gBAnCQ,SAAC7C,EAAOsB,GAC3B,OAAO,eACAA,EADP,CAEIlC,WAAYY,EAAMZ,eAgCa,KAAxByD,CAA8B4mB,I,8DCjCvCG,I,0DACF,WAAYtoB,GAAQ,IAAD,8BACf,cAAMA,IACDtB,MAAQ,CACT6pB,gBAAgB,GAHL,E,qDAOT,IAAD,OACL,IAAKroB,KAAKF,MAAMlC,WACZ,OAAO,KAFN,IAIE4C,EAASR,KAAKF,MAAdU,MACP,OACI,yBAAKP,UAAU,aACX,wBACIqoB,YAAa,wBAAMhqB,KAAK,OAAO6P,QAAS,kBAAM,EAAKoa,iBACnDC,aAAcxoB,KAAKwoB,eACnBC,KAAK,SACPjoB,M,qCAKE,IAAD,OACJ6nB,EAAkBroB,KAAKxB,MAAvB6pB,eACD9nB,EAAO,KAAQA,KACrB,OAAQ,wBAASmoB,MAAI,EACJpc,QAAS+b,EACTM,QAAS,CACJ,kBAACpoB,EAAD,CAAMiD,IAAI,QAAQe,MAAM,QAClBqkB,YAAU,SADhB,4BAEA,kBAACroB,EAAD,CAAMiD,IAAI,WAAWe,MAAM,WACrByP,MAAO,CAAC6U,WAAY,WAD1B,4BAEA,kBAACtoB,EAAD,CAAMiD,IAAI,SAASe,MAAM,SACnByP,MAAO,CAAC6U,WAAY,WAD1B,6BAGLC,SAAU,SAAAnf,GAAC,OAAI,EAAKof,gBAAgBpf,KAEjD,wBAAMrL,KAAK,gB,oCAKf0B,KAAKF,MAAMiB,QAAQioB,W,sCAGPrf,GACZ,OAAQA,EAAEnG,KACN,IAAK,QACDxD,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAU,WAEd,MACJ,IAAK,WACDjB,KAAKF,MAAMiB,QAAQC,KAAK,CACpBC,SAAU,cAEd,MACJ,IAAK,SACDjB,KAAKipB,kBAKbjpB,KAAKc,SAAS,CACVunB,gBAAgB,M,wCAKpB,IAAM5Z,MAAM,iBAAkB,kDAC1B,CACI,CACIhC,KAAM,UAEV,CACIA,KAAM,MACN7L,QAAS,WACLoC,IAAgBZ,MAAK,WACjB,IAAMe,KAAK,8B,GAhFfhC,cAwFTC,eAAWC,aAhGH,SAAC7C,EAAOsB,GAC3B,OAAO,eACAA,EADP,CAEIU,MAAOhC,EAAMX,YACbD,WAAYY,EAAMZ,eA4FAyD,CAAwB+mB,K,UCnG5CrnB,GAAUmoB,eAEVC,GAAoB,SAAAC,GACtB,IAKM3qB,E7CmBmB,SAAAknB,GACzB,MAAO,CACHrnB,KR7BuB,kBQ8BvBI,KAAMinB,G6CtBK0D,CALF,CACTpoB,SAAUmoB,EAASnoB,SACnBqoB,OAAQF,EAASE,OACjBC,KAAMH,EAASG,OAGnB7pB,EAAM4D,SAAS7E,IAEnBsC,GAAQyoB,QAAO,SAAC/qB,GACZ0qB,GAAkB1qB,EAAO2qB,aAI7BD,GAAkBpoB,GAAQqoB,UACXroB,UCbA0oB,GARK,WAChBzW,QAAQwH,IACJ,uCACA,oFACA,yCACA,2CC2BOkP,G,kLAlBPhqB,EAAM4D,SAASgB,MACfqlB,O,+BAIA,OACI,kBAAC,KAAD,CAAQ5oB,QAASA,IACb,kBAAC,IAAD,CAAUrB,MAAOA,GACb,yBAAKO,UAAU,eACX,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,EAAD,a,GAbNiB,IAAMC,WCAJyoB,QACW,cAA7BvqB,OAAO+pB,SAASS,UAEe,UAA7BxqB,OAAO+pB,SAASS,UAEhBxqB,OAAO+pB,SAASS,SAAS/kB,MACvB,2D,QCHNglB,IAASC,OACL,kBAAC,GAAD,MACAjhB,SAASkhB,eAAe,SDkHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/nB,MAAK,SAAAgoB,GACJA,EAAaC,gBAEd5nB,OAAM,SAAAwQ,GACLD,QAAQC,MAAMA,EAAM+K,a","file":"static/js/main.ac981e28.chunk.js","sourcesContent":["import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\n\r\nconst defaultState = {\r\n    showTabBar: true,\r\n    enableTabBar: false,\r\n    showHeader: true,\r\n    globalTitle: '重力货道',\r\n    routerPath: null,\r\n    dashboardSlots: [],\r\n    sensors: [],\r\n    connections: [],\r\n    user: {\r\n        name: 'MonolithIoT'\r\n    }\r\n};\r\nconst actionTable = {};\r\nconst registerReducer = (type, reducer) => {\r\n    actionTable[type] = reducer;\r\n};\r\nregisterReducer(SET_TABBAR_STATE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showTabBar: action.data\r\n    };\r\n});\r\nregisterReducer(SET_ROUTER_PATH, (state, action) => {\r\n    return {\r\n        ...state,\r\n        routerPath: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_DASHBOARD_SLOT_DATA, (state, action) => {\r\n    return {\r\n        ...state,\r\n        dashboardSlots: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(SET_TITLE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        globalTitle: action.data,\r\n    }\r\n});\r\nregisterReducer(ASYNC_FETCH_SENSORS, (state, action) => {\r\n    return {\r\n        ...state,\r\n        sensors: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(TOGGLE_SENSOR_ELABLE, (state, action) => {\r\n    const sensors = state.sensors;\r\n    const sensorId = action.data.sensorId;\r\n    const hasElabel = action.data.hasElabel;\r\n    for (let sensor of sensors) {\r\n        if (sensor.id === sensorId) {\r\n            sensor.hasElabel = hasElabel;\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        sensors: JSON.parse(JSON.stringify(sensors))\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_CONNECTION, (state, action) => {\r\n    return {\r\n        ...state,\r\n        connections: action.data,\r\n    };\r\n});\r\nregisterReducer(DELETE_CONNECTION, (state, action) => {\r\n    const id = action.data.id;\r\n    const connections = state.connections.filter(connection => connection.id !== id);\r\n    return {\r\n        ...state,\r\n        connections\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_TAB_BAR, (state, action) => {\r\n    return {\r\n        ...state,\r\n        enableTabBar: action.data,\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_HEADER, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showHeader: action.data\r\n    };\r\n});\r\nexport default (state = defaultState, action) => {\r\n    const type = action.type;\r\n    if (type in actionTable) {\r\n        const handler = actionTable[type];\r\n        return handler(state, action);\r\n    }\r\n    return state;\r\n}\r\n","export const SET_USER = \"user.set\";\r\n\r\nexport const SET_TABBAR_STATE = 'tabBar.set';\r\n\r\nexport const SET_ROUTER_PATH = 'router.path.set';\r\n\r\nexport const ASYNC_FETCH_DASHBOARD_SLOT_DATA = 'dashboard.slot_data.fetch.async';\r\n\r\nexport const SET_TITLE = 'title.set';\r\n\r\nexport const ASYNC_FETCH_SENSORS = 'sensors.fetch.async';\r\n\r\nexport const TOGGLE_SENSOR_ELABLE = 'sensor.elabel.toggle';\r\n\r\nexport const ASYNC_FETCH_CONNECTION = 'connections.fetch.async';\r\n\r\nexport const DELETE_CONNECTION = 'connection.delete';\r\n\r\nexport const SET_ENABLE_TAB_BAR = 'system.tabBar.set';\r\n\r\nexport const SET_ENABLE_HEADER = 'system.header.set';\r\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport reducer from './reducer';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst allEnhancers = reduxDevTools(applyMiddleware(thunk));\r\nconst store = createStore(reducer, allEnhancers);\r\n\r\nexport default store;\r\n","import React from 'react'\r\nimport {TabBar} from 'antd-mobile'\r\nimport {connect} from 'react-redux';\r\nimport './AppTabBar.sass'\r\nimport {withRouter} from 'react-router-dom';\r\nimport {CodeSandboxCircleFilled as ExtraIcon} from '@ant-design/icons';\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showTabBar: state.showTabBar,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass AppTabBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            path: '/',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const showTabBar = this.props.showTabBar && this.props.enableTabBar;\r\n        const {path} = this.state;\r\n        if (showTabBar) {\r\n            return (\r\n                <div className=\"appTabBar\">\r\n                    <TabBar\r\n                        unselectedTintColor=\"#949494\"\r\n                        tintColor=\"#33A3F4\"\r\n                        barTintColor=\"white\"\r\n                        hidden={!this.props.showTabBar}\r\n                        tabBarPosition=\"bottom\">\r\n                        <TabBar.Item title=\"看板\"\r\n                                     selected={path === '/'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe64e;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe64e;</i>}\r\n                                     onPress={() => this.pushPath('/')}/>\r\n                        <TabBar.Item title=\"扩展\"\r\n                                     selected={path === '/extra'}\r\n                                     icon={<ExtraIcon className=\"buttonIcon\"/>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe60c;</i>}\r\n                                     onPress={() => this.pushPath('/extra')}/>\r\n                        <TabBar.Item title=\"日志\"\r\n                                     selected={path === '/logs'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe60c;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe60c;</i>}\r\n                                     onPress={() => this.pushPath('/logs')}/>\r\n                        <TabBar.Item title=\"编址\"\r\n                                     selected={path === '/address'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe61b;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe61b;</i>}\r\n                                     onPress={() => this.pushPath('/address')}/>\r\n                        <TabBar.Item title=\"设置\"\r\n                                     selected={path === '/setting'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe660;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe660;</i>}\r\n                                     onPress={() => this.pushPath('/setting')}/>\r\n                    </TabBar>\r\n                </div>)\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    pushPath(path) {\r\n        this.setState({\r\n            path,\r\n        });\r\n        this.props.history.push({\r\n            pathname: path,\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(AppTabBar));\r\n","import {httpRequest} from '../util/httpUtils';\r\nimport {Toast} from 'antd-mobile'\r\n\r\nconst showLoading = () => {\r\n    Toast.loading('Loading', 0);\r\n};\r\nconst hideLoading = () => {\r\n    Toast.hide();\r\n};\r\nconst showError = (msg) => {\r\n    Toast.fail(msg);\r\n};\r\n\r\n\r\nexport function request(options) {\r\n    const showLoadingToast = !options.hideLoading;\r\n    if (showLoadingToast) {\r\n        showLoading();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        httpRequest(options)\r\n            .then(res => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                if (res.status !== 200) {\r\n                    showError(`Http Response Status:${res.status}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                const body = res.data;\r\n                if (body.code !== 200) {\r\n                    showError(`Error [${body.code}]:${body.msg}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                resolve(body.data);\r\n            }).catch(err => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                const errStr = err.toString();\r\n                showError(errStr);\r\n                reject(err);\r\n            }\r\n        );\r\n    })\r\n}\r\n","import axios from 'axios'\r\n\r\nexport function httpRequest(options) {\r\n    return axios(options);\r\n}\r\n","import {request} from './request';\r\n\r\nexport const fetchSlotData = () => {\r\n    return request({\r\n        url: '/api/dashboard/slot-data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchSystemInfo = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-infos',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchSystemProps = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-props',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDashboardData = () => {\r\n    return request({\r\n        url: '/api/dashboard/_data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/_with-slot',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const toggleElable = (sensorId, hasElabel) => {\r\n    return request({\r\n        url: `/api/sensor/${sensorId}/haselabel`,\r\n        method: 'post',\r\n        data: {\r\n            hasElabel: hasElabel\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const reloadSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/reload',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const setSlotByIds = (sensorIds, slotId) => {\r\n    return request({\r\n        url: '/api/sensor/_set-slot-id-by-ids',\r\n        method: 'post',\r\n        data: {\r\n            sensorIds,\r\n            slotId,\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const stopWeightService = () => {\r\n    return request({\r\n        url: '/api/sensor/_stop-weight-service',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const dumpAll = () => {\r\n    return request({\r\n        url: '/api/sensor/_dump-all',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const findSensorById = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\nexport const tryRecoverySensorAddress = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_recovery-sensor-address`,\r\n        method: 'post',\r\n    });\r\n};\r\nexport const tryRecoverySensorAddressWithOriginSn = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_recovery-sensor-address-with-origin-sn`,\r\n        method: 'post',\r\n    });\r\n};\r\nexport const tryRecoveryElabelAddress = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_recovery-elabel-address`,\r\n        method: 'post',\r\n    });\r\n};\r\nexport const cleanAllBackupSn = () => {\r\n    return request({\r\n        url: '/api/sensor/_clean-backup-sn',\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\n\r\nexport const fetchEnableTabBar = () => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setEnableTabBar = enable => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'post',\r\n        data: {\r\n            value: enable,\r\n        },\r\n    });\r\n};\r\n\r\nexport const fetchSoftFilterLevel = () => {\r\n    return request({\r\n        url: '/api/config/weight.soft_filter_level',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const updateSoftFilterLevel = value => {\r\n    return request({\r\n        url: '/api/config/weight.soft_filter_level',\r\n        method: 'post',\r\n        data: {\r\n            value: value,\r\n        }\r\n    });\r\n};\r\n\r\nexport const fetchExtraPageUri = () => {\r\n    return request({\r\n        url: '/api/config/extra.page_uri',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setExtraPageUri = uri => {\r\n    return request({\r\n        url: '/api/config/extra.page_uri',\r\n        method: 'post',\r\n        data: {\r\n            value: uri,\r\n            createIfNotExists: true,\r\n        }\r\n    });\r\n};\r\n","import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    SET_USER,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\nimport {fetchSlotData} from '../api/dashboard';\r\nimport {fetchSensors, toggleElable} from '../api/sensor';\r\nimport {deleteConnection, fetchConnections} from '../api/connection';\r\nimport {fetchEnableTabBar, setEnableTabBar} from '../api/config';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: SET_USER,\r\n        data: user\r\n    }\r\n};\r\nexport const setTabBarState = show => {\r\n    return {\r\n        type: SET_TABBAR_STATE,\r\n        data: show\r\n    };\r\n};\r\n\r\nexport const setRouterPath = info => {\r\n    return {\r\n        type: SET_ROUTER_PATH,\r\n        data: info\r\n    };\r\n};\r\nexport const setTitle = title => {\r\n    return {\r\n        type: SET_TITLE,\r\n        data: title,\r\n    }\r\n};\r\nexport const asyncFetchDashboardSlotData = () => {\r\n    return dispatch => {\r\n        fetchSlotData().then(res => {\r\n            const slots = [];\r\n            for (const key in res) {\r\n                if (res.hasOwnProperty(key)) {\r\n                    slots.push(res[key]);\r\n                }\r\n            }\r\n            const action = {\r\n                type: ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n                data: slots.sort((a, b) => a.slotNo.localeCompare(b.slotNo)),\r\n            };\r\n            dispatch(action);\r\n        });\r\n    }\r\n};\r\n\r\nexport const asyncFetchSensors = () => {\r\n    return dispatch => {\r\n        fetchSensors().then(res => {\r\n            const sensors = res.sort((a, b) => a.address - b.address);\r\n            const action = {\r\n                type: ASYNC_FETCH_SENSORS,\r\n                data: sensors,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const toggleSensorElable = (sensorId, hasElabel) => {\r\n    return dispatch => {\r\n        toggleElable(sensorId, hasElabel).then(() => {\r\n            const action = {\r\n                type: TOGGLE_SENSOR_ELABLE,\r\n                data: {\r\n                    sensorId,\r\n                    hasElabel\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    };\r\n};\r\n\r\n\r\nexport const asyncFetchConnection = () => {\r\n    return dispatch => {\r\n        fetchConnections().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_CONNECTION,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const asyncDeleteConnection = id => {\r\n    return dispatch => {\r\n        deleteConnection(id).then(() => {\r\n            const action = {\r\n                type: DELETE_CONNECTION,\r\n                data: {\r\n                    id: id\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    }\r\n};\r\n\r\nexport const fetchEnableTabBarAction = () => {\r\n    return dispatch => {\r\n        fetchEnableTabBar().then(res => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: res.value === 'true',\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const setEnableTabBarAction = enable => {\r\n    return dispatch => {\r\n        setEnableTabBar(enable).then(() => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: enable,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const showHeader = show => {\r\n    return {\r\n        type: SET_ENABLE_HEADER,\r\n        data: show,\r\n    };\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchConnections = () => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const deleteConnection = id => {\r\n    return request({\r\n        url: `/api/connection/${id}`,\r\n        method: 'delete',\r\n    });\r\n};\r\n\r\nexport const createConnection = connection => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'put',\r\n        data: connection,\r\n    });\r\n};\r\n\r\n\r\nexport const scanPort = () => {\r\n    return request({\r\n        url: '/api/serial/scan',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const scanDevice = id => {\r\n    return request({\r\n        url: `/api/connection/${id}/_scan`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const startScanTempHumiSensors = connectionId => {\r\n    return request({\r\n        url: `/api/connection/${connectionId}/_scan-th-device`,\r\n        method: 'post',\r\n    });\r\n};\r\n","export const parseDate = str => {\r\n    const groups = str.match(/^(\\d{4})-(\\d+)-(\\d+)\\s(\\d+):(\\d+):(\\d+)$/);\r\n    if (groups) {\r\n        const year = parseInt(groups[1]);\r\n        const month = parseInt(groups[2]);\r\n        const date = parseInt(groups[3]);\r\n        const hour = parseInt(groups[4]);\r\n        const min = parseInt(groups[5]);\r\n        const sec = parseInt(groups[6]);\r\n        const d = new Date();\r\n        d.setFullYear(year);\r\n        d.setMonth(month - 1);\r\n        d.setDate(date);\r\n        d.setHours(hour);\r\n        d.setMinutes(min);\r\n        d.setSeconds(sec);\r\n        return d;\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const parseTimstamp = str => {\r\n    const date = parseDate(str);\r\n    return date ? date.getTime() : -1;\r\n};\r\n","import {parseDate} from './datetimeUtils';\r\n\r\nexport const asKg = g => {\r\n    return (g / 1000.0).toFixed(3);\r\n};\r\n\r\nexport const isWan = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isIncredible = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isDisable = state => {\r\n    return state === 3;\r\n};\r\n\r\nexport const isOffline = state => {\r\n    return state === 2;\r\n};\r\n\r\nconst connectionTypes = {\r\n    1: '串口',\r\n    2: '网络',\r\n};\r\n\r\nexport const asConnectionType = type => {\r\n    if (type in connectionTypes) {\r\n        return connectionTypes[type];\r\n    }\r\n    return `Unknown [${type}]`;\r\n};\r\n\r\nconst weightStateTable = {\r\n    1: 'stable',\r\n    2: 'dynamic',\r\n    3: 'underLoad',\r\n    4: 'overLoad',\r\n};\r\nexport const isStable = weightState => {\r\n    return weightState === 1;\r\n};\r\n\r\nexport const asWeightStateString = state => {\r\n    return state in weightStateTable ? weightStateTable[state] : state;\r\n};\r\nconst slotSortWeight = {\r\n    'S': 1,\r\n    'D': 2,\r\n    'F': 3,\r\n};\r\n\r\nconst compareBySlotNo = (a, b) => {\r\n    const aName = a.slotNo;\r\n    const bName = b.slotNo;\r\n    const aNames = aName.split('-');\r\n    const bNames = bName.split('-');\r\n    if (aNames.length !== bNames.length) {\r\n        return aNames.length - bNames.length;\r\n    }\r\n    for (let i = 0; i < aNames.length; i++) {\r\n        const aItem = parseInt(aNames[i]);\r\n        const bItem = parseInt(bNames[i]);\r\n        if (!(aItem && bItem)) {\r\n            continue;\r\n        }\r\n        if (aItem !== bItem) {\r\n            return aItem - bItem;\r\n        }\r\n    }\r\n    return 0;\r\n};\r\nexport const groupSlots = slots => {\r\n    const groups = {};\r\n    const putSlot = (name, slot) => {\r\n        if (name in groups) {\r\n            groups[name].push(slot);\r\n        } else {\r\n            groups[name] = [slot];\r\n        }\r\n    };\r\n    for (let slot of slots) {\r\n        const slotNo = slot.slotNo;\r\n        const noItems = slotNo.match(/^(\\w+)-(\\w+)-(\\w+)$/);\r\n        if (noItems) {\r\n            const groupName = `${noItems[1]}货架第${noItems[2]}层`;\r\n            putSlot(groupName, slot);\r\n        } else {\r\n            putSlot('未分组货道', slot);\r\n        }\r\n    }\r\n    const res = [];\r\n    for (let name in groups) {\r\n        if (!groups.hasOwnProperty(name)) {\r\n            continue;\r\n        }\r\n        const slots = groups[name];\r\n        res.push({\r\n            name,\r\n            slots: slots.sort(compareBySlotNo),\r\n        });\r\n    }\r\n    return res.sort((a, b) => {\r\n        const aWeight = slotSortWeight[a.name.substring(0, 1)];\r\n        const bWeight = slotSortWeight[b.name.substring(0, 1)];\r\n        if (aWeight !== bWeight) {\r\n            return aWeight - bWeight;\r\n        }\r\n        return a.name.localeCompare(b.name);\r\n    });\r\n};\r\n\r\nconst stateTable = {\r\n    1: '使用中',\r\n    2: '离线',\r\n    3: '已停用',\r\n    4: '超载',\r\n    5: '欠载',\r\n};\r\nexport const asStateString = state => {\r\n    if (state in stateTable) {\r\n        return stateTable[state];\r\n    }\r\n    return 'Unknown State:' + state;\r\n};\r\n\r\nexport const asCount = data => {\r\n    const count = data.count;\r\n    const isStable = data.weightState === 1;\r\n    if (count === null) {\r\n        return '~❗';\r\n    }\r\n    if (isStable) {\r\n        return count;\r\n    }\r\n    return '~' + count;\r\n};\r\n\r\nconst thSensorStateTable = {\r\n    4: '过高',\r\n    5: '过低',\r\n    1: '正常',\r\n};\r\n\r\nexport const thSensorStateText = state => {\r\n    if (state in thSensorStateTable) {\r\n        return thSensorStateTable[state];\r\n    }\r\n    return '未知' + state;\r\n};\r\n\r\nexport const thSensorStateWarn = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const lastHighlightSlot = slots => {\r\n    if (!slots) {\r\n        return null;\r\n    }\r\n    let lastTime = -1;\r\n    let lastSlot = null;\r\n    for (let slot of slots) {\r\n        if (!slot.skuUpdateTime) {\r\n            continue;\r\n        }\r\n        const skuUpdateTime = parseDate(slot.skuUpdateTime);\r\n        if (skuUpdateTime && skuUpdateTime.hasOwnProperty('getTime')) {\r\n            const time = skuUpdateTime.getTime();\r\n            if (time - lastTime > 0) {\r\n                lastTime = time;\r\n                lastSlot = slot;\r\n            }\r\n        }\r\n    }\r\n    if (!lastSlot) {\r\n        lastSlot = slots[0];\r\n    }\r\n    return lastSlot;\r\n};\r\n","import {request} from './request';\r\n\r\nexport const doZeroAll = () => {\r\n    return request({\r\n        url: '/api/slot/zero-all',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const zeroOne = slotNo => {\r\n    const encodedSlotNo = encodeURIComponent(slotNo);\r\n    const apiUrl = `/api/slot/${encodedSlotNo}/zero`;\r\n    return request({\r\n        url: apiUrl,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllSlots = () => {\r\n    return request({\r\n        url: '/api/slot/_with-sensors',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDetail = id => {\r\n    return request({\r\n        url: `/api/slot/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const updateSlot = slot => {\r\n    return request({\r\n        url: `/api/slot/${slot.id}`,\r\n        method: 'post',\r\n        data: slot\r\n    });\r\n};\r\n\r\n\r\nexport const toggleELabelState = option => {\r\n    return request({\r\n        url: `/api/slot/${option.id}/has-e-label`,\r\n        method: 'post',\r\n        data: {hasElabel: option.hasELabel},\r\n    });\r\n};\r\n\r\nexport const highlightBySku = sku => {\r\n    return request({\r\n        url: '/api/slot/highlight',\r\n        method: 'post',\r\n        data: {\r\n            skuNo: sku\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllWithSensors = () => {\r\n    return request({\r\n        url: '/api/slot/_with-sensors',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setCompensationState = state => {\r\n    return request({\r\n        url: '/api/slot/_all-compensation',\r\n        method: 'post',\r\n        data: {\r\n            enableCompensation: state,\r\n        }\r\n    });\r\n};\r\n\r\nexport const mergeSlotsByIds = ids => {\r\n    return request({\r\n        url: '/api/slot/_merge',\r\n        method: 'post',\r\n        data: {\r\n            slotIds: ids,\r\n        }\r\n    });\r\n};\r\n\r\nexport const resetSlotBySlots = ids => {\r\n    return request({\r\n        url: '/api/slot/_reset-slot-sensors',\r\n        method: 'post',\r\n        data: {\r\n            slotIds: ids,\r\n        },\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {asyncFetchDashboardSlotData, setTabBarState, setTitle, showHeader} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport './Dashboard.sass'\r\nimport {Flex, List, Modal, NoticeBar, SearchBar, Tabs, Toast, WingBlank} from 'antd-mobile';\r\nimport {\r\n    asCount,\r\n    asKg,\r\n    asStateString,\r\n    groupSlots,\r\n    isDisable,\r\n    isIncredible,\r\n    isOffline,\r\n    isWan,\r\n    thSensorStateText,\r\n    thSensorStateWarn,\r\n} from '../../util/DataConvertor';\r\nimport {highlightBySku, zeroOne} from '../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDashboardData} from \"../../api/dashboard\";\r\nimport {parseDate} from '../../util/datetimeUtils';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        slots: state.dashboardSlots\r\n    };\r\n};\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSlotData: (...args) => dispatch(asyncFetchDashboardSlotData(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        showHeader: (...args) => dispatch(showHeader(...args)),\r\n        showTabBar: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nconst TabItems = [\r\n    {\r\n        title: '重力货道数据',\r\n        key: 'dashboard',\r\n    },\r\n    {\r\n        title: '重力货道配置',\r\n        key: 'settings',\r\n    }\r\n];\r\nconst findLastNoticeSlot = slots => {\r\n    let lastTime = 0;\r\n    let res = null;\r\n    for (let slot of slots) {\r\n        let ts = slot.skuUpdateTime ? parseDate(slot.skuUpdateTime) : 0;\r\n        if (ts > lastTime) {\r\n            lastTime = ts;\r\n            res = slot;\r\n        }\r\n    }\r\n    return res;\r\n};\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.rootEle = document;\r\n        this.state = {\r\n            slots: [],\r\n            groupedSlots: [],\r\n            thSensors: [],\r\n            sensors: [],\r\n            sensorModalVisible: false,\r\n            operationSlot: {},\r\n            searchSkuNo: '',\r\n            noticeSlots: [],\r\n            lastNoticeSlot: null,\r\n        };\r\n        this.props.setTitle('Dashboard');\r\n        this.renderSlotCard = this.renderSlotCard.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startFetchData();\r\n        this.props.showHeader(false);\r\n        this.props.showTabBar(false);\r\n        this.listenKeyPress();\r\n    }\r\n\r\n    listenKeyPress() {\r\n        this.rootEle.onkeypress = e => {\r\n            const sourceTagName = e.target.tagName.toLowerCase();\r\n            if (sourceTagName !== 'body') {\r\n                return;\r\n            }\r\n            const keyCode = e.keyCode;\r\n            if (keyCode === 13) {\r\n                this.triggerHighlight(this.state.searchSkuNo);\r\n            } else {\r\n                this.appendSearchSku(String.fromCharCode(keyCode));\r\n            }\r\n        };\r\n    }\r\n\r\n    appendSearchSku(c) {\r\n        const {searchSkuNo} = this.state;\r\n        this.setState({\r\n            searchSkuNo: searchSkuNo + c,\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.fetchTimer) {\r\n            clearInterval(this.fetchTimer);\r\n        }\r\n        this.props.showHeader(true);\r\n        this.props.showTabBar(true);\r\n        this.cancelKeyPress();\r\n    }\r\n\r\n    cancelKeyPress() {\r\n        this.rootEle.onkeypress = null;\r\n    }\r\n\r\n    startFetchData() {\r\n        this.fetchTimer = setInterval(() => {\r\n            fetchDashboardData().then(res => {\r\n                const slotData = res.slotData;\r\n                const thData = res.temperatureHumidityData;\r\n                const slots = [];\r\n                const thSensors = [];\r\n                for (let slotNo in slotData) {\r\n                    if (slotData.hasOwnProperty(slotNo)) {\r\n                        slots.push(slotData[slotNo]);\r\n                    }\r\n                }\r\n                for (let id in thData) {\r\n                    if (thData.hasOwnProperty(id)) {\r\n                        thSensors.push(thData[id]);\r\n                    }\r\n                }\r\n                const groupedSlots = groupSlots(slots);\r\n                this.setState({\r\n                    slots: slots,\r\n                    thSensors: thSensors,\r\n                    groupedSlots: groupedSlots,\r\n                });\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    renderThSensorCard(sensor) {\r\n        const {data} = sensor;\r\n        let {temperature, humidity} = data;\r\n        temperature = temperature && temperature.toFixed(1);\r\n        const tempStateText = thSensorStateText(data.temperatureState);\r\n        const tempWarn = thSensorStateWarn(data.temperatureState);\r\n        const humidityText = humidity && humidity.toFixed(1);\r\n        const tempClass = ['value'];\r\n        const stateClass = ['dot'];\r\n        const cardClass = ['th-card'];\r\n        if (tempWarn) {\r\n            stateClass.push('warn');\r\n            tempClass.push('warn');\r\n            cardClass.push('warn');\r\n        } else {\r\n            tempClass.push('ok');\r\n        }\r\n        const stateStr = asStateString(sensor.state);\r\n        const tempClassStr = tempClass.join(' ');\r\n        return (<div className={cardClass.join(' ')} key={sensor.id}>\r\n            <div className=\"card-header\">\r\n                <div className=\"no\">{sensor.no}</div>\r\n                <div className=\"state\"><span>{humidityText}%</span><span className={stateClass.join(' ')}/>\r\n                    {stateStr}\r\n                </div>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"inner\">\r\n                    <div className=\"item\">\r\n                        <span className=\"name\">温度:</span>\r\n                        <span className={tempClassStr}>{temperature}°C</span>\r\n                    </div>\r\n                    <div className=\"delimiter\"/>\r\n                    <div className=\"item\">\r\n                        <span className=\"name\">状态</span>\r\n                        <span className={tempClassStr}>{tempStateText}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n    renderThSensors() {\r\n        const {thSensors} = this.state;\r\n        return (<div className=\"th-sensor-group\">\r\n            <div className=\"title\">温湿度传感器</div>\r\n            <WingBlank className=\"sensors\">\r\n                {\r\n                    thSensors.map(sensor => this.renderThSensorCard(sensor))\r\n                }\r\n            </WingBlank>\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        const {lastNoticeSlot, searchSkuNo, noticeSlots, sensorModalVisible, operationSlot, sensors, groupedSlots} = this.state;\r\n        this.highlightSlotIds = {};\r\n        for (let slot of noticeSlots) {\r\n            this.highlightSlotIds[slot.id] = true;\r\n        }\r\n        return (\r\n            <div className=\"dashboard\">\r\n                <Tabs tabs={TabItems} onChange={(tab, index) => this.onTabChange(tab, index)}/>\r\n                <SearchBar\r\n                    value={searchSkuNo}\r\n                    onSubmit={e => this.triggerHighlight(e)}\r\n                    onChange={searchSkuNo => this.setState({searchSkuNo})}/>\r\n                <div className=\"notice-list\">\r\n                    {\r\n                        this.renderNoticeBar(lastNoticeSlot)\r\n                    }\r\n                </div>\r\n                <div className=\"slot-groups\">\r\n                    {\r\n                        groupedSlots.map(group => this.renderGroupItem(group))\r\n                    }\r\n                </div>\r\n                <div className=\"th-sensors\">\r\n                    {\r\n                        this.renderThSensors()\r\n                    }\r\n                </div>\r\n                <Modal visible={sensorModalVisible}\r\n                       title={`货道[${operationSlot.slotNo}]传感器`}\r\n                       transparent\r\n                       footer={[\r\n                           {\r\n                               text: '清零', onPress: () => this.doSlotZero(this.state.operationSlot)\r\n                           },\r\n                           {text: '关闭', onPress: () => this.setState({sensorModalVisible: false})},\r\n                       ]}\r\n                       onClose={() => this.setState({sensorModalVisible: false})}>\r\n                    <List renderHeader={() => 'Sensors'}>\r\n                        {\r\n                            sensors ? sensors.map(sensor => (<List.Item\r\n                                    extra={asStateString(sensor.state)}\r\n                                    key={sensor.id}>\r\n                                    {sensor.deviceSn}\r\n                                    <List.Item.Brief>{sensor.address485}</List.Item.Brief>\r\n                                </List.Item>)) :\r\n                                <List.Item>Empty List</List.Item>\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n                <div className=\"clear-float\"/>\r\n                <div className=\"bottom-white\">\r\n                    留白\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderNoticeBar(slot) {\r\n        if (!slot) {\r\n            return;\r\n        }\r\n        const content = [];\r\n        content.push(<span key={0}>{slot.skuName}</span>);\r\n        if (slot.skuShelfLifeOpenDays) {\r\n            content.push(<span key={1}>，开封后保质期</span>);\r\n            content.push((<span key={2} className=\"days\">{slot.skuShelfLifeOpenDays}</span>));\r\n            content.push(<span key={3}>天</span>);\r\n        } else {\r\n            content.push(<span key={1}>，开封后保质期未设置！</span>);\r\n        }\r\n        return (<NoticeBar className=\"notice\">\r\n            {content}\r\n        </NoticeBar>)\r\n    }\r\n\r\n    renderGroupItem(group) {\r\n        return (<div className=\"group-item\" key={group.name}>\r\n            <p className=\"group-name\">\r\n                {group.name}\r\n            </p>\r\n            <WingBlank>\r\n                <Flex className=\"slots\" wrap={\"wrap\"} justify=\"between\">\r\n                    {\r\n                        group.slots.map(slot => this.renderSlotCard(slot))\r\n                    }\r\n                </Flex>\r\n            </WingBlank>\r\n        </div>)\r\n    }\r\n\r\n    renderSlotCard(slot) {\r\n        const sensors = slot.sensors;\r\n        if (!sensors) {\r\n            return null;\r\n        }\r\n        const sku = slot.sku || {};\r\n        const data = slot.data || {};\r\n        let slotCardClassName = 'slot-card';\r\n        if (slot.id in this.highlightSlotIds) {\r\n            slotCardClassName += ' slot-card-highlight';\r\n        } else {\r\n            if (isWan(slot.state)) {\r\n                if (isDisable(slot.state)) {\r\n                    slotCardClassName += ' slot-card-disable';\r\n                } else if (isOffline(slot.state)) {\r\n                    slotCardClassName += ' slot-card-offline';\r\n                } else {\r\n                    slotCardClassName += ' slot-card-warn';\r\n                }\r\n            }\r\n        }\r\n        const incredible = isIncredible(data.toleranceState);\r\n        const state = asStateString(slot.state);\r\n        const weightInKg = asKg(data.weight);\r\n        const count = asCount(data);\r\n        return (<div key={slot.id}\r\n                     className={slotCardClassName}>\r\n            <Flex className=\"card-header\" justify=\"between\">\r\n                <div className=\"slot-no\">\r\n                    {slot.slotNo}\r\n                </div>\r\n                <div className=\"state\">\r\n                    <span className=\"weight\">({weightInKg}kg)</span>\r\n                    <span className=\"dot\"/>\r\n                    <span>{state}</span>\r\n                </div>\r\n            </Flex>\r\n            <Flex className=\"card-body\" justify=\"between\">\r\n                <div className=\"left\">\r\n                    <div className=\"sku-no\">SKU:{sku.skuNo}</div>\r\n                    <div className=\"sku-name\">{sku.name}</div>\r\n                </div>\r\n                <div className=\"delimiter\"/>\r\n                <div className={`right ${incredible ? 'right-incredible' : ''}`}\r\n                     onClick={() => this.onSlotCardClick(slot)}>\r\n                    <span className=\"pcs-value\">{count}</span>\r\n                    <span className=\"pcs-unit\">(数量)</span>\r\n                </div>\r\n            </Flex>\r\n        </div>);\r\n    }\r\n\r\n    onSlotCardClick(slot) {\r\n        this.setState({\r\n            operationSlot: slot,\r\n            sensors: slot.sensors,\r\n            sensorModalVisible: true,\r\n        });\r\n    }\r\n\r\n    triggerHighlight(skuNo) {\r\n        if (skuNo === '' || skuNo.trim() === '') {\r\n            Toast.show('Please Type a SkuNo!', 1, false);\r\n            return;\r\n        }\r\n        highlightBySku(skuNo).then(res => {\r\n            const lastNoticeSlot = findLastNoticeSlot(res);\r\n            this.setState({\r\n                noticeSlots: res,\r\n                lastNoticeSlot: lastNoticeSlot,\r\n            });\r\n            setTimeout(() => this.setState({noticeSlots: [], searchSkuNo: '', lastNoticeSlot: null}), 5000);\r\n        }).catch(err => {\r\n            this.setState({\r\n                searchSkuNo: '',\r\n            });\r\n            const {data} = err;\r\n            Modal.alert(`无法查询物料:${data.code}`, `无法查询物料号[${skuNo}]!(${data.msg})`);\r\n        });\r\n    }\r\n\r\n    onTabChange(tab, index) {\r\n        switch (index) {\r\n            case 0:\r\n                // dashboard\r\n                this.props.history.push({\r\n                    pathname: '/dashboard'\r\n                });\r\n                break;\r\n            case 1:\r\n                // settings\r\n                this.props.history.push({\r\n                    pathname: '/setting/'\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    doSlotZero(slot) {\r\n        const {slotNo} = slot;\r\n        Modal.alert(`清零${slotNo}?`, `确定清零货道[${slotNo}]?`, [\r\n            {text: '取消'},\r\n            {text: '确定', onPress: () => this.callDoZero(slotNo)}\r\n        ])\r\n    }\r\n\r\n    callDoZero(slotNo) {\r\n        zeroOne(slotNo).then(() => {\r\n            Toast.show(`slot[${slotNo}] Zero success!`, 3, false);\r\n        });\r\n    }\r\n}\r\n\r\nconst component = connect(mapState2Props, mapAction2Props)(Dashboard);\r\nexport default withRouter(component);\r\n","import {connect} from 'react-redux';\r\nimport {setTabBarState, setTitle, showHeader} from './actionCreators';\r\n\r\nconst mapState = (state, props) => {\r\n    return {\r\n        ...state,\r\n        ...props,\r\n    };\r\n};\r\nconst mapAction = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n        showHeader: (...args) => dispatch(showHeader(...args)),\r\n    };\r\n};\r\nexport const mapStateAndAction = (component) => {\r\n    return connect(mapState, mapAction)(component);\r\n};\r\n","import React, {Component} from 'react';\r\nimport {bool, func, object} from 'prop-types';\r\nimport './SlotCard.sass';\r\nimport {asKg, asStateString} from '../../util/DataConvertor';\r\n\r\nconst formatPcs = pcs => {\r\n    if (pcs === 0) {\r\n        return 0;\r\n    }\r\n    return pcs ? pcs : '-';\r\n};\r\nconst formatSkuNo = skuNo => {\r\n    return skuNo ? skuNo : '---------';\r\n};\r\n\r\nconst SLOT_CARD_CLASS_TABLE = {\r\n    1: 'slot-card-online',\r\n    2: 'slot-card-offline',\r\n    3: 'slot-card-disable',\r\n    4: 'slot-card-overload',\r\n    5: 'slot-card-under-load',\r\n};\r\n\r\nconst slotCardClass = (state, highLight) => {\r\n    const res = ['slot-card'];\r\n    if (highLight) {\r\n        res.push('slot-card-highlight');\r\n    } else {\r\n        res.push(SLOT_CARD_CLASS_TABLE[state]);\r\n    }\r\n    return res.join(' ');\r\n};\r\nconst TOLERANCE_STATE_CLASS_TABLE = {\r\n    1: 'count-credible',\r\n    2: 'count-incredible',\r\n};\r\nconst pcsClass = state => {\r\n    const res = ['count'];\r\n    res.push(TOLERANCE_STATE_CLASS_TABLE[state]);\r\n    return res.join(' ');\r\n};\r\n\r\nclass SlotCard extends Component {\r\n    static propTypes = {\r\n        slot: object.isRequired,\r\n        onClick: func.isRequired,\r\n        highLight: bool.isRequired,\r\n    };\r\n\r\n    render() {\r\n        const {slot, onClick, highLight} = this.props;\r\n        if (!slot.sensors) {\r\n            return null;\r\n        }\r\n        const {state, data, sku} = slot;\r\n        const {weight, count, toleranceState} = data;\r\n        const weightInKg = asKg(weight);\r\n        const stateStr = asStateString(state);\r\n        const pcs = formatPcs(count);\r\n        const skuNo = formatSkuNo(sku.skuNo);\r\n\r\n        const slotCardClassStr = slotCardClass(state, highLight);\r\n        const pcsClassStr = pcsClass(toleranceState);\r\n        return (\r\n            <div className={slotCardClassStr}>\r\n                <div className=\"header\">\r\n                    <div className=\"slot-no\">{slot.slotNo}</div>\r\n                    <div className=\"state\">\r\n                        <span className=\"weight\">({weightInKg}kg)</span>\r\n                        <div className=\"dot\"/>\r\n                        <span className=\"text\">{stateStr}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"body\">\r\n                    <div className=\"sku\">\r\n                        <div className=\"sku-no\">\r\n                            <span>SKU:</span>\r\n                            <span>{skuNo}</span>\r\n                        </div>\r\n                        <div className=\"sku-name\">\r\n                            {sku.name}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"delimiter\"/>\r\n                    <div className={pcsClassStr} onClick={() => onClick(slot)}>\r\n                        <span className=\"value\">\r\n                            {pcs}\r\n                        </span>\r\n                        <span className=\"label\">\r\n                            (数量)\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SlotCard;\r\n","import React, {Component} from 'react';\r\nimport {func, object} from 'prop-types';\r\nimport './SlotGroup.sass';\r\nimport SlotCard from './SlotCard';\r\n\r\nconst isHighLight = (slot, highLightSlotTable) => {\r\n    const {id} = slot;\r\n    return highLightSlotTable.hasOwnProperty(id);\r\n};\r\n\r\nconst renderSlots = (slots, onCardClick, highLightSlotTable) => {\r\n    if (!slots) {\r\n        return;\r\n    }\r\n    return slots.map(slot => (\r\n        <SlotCard\r\n            highLight={isHighLight(slot, highLightSlotTable)}\r\n            slot={slot}\r\n            key={slot.id}\r\n            onClick={slot => onCardClick(slot)}/>));\r\n};\r\n\r\nclass SlotGroup extends Component {\r\n    static propTypes = {\r\n        group: object.isRequired,\r\n        onCardClick: func.isRequired,\r\n        highlightSlotTable: object.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const {group, onCardClick, highlightSlotTable} = this.props;\r\n        const {name, slots} = group;\r\n        return (\r\n            <div className=\"slot-group\">\r\n                <div className=\"group-name\">{name}</div>\r\n                <div className=\"slot-list\">\r\n                    {\r\n                        renderSlots(slots, onCardClick, highlightSlotTable)\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SlotGroup;\r\n","class FetcherTask {\r\n    constructor(config) {\r\n        const {fetchData, onNewData, duration, onError} = config;\r\n        this.fetchData = fetchData;\r\n        this.onNewData = onNewData;\r\n        this.duration = duration;\r\n        this.onError = onError;\r\n        this.running = true;\r\n    }\r\n\r\n    start() {\r\n        this.fetchData()\r\n            .then(res => {\r\n                this.onNewData(res);\r\n                this.runNext();\r\n            })\r\n            .catch(err => {\r\n                this.onError(err);\r\n                this.runNext();\r\n            });\r\n    }\r\n\r\n    runNext() {\r\n        if (!this.running) {\r\n            return;\r\n        }\r\n        this.timmer = setTimeout(() => {\r\n            this.start();\r\n        }, this.duration);\r\n    }\r\n\r\n    stop() {\r\n        this.running = false;\r\n        if (this.timmer) {\r\n            clearTimeout(this.timmer);\r\n        }\r\n    }\r\n}\r\n\r\nexport default FetcherTask;\r\n","import React, {Component} from 'react';\r\nimport {object} from 'prop-types';\r\nimport {asStateString, thSensorStateText} from '../../util/DataConvertor';\r\nimport './TempSensorCard.sass';\r\n\r\nconst formatTemp = temp => {\r\n    if (temp === 0) {\r\n        return 0;\r\n    }\r\n    return temp ? temp.toFixed(1) : '--';\r\n};\r\n\r\nconst CARD_CLASS_TABLE = {\r\n    1: 'temp-sensor-card-online',\r\n    2: 'temp-sensor-card-offline',\r\n    3: 'temp-sensor-card-disable',\r\n    4: 'temp-sensor-card-overload',\r\n    5: 'temp-sensor-card-under-load',\r\n};\r\nconst cardClass = state => {\r\n    const res = ['temp-sensor-card'];\r\n    res.push(CARD_CLASS_TABLE[state]);\r\n    return res.join(' ');\r\n};\r\nconst BODY_CLASS_TABLE = {\r\n    4: 'body-overflow',\r\n    5: 'body-overflow',\r\n    1: 'body-ok',\r\n};\r\nconst bodyClass = state => {\r\n    const res = ['body'];\r\n    res.push(BODY_CLASS_TABLE[state]);\r\n    return res.join(' ');\r\n};\r\n\r\nclass TempSensorCard extends Component {\r\n    static propTypes = {\r\n        sensor: object.isRequired,\r\n    };\r\n\r\n    render() {\r\n        const {sensor} = this.props;\r\n        const {no, data, state} = sensor;\r\n        const {humidity, temperature, temperatureState} = data;\r\n        const stateStr = asStateString(state);\r\n        const temp = formatTemp(temperature);\r\n        const tempState = thSensorStateText(temperatureState);\r\n\r\n        const cardClassStr = cardClass(state);\r\n        const bodyClassStr = bodyClass(temperatureState);\r\n        return (\r\n            <div className={cardClassStr}>\r\n                <div className=\"header\">\r\n                    <div className=\"slot-no\">{no}</div>\r\n                    <div className=\"state\">\r\n                        <span className=\"humidity\">({humidity}%)</span>\r\n                        <span className=\"dot\"/>\r\n                        <span className=\"text\">{stateStr}</span>\r\n                    </div>\r\n                </div>\r\n                <div className={bodyClassStr}>\r\n                    <div className=\"temp\">\r\n                        <span className=\"value\">{temp}°C</span>\r\n                        <span className=\"label\">(温度)</span>\r\n                    </div>\r\n                    <div className=\"delimiter\"/>\r\n                    <div className=\"state\">\r\n                        <span className=\"value\">{tempState}</span>\r\n                        <span className=\"label\">(状态)</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TempSensorCard;\r\n","import React, {Component} from 'react';\r\nimport {func, object} from 'prop-types';\r\nimport {Modal, Toast} from 'antd-mobile';\r\nimport './SlotOperationModal.sass';\r\nimport {asStateString} from '../../util/DataConvertor';\r\nimport {zeroOne} from '../../api/slot';\r\n\r\nconst renderSensor = sensor => {\r\n    const state = asStateString(sensor.state);\r\n    return <div key={sensor.id} className=\"item\">\r\n        <div className=\"address\">\r\n            {sensor.address485}\r\n        </div>\r\n        <div className=\"state\">\r\n            {state}\r\n        </div>\r\n    </div>\r\n};\r\nconst renderSensors = sensors => {\r\n    if (!sensors || sensors.length <= 0) {\r\n        return null;\r\n    }\r\n    return sensors.map(renderSensor);\r\n};\r\n\r\nclass SlotOperationModal extends Component {\r\n    static propTypes = {\r\n        slot: object.isRequired,\r\n        onClose: func.isRequired,\r\n    };\r\n\r\n    doZero() {\r\n        const {slot} = this.props;\r\n        const {slotNo} = slot;\r\n        Modal.alert('清零确认', `确认清零货道[${slotNo}]？`, [\r\n            {\r\n                text: '取消',\r\n            },\r\n            {\r\n                text: '确认',\r\n                onPress() {\r\n                    zeroOne(slotNo).then(() => {\r\n                        Toast.show('清零成功', 3, false);\r\n                    });\r\n                },\r\n            }\r\n        ]);\r\n    }\r\n\r\n    render() {\r\n        const _this = this;\r\n        const {slot, onClose} = this.props;\r\n        const title = `货道[${slot.slotNo}]操作`;\r\n        const {sensors} = slot;\r\n        return (\r\n            <Modal className=\"slot-operation-modal\"\r\n                   visible={true}\r\n                   maskClosable={true}\r\n                   title={title}\r\n                   transparent={true}\r\n                   onClose={onClose}\r\n                   footer={\r\n                       [\r\n                           {\r\n                               text: '关闭',\r\n                               onPress: onClose,\r\n                           },\r\n                           {\r\n                               text: '清零',\r\n                               onPress() {\r\n                                   _this.doZero()\r\n                               }\r\n                           }\r\n                       ]\r\n                   }>\r\n                <div className=\"slot\">\r\n                    {slot.slotNo}\r\n                </div>\r\n                <div className=\"sensors\">\r\n                    {\r\n                        renderSensors(sensors)\r\n                    }\r\n                </div>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SlotOperationModal;\r\n","import React, {Component} from 'react';\r\nimport {mapStateAndAction} from '../../store/storeUtils';\r\nimport './HomeDashboard.sass';\r\nimport SlotGroup from '../commons/SlotGroup';\r\nimport {NoticeBar, SearchBar, Toast, WingBlank} from 'antd-mobile';\r\nimport {ScanOutlined, WarningOutlined} from '@ant-design/icons';\r\nimport {highlightBySku} from '../../api/slot';\r\nimport {fetchDashboardData} from '../../api/dashboard';\r\nimport {groupSlots, lastHighlightSlot} from '../../util/DataConvertor';\r\nimport FetcherTask from '../../util/FetcherTask';\r\nimport TempSensorCard from '../commons/TempSensorCard';\r\nimport SlotOperationModal from '../commons/SlotOperationModal';\r\n\r\nconst SEARCH_NOTICE_BAR_AUTO_CLEAN_DURATION = 5000;\r\nconst asHighlightSlotTable = slots => {\r\n    const res = {};\r\n    for (let slot of slots) {\r\n        res[slot.id] = slot;\r\n    }\r\n    return res;\r\n};\r\nconst renderNoticeBar = slot => {\r\n    if (!slot) {\r\n        return;\r\n    }\r\n    const msg = [];\r\n    const {skuName, skuShelfLifeOpenDays} = slot;\r\n    msg.push(<span key={1}>{skuName}</span>);\r\n    if (skuShelfLifeOpenDays) {\r\n        msg.push(\r\n            <span key={2}>\r\n                ，开封后保质期\r\n                <b className=\"days\">{skuShelfLifeOpenDays}</b>\r\n                天\r\n            </span>\r\n        );\r\n    }\r\n    return (<NoticeBar\r\n        className=\"search-notice\"\r\n        icon={<ScanOutlined/>}>\r\n        {\r\n            msg\r\n        }\r\n    </NoticeBar>);\r\n};\r\n\r\nconst dict2List = dict => {\r\n    const res = [];\r\n    for (let key in dict) {\r\n        if (dict.hasOwnProperty(key)) {\r\n            res.push(dict[key]);\r\n        }\r\n    }\r\n    return res;\r\n};\r\n\r\nconst renderTempSensors = sensors => {\r\n    if (!sensors || sensors.length <= 0) {\r\n        return null;\r\n    }\r\n    return (<>\r\n        <p className=\"group-name\">温湿度传感器</p>\r\n        <div className=\"sensors\">\r\n            {\r\n                sensors.map(sensor => (<TempSensorCard sensor={sensor} key={sensor.id}/>))\r\n            }\r\n        </div>\r\n    </>);\r\n};\r\nconst SETTING_PAGE_DELAY = 500;\r\nconst ENTER_CHAR_CODE = 13;\r\n\r\nclass HomeDashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.rootDom = document;\r\n        this.state = {\r\n            searchValue: '',\r\n            highlightSlotTable: {},\r\n            noticeSlot: null,\r\n            groupedSlots: [],\r\n            tempSensors: [],\r\n            currentTab: 1,\r\n            slotOperationVisible: false,\r\n            selectedSlot: {},\r\n            errorNotice: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {setTitle, setTabBarState, showHeader} = this.props;\r\n        setTitle('数据看板');\r\n        setTabBarState(false);\r\n        showHeader(false);\r\n        this.initFetcher();\r\n        this.registerKeyPressHandler();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.fetcherTask) {\r\n            this.fetcherTask.stop();\r\n        }\r\n        this.cancelKeyPressHandler();\r\n    }\r\n\r\n    cancelKeyPressHandler() {\r\n        this.rootDom.onkeypress = null;\r\n    }\r\n\r\n    registerKeyPressHandler() {\r\n        const _this = this;\r\n        this.rootDom.onkeypress = e => {\r\n            const {tagName} = e.target;\r\n            if (tagName.toLowerCase() !== 'body') {\r\n                return;\r\n            }\r\n            const {keyCode} = e;\r\n            if (keyCode === ENTER_CHAR_CODE) {\r\n                _this.submitSearch();\r\n                return;\r\n            }\r\n            const char = String.fromCharCode(keyCode);\r\n            const {searchValue} = _this.state;\r\n            _this.setState({\r\n                searchValue: searchValue + char,\r\n            });\r\n        };\r\n    }\r\n\r\n    submitSearch() {\r\n        const {searchValue} = this.state;\r\n        this.searchSku(searchValue);\r\n    }\r\n\r\n    initFetcher() {\r\n        const _this = this;\r\n        this.fetcherTask = new FetcherTask({\r\n            fetchData: fetchDashboardData,\r\n            onNewData(data) {\r\n                _this.onDashboardDataRefresh(data);\r\n            },\r\n            duration: 1000,\r\n            onError(err) {\r\n                _this.onFetcherError(err);\r\n            }\r\n        });\r\n        this.fetcherTask.start();\r\n    }\r\n\r\n    onFetcherError(err) {\r\n        console.error('Error on fetch dashboard data!', err);\r\n        this.setState({errorNotice: err.toString()})\r\n    }\r\n\r\n    onDashboardDataRefresh(data) {\r\n        const {slotData, temperatureHumidityData} = data;\r\n        const groupedSlots = groupSlots(dict2List(slotData));\r\n        const tempSensors = dict2List(temperatureHumidityData);\r\n        this.setState({\r\n            groupedSlots,\r\n            tempSensors,\r\n            errorNotice: null,\r\n        });\r\n    }\r\n\r\n    searchSku(skuNo) {\r\n        if (!skuNo || !skuNo.trim()) {\r\n            Toast.show('请输入SKU', 1, false);\r\n            return;\r\n        }\r\n        this.setState({searchValue: ''});\r\n        highlightBySku(skuNo).then(res => {\r\n            this.setState({\r\n                highlightSlotTable: asHighlightSlotTable(res),\r\n                noticeSlot: lastHighlightSlot(res),\r\n            });\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    highlightSlotTable: {},\r\n                    noticeSlot: null,\r\n                });\r\n            }, SEARCH_NOTICE_BAR_AUTO_CLEAN_DURATION);\r\n        });\r\n    }\r\n\r\n    toSettingPage() {\r\n        this.setState({currentTab: 2});\r\n        Toast.loading('跳转中', 1, null, true);\r\n        const {history} = this.props;\r\n        setTimeout(() => {\r\n            history.push({\r\n                pathname: '/setting/',\r\n            });\r\n        }, SETTING_PAGE_DELAY);\r\n    }\r\n\r\n    onSlotCardClick(slot) {\r\n        this.setState({\r\n            selectedSlot: slot,\r\n            slotOperationVisible: true,\r\n        })\r\n    }\r\n\r\n    renderErrorNotice() {\r\n        const {errorNotice} = this.state;\r\n        if (!errorNotice) {\r\n            return null;\r\n        }\r\n        return (<NoticeBar icon={<WarningOutlined/>}>\r\n            {errorNotice}\r\n        </NoticeBar>)\r\n    }\r\n\r\n    renderSlotOperationModal() {\r\n        const {slotOperationVisible, selectedSlot} = this.state;\r\n        if (!slotOperationVisible) {\r\n            return null;\r\n        }\r\n        return (<SlotOperationModal\r\n            slot={selectedSlot}\r\n            onClose={() => this.setState({slotOperationVisible: false})}/>);\r\n    }\r\n\r\n    renderTabs() {\r\n        const {currentTab} = this.state;\r\n        const tab1Class = ['item'];\r\n        const tab2Class = ['item'];\r\n        if (currentTab === 1) {\r\n            tab1Class.push('item-focus');\r\n        } else {\r\n            tab2Class.push('item-focus');\r\n        }\r\n        return (<div className=\"tabs-wrapper\">\r\n            <div className=\"tabs\">\r\n                <div className={tab1Class.join(' ')} onClick={() => this.setState({currentTab: 1})}>\r\n                    <div className=\"text\">重力货道数据</div>\r\n                    <div className=\"focus\"/>\r\n                </div>\r\n                <div className={tab2Class.join(' ')} onClick={() => this.toSettingPage()}>\r\n                    <div className=\"text\">重力货道配置</div>\r\n                    <div className=\"focus\"/>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        const {searchValue, noticeSlot, groupedSlots, tempSensors, highlightSlotTable} = this.state;\r\n        return (\r\n            <div className=\"home-dashboard\">\r\n                {\r\n                    this.renderErrorNotice()\r\n                }\r\n                {\r\n                    this.renderTabs()\r\n                }\r\n                <SearchBar value={searchValue}\r\n                           placeholder=\"请输入搜索的SKU号或扫描二维码\"\r\n                           onSubmit={text => this.searchSku(text)}\r\n                           onChange={text => this.setState({searchValue: text})}/>\r\n                {\r\n                    renderNoticeBar(noticeSlot)\r\n                }\r\n                <WingBlank className=\"slots\">\r\n                    {\r\n                        groupedSlots.map(group => <SlotGroup group={group}\r\n                                                             highlightSlotTable={highlightSlotTable}\r\n                                                             onCardClick={slot => this.onSlotCardClick(slot)}\r\n                                                             key={group.name}/>)\r\n                    }\r\n                </WingBlank>\r\n                <WingBlank className=\"temp-sensors\">\r\n                    {\r\n                        renderTempSensors(tempSensors)\r\n                    }\r\n                </WingBlank>\r\n                <div className=\"blank\">-</div>\r\n                {\r\n                    this.renderSlotOperationModal()\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default mapStateAndAction(HomeDashboard);\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from 'antd-mobile';\r\nimport './FloatButton.sass';\r\n\r\nclass FloatButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.defaultPosition = {\r\n            right: 20,\r\n            bottom: 100,\r\n        };\r\n        this.state = {\r\n            down: false,\r\n        };\r\n    }\r\n\r\n    static propTypes = {\r\n        iconType: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func,\r\n    };\r\n\r\n    render() {\r\n        const {down} = this.state;\r\n        return (\r\n            <div className={\"floatButton \" + (down ? 'move' : '')}\r\n                 style={this.defaultPosition}\r\n                 onClick={e => this.callOnClick(e)}\r\n            >\r\n                <Icon type={this.props.iconType} className=\"icon\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    callOnClick(e) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport default FloatButton;\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Card, List, Modal, Switch, Toast} from \"antd-mobile\";\r\nimport {asyncFetchSensors, setTabBarState, setTitle, toggleSensorElable} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {reloadSensors} from \"../../../api/sensor\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSensors: (...args) => dispatch(asyncFetchSensors(...args)),\r\n        toggleSensorElable: (...args) => dispatch(toggleSensorElable(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    }\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        sensors: state.sensors,\r\n    };\r\n};\r\n\r\nclass SensorSetting extends Component {\r\n    componentDidMount() {\r\n        this.props.setTitle('重力传感器设置');\r\n        this.props.fetchSensors();\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.props;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <Card>\r\n                    <Card.Header title=\"传感器信息\" extra=\"WeightSensor\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <List.Item extra={sensors.length}>传感器数量</List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n                <List renderHeader={() => '传感器列表'}>\r\n                    {\r\n                        sensors.map(sensor => (<List.Item key={sensor.id}>\r\n                            <Card>\r\n                                <Card.Header title={`地址:${sensor.address}`} extra={sensor.deviceSn}/>\r\n                                <Card.Body>\r\n                                    <List>\r\n                                        <List.Item extra={<Switch checked={sensor.hasElabel}\r\n                                                                  onChange={(e) => this.toggleElabel(sensor, e)}\r\n                                                                  platform=\"android\"/>}>\r\n                                            启用电子标签\r\n                                        </List.Item>\r\n                                        <List.Item arrow=\"horizontal\" onClick={() => this.toSensorDetails(sensor)}>\r\n                                            传感器详细参数\r\n                                        </List.Item>\r\n                                    </List>\r\n                                </Card.Body>\r\n                                <Card.Footer content={`绑定货道:[${sensor.slot && sensor.slot.slotNo}]`}\r\n                                             extra={sensor.slot && sensor.slot.id}/>\r\n                            </Card>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationActions()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    toSensorDetails(sensor) {\r\n        this.props.history.push({pathname: `/setting/${sensor.address}/sensor-details`});\r\n    }\r\n\r\n\r\n    toggleElabel(sensor, e) {\r\n        const sensorId = sensor.id;\r\n        this.props.toggleSensorElable(sensorId, e);\r\n    }\r\n\r\n    showOperationActions() {\r\n        const buttons = ['重新加载', '取消'];\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: '操作选择',\r\n            options: buttons,\r\n            cancelButtonIndex: buttons.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            if (index === 0) {\r\n                this.callReloadSensors();\r\n            }\r\n        })\r\n    }\r\n\r\n    callReloadSensors() {\r\n        Modal.alert('重新加载', '确定重新加载，该操作需等到一段时间（30s）才可生效?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '确定', onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('加载成功!', 1, false);\r\n                        })\r\n                    }\r\n                },\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(SensorSetting);\r\n","import React, {Component} from 'react';\r\nimport {List} from \"antd-mobile\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nclass SettingMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('设置');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"setting\">\r\n                <List renderHeader={() => '设置'}>\r\n                    <List.Item onClick={() => this.go('/setting/sensor')} arrow=\"horizontal\">\r\n                        重力传感器\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/th-sensor')} arrow=\"horizontal\">\r\n                        温湿度传感器\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/slot')} arrow=\"horizontal\">\r\n                        货道管理\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/connection')} arrow=\"horizontal\">\r\n                        连接管理\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/system')} arrow=\"horizontal\">\r\n                        系统信息\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\" onClick={() => this.go('/setting/system-check')}>\r\n                        系统检查\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/overview')} arrow=\"horizontal\">\r\n                        货道概览信息\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/extra-setting')} arrow=\"horizontal\">\r\n                        扩展页面设置\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    go(path) {\r\n        this.props.history.push({\r\n            pathname: path\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SettingMenu));\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Checkbox, List, Modal, Toast} from 'antd-mobile';\r\nimport {doZeroAll, fetchAllSlots, mergeSlotsByIds, resetSlotBySlots} from '../../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport './SlotSetting.sass';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst OperationActions = ['刷新', '全部清零', '合并选中货道', '拆分选中货道', '管理选中货道', '全选', '取消'];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\nconst isContinueSelected = slots => {\r\n    const selectedMap = {};\r\n    let selectedMinAddress = 999999;\r\n    for (let slot of slots) {\r\n        if (slot.selected) {\r\n            selectedMap[slot.address] = slot;\r\n            if (slot.address < selectedMinAddress) {\r\n                selectedMinAddress = slot.address;\r\n            }\r\n        }\r\n    }\r\n    delete selectedMap[selectedMinAddress];\r\n    while (Object.keys(selectedMap).length > 0) {\r\n        selectedMinAddress++;\r\n        const nextSelected = selectedMap[selectedMinAddress];\r\n        if (!nextSelected) {\r\n            return false;\r\n        }\r\n        delete selectedMap[selectedMinAddress];\r\n    }\r\n    return true;\r\n};\r\n\r\nclass SlotSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slots: [],\r\n            selectedNums: 0,\r\n            continueSelected: true,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(false);\r\n        this.props.setTitle('重力货道设置');\r\n        this.fetchSlots();\r\n    }\r\n\r\n    onItemClick(slot) {\r\n        const {slots} = this.state;\r\n        for (let s of slots) {\r\n            if (s.id === slot.id) {\r\n                s.selected = !s.selected;\r\n            }\r\n        }\r\n        const selectedNums = slots.filter(slot => slot.selected).length;\r\n        const continueSelected = isContinueSelected(slots);\r\n        this.setState({\r\n            slots: slots,\r\n            selectedNums: selectedNums,\r\n            continueSelected: continueSelected,\r\n        });\r\n    }\r\n\r\n    renderSlotSensors(sensors) {\r\n        if (sensors.length <= 0) {\r\n            return (<span className=\"msg\">该货道已被合并</span>);\r\n        }\r\n        return sensors.map(sensor => (<span className=\"sensor-dot\" key={sensor.id}>{sensor.address}</span>));\r\n    }\r\n\r\n    renderSlotItem(slot) {\r\n        const sensors = slot.sensors || [];\r\n        if (slot.id < 0 && sensors.length <= 0) {\r\n            return\r\n        }\r\n        return (<Item key={slot.id} arrow=\"horizontal\" onClick={() => this.onItemClick(slot)}>\r\n            <div className=\"slot-item\">\r\n                <div className=\"cb-wrapper\">\r\n                    <Checkbox checked={slot.selected}/>\r\n                </div>\r\n                <div className=\"slot-no\">\r\n                    <span>{slot.slotNo}</span>\r\n                </div>\r\n                <div>\r\n                    {\r\n                        this.renderSlotSensors(sensors)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Item>);\r\n    }\r\n\r\n    render() {\r\n        const {slots, selectedNums, continueSelected} = this.state;\r\n        const _this = this;\r\n        const selectedNumStyle = continueSelected ? 'continue' : 'warn';\r\n        return (\r\n            <div className=\"slot-setting\">\r\n                <List renderHeader={() => '重力货道列表'} className=\"slots\">\r\n                    {\r\n                        slots.map(slot => _this.renderSlotItem(slot))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationSheet()}/>\r\n                <div className=\"fixed-tips\">\r\n                    <p>已选择：\r\n                        <span className={selectedNumStyle}>{selectedNums}</span>\r\n                        个\r\n                        <span className={selectedNumStyle}>{continueSelected ? '连续选择' : '未连续选择'}</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    findSelectedSlots() {\r\n        const {slots} = this.state;\r\n        return slots.filter(slot => slot.selected);\r\n    }\r\n\r\n    mergeSlot() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length < 2) {\r\n            Toast.show('请选中一个以上货道', 3, false);\r\n            return;\r\n        }\r\n        const slotNos = slots.map(slot => slot.slotNo).join(',');\r\n        const {continueSelected} = this.state;\r\n        if (!continueSelected) {\r\n            Modal.alert('无法合并不连续货道', '合并货道时需选择地址连续的货道！', [{text: '知道了'}]);\r\n            return;\r\n        }\r\n        Modal.alert('合并货道', `确认合并:${slotNos}?`, [\r\n            {\r\n                text: '取消',\r\n            },\r\n            {\r\n                text: '确定',\r\n                onPress: () => {\r\n                    mergeSlotsByIds(slots.map(slot => slot.id)).then(() => {\r\n                        Toast.show('合并成功', 3, false);\r\n                        this.fetchSlots();\r\n                    });\r\n                },\r\n            }\r\n        ]);\r\n    }\r\n\r\n    resetSlotSensor() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length < 1) {\r\n            Toast.show('请选中至少一个货道', 3, false);\r\n            return;\r\n        }\r\n        const slotNos = slots.map(slot => slot.slotNo).join(',');\r\n        Modal.alert('拆分货道', `确认拆分:${slotNos}?`, [\r\n            {\r\n                text: '取消',\r\n            },\r\n            {\r\n                text: '确定',\r\n                onPress: () => {\r\n                    resetSlotBySlots(slots.map(slot => slot.id)).then(() => {\r\n                        Toast.show('拆分成功', 3, false);\r\n                        this.fetchSlots();\r\n                    });\r\n                },\r\n            }\r\n        ]);\r\n    }\r\n\r\n    chooseAllSlotSensor() {\r\n        const {slots} = this.state;\r\n        const selected = slots.filter(slot => slot.selected).length !== slots.length;\r\n        for (let slot of slots) {\r\n            slot.selected = selected;\r\n        }\r\n        this.setState({slots});\r\n    }\r\n\r\n    toSelectedSlotDetails() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length !== 1) {\r\n            Toast.show('请选中一个货道', 3, false);\r\n            return;\r\n        }\r\n        const slot = slots[0];\r\n        this.toSlotDetail(slot);\r\n    }\r\n\r\n    showOperationSheet() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: OperationActions,\r\n            title: '操作选择',\r\n            cancelButtonIndex: OperationActions.length - 1,\r\n            destructiveButtonIndex: 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.fetchSlots();\r\n                    break;\r\n                case 1:\r\n                    this.doZeroAll();\r\n                    break;\r\n                case 2:\r\n                    this.mergeSlot();\r\n                    break;\r\n                case 3:\r\n                    this.resetSlotSensor();\r\n                    break;\r\n                case 4:\r\n                    this.toSelectedSlotDetails();\r\n                    break;\r\n                case 5:\r\n                    this.chooseAllSlotSensor();\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        })\r\n    }\r\n\r\n    toSlotDetail(slot) {\r\n        this.props.history.push({\r\n            pathname: `/setting/slot-detail/${slot.id}`,\r\n        });\r\n    }\r\n\r\n    doZeroAll() {\r\n        doZeroAll().then(() => {\r\n            Toast.show('全部货道已经被清零!');\r\n        });\r\n    }\r\n\r\n    fetchSlots() {\r\n        fetchAllSlots().then(res => {\r\n            const slots = res.map(slot => {\r\n                slot.selected = false;\r\n                return slot;\r\n            }).sort((a, b) => a.address - b.address);\r\n            this.setState({slots})\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotSetting));\r\n","import React, {Component} from 'react';\r\nimport {asyncDeleteConnection, asyncFetchConnection, setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Flex, InputItem, List, Modal, Picker, Toast} from 'antd-mobile';\r\nimport {asConnectionType} from '../../../util/DataConvertor';\r\nimport './ConnectionSetting.sass'\r\nimport {createConnection, scanDevice, scanPort, startScanTempHumiSensors} from '../../../api/connection';\r\nimport {connect} from 'react-redux';\r\n\r\nconst ConnectionOperations = [\r\n    '删除',\r\n    '扫描重力货道',\r\n    '扫描温湿度传感器',\r\n    '取消',\r\n];\r\nconst connectionTypes = [\r\n    {\r\n        label: '串口',\r\n        value: 1,\r\n    },\r\n    {\r\n        label: '网络',\r\n        value: 2,\r\n    }\r\n];\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchConnection: (...args) => dispatch(asyncFetchConnection(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        deleteConnection: (...args) => dispatch(asyncDeleteConnection(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        connections: state.connections,\r\n    };\r\n};\r\n\r\nclass ConnectionSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            createDialogVisible: false,\r\n            create: {\r\n                type: null,\r\n                target: ''\r\n            },\r\n            serialPorts: []\r\n        };\r\n        this.props.setTitle('物理连接设置');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchConnection();\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {connections} = this.props;\r\n        const {createDialogVisible} = this.state;\r\n        const {create} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => '连接列表'}>\r\n                    {\r\n                        connections.map(connection => (\r\n                            <Item key={connection.id} arrow=\"horizontal\"\r\n                                  onClick={() => this.showConnectionOperations(connection)}>\r\n                                <Flex justify=\"between\" className=\"connectionItem\">\r\n                                    <span className=\"type\">{asConnectionType(connection.type)}</span>\r\n                                    <span className=\"target\">{connection.target}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                    <Item key=\"createButton\">\r\n                        <Button type=\"primary\" onClick={() => this.showCreateDialog()}>创建连接</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={createDialogVisible}\r\n                    transparent\r\n                    title=\"创建连接\"\r\n                    footer={[\r\n                        {text: '取消', onPress: () => this.setState({createDialogVisible: false})},\r\n                        {text: '创建', onPress: () => this.createConnection()},\r\n                    ]}\r\n                    onClose={() => this.setState({createDialogVisible: false})}>\r\n                    <List>\r\n                        <Picker data={connectionTypes} title=\"连接类型\" cols={1}\r\n                                extra=\"请选择\"\r\n                                onChange={e => this.setCreateType(e)}>\r\n                            <List.Item>\r\n                                <InputItem value={create.type && asConnectionType(create.type)}\r\n                                           disabled={true}\r\n                                           placeholder=\"类型\"/>\r\n                            </List.Item>\r\n                        </Picker>\r\n                        {\r\n                            (() => {\r\n                                const input = (<List.Item key=\"target\"><InputItem placeholder=\"Connection Target\"\r\n                                                                                  onChange={e => this.setCreateTarget(e)}\r\n                                                                                  value={create.target}\r\n                                                                                  disabled={this.state.create.type === 1}/></List.Item>);\r\n                                if (create.type === 1) {\r\n                                    return (<Picker data={this.state.serialPorts}\r\n                                                    extra=\"选择\"\r\n                                                    title=\"串口列表\"\r\n                                                    cols={1}\r\n                                                    onChange={arr => this.setCreateTargetSerial(arr)}>\r\n                                        {input}\r\n                                    </Picker>)\r\n                                } else {\r\n                                    return input;\r\n                                }\r\n                            })()\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    deleteConnection(connection) {\r\n        Modal.alert('删除连接!', '确定删除连接？',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '删除',\r\n                    onPress: () => {\r\n                        this.props.deleteConnection(connection.id);\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    scanConnection(connection) {\r\n        Modal.alert('扫描重力传感器!', '扫描该连接下的传感器？?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '扫描',\r\n                    onPress: () => {\r\n                        scanDevice(connection.id).then(() => {\r\n                            Toast.show('扫描已开始!', 2, false)\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    showCreateDialog() {\r\n        this.setState({\r\n            createDialogVisible: true\r\n        })\r\n    }\r\n\r\n    createConnection() {\r\n        createConnection(this.state.create).then(() => {\r\n            this.props.fetchConnection();\r\n            this.setState({\r\n                create: {},\r\n                createDialogVisible: false,\r\n            });\r\n        })\r\n    }\r\n\r\n    setCreateType(types) {\r\n        if (types.length < 1) {\r\n            Toast.show('请选择连接类型!');\r\n        }\r\n        const type = types[0];\r\n        const newCreate = {\r\n            type,\r\n            target: ''\r\n        };\r\n        this.setState({create: newCreate});\r\n        if (type === 1 && this.state.serialPorts.length <= 0) {\r\n            scanPort().then(res => {\r\n                const serialPorts = [];\r\n                for (const port of res) {\r\n                    serialPorts.push({\r\n                        label: port,\r\n                        value: port,\r\n                    });\r\n                }\r\n                this.setState({serialPorts});\r\n            });\r\n        }\r\n    }\r\n\r\n    setCreateTarget(e) {\r\n        const create = {\r\n            ...this.state.create,\r\n            target: e,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    setCreateTargetSerial(serialIndexList) {\r\n        if (!serialIndexList) {\r\n            Toast.show('请选择串口!');\r\n            return;\r\n        }\r\n        const port = serialIndexList[0];\r\n        const create = {\r\n            ...this.state.create,\r\n            target: port,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    startScanTHSensors(connection) {\r\n        Modal.alert('扫描温湿度传感器!', '扫描该连接下的温湿度传感器?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '扫描',\r\n                    onPress: () => {\r\n                        startScanTempHumiSensors(connection.id).then(() => {\r\n                            Toast.show('扫描已开始!', 2, false)\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    showConnectionOperations(connection) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: `${connection.target} 操作`,\r\n            options: ConnectionOperations,\r\n            cancelButtonIndex: ConnectionOperations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.deleteConnection(connection);\r\n                    break;\r\n                case 1:\r\n                    this.scanConnection(connection);\r\n                    break;\r\n                case 2:\r\n                    this.startScanTHSensors(connection);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(ConnectionSetting);\r\n","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDetail, toggleELabelState, updateSlot, zeroOne} from '../../../api/slot';\r\nimport {ActionSheet, Button, InputItem, List, Switch, Toast, WingBlank} from 'antd-mobile';\r\nimport {setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst ActionButtons = [\r\n    '清零该货道',\r\n    '删除货道',\r\n    '取消',\r\n];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotDetailSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {}\r\n        };\r\n        this.slotId = this.props.match.params.id;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle(`${this.slotId} 货道设置`);\r\n        this.fetchSlotInfo();\r\n    }\r\n\r\n    fetchSlotInfo() {\r\n        fetchDetail(this.slotId).then(res => {\r\n            this.setState({slot: res});\r\n            this.props.setTitle(`${res.slotNo} 货道设置`);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {slot} = this.state;\r\n        return (\r\n            <div className=\"slotDetail\">\r\n                <List renderHeader={() => '货道信息'}>\r\n                    <Item key=\"slotNo\">\r\n                        <InputItem placeholder=\"逻辑货道号\" value={slot.slotNo}\r\n                                   onChange={text => this.setUpdateSlotProp({slotNo: text})}>货道号</InputItem>\r\n                    </Item>\r\n                    <Item key=\"SkuName\">\r\n                        <InputItem placeholder=\"SKU名称\" value={slot.skuName}\r\n                                   onChange={text => this.setUpdateSlotProp({skuName: text})}>SKU名称</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuNo\">\r\n                        <InputItem placeholder=\"SKU号\" value={slot.skuNo}\r\n                                   onChange={text => this.setUpdateSlotProp({skuNo: text})}>SKU号</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuApw\">\r\n                        <InputItem placeholder=\"SKU单重\" value={slot.skuApw}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuApw: text})}>SKU单重</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuTolerance\">\r\n                        <InputItem placeholder=\"SKU允差\" value={slot.skuTolerance}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuTolerance: text})}>SKU允差</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuShelfLifeOpenDays\">\r\n                        <InputItem placeholder=\"开封后保质天数\" value={slot.skuShelfLifeOpenDays}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuShelfLifeOpenDays: text})}>\r\n                            保质期\r\n                        </InputItem>\r\n                    </Item>\r\n                    <Item key=\"applyBtn\">\r\n                        <WingBlank><Button type=\"primary\" onClick={() => this.applyModify()}>保存</Button></WingBlank>\r\n                    </Item>\r\n                </List>\r\n                <List renderHeader={() => 'Operations'}>\r\n                    <List.Item\r\n                        key=\"hasELabel\"\r\n                        extra={<Switch\r\n                            checked={slot.hasElabel}\r\n                            onChange={state => this.toggleELabel(state)}\r\n                            platform=\"android\"/>}>\r\n                        启用电子标签\r\n                    </List.Item>\r\n                    <List.Item\r\n                        arrow=\"horizontal\"\r\n                        onClick={() => this.props.history.push({pathname: `/setting/slot-sensors/${slot.id}`})}>\r\n                        货道传感器管理\r\n                    </List.Item>\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.openOperation()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    openOperation() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: '操作选择',\r\n            options: ActionButtons,\r\n            destructiveButtonIndex: 1,\r\n            cancelButtonIndex: ActionButtons.length - 1,\r\n        }, buttonIndex => {\r\n            switch (buttonIndex) {\r\n                case 0:\r\n                    this.doZero();\r\n                    break;\r\n                case 1:\r\n                    Toast.show('暂时不能删除货道', 2, false);\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    doZero() {\r\n        const {slot} = this.state;\r\n        zeroOne(slot.slotNo).then(() => {\r\n            Toast.show('清零成功!');\r\n        });\r\n    }\r\n\r\n    setUpdateSlotProp(props) {\r\n        const slot = {\r\n            ...this.state.slot,\r\n            ...props\r\n        };\r\n        this.setState({slot});\r\n    }\r\n\r\n    applyModify() {\r\n        updateSlot(this.state.slot).then(() => {\r\n            Toast.show('Apply Success!');\r\n        });\r\n    }\r\n\r\n    toggleELabel(hasELabel) {\r\n        toggleELabelState({id: this.slotId, hasELabel}).then(() => {\r\n            Toast.show('Toggle ELabel Success!');\r\n            this.fetchSlotInfo();\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotDetailSetting));\r\n","import React, {Component} from 'react';\r\nimport {Button, List, Modal, Switch, TextareaItem, Toast} from 'antd-mobile';\r\nimport {setEnableTabBarAction, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {fetchSystemInfo} from '../../../api/dashboard';\r\nimport {reloadLibPath} from '../../../api/serial';\r\nimport {stopWeightService} from '../../../api/sensor';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setEnableTabBar: (...args) => dispatch(setEnableTabBarAction(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass SystemSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemInfo: {},\r\n            libLoadVisible: false,\r\n            reloadLibPath: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('系统信息');\r\n        fetchSystemInfo().then(res => {\r\n            this.setState({\r\n                systemInfo: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {systemInfo, libLoadVisible, reloadLibPath} = this.state;\r\n        const {enableTabBar} = this.props;\r\n        return (\r\n            <div className=\"systemSettings\">\r\n                <List renderHeader={() => '系统信息'}>\r\n                    <Item key=\"appName\" extra={systemInfo.appName}>应用名称</Item>\r\n                    <Item key=\"appVersion\" extra={systemInfo.appVersion}>应用版本</Item>\r\n                    <Item key=\"dbVersion\" extra={systemInfo.dbVersion}>数据库版本</Item>\r\n                    <Item key=\"dbVersionName\" extra={systemInfo.dbVersionName}>数据库版本名</Item>\r\n                    <Item key=\"pid\" extra={systemInfo.pid}>进程ID</Item>\r\n                    <Item key=\"libPath\" arrow=\"horizontal\"\r\n                          onClick={() => this.showLibLoadModal()}> 驱动路径: {systemInfo.libPath}</Item>\r\n                </List>\r\n                <List renderHeader={() => '系统设置'}>\r\n                    <Item\r\n                        key=\"tabBar\"\r\n                        extra={<Switch\r\n                            checked={enableTabBar}\r\n                            onChange={target => this.setEnableTabBar(target)}\r\n                            platform=\"android\"/>}>\r\n                        底部标签栏\r\n                    </Item>\r\n                    <Item key=\"systemProps\" arrow=\"horizontal\"\r\n                          onClick={() => this.props.history.push({pathname: '/setting/system-props'})}>\r\n                        JVM信息\r\n                    </Item>\r\n                    <Item key=\"stopService\">\r\n                        <Button type=\"warning\" onClick={() => this.stopWeightService()}>停止重力服务</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={libLoadVisible}\r\n                    title=\"重新加载驱动\"\r\n                    transparent\r\n                    maskClosable={true}\r\n                    footer={[\r\n                        {\r\n                            text: '取消',\r\n                            onPress: () => this.showLibLoadModal(false),\r\n                        },\r\n                        {\r\n                            text: '加载',\r\n                            onPress: () => this.reloadLibrary()\r\n                        },\r\n                    ]}>\r\n                    <TextareaItem\r\n                        placeholder=\"驱动路径!\"\r\n                        autoHeight\r\n                        value={reloadLibPath} onChange={e => this.setState({reloadLibPath: e})}/>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setEnableTabBar(target) {\r\n        this.props.setEnableTabBar(target);\r\n    }\r\n\r\n    showLibLoadModal(show = true) {\r\n        const reloadLibPath = this.state.systemInfo.libPath;\r\n        this.setState({\r\n            reloadLibPath,\r\n            libLoadVisible: show\r\n        });\r\n    }\r\n\r\n    reloadLibrary() {\r\n        reloadLibPath(this.state.reloadLibPath).then(res => {\r\n            Toast.show(`加载成功: [${res}]`);\r\n            this.setState({\r\n                libLoadVisible: false,\r\n            })\r\n        })\r\n    }\r\n\r\n    stopWeightService() {\r\n        stopWeightService().then(() => {\r\n            Toast.show(\"重力服务已停止!\");\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props, mapAction2Props)(SystemSetting));\r\n","import {request} from './request';\r\n\r\nexport const reloadLibPath = path => {\r\n    return request({\r\n        url: '/api/serial/load-lib',\r\n        method: 'post',\r\n        data: {\r\n            libPath: path\r\n        }\r\n    })\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchSystemProps} from '../.././../api/dashboard';\r\nimport {List, TextareaItem} from 'antd-mobile';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    console.log(props, dispatch);\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\nconst {Item} = List;\r\n\r\nclass SystemPropsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemProps: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('JVM环境变量');\r\n        fetchSystemProps().then(res => {\r\n            const propList = [];\r\n            for (const name in res) {\r\n                if (res.hasOwnProperty(name)) {\r\n                    propList.push({\r\n                        name,\r\n                        value: res[name],\r\n                    });\r\n                }\r\n            }\r\n            this.setState({\r\n                systemProps: propList\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {systemProps} = this.state;\r\n        return (\r\n            <div className=\"systemProps\">\r\n                <List renderHeader={() => 'System Properties'}>\r\n                    {\r\n                        systemProps.map(p => (<Item key={p.name}>\r\n                            <div>{p.name}</div>\r\n                            <TextareaItem value={p.value} autoHeight labelNumber={5}/>\r\n                        </Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SystemPropsSetting);\r\n","import React, {Component} from 'react';\r\nimport {fetchAllWithSensors, fetchDetail} from '../../../api/slot';\r\nimport {setSlotByIds} from '../../../api/sensor';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Flex, List, Modal, Picker, Toast, WingBlank} from \"antd-mobile\";\r\nimport './SlotSensorsSetting.sass'\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\nconst SENSOR_OPERATIONS = ['移除', '取消'];\r\n\r\nclass SlotSensorsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {},\r\n            sensors: [],\r\n            sensorRemoveMode: false,\r\n            allSlots: [],\r\n            sensorPickerData: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('货道传感器管理');\r\n        const {id} = this.props.match.params;\r\n        fetchDetail(id).then(res => {\r\n            const sensors = res.sensors;\r\n            for (let sensor of sensors) {\r\n                sensor.changed = false;\r\n            }\r\n            this.setState({\r\n                slot: res,\r\n                sensors: sensors,\r\n            });\r\n            this.props.setTitle(`传感器管理[${res.slotNo}]`);\r\n        });\r\n        fetchAllWithSensors().then(res => {\r\n            const pickerData = [];\r\n            for (let slot of res) {\r\n                const sensors = slot.sensors;\r\n                const children = [];\r\n                for (let sensor of sensors) {\r\n                    children.push({\r\n                        value: sensor.id,\r\n                        label: sensor.address,\r\n                    });\r\n                }\r\n                pickerData.push({\r\n                    value: slot.id,\r\n                    label: slot.slotNo,\r\n                    children: children,\r\n                });\r\n            }\r\n            this.setState({allSlots: res, sensorPickerData: pickerData,});\r\n        });\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {sensorRemoveMode, sensorPickerData} = this.state;\r\n        const sensorItem = (\r\n            <List.Item key={sensor.id}\r\n                       arrow=\"horizontal\"\r\n                       className={`sensor-item ${sensor.changed ? 'sensor-item-changed' : ''}`}\r\n                       onClick={() => this.openSensorOperations(sensor)}\r\n                       extra={sensorRemoveMode ? '点击删除' : ''}>\r\n                {sensor.deviceSn}\r\n            </List.Item>);\r\n        if (sensorRemoveMode) {\r\n            return sensorItem;\r\n        } else {\r\n            return (<Picker\r\n                data={sensorPickerData}\r\n                key={sensor.id}\r\n                value={[sensor.slotId, sensor.id]}\r\n                cols={2}\r\n                onChange={v => this.onSelectSensor(sensor, v)}>{sensorItem}</Picker>)\r\n        }\r\n    }\r\n\r\n    onSelectSensor(oldSensor, selected) {\r\n        const slotId = selected[0];\r\n        const sensorId = selected[1];\r\n        let index = -1;\r\n        const selectedSensors = this.state.sensors;\r\n        for (let i in selectedSensors) {\r\n            if (!selectedSensors.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            const sensor = selectedSensors[i];\r\n            if (sensor.id === oldSensor.id) {\r\n                index = i;\r\n            }\r\n        }\r\n        let selectedSensor;\r\n        for (let slot of this.state.allSlots) {\r\n            if (slot.id === slotId) {\r\n                for (let sensor of slot.sensors) {\r\n                    if (sensor.id === sensorId) {\r\n                        sensor.changed = true;\r\n                        selectedSensor = sensor;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let s of selectedSensors) {\r\n            if (s.id === selectedSensor.id) {\r\n                Toast.show('传感器重复!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        selectedSensors[index] = selectedSensor;\r\n        this.setState({sensors: selectedSensors,})\r\n    }\r\n\r\n    render() {\r\n        const {slot, sensors, sensorRemoveMode} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => '货道信息'}>\r\n                    <List.Item extra={slot.slotNo}>货道号</List.Item>\r\n                    <List.Item extra={slot.skuName}>SKU名称</List.Item>\r\n                    <List.Item extra={slot.skuNo}>SKU号</List.Item>\r\n                </List>\r\n                <List renderHeader={() => 'Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => this.renderSensorItem(sensor))\r\n                    }\r\n                    <List.Item>\r\n                        <WingBlank>\r\n                            <Flex justify={\"between\"}>\r\n                                <Flex.Item>\r\n                                    <Button type=\"warning\"\r\n                                            onClick={() => this.setState({sensorRemoveMode: !this.state.sensorRemoveMode})}>\r\n                                        {sensorRemoveMode ? '退出删除' : '删除'}\r\n                                    </Button>\r\n                                </Flex.Item>\r\n                                <Flex.Item>\r\n                                    <Button type=\"ghost\" onClick={() => this.addSensor()}\r\n                                            disabled={sensorRemoveMode}>添加</Button>\r\n                                </Flex.Item>\r\n                                <Flex.Item>\r\n                                    <Button type=\"primary\" disabled={sensorRemoveMode}\r\n                                            onClick={() => this.applySensors()}>保存</Button>\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </WingBlank>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    addSensor() {\r\n        for (let sensor of this.state.sensors) {\r\n            if (sensor.id < 0) {\r\n                Toast.show('请选择一个传感器!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        const {sensors} = this.state;\r\n        sensors.push({\r\n            id: -1,\r\n            deviceSn: '未选择',\r\n            changed: true,\r\n        });\r\n        this.setState({sensors});\r\n    }\r\n\r\n    openSensorOperations(sensor) {\r\n        const {sensorRemoveMode} = this.state;\r\n        if (!sensorRemoveMode) {\r\n            return;\r\n        }\r\n        ActionSheet.showActionSheetWithOptions(\r\n            {\r\n                options: SENSOR_OPERATIONS,\r\n                title: `传感器 ${sensor.deviceSn}`,\r\n                cancelButtonIndex: 2,\r\n                destructiveButtonIndex: 0,\r\n            },\r\n            index => {\r\n                if (index === 0) {\r\n                    Modal.alert('移除传感器',\r\n                        `移除传感器 ${sensor.deviceSn}?`,\r\n                        [\r\n                            {text: '取消'},\r\n                            {\r\n                                text: '移除',\r\n                                onPress: () => this.removeSensor(sensor),\r\n                            }\r\n                        ]);\r\n                }\r\n            })\r\n    }\r\n\r\n    removeSensor(sensor) {\r\n        const {sensors} = this.state;\r\n        const newSensors = [];\r\n        for (let i in sensors) {\r\n            if (!sensors.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            const s = sensors[i];\r\n            if (s.id === sensor.id) {\r\n                continue;\r\n            }\r\n            newSensors.push(s);\r\n        }\r\n        this.setState({sensors: newSensors});\r\n    }\r\n\r\n    applySensors() {\r\n        const sensorIds = this.state.sensors.map(v => v.id);\r\n        for (let id of sensorIds) {\r\n            if (id <= 0) {\r\n                Toast.show('Any sensor not selected!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        const slot = this.state.slot;\r\n        Modal.alert('Apply Sensor Setting', 'Do you want to apply this changes?', [{text: 'Cancel'}, {\r\n            text: 'Apply',\r\n            onPress: () => {\r\n                setSlotByIds(sensorIds, slot.id).then(res => {\r\n                    Toast.show('Apply Success!');\r\n                    const {sensors} = this.state;\r\n                    for (let s of sensors) {\r\n                        s.changed = false;\r\n                    }\r\n                    this.setState({sensors});\r\n                })\r\n            }\r\n        }])\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SlotSensorsSetting);\r\n","import React, {Component} from 'react';\r\nimport {dumpAll} from '../../../api/sensor';\r\nimport {Button, List, Modal, TextareaItem, WingBlank} from 'antd-mobile';\r\n\r\nclass Overview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        dumpAll().then(res => {\r\n            const sensors = res.sort((a, b) => a.address - b.address);\r\n            this.setState({sensors})\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.state;\r\n        return (\r\n            <div className=\"overview\">\r\n                <List renderHeader={() => 'All Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => (\r\n                            <List.Item key={sensor.id}>\r\n                                {this.renderSensorItem(sensor)}\r\n                            </List.Item>\r\n                        ))\r\n                    }\r\n                </List>\r\n                <WingBlank>\r\n                    <Button onClick={() => this.refresh()} type=\"primary\">刷新</Button>\r\n                </WingBlank>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {slot, connection} = sensor;\r\n        return (<div onClick={() => this.onSensorClick(sensor)}>\r\n            传感器:[id:{sensor.id}/address:{sensor.address}]\r\n            货道:[id:{slot && slot.id}/No:{slot && slot.slotNo}]\r\n            连接:[id:{connection && connection.id}/{connection && connection.target}]\r\n        </div>);\r\n    }\r\n\r\n    onSensorClick(sensor) {\r\n        const {connection, slot} = sensor;\r\n        sensor.slot = null;\r\n        sensor.connection = null;\r\n        const list = (<List renderHeader={() => '传感器'}>\r\n            <TextareaItem value={JSON.stringify(sensor)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(connection)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(slot)} autoHeight/>\r\n        </List>);\r\n        Modal.alert('Sensor', list);\r\n    }\r\n}\r\n\r\nexport default Overview;\r\n","import React, {Component} from 'react';\r\nimport {disconnectTcp, fetchDatabaseTables, fetchStatusTable, resetDatabase} from '../../../api/systemStatus';\r\nimport {Button, Flex, InputItem, List, Modal, Picker, Toast} from 'antd-mobile';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchSoftFilterLevel, updateSoftFilterLevel} from '../../../api/config';\r\nimport {setCompensationState} from '../../../api/slot';\r\nimport {cleanAllBackupSn, reloadSensors} from '../../../api/sensor';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\nconst renderConnectionStatus = status => {\r\n    if (status) {\r\n        return (<span style={{color: '#1F90E6'}}>Connected</span>)\r\n    } else {\r\n        return (<span style={{color: '#E94F4F'}}>Disconnected</span>)\r\n    }\r\n};\r\n\r\nconst SoftFilterLevelTable = {\r\n    0: '关闭[0]',\r\n    1: '低[1]',\r\n    2: '中[2]',\r\n    3: '高[3]',\r\n};\r\n\r\nconst SoftFilterLevels = [\r\n    {\r\n        label: SoftFilterLevelTable[3],\r\n        value: 3,\r\n        key: 3,\r\n    },\r\n    {\r\n        label: SoftFilterLevelTable[2],\r\n        value: 2,\r\n        key: 2,\r\n    },\r\n    {\r\n        label: SoftFilterLevelTable[1],\r\n        value: 1,\r\n        key: 1,\r\n    },\r\n    {\r\n        label: SoftFilterLevelTable[0],\r\n        value: 0,\r\n        key: 0,\r\n    },\r\n];\r\n\r\nconst doSetCompensationState = state => {\r\n    setCompensationState(state).then(() => {\r\n        Toast.show(`补偿${state ? '开启' : '关闭'}成功！`, 3, false);\r\n    });\r\n};\r\n\r\nclass SystemCheck extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            statusTable: {\r\n                tcpApi: {},\r\n            },\r\n            databaseTables: [],\r\n            softFilterLevel: -1,\r\n            softFilterLevelLabel: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('系统检查');\r\n        this.refreshStatusTable();\r\n        this.refreshSoftFilterLevel();\r\n    }\r\n\r\n    refreshSoftFilterLevel() {\r\n        fetchSoftFilterLevel().then(res => {\r\n            const {value} = res;\r\n            const level = parseInt(value);\r\n            this.setState({\r\n                softFilterLevelLabel: SoftFilterLevelTable[level],\r\n                softFilterLevel: level,\r\n            });\r\n        });\r\n    }\r\n\r\n    refreshStatusTable() {\r\n        fetchStatusTable().then(res => {\r\n            this.setState({\r\n                statusTable: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    refreshDatabaseTables() {\r\n        fetchDatabaseTables().then(res => {\r\n            this.setState({databaseTables: res,})\r\n        });\r\n    }\r\n\r\n    showCompensationOperations() {\r\n        Modal.operation([\r\n            {\r\n                text: '关闭补偿', onPress: () => {\r\n                    doSetCompensationState(false);\r\n                }\r\n            },\r\n            {\r\n                text: '开启补偿', onPress: () => {\r\n                    doSetCompensationState(true);\r\n                }\r\n            },\r\n        ]);\r\n    }\r\n\r\n    render() {\r\n        const {statusTable, databaseTables, softFilterLevel, softFilterLevelLabel} = this.state;\r\n        const {tcpApi} = statusTable;\r\n        return (\r\n            <div className=\"system-check\">\r\n                <List renderHeader={() => 'SCADA_API状态'}>\r\n                    <List.Item extra={renderConnectionStatus(tcpApi.connection)}>\r\n                        连接状态\r\n                    </List.Item>\r\n                    <List.Item extra={tcpApi.ip}>\r\n                        IP地址\r\n                    </List.Item>\r\n                    <List.Item extra={tcpApi.port}>\r\n                        端口\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\"\r\n                               onClick={() => this.props.history.push({pathname: '/setting/message-log'})}>\r\n                        交互日志\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <Flex justify=\"between\">\r\n                            <Flex.Item>\r\n                                <Button type=\"warning\" onClick={() => this.reconnectTcp()}>重新连接</Button>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <Button type=\"primary\" onClick={() => this.refreshStatusTable()}>刷新</Button>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </List.Item>\r\n                </List>\r\n                <List renderHeader={() => '传感器信息'}>\r\n                    <List.Item arrow=\"horizontal\"\r\n                               onClick={() => this.props.history.push({pathname: '/setting/sensor-healthy'})}>\r\n                        传感器健康\r\n                    </List.Item>\r\n                    <Picker data={SoftFilterLevels}\r\n                            cols={1}\r\n                            title=\"软件滤波等级\"\r\n                            value={softFilterLevel}\r\n                            onChange={value => {\r\n                                this.setSoftFilterLevel(value)\r\n                            }}>\r\n                        <InputItem value={softFilterLevelLabel}>软滤波等级</InputItem>\r\n                    </Picker>\r\n                    <List.Item extra=\"Disable/Enable\"\r\n                               onClick={() => this.showCompensationOperations()}>\r\n                        补偿管理\r\n                    </List.Item>\r\n                    <List.Item extra=\"强制刷新货道数据\"\r\n                               onClick={() => this.showReloadConfirm()}>\r\n                        重新加载\r\n                    </List.Item>\r\n                    <List.Item extra=\"清除备份SN并重新收集\"\r\n                               onClick={() => this.showCleanBackupSnConfirm()}>\r\n                        重新收集SN\r\n                    </List.Item>\r\n                </List>\r\n                <List renderHeader={() => '数据库信息'}>\r\n                    {databaseTables.map(tableName => (<List.Item key={tableName}>{tableName}</List.Item>))}\r\n                    <List.Item>\r\n                        <Flex>\r\n                            <Flex.Item>\r\n                                <Button type=\"warning\" onClick={() => this.showDbResetConfirm()}>重置数据库</Button>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <Button type=\"primary\"\r\n                                        onClick={() => this.refreshDatabaseTables()}>数据表</Button>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showCleanBackupSnConfirm() {\r\n        Modal.alert('重新收集SN', '确认清空备份SN并重新收集？', [\r\n            {text: '取消'},\r\n            {\r\n                text: '确认', onPress: () => {\r\n                    cleanAllBackupSn().then(res => {\r\n                        Toast.show('备份SN清空成功，操作记录数为：' + res, 3, false);\r\n                    });\r\n                }\r\n            },\r\n        ]);\r\n    }\r\n\r\n    showReloadConfirm() {\r\n        Modal.alert('重新加载', '确认重新加载货道数据?', [\r\n            {text: '取消'},\r\n            {\r\n                text: '确认', onPress: () => {\r\n                    reloadSensors().then(() => {\r\n                        Toast.show('重新加载成功', 3, false);\r\n                    });\r\n                }\r\n            },\r\n        ]);\r\n    }\r\n\r\n    setSoftFilterLevel(value) {\r\n        updateSoftFilterLevel(value[0]).then(() => {\r\n            Toast.show('滤波等级设置成功，重新加载后生效！', 3, false);\r\n            this.refreshSoftFilterLevel();\r\n        });\r\n    }\r\n\r\n    reconnectTcp() {\r\n        Modal.alert('确定重连', '确定段考连接并重新建立连接？?', [{text: '取消'}, {\r\n            text: '确定', onPress() {\r\n                disconnectTcp().then(() => {\r\n                    Toast.show('断开成功，系统将在3秒后重新连接!', 3, false);\r\n                });\r\n            }\r\n        }])\r\n    }\r\n\r\n    showDbResetConfirm() {\r\n        Modal.alert('清空数据库？',\r\n            '该操作将会清空数据库中全部内容，操作完成后需要对货道重新扫描并重新下发库位信息！（该操作无法恢复）',\r\n            [{text: '取消'}, {text: '确定', onPress: () => this.doDbReset()}])\r\n    }\r\n\r\n    doDbReset() {\r\n        resetDatabase().then(() => {\r\n            Modal.alert('Database Reset Success!', 'Reset success, please scan again!');\r\n        });\r\n    }\r\n}\r\n\r\nconst component = connect(null, mapAction2Props)(SystemCheck);\r\nexport default withRouter(component);\r\n","import {request} from './request';\r\n\r\nexport const fetchStatusTable = () => {\r\n    return request({\r\n        url: '/api/status/',\r\n        method: 'get',\r\n    })\r\n};\r\n\r\nexport const disconnectTcp = () => {\r\n    return request({\r\n        url: '/api/status/tcp-disconnect',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const fetchDatabaseTables = () => {\r\n    return request({\r\n        url: '/api/status/tables',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchMessageLog = () => {\r\n    return request({\r\n        url: '/api/status/message-log',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const resetDatabase = () => {\r\n    return request({\r\n        url: '/api/status/_db-reset',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const sensorParams = address => {\r\n    return request({\r\n        url: `/api/status/${address}/_details`,\r\n        method: 'get'\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchMessageLog} from '../../../api/systemStatus';\r\nimport {Card, List, TextareaItem} from \"antd-mobile\";\r\nimport './MessageLog.sass'\r\n\r\nconst renderMessageItem = (message, index) => {\r\n    return (<List.Item key={index}>\r\n        <Card className=\"message-item\">\r\n            <Card.Header title={message.action} extra={message.type}/>\r\n            <Card.Body>\r\n                <TextareaItem value={JSON.stringify(message.data)} rows={3}/>\r\n            </Card.Body>\r\n            <Card.Footer content={message.seqNo}/>\r\n        </Card>\r\n    </List.Item>);\r\n};\r\n\r\nclass MessageLog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            logs: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshLogs();\r\n        this.refreshTimmer = setInterval(() => {\r\n            this.refreshLogs();\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.refreshTimmer);\r\n    }\r\n\r\n    refreshLogs() {\r\n        fetchMessageLog().then(res => {\r\n            this.setState({\r\n                logs: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {logs} = this.state;\r\n        return (\r\n            <div className=\"message-log\">\r\n                <List renderHeader={() => 'Message Logs'}>\r\n                    {\r\n                        logs.map(renderMessageItem)\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageLog;\r\n","import React, {Component} from 'react';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {ActionSheet, Card, Flex, List, Modal, Progress, Toast} from 'antd-mobile';\r\nimport {cleanCounter, sensorHealthy} from '../../../api/healthy';\r\nimport {\r\n    tryRecoveryElabelAddress,\r\n    tryRecoverySensorAddress,\r\n    tryRecoverySensorAddressWithOriginSn\r\n} from '../../../api/sensor';\r\nimport {\r\n    abortFirmwareUpgrade,\r\n    eLabelFirmwareUpgrade,\r\n    fetchUpgradeProgress,\r\n    sensorFirmwareUpgrade\r\n} from '../../../api/firmware';\r\nimport './SensorHealthy.sass';\r\n\r\nconst operations = ['重置计数器', '刷新', '取消'];\r\nconst ClickOperations = ['传感器固件升级', '电子标签固件升级', '恢复传感器地址', '恢复电子标签地址', '取消'];\r\nconst WARN_RATE = 0.1;\r\nconst UPGRADE_PROGRESS_STATE_TABLE = {\r\n    0: '等待升级',\r\n    1: '升级成功',\r\n    2: '升级失败',\r\n    3: '升级中',\r\n};\r\n\r\nclass SensorHealthy extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: [],\r\n            upgradePercent: 0,\r\n            upgradeProgress: {},\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshSensors();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n    }\r\n\r\n    tryReleaseUpgradeProgressTimmer() {\r\n        if (this.upgradeFirmwareTimmer) {\r\n            clearTimeout(this.upgradeFirmwareTimmer);\r\n        }\r\n    }\r\n\r\n    refreshSensors() {\r\n        sensorHealthy().then(res => {\r\n            const healthyList = res.sort((a, b) => a.sensor.address - b.sensor.address);\r\n            this.setState({\r\n                sensors: healthyList,\r\n                showUpgradeProgress: false,\r\n            });\r\n        });\r\n    }\r\n\r\n    refreshUpgradeProgress(cb) {\r\n        fetchUpgradeProgress().then(res => {\r\n            this.setState({upgradeProgress: res});\r\n            cb(res);\r\n        });\r\n    }\r\n\r\n    doAbortFirmwareUpgrade() {\r\n        abortFirmwareUpgrade().then(() => {\r\n            Toast.show('升级已取消', 3, false);\r\n        });\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n    }\r\n\r\n    render() {\r\n        const {sensors, showUpgradeProgress, upgradeProgress} = this.state;\r\n        let upgradeProgressPercent = 0;\r\n        if (upgradeProgress.total !== undefined && upgradeProgress.current !== undefined && upgradeProgress.total !== 0) {\r\n            upgradeProgressPercent = upgradeProgress.current / upgradeProgress.total * 100;\r\n        }\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Sensor Healthy'}>\r\n                    {\r\n                        sensors.map(helthy => (<List.Item key={helthy.sensor.id}>\r\n                            {this.renderSensorCard(helthy)}\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <Modal visible={showUpgradeProgress}\r\n                       title=\"升级进度\"\r\n                       transparent\r\n                       maskClosable={false}\r\n                       onClose={() => this.onUpgradeProgressModalClose()}\r\n                       footer={[{\r\n                           text: 'Abort Upgrade',\r\n                           disabled: true,\r\n                           onPress: () => {\r\n                               this.onUpgradeProgressModalClose();\r\n                               this.doAbortFirmwareUpgrade();\r\n                           }\r\n                       }]}>\r\n                    <p>{UPGRADE_PROGRESS_STATE_TABLE[upgradeProgress.state]}</p>\r\n                    <p>{upgradeProgressPercent.toFixed(2)}%</p>\r\n                    <Progress percent={upgradeProgressPercent} position=\"normal\"/>\r\n                </Modal>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperations()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    recoveryElabelAddress(healthy) {\r\n        const {sensor} = healthy;\r\n        const {id, elabelSn} = sensor;\r\n        const content = (<p>确认使用序列号[{elabelSn}]恢复地址?</p>);\r\n        Modal.alert(`电子标签[${sensor.address}]地址恢复`, content, [\r\n            {\r\n                text: '确认', onPress: () => {\r\n                    tryRecoveryElabelAddress(id).then(res => {\r\n                        Toast.show(`${res.address}:恢复成功`, 3, false);\r\n                    });\r\n                }\r\n            },\r\n            {text: '取消'},\r\n        ]);\r\n    }\r\n\r\n    recoverySensorAddress(healthy) {\r\n        const {sensor} = healthy;\r\n        const {id, deviceSn, sensorSn} = sensor;\r\n        const content = (<p>初始SN:[{deviceSn}]<br/>备份SN:[{sensorSn}]<br/>确认使用该SN恢复地址?</p>);\r\n        Modal.alert(`传感器[${sensor.address}]地址恢复`, content, [\r\n            {\r\n                text: '使用新SN恢复', onPress: () => {\r\n                    tryRecoverySensorAddress(id).then(res => {\r\n                        Toast.show(`${res.address}:恢复成功`, 3, false);\r\n                    });\r\n                }\r\n            },\r\n            {\r\n                text: '使用原SN恢复', onPress: () => {\r\n                    tryRecoverySensorAddressWithOriginSn(id).then(res => {\r\n                        Toast.show(`${res.address}:恢复成功`, 3, false);\r\n                    });\r\n                }\r\n            },\r\n            {text: '取消'},\r\n        ]);\r\n    }\r\n\r\n    onCardClick(healthy) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: ClickOperations,\r\n            title: '操作菜单',\r\n            cancelButtonIndex: ClickOperations.length - 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.upgradeFirmware(healthy);\r\n                    break;\r\n                case 1:\r\n                    this.upgradeElabelFirmware(healthy);\r\n                    break;\r\n                case 2:\r\n                    this.recoverySensorAddress(healthy);\r\n                    break;\r\n                case 3:\r\n                    this.recoveryElabelAddress(healthy);\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    upgradeFirmware(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const total = packageCounter.totalSuccess + packageCounter.totalErrors;\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.totalErrors / total));\r\n        let title = '';\r\n        let content = '';\r\n        let warn = false;\r\n        const errorRateInPer = (errorsRate * 100).toFixed(2);\r\n        if (errorsRate > WARN_RATE) {\r\n            const minRate = (WARN_RATE * 100).toFixed(2);\r\n            title = '谨慎升级！！！';\r\n            content = `传感器${sensor.address}的网络丢包率为${errorRateInPer}%，在极限值${minRate}%下，建议通过串口升级！`;\r\n            warn = true;\r\n        } else {\r\n            title = '升级确认';\r\n            content = `传感${sensor.address}器的网络丢包率为${errorRateInPer}%,升级后请手动reload启动重力服务！`;\r\n            warn = false;\r\n        }\r\n        Modal.alert(title, content, [\r\n            {\r\n                text: warn ? '仍要升级' : '升级',\r\n                onPress: () => {\r\n                    this.doFirmwareUpgrade(sensor);\r\n                }\r\n            },\r\n            {\r\n                text: '取消升级',\r\n            }\r\n        ]);\r\n    }\r\n\r\n    upgradeElabelFirmware(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const total = packageCounter.elabelSuccess + packageCounter.elabelErrors;\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.elabelErrors / total));\r\n        let title = '';\r\n        let content = '';\r\n        let warn = false;\r\n        const errorRateInPer = (errorsRate * 100).toFixed(2);\r\n        if (errorsRate > WARN_RATE) {\r\n            const minRate = (WARN_RATE * 100).toFixed(2);\r\n            title = '谨慎升级！！！';\r\n            content = `电子标签器${sensor.address}的网络丢包率为${errorRateInPer}%，在极限值${minRate}%下，建议通过串口升级！`;\r\n            warn = true;\r\n        } else {\r\n            title = '升级确认';\r\n            content = `电子标签${sensor.address}器的网络丢包率为${errorRateInPer}%,升级后请手动reload启动重力服务！`;\r\n            warn = false;\r\n        }\r\n        Modal.alert(title, content, [\r\n            {\r\n                text: warn ? '仍要升级' : '升级',\r\n                onPress: () => {\r\n                    this.doElabelFirmwareUpgrade(sensor);\r\n                }\r\n            },\r\n            {\r\n                text: '取消升级',\r\n            }\r\n        ])\r\n    }\r\n\r\n    doFirmwareUpgrade(sensor) {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n        sensorFirmwareUpgrade(sensor.id).then(() => {\r\n            Toast.show('升级已完成', 2, false);\r\n            this.tryReleaseUpgradeProgressTimmer();\r\n        });\r\n        this.showUpgradeProgress();\r\n        this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n    }\r\n\r\n    doElabelFirmwareUpgrade(sensor) {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n        eLabelFirmwareUpgrade(sensor.id).then(() => {\r\n            Toast.show('升级已完成', 2, false);\r\n            this.tryReleaseUpgradeProgressTimmer();\r\n        });\r\n        this.showUpgradeProgress();\r\n        this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n    }\r\n\r\n    refreshUpgradeProgressCb() {\r\n        return () => {\r\n            this.upgradeFirmwareTimmer = setTimeout(() => {\r\n                this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n            }, 500);\r\n        };\r\n    }\r\n\r\n    showUpgradeProgress() {\r\n        this.setState({showUpgradeProgress: true});\r\n    }\r\n\r\n    onUpgradeProgressModalClose() {\r\n        this.setState({showUpgradeProgress: false});\r\n    }\r\n\r\n    renderSensorCard(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const zeroOffset = `ZeroOffset:${sensor.zeroReference}`;\r\n        const total = packageCounter.totalSuccess + packageCounter.totalErrors;\r\n        const successRate = total === 0 ? 0 : ((packageCounter.totalSuccess / total) * 100).toFixed(0);\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.totalErrors / total) * 100).toFixed(0);\r\n\r\n        const elabelSuccess = packageCounter.elabelSuccess;\r\n        const elabelErrors = packageCounter.elabelErrors;\r\n        const eLabelTotal = elabelErrors + elabelSuccess;\r\n        const elabelSuccessRate = eLabelTotal === 0 ? 0 : ((elabelSuccess / eLabelTotal) * 100).toFixed(0);\r\n        const elabelErrorosRate = eLabelTotal === 0 ? 0 : ((elabelErrors / eLabelTotal) * 100).toFixed(0);\r\n        const elabelContinueErrors = packageCounter.elabelContinueErrors;\r\n        return (<Card key={sensor.id} onClick={() => this.onCardClick(healthy)}>\r\n            <Card.Header title={sensor.address} extra={sensor.deviceSn}/>\r\n            <Card.Body className=\"healthy-package-counter\">\r\n                <Flex>\r\n                    <Flex.Item>\r\n                        <div className=\"total\">\r\n                            <p className=\"title\">SUCCESS</p>\r\n                            <p className=\"value\">{packageCounter.totalSuccess}/{successRate}%</p>\r\n                            <p className=\"title\">ELABEL SUCCESS</p>\r\n                            <p className=\"value\">{elabelSuccess}/{elabelSuccessRate}%</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <div className=\"error\">\r\n                            <p className=\"title\">ERRORS</p>\r\n                            <p className=\"value\">{packageCounter.totalErrors}/{errorsRate}%</p>\r\n                            <p className=\"title\">ELABEL ERRORS</p>\r\n                            <p className=\"value\">{elabelErrors}/{elabelErrorosRate}%</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <div className=\"continue\">\r\n                            <p className=\"title\">CONTINUE</p>\r\n                            <p className=\"value\">{packageCounter.continueErrors}</p>\r\n                            <p className=\"title\">ELABEL CONTINUE</p>\r\n                            <p className=\"value\">{elabelContinueErrors}</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            </Card.Body>\r\n            <Card.Footer content={zeroOffset}/>\r\n        </Card>);\r\n    }\r\n\r\n    showOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: operations,\r\n            title: 'Operations',\r\n            cancelButtonIndex: operations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    //Clean\r\n                    this.showCleanCounterConfirm();\r\n                    break;\r\n                case 1:\r\n                    this.refreshSensors();\r\n                    break;\r\n                case 2:\r\n                    //Cancel\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    showCleanCounterConfirm() {\r\n        Modal.alert('Clean Counter?', 'Clean counter?', [\r\n            {text: 'Cancel'},\r\n            {text: 'Yes', onPress: () => this.doCleanCounter()}\r\n        ]);\r\n    }\r\n\r\n    doCleanCounter() {\r\n        cleanCounter().then(() => {\r\n            Toast.show('Clean success!', 1, false);\r\n        })\r\n    }\r\n}\r\n\r\nexport default SensorHealthy;\r\n","import {request} from './request';\r\n\r\nexport const sensorHealthy = () => {\r\n    return request({\r\n        url: '/api/sensor-healthy/_healthy',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const cleanCounter = () => {\r\n    return request({\r\n        url: '/api/sensor-healthy/_clean-counter',\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const sensorFirmwareUpgrade = sensorId => {\r\n    return request({\r\n        url: `/api/firmware/${sensorId}/_upgrade`,\r\n        method: 'post',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const eLabelFirmwareUpgrade = sensorId => {\r\n    return request({\r\n        url: `/api/firmware/${sensorId}/_elabel-upgrade`,\r\n        method: 'post',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchUpgradeProgress = () => {\r\n    return request({\r\n        url: '/api/firmware/_upgrade-progress',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const abortFirmwareUpgrade = () => {\r\n    return request({\r\n        url: '/api/firmware/_abort-upgrade',\r\n        method: 'post',\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {sensorParams} from '../../../api/systemStatus';\r\nimport {ActionSheet, List} from 'antd-mobile';\r\nimport FloatButton from \"../../commons/FloatButton\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst operations = ['刷新', '取消'];\r\n\r\nclass SensorDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensor: {},\r\n            slot: {},\r\n            sensorParams: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('传感器详细参数');\r\n        this.props.setTabBarState(false);\r\n        const address = this.props.match.params.address;\r\n        this.refreshParams(address);\r\n    }\r\n\r\n    refreshParams(address) {\r\n        sensorParams(address).then(res => {\r\n            const {slot, sensor} = res;\r\n            delete res.slot;\r\n            delete res.sensor;\r\n            const params = [];\r\n            for (let name in res) {\r\n                if (!res.hasOwnProperty(name)) {\r\n                    continue;\r\n                }\r\n                params.push({\r\n                    name: name,\r\n                    value: res[name],\r\n                });\r\n            }\r\n            this.setState({\r\n                sensor: sensor,\r\n                slot: slot,\r\n                sensorParams: params,\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {sensor, slot, sensorParams} = this.state;\r\n        return (\r\n            <div className=\"sensor-details\">\r\n                <List renderHeader={() => '传感器基本信息'}>\r\n                    <List.Item extra={sensor.deviceSn}>序列号</List.Item>\r\n                    <List.Item extra={sensor.hasElabel ? 'yes' : 'no'}>电子标签</List.Item>\r\n                    <List.Item extra={sensor.address}>地址</List.Item>\r\n                    <List.Item extra={sensor.zeroReference}>零点偏移</List.Item>\r\n                    <List.Item extra={slot.slotNo}>绑定货道号</List.Item>\r\n                    <List.Item extra={slot.skuApw}>SKU单重</List.Item>\r\n                    <List.Item extra={slot.skuName}>SKU名称</List.Item>\r\n                    <List.Item extra={slot.skuTolerance}>SKU允差</List.Item>\r\n                    <List.Item extra={slot.skuNo}>SKU号</List.Item>\r\n                </List>\r\n                <List renderHeader={() => '传感器硬件信息'}>\r\n                    {\r\n                        sensorParams.map(param => (\r\n                            <List.Item key={param.name} extra={JSON.stringify(param.value)}>\r\n                                {param.name}\r\n                            </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperations()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: operations,\r\n            title: '操作选择',\r\n            cancelButtonIndex: operations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.refreshParams(this.props.match.params.address);\r\n                    break;\r\n                case 1:\r\n                    //Cancel\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SensorDetails);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {List} from 'antd-mobile';\r\nimport {fetchThSensors} from '../../../api/thSensor';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass ThSensorSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('温湿度传感器');\r\n        this.refreshSensors();\r\n    }\r\n\r\n    refreshSensors() {\r\n        fetchThSensors().then(res => {\r\n            this.setState({\r\n                sensors: res\r\n            });\r\n        });\r\n    }\r\n\r\n    toDetail(sensor) {\r\n        this.props.history.push({\r\n            pathname: `/setting/${sensor.id}/th-detail`,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.state;\r\n        return (\r\n            <div className=\"th-sensors\">\r\n                <List renderHeader={() => '温湿度传感器'}>\r\n                    {\r\n                        sensors.map(sensor => (\r\n                            <List.Item key={sensor.id} arrow=\"horizontal\" onClick={() => this.toDetail(sensor)}>\r\n                                {sensor.no} [{sensor.address}]\r\n                            </List.Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(ThSensorSetting);\r\n","import {request} from './request';\r\n\r\nexport const fetchThSensors = () => {\r\n    return request({\r\n        url: '/api/th-sensor/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchOneSensor = id => {\r\n    return request({\r\n        url: `/api/th-sensor/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setRange = data => {\r\n    return request({\r\n        url: `/api/th-sensor/${data.id}/_range`,\r\n        method: 'post',\r\n        data\r\n    });\r\n};\r\n\r\nexport const calibrateTemp = (id, temp) => {\r\n    return request({\r\n        url: `/api/th-sensor/${id}/_calibrate-temperature`,\r\n        method: 'post',\r\n        data: {\r\n            currentTemperature: temp,\r\n        },\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport './LineCharts.sass';\r\nimport PropTypes from 'prop-types';\r\nimport echarts from 'echarts';\r\n\r\nclass LineCharts extends Component {\r\n    static propTypes = {\r\n        width: PropTypes.number.isRequired,\r\n        height: PropTypes.number.isRequired,\r\n        xData: PropTypes.array.isRequired,\r\n        yData: PropTypes.array.isRequired,\r\n    };\r\n    static defaultProps = {\r\n        width: 1000,\r\n        height: 300,\r\n        xData: [],\r\n        yData: [],\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    onCanvasLoad(canvas) {\r\n        if (!canvas || canvas === this.canvas) {\r\n            return;\r\n        }\r\n        this.canvas = canvas;\r\n        this.charts = echarts.init(this.canvas);\r\n        this.refreshCharts();\r\n    }\r\n\r\n    refreshCharts() {\r\n        const {xData, yData} = this.props;\r\n        const series = [];\r\n        const names = [];\r\n        for (let y of yData) {\r\n            names.push(y.name);\r\n            series.push({\r\n                ...y,\r\n                type: 'line',\r\n            });\r\n        }\r\n        const option = {\r\n            tooltip: {\r\n                trigger: 'axis'\r\n            },\r\n            legend: {\r\n                data: names,\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                data: xData\r\n            },\r\n            yAxis: {\r\n                type: 'value'\r\n            },\r\n            series: series,\r\n        };\r\n        this.charts.setOption(option);\r\n    }\r\n\r\n    render() {\r\n        const {width, height} = this.props;\r\n        return (\r\n            <canvas ref={canvas => this.onCanvasLoad(canvas)}\r\n                    className=\"charts\"\r\n                    height={height}\r\n                    width={width}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LineCharts;\r\n","import React, {Component} from 'react';\r\nimport {calibrateTemp, fetchOneSensor, setRange} from '../../../api/thSensor';\r\nimport {reloadSensors} from '../../../api/sensor';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {Button, Card, Flex, InputItem, List, Modal, Toast} from 'antd-mobile';\r\nimport {fetchSensorDataLog} from '../../../api/tempHumidityLog';\r\nimport LineCharts from '../../commons/LineCharts';\r\nimport {thSensorStateText} from '../../../util/DataConvertor';\r\n\r\nconst maxAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass ThSensorDetailsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensor: {},\r\n            dataLogs: [],\r\n            chartsXData: [],\r\n            chartsYData: [],\r\n            currentTemp: '0',\r\n        };\r\n    }\r\n\r\n    refreshDataLog() {\r\n        fetchSensorDataLog(this.sensorId).then(res => {\r\n            const xData = [];\r\n            const tempData = [];\r\n            // const humiData = [];\r\n            // const maxHumiData = [];\r\n            // const minHumiData = [];\r\n            const maxTempData = [];\r\n            const minTempData = [];\r\n            for (let log of res) {\r\n                const {\r\n                    createTime,\r\n                    temperature,\r\n                    // humidity,\r\n                    // maxHumidity, minHumidity,\r\n                    maxTemperature, minTemperature\r\n                } = log;\r\n                const date = new Date(createTime);\r\n                const timeStr = `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\r\n                xData.push(timeStr);\r\n                tempData.push(temperature);\r\n                // humiData.push(humidity);\r\n                // maxHumiData.push(maxHumidity);\r\n                // minHumiData.push(minHumidity);\r\n                maxTempData.push(maxTemperature);\r\n                minTempData.push(minTemperature);\r\n            }\r\n            const yData = [\r\n                {name: '温度', data: tempData},\r\n                // {name: '湿度', data: humiData},\r\n                // maxHumiData, minHumiData,\r\n                {name: '温度上限', data: maxTempData}, {name: '温度下限', data: minTempData},\r\n            ];\r\n            this.setState({\r\n                dataLogs: res,\r\n                chartsXData: xData,\r\n                chartsYData: yData,\r\n            });\r\n            this.charts.refreshCharts();\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {id} = this.props.match.params;\r\n        this.sensorId = id;\r\n        this.props.setTitle('温湿度传感器报警范围');\r\n        this.refreshDataLog();\r\n        fetchOneSensor(id).then(res => {\r\n            this.setState({\r\n                sensor: res,\r\n            });\r\n        })\r\n    }\r\n\r\n    setSensorData(data) {\r\n        const {sensor} = this.state;\r\n        this.setState({\r\n            sensor: {\r\n                ...sensor,\r\n                ...data,\r\n            }\r\n        });\r\n    }\r\n\r\n    calibrateTemp() {\r\n        const {currentTemp} = this.state;\r\n        const {id} = this.props.match.params;\r\n        if (!currentTemp.match(/^-?\\d+\\.?\\d*$/)) {\r\n            Toast.show('请输入正确的温度值', 3, false);\r\n            return;\r\n        }\r\n        Modal.alert('确定标定？', '确定校准该温度传感器？', [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '确定',\r\n                    onPress() {\r\n                        calibrateTemp(id, currentTemp).then(res => {\r\n                            Toast.show('标定成功', 3, false);\r\n                        });\r\n                    }\r\n                }\r\n            ]\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const {sensor, dataLogs, chartsXData, chartsYData, currentTemp} = this.state;\r\n        return (\r\n            <div className=\"th-sensor-detail\">\r\n                <List renderHeader={() => '报警范围'}>\r\n                    <InputItem value={sensor.maxTemperature} labelNumber={10}\r\n                               onChange={text => this.setSensorData({maxTemperature: text})}>温度上限(°C)：</InputItem>\r\n                    <InputItem value={sensor.minTemperature} labelNumber={10}\r\n                               onChange={text => this.setSensorData({minTemperature: text})}>温度下限(°C)：</InputItem>\r\n                    <InputItem value={sensor.maxHumidity} labelNumber={10}\r\n                               onChange={text => this.setSensorData({maxHumidity: text})}>湿度上限( %)：</InputItem>\r\n                    <InputItem value={sensor.minHumidity} labelNumber={10}\r\n                               onChange={text => this.setSensorData({minHumidity: text})}>湿度下限( %)：</InputItem>\r\n                    <List.Item>\r\n                        <Button type=\"primary\" onClick={() => this.updateRange()}>保存</Button>\r\n                    </List.Item>\r\n                </List>\r\n                <Card>\r\n                    <Card.Header\r\n                        title=\"温度标定\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <InputItem value={currentTemp}\r\n                                       onChange={txt => this.setState({currentTemp: txt})}>当前温度：</InputItem>\r\n                            <List.Item>\r\n                                <Button type=\"primary\" onClick={() => this.calibrateTemp()}>标定</Button>\r\n                            </List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n                <Card>\r\n                    <Card.Header title=\"历史数据\"/>\r\n                    <Card.Body>\r\n                        <LineCharts width={500} height={300} xData={chartsXData} yData={chartsYData}\r\n                                    ref={charts => this.charts = charts}/>\r\n                    </Card.Body>\r\n                    <Card.Footer content={dataLogs.length}/>\r\n                </Card>\r\n                <List renderHeader={() => '温湿度日志'}>\r\n                    {\r\n                        dataLogs.map(log => (<List.Item key={log.id}>\r\n                            <Flex>\r\n                                <Flex.Item>{log.createTime}</Flex.Item>\r\n                                <Flex.Item>温度:{log.temperature}°C({thSensorStateText(log.temperatureState)})</Flex.Item>\r\n                                {/*<Flex.Item>湿度:{log.humidity}%({thSensorStateText(log.humidityState)})</Flex.Item>*/}\r\n                            </Flex>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateRange() {\r\n        setRange(this.state.sensor).then(res => {\r\n            this.setState({sensor: res});\r\n            this.showReloadConfirm();\r\n        });\r\n    }\r\n\r\n    showReloadConfirm() {\r\n        Modal.alert('重新加载', '数据已更新，是否重新加载生效？', [\r\n            {\r\n                text: 'No'\r\n            },\r\n            {\r\n                text: 'Yes',\r\n                onPress: () => {\r\n                    reloadSensors().then(() => {\r\n                        Toast.show('重新加载成功', 1, false);\r\n                    });\r\n                }\r\n            }\r\n        ]);\r\n    }\r\n}\r\n\r\nexport default connect(null, maxAction2Props)(ThSensorDetailsSetting);\r\n","import {request} from './request';\r\n\r\nexport const fetchSensorDataLog = sensorId => {\r\n    return request({\r\n        url: '/api/temp-humidity-log/_sensor-logs',\r\n        method: 'get',\r\n        params: {\r\n            sensorId: sensorId,\r\n        }\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {Button, Card, List, Modal, TextareaItem, Toast} from 'antd-mobile';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {fetchExtraPageUri, setExtraPageUri} from '../../../api/config';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass ExtraPageSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pageUri: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('扩展页面配置');\r\n        fetchExtraPageUri().then(res => {\r\n            this.setState({\r\n                pageUri: res.value,\r\n            });\r\n        }).catch(err => {\r\n            const data = err.data;\r\n            if (data) {\r\n                const {code} = data;\r\n                if (code === 404) {\r\n                    this.setState({\r\n                        pageUri: '页面路径未设置',\r\n                    })\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    setPageUri() {\r\n        const {pageUri} = this.state;\r\n        const pattern = /^[a-zA-z]+:\\/\\/[^\\\\s]*$/;\r\n        if (!pageUri.match(pattern)) {\r\n            Modal.alert('输入提示', '请输入正确的URI!', [{text: '知道了'}]);\r\n            return;\r\n        }\r\n        setExtraPageUri(pageUri).then(res => {\r\n            Toast.show('配置成功', 3, false);\r\n        });\r\n    }\r\n\r\n    gotoExtraPage() {\r\n        this.props.history.push({\r\n            pathname: '/extra',\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {pageUri} = this.state;\r\n        return (\r\n            <div className=\"extra-page-setting\">\r\n                <Card>\r\n                    <Card.Header\r\n                        title=\"页面配置\"\r\n                        extra=\"页面路径配置\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <TextareaItem title=\"页面路径\"\r\n                                          autoHeight\r\n                                          value={pageUri}\r\n                                          onChange={text => this.setState({pageUri: text})}/>\r\n                            <List.Item>\r\n                                <Button type=\"primary\" onClick={() => this.setPageUri()}>保存</Button>\r\n                            </List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n                <Card>\r\n                    <Card.Header\r\n                        title=\"页面入口\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <List.Item arrow=\"horizontal\" onClick={() => this.gotoExtraPage()}>\r\n                                进入扩展页面\r\n                            </List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(ExtraPageSetting);\r\n","import React, {Component} from 'react';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport SensorSetting from './setting/SensorSetting'\r\nimport SettingMenu from './setting/SettingMenu'\r\nimport SlotSetting from './setting/SlotSetting'\r\nimport ConnectionSetting from './setting/ConnectionSetting'\r\nimport SlotDetailSetting from './setting/SlotDetailSetting'\r\nimport SystemSetting from './setting/SystemSetting'\r\nimport SystemPropsSetting from './setting/SystemPropsSetting'\r\nimport SlotSensorsSetting from './setting/SlotSensorsSetting'\r\nimport Overview from './setting/Overview'\r\nimport SystemCheck from './setting/SystemCheck'\r\nimport MessageLog from './setting/MessageLog'\r\nimport SensorHealthy from './setting/SensorHealthy'\r\nimport SensorDetails from './setting/SensorDetails'\r\nimport ThSensorSetting from './setting/ThSensorSetting'\r\nimport ThSensorDetailsSetting from './setting/ThSensorDetailsSetting'\r\nimport ExtraPageSetting from './setting/ExtraPageSetting'\r\nimport {mapStateAndAction} from '../../store/storeUtils';\r\n\r\nclass Setting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {showHeader, setTabBarState} = this.props;\r\n        showHeader(true);\r\n        setTabBarState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/setting/\" component={SettingMenu} exact/>\r\n                    <Route path=\"/setting/sensor\" component={SensorSetting} exact/>\r\n                    <Route path=\"/setting/slot\" component={SlotSetting} exact/>\r\n                    <Route path=\"/setting/connection\" component={ConnectionSetting} exact/>\r\n                    <Route path=\"/setting/slot-detail/:id\" component={SlotDetailSetting} exact/>\r\n                    <Route path=\"/setting/system\" component={SystemSetting} exact/>\r\n                    <Route path=\"/setting/system-props\" component={SystemPropsSetting} exact/>\r\n                    <Route path=\"/setting/slot-sensors/:id\" component={SlotSensorsSetting} exact/>\r\n                    <Route path=\"/setting/overview\" component={Overview} exact/>\r\n                    <Route path=\"/setting/system-check\" component={SystemCheck} exact/>\r\n                    <Route path=\"/setting/message-log\" component={MessageLog} exact/>\r\n                    <Route path=\"/setting/sensor-healthy\" component={SensorHealthy} exact/>\r\n                    <Route path=\"/setting/th-sensor\" component={ThSensorSetting} exact/>\r\n                    <Route path=\"/setting/:address/sensor-details\" component={SensorDetails} exact/>\r\n                    <Route path=\"/setting/:id/th-detail\" component={ThSensorDetailsSetting} exact/>\r\n                    <Route path=\"/setting/extra-setting\" component={ExtraPageSetting} exact/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default mapStateAndAction(Setting);\r\n","import React, {Component} from 'react';\r\nimport {Button, InputItem, List, Toast} from \"antd-mobile\";\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport './Address.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Address extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('设备编址');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"address\">\r\n                <List renderHeader={() => '编址'}>\r\n                    <InputItem>设备SN</InputItem>\r\n                    <InputItem>地址</InputItem>\r\n                    <List.Item>\r\n                        <Button type=\"primary\">编址</Button>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中', 1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Address);\r\n","import React, {Component} from 'react';\r\nimport {setTitle} from \"../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport MessageLog from './setting/MessageLog';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Logs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Logs');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MessageLog/>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Logs);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {Carousel, List, WhiteSpace, WingBlank} from 'antd-mobile';\r\nimport './About.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass About extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            drawerOpen: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('About');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"about\">\r\n                <WhiteSpace/>\r\n                <WingBlank>\r\n                    <Carousel\r\n                        autoplay={true}\r\n                        infinite\r\n                        className=\"headerCarousel\"\r\n                    >\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#FF9808'}}>\r\n                            <div className=\"title\">\r\n                                磐石电气（常州）有限公司\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#3171FA'}}>\r\n                            <div className=\"title\">\r\n                                MonolithIoT\r\n                            </div>\r\n                        </div>\r\n                    </Carousel>\r\n                </WingBlank>\r\n                <WingBlank className=\"article\">\r\n                    <h1 className=\"title\">关于我们</h1>\r\n                    <div className=\"text\">\r\n                        <p>\r\n                            磐石电气(常州)有限公司,是一家高科技智能测量装备研发及生产企业，把传统体积，重量的测量数字化物联网化，可以与WMS,ERP，SAP等企业管理软件相结合，便于企业更直观的管理自己的仓储，物流等。磐石电气下设研发部，工程部，业务部，有较强的设计，研发和生产能力，可为客户提供嵌入式计算机系统产品设计，开发，系统集成，工程实施等服务。\r\n                        </p>\r\n                        <p>\r\n                            随着公司的发展，主要产品有自主研发的智能数字卷尺，智能手动叉车秤，安卓智能称重终端，静态/动态DWS等各种物联网类智能称重量方设备及软件定制系统,可为客户最大程度地提供智能化系统化的测量系统解决方案。产品广泛应用于快递物流、生鲜供应、港口订舱、仓储、工业离散制造及各种以长度(含面\r\n                            积、体积)测量为手段的民用、商用用途中。凭着可靠的产品质量和良好的售后服务，我公司已与顺丰、中国邮政、京东、国际快递DHL、华为等多家知名企业合作。\r\n                        </p>\r\n                        <p>\r\n                            目前公司已申请中国专利24项,美国专利1项，并拥有一支以博士、硕士为主的优秀研发团队，具有较高的研发能力和管理水平，现有多名员工曾在外企作为技术骨干，承传欧美设计制造理念，并采用先进的产品生命周期管理（PLM），重视产品质量，为公司产品的技术引领、技术创新和公司的可持续发展奠定了坚实基础。\r\n                        </p>\r\n                    </div>\r\n                </WingBlank>\r\n                <List renderHeader=\"TestEntries\">\r\n                    <List.Item arrow=\"horizontal\" onClick={() => {\r\n                        this.props.history.push({pathname: '/pid'})\r\n                    }}>\r\n                        PID Animation\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(About);\r\n","import React, {Component} from 'react';\r\nimport {List} from 'antd-mobile';\r\nimport './PidAnimation.sass';\r\n\r\nconst currentColor = '#3171FA';\r\nconst targetColor = '#666666';\r\n// 比例参数\r\nconst P = 0.6;\r\n// 积分参数\r\nconst I = 0.02;\r\n// 微分参数\r\nconst D = 0.1;\r\n\r\nconst CanvasWidth = 300, CanvasHeight = 300;\r\nconst PointSize = 4;\r\n\r\nclass PidAnimation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            target: {\r\n                x: 150,\r\n                y: 150,\r\n            },\r\n            current: {\r\n                x: 150,\r\n                y: 150,\r\n            },\r\n        };\r\n        this.xSum = 0;\r\n        this.lastErrorX = 0;\r\n        this.ySum = 0;\r\n        this.lastErrorY = 0;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timmer = setInterval(() => {\r\n            this.onTimer();\r\n        }, 10);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timmer);\r\n    }\r\n\r\n    render() {\r\n        const {target, current} = this.state;\r\n        return (\r\n            <div className=\"pid\">\r\n                <div className=\"wrapper\">\r\n                    <List renderHeader={() => 'Params'}>\r\n                        <List.Item extra={P}>P</List.Item>\r\n                        <List.Item extra={I}>I</List.Item>\r\n                        <List.Item extra={D}>D</List.Item>\r\n                        <List.Item extra={`${current.x},${current.y}`}>Current</List.Item>\r\n                        <List.Item extra={`${target.x},${target.y}`}>Target</List.Item>\r\n                    </List>\r\n                    <canvas ref={canvas => this.onCanvasLoad(canvas)} width={CanvasWidth} height={CanvasHeight}>\r\n                        Unsupported Canvas\r\n                    </canvas>\r\n                </div>\r\n                <div className=\"stake\">None</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onCanvasLoad(canvas) {\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n        if (this.canvas === canvas) {\r\n            return;\r\n        }\r\n        this.canvas = canvas;\r\n        canvas.onclick = e => {\r\n            const {offsetX, offsetY} = e;\r\n            this.onCanvasClick(offsetX, offsetY);\r\n        };\r\n        this.canvasContext = canvas.getContext('2d');\r\n        this.reDrawPoint();\r\n    }\r\n\r\n    onCanvasClick(x, y) {\r\n        this.xSum = 0;\r\n        this.ySum = 0;\r\n        this.setState({\r\n            target: {\r\n                x: x,\r\n                y: y,\r\n            }\r\n        });\r\n        this.reDrawPoint();\r\n    }\r\n\r\n    reDrawPoint() {\r\n        const {target, current} = this.state;\r\n        this.canvasContext.clearRect(0, 0, CanvasWidth, CanvasHeight);\r\n        this.canvasContext.fillStyle = targetColor;\r\n        this.canvasContext.fillRect(target.x, target.y, PointSize, PointSize);\r\n        this.canvasContext.fillStyle = currentColor;\r\n        this.canvasContext.fillRect(current.x, current.y, PointSize, PointSize);\r\n    }\r\n\r\n    onTimer() {\r\n        const {target, current} = this.state;\r\n\r\n        const errorX = (target.x - current.x) / 10;\r\n        this.xSum += errorX;\r\n        const derivativeX = (errorX - this.lastErrorX) / 10;\r\n        this.lastErrorX = errorX;\r\n\r\n        let outX = current.x + (P * errorX + I * this.xSum + D * derivativeX);\r\n        outX = Math.min(outX, CanvasWidth - PointSize);\r\n        outX = Math.max(outX, 0);\r\n        outX = parseInt(outX);\r\n\r\n        const errorY = (target.y - current.y) / 10;\r\n        this.ySum += errorY;\r\n        const derivativeY = (errorY - this.lastErrorY) / 10;\r\n        this.lastErrorY = errorY;\r\n\r\n        let outY = current.y + (P * errorY + I * this.ySum + D * derivativeY);\r\n        outY = Math.min(outY, CanvasHeight - PointSize);\r\n        outY = Math.max(outY, 0);\r\n        outY = parseInt(outY);\r\n        if (current.x === outX && current.y === outY) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            current: {\r\n                x: outX,\r\n                y: outY,\r\n            }\r\n        });\r\n        this.reDrawPoint();\r\n    }\r\n}\r\n\r\nexport default PidAnimation;\r\n","import React, {Component} from 'react';\r\nimport './ExtraPage.sass';\r\nimport {fetchExtraPageUri} from '../../api/config';\r\nimport {NoticeBar} from 'antd-mobile';\r\nimport {WarningOutlined} from '@ant-design/icons';\r\n\r\nclass ExtraPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pageUri: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchExtraPageUri().then(res => {\r\n            this.setState({\r\n                pageUri: res.value,\r\n            })\r\n        });\r\n    }\r\n\r\n    renderFrame() {\r\n        const {pageUri} = this.state;\r\n        if (pageUri) {\r\n            return (<iframe title=\"inner\" src={pageUri}>IFrame</iframe>);\r\n        } else {\r\n            return (<NoticeBar icon={<WarningOutlined/>}>页面地址未设置</NoticeBar>);\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"extra\">\r\n                {\r\n                    this.renderFrame()\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExtraPage;\r\n","import React, {Component} from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Dashboard from './content/Dashboard'\r\nimport HomeDashboard from './content/HomeDashboard'\r\nimport Setting from './content/Setting';\r\nimport Address from './content/Address';\r\nimport Logs from './content/Logs';\r\nimport About from './content/About';\r\nimport PidAnimation from './content/PidAnimation';\r\nimport ExtraPage from './content/ExtraPage';\r\nimport './AppContent.sass';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"appContent\">\r\n                {\r\n                    this.props.showHeader ? <div className=\"headerMask\"/> : null\r\n                }\r\n                <Switch>\r\n                    <Route path=\"/dashboard\" component={Dashboard} exact/>\r\n                    <Route path=\"/\" component={HomeDashboard} exact/>\r\n                    <Route path=\"/setting**\" component={Setting} exact/>\r\n                    <Route path=\"/address\" component={Address} exact/>\r\n                    <Route path=\"/logs\" component={Logs} exact/>\r\n                    <Route path=\"/about\" component={About} exact/>\r\n                    <Route path=\"/pid\" component={PidAnimation} exact/>\r\n                    <Route path=\"/extra\" component={ExtraPage} exact/>\r\n                </Switch>\r\n                <div className=\"tabBarMask\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, null)(AppContent);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Modal, NavBar, Popover, Toast} from \"antd-mobile\";\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\nimport './AppHeader.sass';\r\nimport {reloadSensors} from \"../api/sensor\";\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        title: state.globalTitle,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppHeader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            popoverVisible: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.showHeader) {\r\n            return null;\r\n        }\r\n        const {title} = this.props;\r\n        return (\r\n            <div className=\"appHeader\">\r\n                <NavBar\r\n                    leftContent={<Icon type=\"left\" onClick={() => this.onBackClick()}/>}\r\n                    rightContent={this.rightContent()}\r\n                    mode=\"light\"\r\n                >{title}</NavBar>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    rightContent() {\r\n        const {popoverVisible} = this.state;\r\n        const Item = Popover.Item;\r\n        return (<Popover mask\r\n                         visible={popoverVisible}\r\n                         overlay={[\r\n                             (<Item key=\"about\" value=\"about\"\r\n                                    data-seed=\"logId\">关于我们</Item>),\r\n                             (<Item key=\"settings\" value=\"settings\"\r\n                                    style={{whiteSpace: 'nowrap'}}>货道设置</Item>),\r\n                             (<Item key=\"reload\" value=\"reload\"\r\n                                    style={{whiteSpace: 'nowrap'}}>重新加载</Item>),\r\n                         ]}\r\n                         onSelect={e => this.onPopoverSelect(e)}\r\n        >\r\n            <Icon type=\"ellipsis\"/>\r\n        </Popover>);\r\n    }\r\n\r\n    onBackClick() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    onPopoverSelect(e) {\r\n        switch (e.key) {\r\n            case 'about':\r\n                this.props.history.push({\r\n                    pathname: '/about',\r\n                });\r\n                break;\r\n            case 'settings':\r\n                this.props.history.push({\r\n                    pathname: '/setting/',\r\n                });\r\n                break;\r\n            case 'reload':\r\n                this.doReloadSensors();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({\r\n            popoverVisible: false\r\n        });\r\n    }\r\n\r\n    doReloadSensors() {\r\n        Modal.alert('Reload Sensors', 'Reload sensors from database into weightService',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                },\r\n                {\r\n                    text: 'Yes',\r\n                    onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('Reload Success!');\r\n                        });\r\n                    },\r\n                },\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props)(AppHeader));\r\n","import {createBrowserHistory} from 'history';\r\nimport {setRouterPath} from '../store/actionCreators'\r\nimport store from '../store';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst notifyPathChanged = location => {\r\n    const info = {\r\n        pathname: location.pathname,\r\n        search: location.search,\r\n        hash: location.hash\r\n    };\r\n    const action = setRouterPath(info);\r\n    store.dispatch(action);\r\n};\r\nhistory.listen((action) => {\r\n    notifyPathChanged(action.location);\r\n});\r\n\r\n\r\nnotifyPathChanged(history.location);\r\nexport default history;\r\n","const printBanner = () => {\r\n    console.log(\r\n        '%cMonolithIoT%cPoweredBy%cLevent8421',\r\n        'color:#108EE9;font-size:50px;font-family:Microsoft-yahei;background-color:#F5F5F9',\r\n        'color:#FF8800;background-color:#F5F5F9',\r\n        'color:#108EE9;background-color:#F5F5F9'\r\n    );\r\n};\r\nexport default printBanner;\r\n","import React from 'react'\nimport './App.css'\nimport store from './store'\nimport {Provider} from 'react-redux'\nimport AppTabBar from './component/AppTabBar'\nimport AppContent from './component/AppContent'\nimport AppHeader from './component/AppHeader'\nimport {HashRouter as Router} from 'react-router-dom'\nimport history from './util/History'\nimport {fetchEnableTabBarAction} from './store/actionCreators';\nimport consoleBanner from './util/consoleBanner';\n\nclass App extends React.Component {\n    componentDidMount() {\n        store.dispatch(fetchEnableTabBarAction());\n        consoleBanner();\n    }\n\n    render() {\n        return (\n            <Router history={history}>\n                <Provider store={store}>\n                    <div className=\"app-content\">\n                        <AppHeader/>\n                        <AppContent/>\n                        <AppTabBar/>\n                    </div>\n                </Provider>\n            </Router>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import 'babel-polyfill'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\n\n/*ReactDOM.render(\n    <React.StrictMode>\n        <App/>,\n    </React.StrictMode>,\n    document.getElementById('root')\n);*/\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}