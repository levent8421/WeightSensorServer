{"version":3,"sources":["store/reducer.js","store/actionTypes.js","store/index.js","component/AppTabBar.jsx","api/request.js","util/httpUtils.js","api/dashboard.js","api/sensor.js","store/actionCreators.js","api/connection.js","api/config.js","util/DataConvertor.js","api/slot.js","component/content/Dashboard.jsx","component/commons/FloatButton.jsx","component/content/setting/SensorSetting.jsx","component/content/setting/SettingMenu.jsx","component/content/setting/SlotSetting.jsx","component/content/setting/ConnectionSetting.jsx","component/content/setting/SlotDetailSetting.jsx","component/content/setting/SystemSetting.jsx","api/serial.js","component/content/setting/SystemPropsSetting.jsx","component/content/setting/SlotSensorsSetting.jsx","component/content/setting/Overview.jsx","component/content/setting/SystemCheck.jsx","api/systemStatus.js","component/content/setting/MessageLog.jsx","component/content/setting/SensorHealthy.jsx","api/healthy.js","api/firmware.js","component/content/setting/SensorDetails.jsx","component/content/setting/ThSensorSetting.jsx","api/thSensor.js","component/commons/LineCharts.jsx","component/content/setting/ThSensorDetailsSetting.jsx","api/tempHumidityLog.js","component/content/Setting.jsx","component/content/Address.jsx","component/content/Logs.jsx","component/content/About.jsx","component/AppContent.jsx","component/AppHeader.jsx","util/History.js","util/consoleBanner.js","App.js","serviceWorker.js","index.js"],"names":["defaultState","showTabBar","enableTabBar","showHeader","globalTitle","routerPath","dashboardSlots","sensors","connections","user","name","actionTable","registerReducer","type","reducer","state","action","data","sensorId","hasElabel","sensor","id","JSON","parse","stringify","filter","connection","allEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","handler","AppTabBar","props","path","this","className","unselectedTintColor","tintColor","barTintColor","hidden","tabBarPosition","Item","title","selected","icon","selectedIcon","onPress","pushPath","setState","history","push","pathname","React","Component","withRouter","connect","hideLoading","hide","showError","msg","fail","request","options","showLoadingToast","loading","Promise","resolve","reject","axios","httpRequest","then","res","status","body","code","catch","err","errStr","toString","reloadSensors","url","method","setTabBarState","show","setTitle","asyncFetchDashboardSlotData","dispatch","slots","key","hasOwnProperty","sort","a","b","slotNo","localeCompare","asyncFetchSensors","address","toggleSensorElable","toggleElable","asyncFetchConnection","asyncDeleteConnection","deleteConnection","fetchEnableTabBarAction","value","setEnableTabBarAction","enable","setEnableTabBar","connectionTypes","1","2","asConnectionType","slotSortWeight","compareBySlotNo","aName","bName","aNames","split","bNames","length","i","aItem","parseInt","bItem","stateTable","3","4","5","asStateString","thSensorStateTable","thSensorStateText","zeroOne","encodedSlotNo","encodeURIComponent","fetchDetail","TabItems","Dashboard","rootEle","document","groupedSlots","thSensors","sensorModalVisible","operationSlot","searchSkuNo","noticeSlots","renderSlotCard","bind","startFetchData","listenKeyPress","onkeypress","e","target","tagName","toLowerCase","keyCode","triggerHighlight","appendSearchSku","String","fromCharCode","c","fetchTimer","clearInterval","cancelKeyPress","setInterval","slotData","thData","temperatureHumidityData","groups","putSlot","slot","noItems","match","aWeight","substring","bWeight","groupSlots","temperature","humidity","toFixed","tempStateText","temperatureState","tempWarn","humidityText","tempClass","no","join","map","renderThSensorCard","highlightSlotIds","firstNoticeSlot","tabs","onChange","tab","index","onTabChange","onSubmit","renderNoticeBar","group","renderGroupItem","renderThSensors","visible","transparent","footer","text","doSlotZero","onClose","renderHeader","extra","deviceSn","Brief","address485","content","skuName","skuShelfLifeOpenDays","wrap","justify","sku","slotCardClassName","isWan","isDisable","isOffline","incredible","isIncredible","toleranceState","weightInKg","weight","count","isStable","weightState","asCount","skuNo","onClick","onSlotCardClick","trim","setTimeout","alert","callDoZero","component","fetchSlotData","FloatButton","defaultPosition","right","bottom","down","style","callOnClick","iconType","SensorSetting","Header","Body","checked","toggleElabel","platform","arrow","toSensorDetails","Footer","showOperationActions","fetchSensors","buttons","showActionSheetWithOptions","cancelButtonIndex","destructiveButtonIndex","callReloadSensors","SettingMenu","go","OperationActions","SlotSetting","selectedNums","fetchSlots","s","onItemClick","renderSlotSensors","_this","renderSlotItem","showOperationSheet","findSelectedSlots","slotNos","ids","slotIds","toSlotDetail","doZeroAll","mergeSlot","resetSlotSensor","toSelectedSlotDetails","chooseAllSlotSensor","ConnectionOperations","label","ConnectionSetting","createDialogVisible","create","serialPorts","fetchConnection","showConnectionOperations","showCreateDialog","createConnection","cols","setCreateType","disabled","placeholder","input","setCreateTarget","arr","setCreateTargetSerial","types","newCreate","port","serialIndexList","connectionId","scanConnection","startScanTHSensors","ActionButtons","SlotDetailSetting","slotId","params","fetchSlotInfo","setUpdateSlotProp","skuApw","skuTolerance","applyModify","toggleELabel","openOperation","buttonIndex","doZero","hasELabel","option","SystemSetting","systemInfo","libLoadVisible","reloadLibPath","appName","appVersion","dbVersion","dbVersionName","pid","showLibLoadModal","libPath","stopWeightService","maskClosable","reloadLibrary","autoHeight","SystemPropsSetting","systemProps","propList","p","labelNumber","console","log","SENSOR_OPERATIONS","SlotSensorsSetting","sensorRemoveMode","allSlots","sensorPickerData","changed","pickerData","children","sensorItem","openSensorOperations","v","onSelectSensor","oldSensor","selectedSensor","selectedSensors","renderSensorItem","addSensor","applySensors","removeSensor","newSensors","sensorIds","setSlotByIds","Overview","refresh","onSensorClick","list","SystemCheck","statusTable","tcpApi","databaseTables","refreshStatusTable","color","ip","reconnectTcp","tableName","showDbResetConfirm","refreshDatabaseTables","doDbReset","renderMessageItem","message","rows","seqNo","MessageLog","logs","refreshLogs","refreshTimmer","operations","ClickOperations","UPGRADE_PROGRESS_STATE_TABLE","0","SensorHealthy","upgradePercent","upgradeProgress","refreshSensors","tryReleaseUpgradeProgressTimmer","upgradeFirmwareTimmer","clearTimeout","healthyList","showUpgradeProgress","cb","upgradeProgressPercent","undefined","total","current","helthy","renderSensorCard","onUpgradeProgressModalClose","doAbortFirmwareUpgrade","percent","position","showOperations","healthy","tryRecoveryElabelAddress","tryRecoverySensorAddress","upgradeFirmware","upgradeElabelFirmware","recoverySensorAddress","recoveryElabelAddress","packageCounter","totalSuccess","totalErrors","errorsRate","warn","errorRateInPer","minRate","doFirmwareUpgrade","refreshUpgradeProgress","refreshUpgradeProgressCb","zeroOffset","zeroReference","successRate","elabelSuccess","elabelErrors","eLabelTotal","elabelSuccessRate","elabelErrorosRate","elabelContinueErrors","onCardClick","continueErrors","showCleanCounterConfirm","doCleanCounter","SensorDetails","sensorParams","refreshParams","param","ThSensorSetting","toDetail","LineCharts","canvas","charts","echarts","init","refreshCharts","xData","yData","series","names","y","tooltip","trigger","legend","xAxis","yAxis","setOption","width","height","ref","onCanvasLoad","defaultProps","ThSensorDetailsSetting","dataLogs","chartsXData","chartsYData","tempData","maxTempData","minTempData","createTime","maxTemperature","minTemperature","date","Date","timeStr","getHours","getMinutes","getSeconds","refreshDataLog","fetchOneSensor","setSensorData","maxHumidity","minHumidity","updateRange","showReloadConfirm","Setting","exact","Address","info","Logs","About","drawerOpen","marqueeProps","loop","autoplay","infinite","backgroundColor","AppContent","CompensationActions","AppHeader","popoverVisible","leftContent","onBackClick","rightContent","mode","mask","overlay","data-seed","whiteSpace","onSelect","onPopoverSelect","goBack","doReloadSensors","showCompensationOperations","doSetCompensationState","enableCompensation","setCompensationState","createBrowserHistory","notifyPathChanged","location","setRouterPath","search","hash","listen","printBanner","App","consoleBanner","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d2154a3b.chunk.js","sourcesContent":["import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\n\r\nconst defaultState = {\r\n    showTabBar: true,\r\n    enableTabBar: false,\r\n    showHeader: true,\r\n    globalTitle: '重力货道',\r\n    routerPath: null,\r\n    dashboardSlots: [],\r\n    sensors: [],\r\n    connections: [],\r\n    user: {\r\n        name: 'MonolithIoT'\r\n    }\r\n};\r\nconst actionTable = {};\r\nconst registerReducer = (type, reducer) => {\r\n    actionTable[type] = reducer;\r\n};\r\nregisterReducer(SET_TABBAR_STATE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showTabBar: action.data\r\n    };\r\n});\r\nregisterReducer(SET_ROUTER_PATH, (state, action) => {\r\n    return {\r\n        ...state,\r\n        routerPath: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_DASHBOARD_SLOT_DATA, (state, action) => {\r\n    return {\r\n        ...state,\r\n        dashboardSlots: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(SET_TITLE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        globalTitle: action.data,\r\n    }\r\n});\r\nregisterReducer(ASYNC_FETCH_SENSORS, (state, action) => {\r\n    return {\r\n        ...state,\r\n        sensors: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(TOGGLE_SENSOR_ELABLE, (state, action) => {\r\n    const sensors = state.sensors;\r\n    const sensorId = action.data.sensorId;\r\n    const hasElabel = action.data.hasElabel;\r\n    for (let sensor of sensors) {\r\n        if (sensor.id === sensorId) {\r\n            sensor.hasElabel = hasElabel;\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        sensors: JSON.parse(JSON.stringify(sensors))\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_CONNECTION, (state, action) => {\r\n    return {\r\n        ...state,\r\n        connections: action.data,\r\n    };\r\n});\r\nregisterReducer(DELETE_CONNECTION, (state, action) => {\r\n    const id = action.data.id;\r\n    const connections = state.connections.filter(connection => connection.id !== id);\r\n    return {\r\n        ...state,\r\n        connections\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_TAB_BAR, (state, action) => {\r\n    return {\r\n        ...state,\r\n        enableTabBar: action.data,\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_HEADER, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showHeader: action.data\r\n    };\r\n});\r\nexport default (state = defaultState, action) => {\r\n    const type = action.type;\r\n    if (type in actionTable) {\r\n        const handler = actionTable[type];\r\n        return handler(state, action);\r\n    }\r\n    return state;\r\n}\r\n","export const SET_USER = \"user.set\";\r\n\r\nexport const SET_TABBAR_STATE = 'tabBar.set';\r\n\r\nexport const SET_ROUTER_PATH = 'router.path.set';\r\n\r\nexport const ASYNC_FETCH_DASHBOARD_SLOT_DATA = 'dashboard.slot_data.fetch.async';\r\n\r\nexport const SET_TITLE = 'title.set';\r\n\r\nexport const ASYNC_FETCH_SENSORS = 'sensors.fetch.async';\r\n\r\nexport const TOGGLE_SENSOR_ELABLE = 'sensor.elabel.toggle';\r\n\r\nexport const ASYNC_FETCH_CONNECTION = 'connections.fetch.async';\r\n\r\nexport const DELETE_CONNECTION = 'connection.delete';\r\n\r\nexport const SET_ENABLE_TAB_BAR = 'system.tabBar.set';\r\n\r\nexport const SET_ENABLE_HEADER = 'system.header.set';\r\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport reducer from './reducer';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst allEnhancers = reduxDevTools(applyMiddleware(thunk));\r\nconst store = createStore(reducer, allEnhancers);\r\n\r\nexport default store;\r\n","import React from 'react'\r\nimport {TabBar} from 'antd-mobile'\r\nimport {connect} from 'react-redux';\r\nimport './AppTabBar.sass'\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showTabBar: state.showTabBar,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass AppTabBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            path: '/',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const showTabBar = this.props.showTabBar && this.props.enableTabBar;\r\n        const {path} = this.state;\r\n        if (showTabBar) {\r\n            return (\r\n                <div className=\"appTabBar\">\r\n                    <TabBar\r\n                        unselectedTintColor=\"#949494\"\r\n                        tintColor=\"#33A3F4\"\r\n                        barTintColor=\"white\"\r\n                        hidden={!this.props.showTabBar}\r\n                        tabBarPosition=\"bottom\">\r\n                        <TabBar.Item title=\"看板\"\r\n                                     selected={path === '/'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe64e;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe64e;</i>}\r\n                                     onPress={() => this.pushPath('/')}/>\r\n                        <TabBar.Item title=\"日志\"\r\n                                     selected={path === '/logs'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe60c;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe60c;</i>}\r\n                                     onPress={() => this.pushPath('/logs')}/>\r\n                        <TabBar.Item title=\"编址\"\r\n                                     selected={path === '/address'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe61b;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe61b;</i>}\r\n                                     onPress={() => this.pushPath('/address')}/>\r\n                        <TabBar.Item title=\"设置\"\r\n                                     selected={path === '/setting'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe660;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe660;</i>}\r\n                                     onPress={() => this.pushPath('/setting')}/>\r\n                    </TabBar>\r\n                </div>)\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    pushPath(path) {\r\n        this.setState({\r\n            path,\r\n        });\r\n        this.props.history.push({\r\n            pathname: path,\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(AppTabBar));\r\n","import {httpRequest} from '../util/httpUtils';\r\nimport {Toast} from 'antd-mobile'\r\n\r\nconst showLoading = () => {\r\n    Toast.loading('Loading', 0);\r\n};\r\nconst hideLoading = () => {\r\n    Toast.hide();\r\n};\r\nconst showError = (msg) => {\r\n    Toast.fail(msg);\r\n};\r\n\r\n\r\nexport function request(options) {\r\n    const showLoadingToast = !options.hideLoading;\r\n    if (showLoadingToast) {\r\n        showLoading();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        httpRequest(options)\r\n            .then(res => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                if (res.status !== 200) {\r\n                    showError(`Http Response Status:${res.status}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                const body = res.data;\r\n                if (body.code !== 200) {\r\n                    showError(`Error [${body.code}]:${body.msg}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                resolve(body.data);\r\n            }).catch(err => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                const errStr = err.toString();\r\n                showError(errStr);\r\n                reject(err);\r\n            }\r\n        );\r\n    })\r\n}\r\n","import axios from 'axios'\r\n\r\nexport function httpRequest(options) {\r\n    return axios(options);\r\n}\r\n","import {request} from './request';\r\n\r\nexport const fetchSlotData = () => {\r\n    return request({\r\n        url: '/api/dashboard/slot-data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchSystemInfo = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-infos',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchSystemProps = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-props',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDashboardData = () => {\r\n    return request({\r\n        url: '/api/dashboard/_data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/_with-slot',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const toggleElable = (sensorId, hasElabel) => {\r\n    return request({\r\n        url: `/api/sensor/${sensorId}/haselabel`,\r\n        method: 'post',\r\n        data: {\r\n            hasElabel: hasElabel\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const reloadSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/reload',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const setSlotByIds = (sensorIds, slotId) => {\r\n    return request({\r\n        url: '/api/sensor/_set-slot-id-by-ids',\r\n        method: 'post',\r\n        data: {\r\n            sensorIds,\r\n            slotId,\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const stopWeightService = () => {\r\n    return request({\r\n        url: '/api/sensor/_stop-weight-service',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const dumpAll = () => {\r\n    return request({\r\n        url: '/api/sensor/_dump-all',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const findSensorById = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\nexport const tryRecoverySensorAddress = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_recovery-sensor-address`,\r\n        method: 'post',\r\n    });\r\n};\r\nexport const tryRecoveryElabelAddress = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_recovery-elabel-address`,\r\n        method: 'post',\r\n    });\r\n};\r\n","import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    SET_USER,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\nimport {fetchSlotData} from '../api/dashboard';\r\nimport {fetchSensors, toggleElable} from '../api/sensor';\r\nimport {deleteConnection, fetchConnections} from '../api/connection';\r\nimport {fetchEnableTabBar, setEnableTabBar} from '../api/config';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: SET_USER,\r\n        data: user\r\n    }\r\n};\r\nexport const setTabBarState = show => {\r\n    return {\r\n        type: SET_TABBAR_STATE,\r\n        data: show\r\n    };\r\n};\r\n\r\nexport const setRouterPath = info => {\r\n    return {\r\n        type: SET_ROUTER_PATH,\r\n        data: info\r\n    };\r\n};\r\nexport const setTitle = title => {\r\n    return {\r\n        type: SET_TITLE,\r\n        data: title,\r\n    }\r\n};\r\nexport const asyncFetchDashboardSlotData = () => {\r\n    return dispatch => {\r\n        fetchSlotData().then(res => {\r\n            const slots = [];\r\n            for (const key in res) {\r\n                if (res.hasOwnProperty(key)) {\r\n                    slots.push(res[key]);\r\n                }\r\n            }\r\n            const action = {\r\n                type: ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n                data: slots.sort((a, b) => a.slotNo.localeCompare(b.slotNo)),\r\n            };\r\n            dispatch(action);\r\n        });\r\n    }\r\n};\r\n\r\nexport const asyncFetchSensors = () => {\r\n    return dispatch => {\r\n        fetchSensors().then(res => {\r\n            const sensors = res.sort((a, b) => a.address - b.address);\r\n            const action = {\r\n                type: ASYNC_FETCH_SENSORS,\r\n                data: sensors,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const toggleSensorElable = (sensorId, hasElabel) => {\r\n    return dispatch => {\r\n        toggleElable(sensorId, hasElabel).then(() => {\r\n            const action = {\r\n                type: TOGGLE_SENSOR_ELABLE,\r\n                data: {\r\n                    sensorId,\r\n                    hasElabel\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    };\r\n};\r\n\r\n\r\nexport const asyncFetchConnection = () => {\r\n    return dispatch => {\r\n        fetchConnections().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_CONNECTION,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const asyncDeleteConnection = id => {\r\n    return dispatch => {\r\n        deleteConnection(id).then(() => {\r\n            const action = {\r\n                type: DELETE_CONNECTION,\r\n                data: {\r\n                    id: id\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    }\r\n};\r\n\r\nexport const fetchEnableTabBarAction = () => {\r\n    return dispatch => {\r\n        fetchEnableTabBar().then(res => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: res.value === 'true',\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const setEnableTabBarAction = enable => {\r\n    return dispatch => {\r\n        setEnableTabBar(enable).then(() => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: enable,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const showHeader = show => {\r\n    return {\r\n        type: SET_ENABLE_HEADER,\r\n        data: show,\r\n    };\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchConnections = () => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const deleteConnection = id => {\r\n    return request({\r\n        url: `/api/connection/${id}`,\r\n        method: 'delete',\r\n    });\r\n};\r\n\r\nexport const createConnection = connection => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'put',\r\n        data: connection,\r\n    });\r\n};\r\n\r\n\r\nexport const scanPort = () => {\r\n    return request({\r\n        url: '/api/serial/scan',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const scanDevice = id => {\r\n    return request({\r\n        url: `/api/connection/${id}/_scan`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const startScanTempHumiSensors = connectionId => {\r\n    return request({\r\n        url: `/api/connection/${connectionId}/_scan-th-device`,\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\n\r\nexport const fetchEnableTabBar = () => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setEnableTabBar = enable => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'post',\r\n        data: {\r\n            value: enable,\r\n        },\r\n    });\r\n};\r\n","export const asKg = g => {\r\n    return (g / 1000.0).toFixed(3);\r\n};\r\n\r\nexport const isWan = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isIncredible = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isDisable = state => {\r\n    return state === 3;\r\n};\r\n\r\nexport const isOffline = state => {\r\n    return state === 2;\r\n};\r\n\r\nconst connectionTypes = {\r\n    1: '串口',\r\n    2: '网络',\r\n};\r\n\r\nexport const asConnectionType = type => {\r\n    if (type in connectionTypes) {\r\n        return connectionTypes[type];\r\n    }\r\n    return `Unknown [${type}]`;\r\n};\r\n\r\nconst weightStateTable = {\r\n    1: 'stable',\r\n    2: 'dynamic',\r\n    3: 'underLoad',\r\n    4: 'overLoad',\r\n};\r\nexport const isStable = weightState => {\r\n    return weightState === 1;\r\n};\r\n\r\nexport const asWeightStateString = state => {\r\n    return state in weightStateTable ? weightStateTable[state] : state;\r\n};\r\nconst slotSortWeight = {\r\n    'S': 1,\r\n    'D': 2,\r\n    'F': 3,\r\n};\r\n\r\nconst compareBySlotNo = (a, b) => {\r\n    const aName = a.slotNo;\r\n    const bName = b.slotNo;\r\n    const aNames = aName.split('-');\r\n    const bNames = bName.split('-');\r\n    if (aNames.length !== bNames.length) {\r\n        return aNames.length - bNames.length;\r\n    }\r\n    for (let i = 0; i < aNames.length; i++) {\r\n        const aItem = parseInt(aNames[i]);\r\n        const bItem = parseInt(bNames[i]);\r\n        if (!(aItem && bItem)) {\r\n            continue;\r\n        }\r\n        if (aItem !== bItem) {\r\n            return aItem - bItem;\r\n        }\r\n    }\r\n    return 0;\r\n};\r\nexport const groupSlots = slots => {\r\n    const groups = {};\r\n    const putSlot = (name, slot) => {\r\n        if (name in groups) {\r\n            groups[name].push(slot);\r\n        } else {\r\n            groups[name] = [slot];\r\n        }\r\n    };\r\n    for (let slot of slots) {\r\n        const slotNo = slot.slotNo;\r\n        const noItems = slotNo.match(/^(\\w+)-(\\w+)-(\\w+)$/);\r\n        if (noItems) {\r\n            const groupName = `${noItems[1]}货架第${noItems[2]}层`;\r\n            putSlot(groupName, slot);\r\n        } else {\r\n            putSlot('未分组货道', slot);\r\n        }\r\n    }\r\n    const res = [];\r\n    for (let name in groups) {\r\n        if (!groups.hasOwnProperty(name)) {\r\n            continue;\r\n        }\r\n        const slots = groups[name];\r\n        res.push({\r\n            name,\r\n            slots: slots.sort(compareBySlotNo),\r\n        });\r\n    }\r\n    return res.sort((a, b) => {\r\n        const aWeight = slotSortWeight[a.name.substring(0, 1)];\r\n        const bWeight = slotSortWeight[b.name.substring(0, 1)];\r\n        if (aWeight !== bWeight) {\r\n            return aWeight - bWeight;\r\n        }\r\n        return a.name.localeCompare(b.name);\r\n    });\r\n};\r\n\r\nconst stateTable = {\r\n    1: '使用中',\r\n    2: '离线',\r\n    3: '已停用',\r\n    4: '超载',\r\n    5: '欠载',\r\n};\r\nexport const asStateString = state => {\r\n    if (state in stateTable) {\r\n        return stateTable[state];\r\n    }\r\n    return 'Unknown State:' + state;\r\n};\r\n\r\nexport const asCount = data => {\r\n    const count = data.count;\r\n    const isStable = data.weightState === 1;\r\n    if (count === null) {\r\n        return '~❗';\r\n    }\r\n    if (isStable) {\r\n        return count;\r\n    }\r\n    return '~' + count;\r\n};\r\n\r\nconst thSensorStateTable = {\r\n    4: '过高',\r\n    5: '过低',\r\n    1: '正常',\r\n};\r\n\r\nexport const thSensorStateText = state => {\r\n    if (state in thSensorStateTable) {\r\n        return thSensorStateTable[state];\r\n    }\r\n    return '未知' + state;\r\n};\r\n\r\nexport const thSensorStateWarn = state => {\r\n    return state !== 1;\r\n};\r\n","import {request} from './request';\r\n\r\nexport const doZeroAll = () => {\r\n    return request({\r\n        url: '/api/slot/zero-all',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const zeroOne = slotNo => {\r\n    const encodedSlotNo = encodeURIComponent(slotNo);\r\n    const apiUrl = `/api/slot/${encodedSlotNo}/zero`;\r\n    return request({\r\n        url: apiUrl,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllSlots = () => {\r\n    return request({\r\n        url: '/api/slot/_with-sensors',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDetail = id => {\r\n    return request({\r\n        url: `/api/slot/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const updateSlot = slot => {\r\n    return request({\r\n        url: `/api/slot/${slot.id}`,\r\n        method: 'post',\r\n        data: slot\r\n    });\r\n};\r\n\r\n\r\nexport const toggleELabelState = option => {\r\n    return request({\r\n        url: `/api/slot/${option.id}/has-e-label`,\r\n        method: 'post',\r\n        data: {hasElabel: option.hasELabel},\r\n    });\r\n};\r\n\r\nexport const highlightBySku = sku => {\r\n    return request({\r\n        url: '/api/slot/highlight',\r\n        method: 'post',\r\n        data: {\r\n            skuNo: sku\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllWithSensors = () => {\r\n    return request({\r\n        url: '/api/slot/_with-sensors',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setCompensationState = state => {\r\n    return request({\r\n        url: '/api/slot/_all-compensation',\r\n        method: 'post',\r\n        data: {\r\n            enableCompensation: state,\r\n        }\r\n    });\r\n};\r\n\r\nexport const mergeSlotsByIds = ids => {\r\n    return request({\r\n        url: '/api/slot/_merge',\r\n        method: 'post',\r\n        data: {\r\n            slotIds: ids,\r\n        }\r\n    });\r\n};\r\n\r\nexport const resetSlotBySlots = ids => {\r\n    return request({\r\n        url: '/api/slot/_reset-slot-sensors',\r\n        method: 'post',\r\n        data: {\r\n            slotIds: ids,\r\n        },\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {asyncFetchDashboardSlotData, setTabBarState, setTitle, showHeader} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport './Dashboard.sass'\r\nimport {Flex, List, Modal, NoticeBar, SearchBar, Tabs, Toast, WingBlank} from 'antd-mobile';\r\nimport {\r\n    asCount,\r\n    asKg,\r\n    asStateString,\r\n    groupSlots,\r\n    isDisable,\r\n    isIncredible,\r\n    isOffline,\r\n    isWan,\r\n    thSensorStateText,\r\n    thSensorStateWarn,\r\n} from '../../util/DataConvertor';\r\nimport {highlightBySku, zeroOne} from '../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDashboardData} from \"../../api/dashboard\";\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        slots: state.dashboardSlots\r\n    };\r\n};\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSlotData: (...args) => dispatch(asyncFetchDashboardSlotData(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        showHeader: (...args) => dispatch(showHeader(...args)),\r\n        showTabBar: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nconst TabItems = [\r\n    {\r\n        title: '重力货道数据',\r\n        key: 'dashboard',\r\n    },\r\n    {\r\n        title: '重力货道配置',\r\n        key: 'settings',\r\n    }\r\n];\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.rootEle = document;\r\n        this.state = {\r\n            slots: [],\r\n            groupedSlots: [],\r\n            thSensors: [],\r\n            sensors: [],\r\n            sensorModalVisible: false,\r\n            operationSlot: {},\r\n            searchSkuNo: '',\r\n            noticeSlots: [],\r\n        };\r\n        this.props.setTitle('Dashboard');\r\n        this.renderSlotCard = this.renderSlotCard.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startFetchData();\r\n        this.props.showHeader(false);\r\n        this.props.showTabBar(false);\r\n        this.listenKeyPress();\r\n    }\r\n\r\n    listenKeyPress() {\r\n        this.rootEle.onkeypress = e => {\r\n            const sourceTagName = e.target.tagName.toLowerCase();\r\n            if (sourceTagName !== 'body') {\r\n                return;\r\n            }\r\n            const keyCode = e.keyCode;\r\n            if (keyCode === 13) {\r\n                this.triggerHighlight(this.state.searchSkuNo);\r\n            } else {\r\n                this.appendSearchSku(String.fromCharCode(keyCode));\r\n            }\r\n        };\r\n    }\r\n\r\n    appendSearchSku(c) {\r\n        const {searchSkuNo} = this.state;\r\n        this.setState({\r\n            searchSkuNo: searchSkuNo + c,\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.fetchTimer) {\r\n            clearInterval(this.fetchTimer);\r\n        }\r\n        this.props.showHeader(true);\r\n        this.props.showTabBar(true);\r\n        this.cancelKeyPress();\r\n    }\r\n\r\n    cancelKeyPress() {\r\n        this.rootEle.onkeypress = null;\r\n    }\r\n\r\n    startFetchData() {\r\n        this.fetchTimer = setInterval(() => {\r\n            fetchDashboardData().then(res => {\r\n                const slotData = res.slotData;\r\n                const thData = res.temperatureHumidityData;\r\n                const slots = [];\r\n                const thSensors = [];\r\n                for (let slotNo in slotData) {\r\n                    if (slotData.hasOwnProperty(slotNo)) {\r\n                        slots.push(slotData[slotNo]);\r\n                    }\r\n                }\r\n                for (let id in thData) {\r\n                    if (thData.hasOwnProperty(id)) {\r\n                        thSensors.push(thData[id]);\r\n                    }\r\n                }\r\n                const groupedSlots = groupSlots(slots);\r\n                this.setState({\r\n                    slots: slots,\r\n                    thSensors: thSensors,\r\n                    groupedSlots: groupedSlots,\r\n                });\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    renderThSensorCard(sensor) {\r\n        const {data} = sensor;\r\n        let {temperature, humidity} = data;\r\n        temperature = temperature && temperature.toFixed(1);\r\n        const tempStateText = thSensorStateText(data.temperatureState);\r\n        const tempWarn = thSensorStateWarn(data.temperatureState);\r\n        const humidityText = humidity && humidity.toFixed(1);\r\n        const tempClass = ['value'];\r\n        if (tempWarn) {\r\n            tempClass.push('warn');\r\n        } else {\r\n            tempClass.push('ok');\r\n        }\r\n\r\n        return (<div className=\"th-card\" key={sensor.id}>\r\n            <div className=\"card-header\">\r\n                <div className=\"no\">{sensor.no}</div>\r\n                <div className=\"state\"><span>{humidityText}%</span><span className=\"dot\"/>使用中</div>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"inner\">\r\n                    <div className=\"item\">\r\n                        <span className=\"name\">温度:</span>\r\n                        <span className={tempClass.join(' ')}>{temperature}°C</span>\r\n                    </div>\r\n                    <div className=\"delimiter\"/>\r\n                    <div className=\"item\">\r\n                        <span className=\"name\">状态</span>\r\n                        <span className={tempClass.join(' ')}>{tempStateText}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n    renderThSensors() {\r\n        const {thSensors} = this.state;\r\n        return (<div className=\"th-sensor-group\">\r\n            <div className=\"title\">温湿度传感器</div>\r\n            <WingBlank className=\"sensors\">\r\n                {\r\n                    thSensors.map(sensor => this.renderThSensorCard(sensor))\r\n                }\r\n            </WingBlank>\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        const {searchSkuNo, noticeSlots, sensorModalVisible, operationSlot, sensors, groupedSlots} = this.state;\r\n        this.highlightSlotIds = {};\r\n        for (let slot of noticeSlots) {\r\n            this.highlightSlotIds[slot.id] = true;\r\n        }\r\n        const firstNoticeSlot = noticeSlots ? noticeSlots[0] : null;\r\n        return (\r\n            <div className=\"dashboard\">\r\n                <Tabs tabs={TabItems} onChange={(tab, index) => this.onTabChange(tab, index)}/>\r\n                <SearchBar\r\n                    value={searchSkuNo}\r\n                    onSubmit={e => this.triggerHighlight(e)}\r\n                    onChange={searchSkuNo => this.setState({searchSkuNo})}/>\r\n                <div className=\"notice-list\">\r\n                    {\r\n                        this.renderNoticeBar(firstNoticeSlot)\r\n                    }\r\n                </div>\r\n                <div className=\"slot-groups\">\r\n                    {\r\n                        groupedSlots.map(group => this.renderGroupItem(group))\r\n                    }\r\n                </div>\r\n                <div className=\"th-sensors\">\r\n                    {\r\n                        this.renderThSensors()\r\n                    }\r\n                </div>\r\n                <Modal visible={sensorModalVisible}\r\n                       title={`货道[${operationSlot.slotNo}]传感器`}\r\n                       transparent\r\n                       footer={[\r\n                           {text: '关闭', onPress: () => this.setState({sensorModalVisible: false})}, {\r\n                               text: '清零', onPress: () => this.doSlotZero(this.state.operationSlot)\r\n                           }\r\n                       ]}\r\n                       onClose={() => this.setState({sensorModalVisible: false})}>\r\n                    <List renderHeader={() => 'Sensors'}>\r\n                        {\r\n                            sensors ? sensors.map(sensor => (<List.Item\r\n                                    extra={asStateString(sensor.state)}\r\n                                    key={sensor.id}>\r\n                                    {sensor.deviceSn}\r\n                                    <List.Item.Brief>{sensor.address485}</List.Item.Brief>\r\n                                </List.Item>)) :\r\n                                <List.Item>Empty List</List.Item>\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n                <div className=\"clear-float\"/>\r\n                <div className=\"bottom-white\">\r\n                    留白\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderNoticeBar(slot) {\r\n        if (!slot) {\r\n            return;\r\n        }\r\n        const content = [];\r\n        content.push(slot.skuName);\r\n        if (slot.skuShelfLifeOpenDays) {\r\n            content.push('，开封后保质期');\r\n            content.push((<span className=\"days\">{slot.skuShelfLifeOpenDays}</span>));\r\n            content.push('天');\r\n        } else {\r\n            content.push('，开封后保质期未设置！');\r\n        }\r\n        return (<NoticeBar className=\"notice\">\r\n            {content}\r\n        </NoticeBar>)\r\n    }\r\n\r\n    renderGroupItem(group) {\r\n        return (<div className=\"group-item\" key={group.name}>\r\n            <p className=\"group-name\">\r\n                {group.name}\r\n            </p>\r\n            <WingBlank>\r\n                <Flex className=\"slots\" wrap={\"wrap\"} justify=\"between\">\r\n                    {\r\n                        group.slots.map(slot => this.renderSlotCard(slot))\r\n                    }\r\n                </Flex>\r\n            </WingBlank>\r\n        </div>)\r\n    }\r\n\r\n    renderSlotCard(slot) {\r\n        const sensors = slot.sensors;\r\n        if (!sensors) {\r\n            return null;\r\n        }\r\n        const sku = slot.sku || {};\r\n        const data = slot.data || {};\r\n        let slotCardClassName = 'slot-card';\r\n        if (slot.id in this.highlightSlotIds) {\r\n            slotCardClassName += ' slot-card-highlight';\r\n        } else {\r\n            if (isWan(slot.state)) {\r\n                if (isDisable(slot.state)) {\r\n                    slotCardClassName += ' slot-card-disable';\r\n                } else if (isOffline(slot.state)) {\r\n                    slotCardClassName += ' slot-card-offline';\r\n                } else {\r\n                    slotCardClassName += ' slot-card-warn';\r\n                }\r\n            }\r\n        }\r\n        const incredible = isIncredible(data.toleranceState);\r\n        const state = asStateString(slot.state);\r\n        const weightInKg = asKg(data.weight);\r\n        const count = asCount(data);\r\n        return (<div key={slot.id}\r\n                     className={slotCardClassName}>\r\n            <Flex className=\"card-header\" justify=\"between\">\r\n                <div className=\"slot-no\">\r\n                    {slot.slotNo}\r\n                </div>\r\n                <div className=\"state\">\r\n                    <span className=\"weight\">({weightInKg}kg)</span>\r\n                    <span className=\"dot\"/>\r\n                    <span>{state}</span>\r\n                </div>\r\n            </Flex>\r\n            <Flex className=\"card-body\" justify=\"between\">\r\n                <div className=\"left\">\r\n                    <div className=\"sku-no\">SKU:{sku.skuNo}</div>\r\n                    <div className=\"sku-name\">{sku.name}</div>\r\n                </div>\r\n                <div className=\"delimiter\"/>\r\n                <div className={`right ${incredible ? 'right-incredible' : ''}`}\r\n                     onClick={() => this.onSlotCardClick(slot)}>\r\n                    <span className=\"pcs-value\">{count}</span>\r\n                    <span className=\"pcs-unit\">(数量)</span>\r\n                </div>\r\n            </Flex>\r\n        </div>);\r\n    }\r\n\r\n    onSlotCardClick(slot) {\r\n        this.setState({\r\n            operationSlot: slot,\r\n            sensors: slot.sensors,\r\n            sensorModalVisible: true,\r\n        });\r\n    }\r\n\r\n    triggerHighlight(skuNo) {\r\n        if (skuNo === '' || skuNo.trim() === '') {\r\n            Toast.show('Please Type a SkuNo!', 1, false);\r\n            return;\r\n        }\r\n        highlightBySku(skuNo).then(res => {\r\n            this.setState({\r\n                noticeSlots: res\r\n            });\r\n            setTimeout(() => this.setState({noticeSlots: [], searchSkuNo: '',}), 5000);\r\n        }).catch(() => {\r\n            this.setState({\r\n                searchSkuNo: '',\r\n            });\r\n        });\r\n    }\r\n\r\n    onTabChange(tab, index) {\r\n        switch (index) {\r\n            case 0:\r\n                // dashboard\r\n                this.props.history.push({\r\n                    pathname: '/dashboard'\r\n                });\r\n                break;\r\n            case 1:\r\n                // settings\r\n                this.props.history.push({\r\n                    pathname: '/setting/'\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    doSlotZero(slot) {\r\n        const {slotNo} = slot;\r\n        Modal.alert('Do Zero?', `Do zero for this clot[${slotNo}]?`, [\r\n            {text: 'Cancel'},\r\n            {text: 'Yes', onPress: () => this.callDoZero(slotNo)}\r\n        ])\r\n    }\r\n\r\n    callDoZero(slotNo) {\r\n        zeroOne(slotNo).then(() => {\r\n            Toast.show(`slot[${slotNo}] Zero success!`);\r\n        });\r\n    }\r\n}\r\n\r\nconst component = connect(mapState2Props, mapAction2Props)(Dashboard);\r\nexport default withRouter(component);\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from 'antd-mobile';\r\nimport './FloatButton.sass';\r\n\r\nclass FloatButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.defaultPosition = {\r\n            right: 20,\r\n            bottom: 100,\r\n        };\r\n        this.state = {\r\n            down: false,\r\n        };\r\n    }\r\n\r\n    static propTypes = {\r\n        iconType: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func,\r\n    };\r\n\r\n    render() {\r\n        const {down} = this.state;\r\n        return (\r\n            <div className={\"floatButton \" + (down ? 'move' : '')}\r\n                 style={this.defaultPosition}\r\n                 onClick={e => this.callOnClick(e)}\r\n            >\r\n                <Icon type={this.props.iconType} className=\"icon\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    callOnClick(e) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport default FloatButton;\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Card, List, Modal, Switch, Toast} from \"antd-mobile\";\r\nimport {asyncFetchSensors, setTabBarState, setTitle, toggleSensorElable} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {reloadSensors} from \"../../../api/sensor\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSensors: (...args) => dispatch(asyncFetchSensors(...args)),\r\n        toggleSensorElable: (...args) => dispatch(toggleSensorElable(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    }\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        sensors: state.sensors,\r\n    };\r\n};\r\n\r\nclass SensorSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.props;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <List renderHeader={() => '传感器列表'}>\r\n                    {\r\n                        sensors.map(sensor => (<List.Item key={sensor.id}>\r\n                            <Card>\r\n                                <Card.Header title={`地址:${sensor.address}`} extra={sensor.deviceSn}/>\r\n                                <Card.Body>\r\n                                    <List>\r\n                                        <List.Item extra={<Switch checked={sensor.hasElabel}\r\n                                                                  onChange={(e) => this.toggleElabel(sensor, e)}\r\n                                                                  platform=\"android\"/>}>\r\n                                            启用电子标签\r\n                                        </List.Item>\r\n                                        <List.Item arrow=\"horizontal\" onClick={() => this.toSensorDetails(sensor)}>\r\n                                            传感器详细参数\r\n                                        </List.Item>\r\n                                    </List>\r\n                                </Card.Body>\r\n                                <Card.Footer content={`绑定货道:[${sensor.slot && sensor.slot.slotNo}]`}\r\n                                             extra={sensor.slot && sensor.slot.id}/>\r\n                            </Card>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationActions()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    toSensorDetails(sensor) {\r\n        this.props.history.push({pathname: `/setting/${sensor.address}/sensor-details`});\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('重力传感器设置');\r\n        this.props.fetchSensors();\r\n    }\r\n\r\n    toggleElabel(sensor, e) {\r\n        const sensorId = sensor.id;\r\n        this.props.toggleSensorElable(sensorId, e);\r\n    }\r\n\r\n    showOperationActions() {\r\n        const buttons = ['重新加载', '取消'];\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: '操作选择',\r\n            options: buttons,\r\n            cancelButtonIndex: buttons.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            if (index === 0) {\r\n                this.callReloadSensors();\r\n            }\r\n        })\r\n    }\r\n\r\n    callReloadSensors() {\r\n        Modal.alert('重新加载', '确定重新加载，该操作需等到一段时间（30s）才可生效?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '确定', onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('加载成功!', 1, false);\r\n                        })\r\n                    }\r\n                },\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(SensorSetting);\r\n","import React, {Component} from 'react';\r\nimport {List} from \"antd-mobile\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nclass SettingMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('设置');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"setting\">\r\n                <List renderHeader={() => 'Settings:'}>\r\n                    <List.Item onClick={() => this.go('/setting/sensor')} arrow=\"horizontal\">\r\n                        重力传感器\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/th-sensor')} arrow=\"horizontal\">\r\n                        温湿度传感器\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/slot')} arrow=\"horizontal\">\r\n                        货道管理\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/connection')} arrow=\"horizontal\">\r\n                        连接管理\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/system')} arrow=\"horizontal\">\r\n                        系统信息\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\" onClick={() => this.go('/setting/system-check')}>\r\n                        系统检查\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/overview')} arrow=\"horizontal\">\r\n                        货道概览信息\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    go(path) {\r\n        this.props.history.push({\r\n            pathname: path\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SettingMenu));\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Checkbox, List, Modal, Toast} from 'antd-mobile';\r\nimport {doZeroAll, fetchAllSlots, mergeSlotsByIds, resetSlotBySlots} from '../../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport './SlotSetting.sass';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst OperationActions = ['刷新', '全部清零', '合并选中货道', '拆分选中货道', '管理选中货道', '全选', '取消'];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slots: [],\r\n            selectedNums: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(false);\r\n        this.props.setTitle('重力货道设置');\r\n        this.fetchSlots();\r\n    }\r\n\r\n    onItemClick(slot) {\r\n        const {slots} = this.state;\r\n        for (let s of slots) {\r\n            if (s.id === slot.id) {\r\n                s.selected = !s.selected;\r\n            }\r\n        }\r\n        const selectedNums = slots.filter(slot => slot.selected).length;\r\n        this.setState({\r\n            slots: slots,\r\n            selectedNums: selectedNums,\r\n        });\r\n    }\r\n\r\n    renderSlotSensors(sensors) {\r\n        if (sensors.length <= 0) {\r\n            return (<span className=\"msg\">该货道已被合并</span>);\r\n        }\r\n        return sensors.map(sensor => (<span className=\"sensor-dot\" key={sensor.id}>{sensor.address}</span>));\r\n    }\r\n\r\n    renderSlotItem(slot) {\r\n        const sensors = slot.sensors || [];\r\n        if (slot.id < 0 && sensors.length <= 0) {\r\n            return\r\n        }\r\n        return (<Item key={slot.id} arrow=\"horizontal\" onClick={() => this.onItemClick(slot)}>\r\n            <div className=\"slot-item\">\r\n                <div className=\"cb-wrapper\">\r\n                    <Checkbox checked={slot.selected}/>\r\n                </div>\r\n                <div className=\"slot-no\">\r\n                    <span>{slot.slotNo}</span>\r\n                </div>\r\n                <div>\r\n                    {\r\n                        this.renderSlotSensors(sensors)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Item>);\r\n    }\r\n\r\n    render() {\r\n        const {slots, selectedNums} = this.state;\r\n        const _this = this;\r\n        return (\r\n            <div className=\"slot-setting\">\r\n                <div className=\"fixed-tips\"><p>已选择：{selectedNums}个</p></div>\r\n                <List renderHeader={() => '重力货道列表'} className=\"slots\">\r\n                    {\r\n                        slots.map(slot => _this.renderSlotItem(slot))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationSheet()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    findSelectedSlots() {\r\n        const {slots} = this.state;\r\n        return slots.filter(slot => slot.selected);\r\n    }\r\n\r\n    mergeSlot() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length < 2) {\r\n            Toast.show('请选中一个以上货道', 3, false);\r\n            return;\r\n        }\r\n        const slotNos = slots.map(slot => slot.slotNo).join(',');\r\n        Modal.alert('合并货道', `确认合并:${slotNos}?`, [\r\n            {\r\n                text: '取消',\r\n            },\r\n            {\r\n                text: '确定',\r\n                onPress: () => {\r\n                    mergeSlotsByIds(slots.map(slot => slot.id)).then(() => {\r\n                        Toast.show('合并成功', 3, false);\r\n                        this.fetchSlots();\r\n                    });\r\n                },\r\n            }\r\n        ]);\r\n    }\r\n\r\n    resetSlotSensor() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length < 1) {\r\n            Toast.show('请选中至少一个货道', 3, false);\r\n            return;\r\n        }\r\n        const slotNos = slots.map(slot => slot.slotNo).join(',');\r\n        Modal.alert('拆分货道', `确认拆分:${slotNos}?`, [\r\n            {\r\n                text: '取消',\r\n            },\r\n            {\r\n                text: '确定',\r\n                onPress: () => {\r\n                    resetSlotBySlots(slots.map(slot => slot.id)).then(() => {\r\n                        Toast.show('拆分成功', 3, false);\r\n                        this.fetchSlots();\r\n                    });\r\n                },\r\n            }\r\n        ]);\r\n    }\r\n\r\n    chooseAllSlotSensor() {\r\n        const {slots} = this.state;\r\n        const selected = slots.filter(slot => slot.selected).length !== slots.length;\r\n        for (let slot of slots) {\r\n            slot.selected = selected;\r\n        }\r\n        this.setState({slots});\r\n    }\r\n\r\n    toSelectedSlotDetails() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length !== 1) {\r\n            Toast.show('请选中一个货道', 3, false);\r\n            return;\r\n        }\r\n        const slot = slots[0];\r\n        this.toSlotDetail(slot);\r\n    }\r\n\r\n    showOperationSheet() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: OperationActions,\r\n            title: '操作选择',\r\n            cancelButtonIndex: OperationActions.length - 1,\r\n            destructiveButtonIndex: 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.fetchSlots();\r\n                    break;\r\n                case 1:\r\n                    this.doZeroAll();\r\n                    break;\r\n                case 2:\r\n                    this.mergeSlot();\r\n                    break;\r\n                case 3:\r\n                    this.resetSlotSensor();\r\n                    break;\r\n                case 4:\r\n                    this.toSelectedSlotDetails();\r\n                    break;\r\n                case 5:\r\n                    this.chooseAllSlotSensor();\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        })\r\n    }\r\n\r\n    toSlotDetail(slot) {\r\n        this.props.history.push({\r\n            pathname: `/setting/slot-detail/${slot.id}`,\r\n        });\r\n    }\r\n\r\n    doZeroAll() {\r\n        doZeroAll().then(() => {\r\n            Toast.show('全部货道已经被清零!');\r\n        })\r\n    }\r\n\r\n    fetchSlots() {\r\n        fetchAllSlots().then(res => {\r\n            const slots = res.map(slot => {\r\n                slot.selected = false;\r\n                return slot;\r\n            }).sort((a, b) => a.address - b.address);\r\n            this.setState({slots})\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotSetting));\r\n","import React, {Component} from 'react';\r\nimport {asyncDeleteConnection, asyncFetchConnection, setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Flex, InputItem, List, Modal, Picker, Toast} from 'antd-mobile';\r\nimport {asConnectionType} from '../../../util/DataConvertor';\r\nimport './ConnectionSetting.sass'\r\nimport {createConnection, scanDevice, scanPort, startScanTempHumiSensors} from '../../../api/connection';\r\nimport {connect} from 'react-redux';\r\n\r\nconst ConnectionOperations = [\r\n    '删除',\r\n    '扫描重力货道',\r\n    '扫描温湿度传感器',\r\n    '取消',\r\n];\r\nconst connectionTypes = [\r\n    {\r\n        label: '串口',\r\n        value: 1,\r\n    },\r\n    {\r\n        label: '网络',\r\n        value: 2,\r\n    }\r\n];\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchConnection: (...args) => dispatch(asyncFetchConnection(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        deleteConnection: (...args) => dispatch(asyncDeleteConnection(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        connections: state.connections,\r\n    };\r\n};\r\n\r\nclass ConnectionSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            createDialogVisible: false,\r\n            create: {\r\n                type: null,\r\n                target: ''\r\n            },\r\n            serialPorts: []\r\n        };\r\n        this.props.setTitle('物理连接设置');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchConnection();\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {connections} = this.props;\r\n        const {createDialogVisible} = this.state;\r\n        const {create} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => '连接列表'}>\r\n                    {\r\n                        connections.map(connection => (\r\n                            <Item key={connection.id} arrow=\"horizontal\"\r\n                                  onClick={() => this.showConnectionOperations(connection)}>\r\n                                <Flex justify=\"between\" className=\"connectionItem\">\r\n                                    <span className=\"type\">{asConnectionType(connection.type)}</span>\r\n                                    <span className=\"target\">{connection.target}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                    <Item key=\"createButton\">\r\n                        <Button type=\"primary\" onClick={() => this.showCreateDialog()}>创建连接</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={createDialogVisible}\r\n                    transparent\r\n                    title=\"创建连接\"\r\n                    footer={[\r\n                        {text: '取消', onPress: () => this.setState({createDialogVisible: false})},\r\n                        {text: '创建', onPress: () => this.createConnection()},\r\n                    ]}\r\n                    onClose={() => this.setState({createDialogVisible: false})}>\r\n                    <List>\r\n                        <Picker data={connectionTypes} title=\"连接类型\" cols={1}\r\n                                extra=\"请选择\"\r\n                                onChange={e => this.setCreateType(e)}>\r\n                            <List.Item>\r\n                                <InputItem value={create.type && asConnectionType(create.type)}\r\n                                           disabled={true}\r\n                                           placeholder=\"类型\"/>\r\n                            </List.Item>\r\n                        </Picker>\r\n                        {\r\n                            (() => {\r\n                                const input = (<List.Item key=\"target\"><InputItem placeholder=\"Connection Target\"\r\n                                                                                  onChange={e => this.setCreateTarget(e)}\r\n                                                                                  value={create.target}\r\n                                                                                  disabled={this.state.create.type === 1}/></List.Item>);\r\n                                if (create.type === 1) {\r\n                                    return (<Picker data={this.state.serialPorts}\r\n                                                    extra=\"选择\"\r\n                                                    title=\"串口列表\"\r\n                                                    cols={1}\r\n                                                    onChange={arr => this.setCreateTargetSerial(arr)}>\r\n                                        {input}\r\n                                    </Picker>)\r\n                                } else {\r\n                                    return input;\r\n                                }\r\n                            })()\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    deleteConnection(connection) {\r\n        Modal.alert('删除连接!', '确定删除连接？',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '删除',\r\n                    onPress: () => {\r\n                        this.props.deleteConnection(connection.id);\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    scanConnection(connection) {\r\n        Modal.alert('扫描重力传感器!', '扫描该连接下的传感器？?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '扫描',\r\n                    onPress: () => {\r\n                        scanDevice(connection.id).then(() => {\r\n                            Toast.show('扫描已开始!', 2, false)\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    showCreateDialog() {\r\n        this.setState({\r\n            createDialogVisible: true\r\n        })\r\n    }\r\n\r\n    createConnection() {\r\n        createConnection(this.state.create).then(() => {\r\n            this.props.fetchConnection();\r\n            this.setState({\r\n                create: {},\r\n                createDialogVisible: false,\r\n            });\r\n        })\r\n    }\r\n\r\n    setCreateType(types) {\r\n        if (types.length < 1) {\r\n            Toast.show('请选择连接类型!');\r\n        }\r\n        const type = types[0];\r\n        const newCreate = {\r\n            type,\r\n            target: ''\r\n        };\r\n        this.setState({create: newCreate});\r\n        if (type === 1 && this.state.serialPorts.length <= 0) {\r\n            scanPort().then(res => {\r\n                const serialPorts = [];\r\n                for (const port of res) {\r\n                    serialPorts.push({\r\n                        label: port,\r\n                        value: port,\r\n                    });\r\n                }\r\n                this.setState({serialPorts});\r\n            });\r\n        }\r\n    }\r\n\r\n    setCreateTarget(e) {\r\n        const create = {\r\n            ...this.state.create,\r\n            target: e,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    setCreateTargetSerial(serialIndexList) {\r\n        if (!serialIndexList) {\r\n            Toast.show('请选择串口!');\r\n            return;\r\n        }\r\n        const port = serialIndexList[0];\r\n        const create = {\r\n            ...this.state.create,\r\n            target: port,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    startScanTHSensors(connection) {\r\n        Modal.alert('扫描温湿度传感器!', '扫描该连接下的温湿度传感器?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '扫描',\r\n                    onPress: () => {\r\n                        startScanTempHumiSensors(connection.id).then(() => {\r\n                            Toast.show('扫描已开始!', 2, false)\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    showConnectionOperations(connection) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: `${connection.target} 操作`,\r\n            options: ConnectionOperations,\r\n            cancelButtonIndex: ConnectionOperations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.deleteConnection(connection);\r\n                    break;\r\n                case 1:\r\n                    this.scanConnection(connection);\r\n                    break;\r\n                case 2:\r\n                    this.startScanTHSensors(connection);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(ConnectionSetting);\r\n","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDetail, toggleELabelState, updateSlot, zeroOne} from '../../../api/slot';\r\nimport {ActionSheet, Button, InputItem, List, Switch, Toast, WingBlank} from 'antd-mobile';\r\nimport {setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst ActionButtons = [\r\n    '清零该货道',\r\n    '删除货道',\r\n    '取消',\r\n];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotDetailSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {}\r\n        };\r\n        this.slotId = this.props.match.params.id;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle(`${this.slotId} 货道设置`);\r\n        this.fetchSlotInfo();\r\n    }\r\n\r\n    fetchSlotInfo() {\r\n        fetchDetail(this.slotId).then(res => {\r\n            this.setState({slot: res});\r\n            this.props.setTitle(`${res.slotNo} 货道设置`);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {slot} = this.state;\r\n        return (\r\n            <div className=\"slotDetail\">\r\n                <List renderHeader={() => '货道信息'}>\r\n                    <Item key=\"slotNo\">\r\n                        <InputItem placeholder=\"逻辑货道号\" value={slot.slotNo}\r\n                                   onChange={text => this.setUpdateSlotProp({slotNo: text})}>货道号</InputItem>\r\n                    </Item>\r\n                    <Item key=\"SkuName\">\r\n                        <InputItem placeholder=\"SKU名称\" value={slot.skuName}\r\n                                   onChange={text => this.setUpdateSlotProp({skuName: text})}>SKU名称</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuNo\">\r\n                        <InputItem placeholder=\"SKU号\" value={slot.skuNo}\r\n                                   onChange={text => this.setUpdateSlotProp({skuNo: text})}>SKU号</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuApw\">\r\n                        <InputItem placeholder=\"SKU单重\" value={slot.skuApw}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuApw: text})}>SKU单重</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuTolerance\">\r\n                        <InputItem placeholder=\"SKU允差\" value={slot.skuTolerance}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuTolerance: text})}>SKU允差</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuShelfLifeOpenDays\">\r\n                        <InputItem placeholder=\"开封后保质天数\" value={slot.skuShelfLifeOpenDays}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuShelfLifeOpenDays: text})}>\r\n                            保质期\r\n                        </InputItem>\r\n                    </Item>\r\n                    <Item key=\"applyBtn\">\r\n                        <WingBlank><Button type=\"primary\" onClick={() => this.applyModify()}>保存</Button></WingBlank>\r\n                    </Item>\r\n                </List>\r\n                <List renderHeader={() => 'Operations'}>\r\n                    <List.Item\r\n                        key=\"hasELabel\"\r\n                        extra={<Switch\r\n                            checked={slot.hasElabel}\r\n                            onChange={state => this.toggleELabel(state)}\r\n                            platform=\"android\"/>}>\r\n                        启用电子标签\r\n                    </List.Item>\r\n                    <List.Item\r\n                        arrow=\"horizontal\"\r\n                        onClick={() => this.props.history.push({pathname: `/setting/slot-sensors/${slot.id}`})}>\r\n                        货道传感器管理\r\n                    </List.Item>\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.openOperation()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    openOperation() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: '操作选择',\r\n            options: ActionButtons,\r\n            destructiveButtonIndex: 1,\r\n            cancelButtonIndex: ActionButtons.length - 1,\r\n        }, buttonIndex => {\r\n            switch (buttonIndex) {\r\n                case 0:\r\n                    this.doZero();\r\n                    break;\r\n                case 1:\r\n                    Toast.show('暂时不能删除货道', 2, false);\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    doZero() {\r\n        const {slot} = this.state;\r\n        zeroOne(slot.slotNo).then(() => {\r\n            Toast.show('清零成功!');\r\n        });\r\n    }\r\n\r\n    setUpdateSlotProp(props) {\r\n        const slot = {\r\n            ...this.state.slot,\r\n            ...props\r\n        };\r\n        this.setState({slot});\r\n    }\r\n\r\n    applyModify() {\r\n        updateSlot(this.state.slot).then(() => {\r\n            Toast.show('Apply Success!');\r\n        });\r\n    }\r\n\r\n    toggleELabel(hasELabel) {\r\n        toggleELabelState({id: this.slotId, hasELabel}).then(() => {\r\n            Toast.show('Toggle ELabel Success!');\r\n            this.fetchSlotInfo();\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotDetailSetting));\r\n","import React, {Component} from 'react';\r\nimport {Button, List, Modal, Switch, TextareaItem, Toast} from 'antd-mobile';\r\nimport {setEnableTabBarAction, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {fetchSystemInfo} from '../../../api/dashboard';\r\nimport {reloadLibPath} from '../../../api/serial';\r\nimport {stopWeightService} from '../../../api/sensor';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setEnableTabBar: (...args) => dispatch(setEnableTabBarAction(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass SystemSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemInfo: {},\r\n            libLoadVisible: false,\r\n            reloadLibPath: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('系统信息');\r\n        fetchSystemInfo().then(res => {\r\n            this.setState({\r\n                systemInfo: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {systemInfo, libLoadVisible, reloadLibPath} = this.state;\r\n        const {enableTabBar} = this.props;\r\n        return (\r\n            <div className=\"systemSettings\">\r\n                <List renderHeader={() => '系统信息'}>\r\n                    <Item key=\"appName\" extra={systemInfo.appName}>应用名称</Item>\r\n                    <Item key=\"appVersion\" extra={systemInfo.appVersion}>应用版本</Item>\r\n                    <Item key=\"dbVersion\" extra={systemInfo.dbVersion}>数据库版本</Item>\r\n                    <Item key=\"dbVersionName\" extra={systemInfo.dbVersionName}>数据库版本名</Item>\r\n                    <Item key=\"pid\" extra={systemInfo.pid}>进程ID</Item>\r\n                    <Item key=\"libPath\" arrow=\"horizontal\"\r\n                          onClick={() => this.showLibLoadModal()}> 驱动路径: {systemInfo.libPath}</Item>\r\n                </List>\r\n                <List renderHeader={() => '系统设置'}>\r\n                    <Item\r\n                        key=\"tabBar\"\r\n                        extra={<Switch\r\n                            checked={enableTabBar}\r\n                            onChange={target => this.setEnableTabBar(target)}\r\n                            platform=\"android\"/>}>\r\n                        底部标签栏\r\n                    </Item>\r\n                    <Item key=\"systemProps\" arrow=\"horizontal\"\r\n                          onClick={() => this.props.history.push({pathname: '/setting/system-props'})}>\r\n                        JVM信息\r\n                    </Item>\r\n                    <Item key=\"stopService\">\r\n                        <Button type=\"warning\" onClick={() => this.stopWeightService()}>停止重力服务</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={libLoadVisible}\r\n                    title=\"重新加载驱动\"\r\n                    transparent\r\n                    maskClosable={true}\r\n                    footer={[\r\n                        {\r\n                            text: '取消',\r\n                            onPress: () => this.showLibLoadModal(false),\r\n                        },\r\n                        {\r\n                            text: '加载',\r\n                            onPress: () => this.reloadLibrary()\r\n                        },\r\n                    ]}>\r\n                    <TextareaItem\r\n                        placeholder=\"驱动路径!\"\r\n                        autoHeight\r\n                        value={reloadLibPath} onChange={e => this.setState({reloadLibPath: e})}/>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setEnableTabBar(target) {\r\n        this.props.setEnableTabBar(target);\r\n    }\r\n\r\n    showLibLoadModal(show = true) {\r\n        const reloadLibPath = this.state.systemInfo.libPath;\r\n        this.setState({\r\n            reloadLibPath,\r\n            libLoadVisible: show\r\n        });\r\n    }\r\n\r\n    reloadLibrary() {\r\n        reloadLibPath(this.state.reloadLibPath).then(res => {\r\n            Toast.show(`加载成功: [${res}]`);\r\n            this.setState({\r\n                libLoadVisible: false,\r\n            })\r\n        })\r\n    }\r\n\r\n    stopWeightService() {\r\n        stopWeightService().then(() => {\r\n            Toast.show(\"重力服务已停止!\");\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props, mapAction2Props)(SystemSetting));\r\n","import {request} from './request';\r\n\r\nexport const reloadLibPath = path => {\r\n    return request({\r\n        url: '/api/serial/load-lib',\r\n        method: 'post',\r\n        data: {\r\n            libPath: path\r\n        }\r\n    })\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchSystemProps} from '../.././../api/dashboard';\r\nimport {List, TextareaItem} from 'antd-mobile';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    console.log(props, dispatch);\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\nconst {Item} = List;\r\n\r\nclass SystemPropsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemProps: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('JVM环境变量');\r\n        fetchSystemProps().then(res => {\r\n            const propList = [];\r\n            for (const name in res) {\r\n                if (res.hasOwnProperty(name)) {\r\n                    propList.push({\r\n                        name,\r\n                        value: res[name],\r\n                    });\r\n                }\r\n            }\r\n            this.setState({\r\n                systemProps: propList\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {systemProps} = this.state;\r\n        return (\r\n            <div className=\"systemProps\">\r\n                <List renderHeader={() => 'System Properties'}>\r\n                    {\r\n                        systemProps.map(p => (<Item key={p.name}>\r\n                            <div>{p.name}</div>\r\n                            <TextareaItem value={p.value} autoHeight labelNumber={5}/>\r\n                        </Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SystemPropsSetting);\r\n","import React, {Component} from 'react';\r\nimport {fetchAllWithSensors, fetchDetail} from '../../../api/slot';\r\nimport {setSlotByIds} from '../../../api/sensor';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Flex, List, Modal, Picker, Toast, WingBlank} from \"antd-mobile\";\r\nimport './SlotSensorsSetting.sass'\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\nconst SENSOR_OPERATIONS = ['移除', '取消'];\r\n\r\nclass SlotSensorsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {},\r\n            sensors: [],\r\n            sensorRemoveMode: false,\r\n            allSlots: [],\r\n            sensorPickerData: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('货道传感器管理');\r\n        const {id} = this.props.match.params;\r\n        fetchDetail(id).then(res => {\r\n            const sensors = res.sensors;\r\n            for (let sensor of sensors) {\r\n                sensor.changed = false;\r\n            }\r\n            this.setState({\r\n                slot: res,\r\n                sensors: sensors,\r\n            });\r\n            this.props.setTitle(`传感器管理[${res.slotNo}]`);\r\n        });\r\n        fetchAllWithSensors().then(res => {\r\n            const pickerData = [];\r\n            for (let slot of res) {\r\n                const sensors = slot.sensors;\r\n                const children = [];\r\n                for (let sensor of sensors) {\r\n                    children.push({\r\n                        value: sensor.id,\r\n                        label: sensor.address,\r\n                    });\r\n                }\r\n                pickerData.push({\r\n                    value: slot.id,\r\n                    label: slot.slotNo,\r\n                    children: children,\r\n                });\r\n            }\r\n            this.setState({allSlots: res, sensorPickerData: pickerData,});\r\n        });\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {sensorRemoveMode, sensorPickerData} = this.state;\r\n        const sensorItem = (\r\n            <List.Item key={sensor.id}\r\n                       arrow=\"horizontal\"\r\n                       className={`sensor-item ${sensor.changed ? 'sensor-item-changed' : ''}`}\r\n                       onClick={() => this.openSensorOperations(sensor)}\r\n                       extra={sensorRemoveMode ? '点击删除' : ''}>\r\n                {sensor.deviceSn}\r\n            </List.Item>);\r\n        if (sensorRemoveMode) {\r\n            return sensorItem;\r\n        } else {\r\n            return (<Picker\r\n                data={sensorPickerData}\r\n                key={sensor.id}\r\n                value={[sensor.slotId, sensor.id]}\r\n                cols={2}\r\n                onChange={v => this.onSelectSensor(sensor, v)}>{sensorItem}</Picker>)\r\n        }\r\n    }\r\n\r\n    onSelectSensor(oldSensor, selected) {\r\n        const slotId = selected[0];\r\n        const sensorId = selected[1];\r\n        let index = -1;\r\n        const selectedSensors = this.state.sensors;\r\n        for (let i in selectedSensors) {\r\n            if (!selectedSensors.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            const sensor = selectedSensors[i];\r\n            if (sensor.id === oldSensor.id) {\r\n                index = i;\r\n            }\r\n        }\r\n        let selectedSensor;\r\n        for (let slot of this.state.allSlots) {\r\n            if (slot.id === slotId) {\r\n                for (let sensor of slot.sensors) {\r\n                    if (sensor.id === sensorId) {\r\n                        sensor.changed = true;\r\n                        selectedSensor = sensor;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let s of selectedSensors) {\r\n            if (s.id === selectedSensor.id) {\r\n                Toast.show('传感器重复!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        selectedSensors[index] = selectedSensor;\r\n        this.setState({sensors: selectedSensors,})\r\n    }\r\n\r\n    render() {\r\n        const {slot, sensors, sensorRemoveMode} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => '货道信息'}>\r\n                    <List.Item extra={slot.slotNo}>货道号</List.Item>\r\n                    <List.Item extra={slot.skuName}>SKU名称</List.Item>\r\n                    <List.Item extra={slot.skuNo}>SKU号</List.Item>\r\n                </List>\r\n                <List renderHeader={() => 'Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => this.renderSensorItem(sensor))\r\n                    }\r\n                    <List.Item>\r\n                        <WingBlank>\r\n                            <Flex justify={\"between\"}>\r\n                                <Flex.Item>\r\n                                    <Button type=\"warning\"\r\n                                            onClick={() => this.setState({sensorRemoveMode: !this.state.sensorRemoveMode})}>\r\n                                        {sensorRemoveMode ? '退出删除' : '删除'}\r\n                                    </Button>\r\n                                </Flex.Item>\r\n                                <Flex.Item>\r\n                                    <Button type=\"ghost\" onClick={() => this.addSensor()}\r\n                                            disabled={sensorRemoveMode}>添加</Button>\r\n                                </Flex.Item>\r\n                                <Flex.Item>\r\n                                    <Button type=\"primary\" disabled={sensorRemoveMode}\r\n                                            onClick={() => this.applySensors()}>保存</Button>\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </WingBlank>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    addSensor() {\r\n        for (let sensor of this.state.sensors) {\r\n            if (sensor.id < 0) {\r\n                Toast.show('请选择一个传感器!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        const {sensors} = this.state;\r\n        sensors.push({\r\n            id: -1,\r\n            deviceSn: '未选择',\r\n            changed: true,\r\n        });\r\n        this.setState({sensors});\r\n    }\r\n\r\n    openSensorOperations(sensor) {\r\n        const {sensorRemoveMode} = this.state;\r\n        if (!sensorRemoveMode) {\r\n            return;\r\n        }\r\n        ActionSheet.showActionSheetWithOptions(\r\n            {\r\n                options: SENSOR_OPERATIONS,\r\n                title: `传感器 ${sensor.deviceSn}`,\r\n                cancelButtonIndex: 2,\r\n                destructiveButtonIndex: 0,\r\n            },\r\n            index => {\r\n                if (index === 0) {\r\n                    Modal.alert('移除传感器',\r\n                        `移除传感器 ${sensor.deviceSn}?`,\r\n                        [\r\n                            {text: '取消'},\r\n                            {\r\n                                text: '移除',\r\n                                onPress: () => this.removeSensor(sensor),\r\n                            }\r\n                        ]);\r\n                }\r\n            })\r\n    }\r\n\r\n    removeSensor(sensor) {\r\n        const {sensors} = this.state;\r\n        const newSensors = [];\r\n        for (let i in sensors) {\r\n            if (!sensors.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            const s = sensors[i];\r\n            if (s.id === sensor.id) {\r\n                continue;\r\n            }\r\n            newSensors.push(s);\r\n        }\r\n        this.setState({sensors: newSensors});\r\n    }\r\n\r\n    applySensors() {\r\n        const sensorIds = this.state.sensors.map(v => v.id);\r\n        for (let id of sensorIds) {\r\n            if (id <= 0) {\r\n                Toast.show('Any sensor not selected!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        const slot = this.state.slot;\r\n        Modal.alert('Apply Sensor Setting', 'Do you want to apply this changes?', [{text: 'Cancel'}, {\r\n            text: 'Apply',\r\n            onPress: () => {\r\n                setSlotByIds(sensorIds, slot.id).then(res => {\r\n                    Toast.show('Apply Success!');\r\n                    const {sensors} = this.state;\r\n                    for (let s of sensors) {\r\n                        s.changed = false;\r\n                    }\r\n                    this.setState({sensors});\r\n                })\r\n            }\r\n        }])\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SlotSensorsSetting);\r\n","import React, {Component} from 'react';\r\nimport {dumpAll} from '../../../api/sensor';\r\nimport {Button, List, Modal, TextareaItem, WingBlank} from 'antd-mobile';\r\n\r\nclass Overview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        dumpAll().then(res => {\r\n            const sensors = res.sort((a, b) => a.address - b.address);\r\n            this.setState({sensors})\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.state;\r\n        return (\r\n            <div className=\"overview\">\r\n                <List renderHeader={() => 'All Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => (\r\n                            <List.Item key={sensor.id}>\r\n                                {this.renderSensorItem(sensor)}\r\n                            </List.Item>\r\n                        ))\r\n                    }\r\n                </List>\r\n                <WingBlank>\r\n                    <Button onClick={() => this.refresh()} type=\"primary\">刷新</Button>\r\n                </WingBlank>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {slot, connection} = sensor;\r\n        return (<div onClick={() => this.onSensorClick(sensor)}>\r\n            传感器:[id:{sensor.id}/address:{sensor.address}]\r\n            货道:[id:{slot && slot.id}/No:{slot && slot.slotNo}]\r\n            连接:[id:{connection && connection.id}/{connection && connection.target}]\r\n        </div>);\r\n    }\r\n\r\n    onSensorClick(sensor) {\r\n        const {connection, slot} = sensor;\r\n        sensor.slot = null;\r\n        sensor.connection = null;\r\n        const list = (<List renderHeader={() => '传感器'}>\r\n            <TextareaItem value={JSON.stringify(sensor)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(connection)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(slot)} autoHeight/>\r\n        </List>);\r\n        Modal.alert('Sensor', list);\r\n    }\r\n}\r\n\r\nexport default Overview;\r\n","import React, {Component} from 'react';\r\nimport {disconnectTcp, fetchDatabaseTables, fetchStatusTable, resetDatabase} from '../../../api/systemStatus';\r\nimport {Button, Flex, List, Modal, Toast} from 'antd-mobile';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\nconst renderConnectionStatus = status => {\r\n    if (status) {\r\n        return (<span style={{color: '#1F90E6'}}>Connected</span>)\r\n    } else {\r\n        return (<span style={{color: '#E94F4F'}}>Disconnected</span>)\r\n    }\r\n};\r\n\r\nclass SystemCheck extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            statusTable: {\r\n                tcpApi: {},\r\n            },\r\n            databaseTables: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('系统检查');\r\n        this.refreshStatusTable();\r\n    }\r\n\r\n    refreshStatusTable() {\r\n        fetchStatusTable().then(res => {\r\n            this.setState({\r\n                statusTable: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    refreshDatabaseTables() {\r\n        fetchDatabaseTables().then(res => {\r\n            this.setState({databaseTables: res,})\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {statusTable, databaseTables} = this.state;\r\n        const {tcpApi} = statusTable;\r\n        return (\r\n            <div className=\"system-check\">\r\n                <List renderHeader={() => 'SCADA_API状态'}>\r\n                    <List.Item extra={renderConnectionStatus(tcpApi.connection)}>\r\n                        连接状态\r\n                    </List.Item>\r\n                    <List.Item extra={tcpApi.ip}>\r\n                        IP地址\r\n                    </List.Item>\r\n                    <List.Item extra={tcpApi.port}>\r\n                        端口\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\"\r\n                               onClick={() => this.props.history.push({pathname: '/setting/message-log'})}>\r\n                        交互日志\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <Flex justify=\"between\">\r\n                            <Flex.Item>\r\n                                <Button type=\"warning\" onClick={() => this.reconnectTcp()}>重新连接</Button>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <Button type=\"primary\" onClick={() => this.refreshStatusTable()}>刷新</Button>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </List.Item>\r\n                </List>\r\n                <List renderHeader={() => '传感器信息'}>\r\n                    <List.Item arrow=\"horizontal\"\r\n                               onClick={() => this.props.history.push({pathname: '/setting/sensor-healthy'})}>\r\n                        传感器健康\r\n                    </List.Item>\r\n                </List>\r\n                <List renderHeader={() => '数据库信息'}>\r\n                    {databaseTables.map(tableName => (<List.Item key={tableName}>{tableName}</List.Item>))}\r\n                    <List.Item>\r\n                        <Flex>\r\n                            <Flex.Item>\r\n                                <Button type=\"warning\" onClick={() => this.showDbResetConfirm()}>重置数据库</Button>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <Button type=\"primary\" onClick={() => this.refreshDatabaseTables()}>\r\n                                    数据表\r\n                                </Button>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    reconnectTcp() {\r\n        Modal.alert('圈定重连', '确定段考连接并重新建立连接？?', [{text: '取消'}, {\r\n            text: '确定', onPress() {\r\n                disconnectTcp().then(() => {\r\n                    Toast.show('断开成功，系统将在3秒后重新连接!', 3, false);\r\n                });\r\n            }\r\n        }])\r\n    }\r\n\r\n    showDbResetConfirm() {\r\n        Modal.alert('清空数据库？',\r\n            '该操作将会清空数据库中全部内容，操作完成后需要对货道重新扫描并重新下发库位信息！（该操作无法恢复）',\r\n            [{text: '取消'}, {text: '确定', onPress: () => this.doDbReset()}])\r\n    }\r\n\r\n    doDbReset() {\r\n        resetDatabase().then(() => {\r\n            Modal.alert('Database Reset Success!', 'Reset success, please scan again!');\r\n        });\r\n    }\r\n}\r\n\r\nconst component = connect(null, mapAction2Props)(SystemCheck);\r\nexport default withRouter(component);\r\n","import {request} from './request';\r\n\r\nexport const fetchStatusTable = () => {\r\n    return request({\r\n        url: '/api/status/',\r\n        method: 'get',\r\n    })\r\n};\r\n\r\nexport const disconnectTcp = () => {\r\n    return request({\r\n        url: '/api/status/tcp-disconnect',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const fetchDatabaseTables = () => {\r\n    return request({\r\n        url: '/api/status/tables',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchMessageLog = () => {\r\n    return request({\r\n        url: '/api/status/message-log',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const resetDatabase = () => {\r\n    return request({\r\n        url: '/api/status/_db-reset',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const sensorParams = address => {\r\n    return request({\r\n        url: `/api/status/${address}/_details`,\r\n        method: 'get'\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchMessageLog} from '../../../api/systemStatus';\r\nimport {Card, List, TextareaItem} from \"antd-mobile\";\r\nimport './MessageLog.sass'\r\n\r\nconst renderMessageItem = (message, index) => {\r\n    return (<List.Item key={index}>\r\n        <Card className=\"message-item\">\r\n            <Card.Header title={message.action} extra={message.type}/>\r\n            <Card.Body>\r\n                <TextareaItem value={JSON.stringify(message.data)} rows={3}/>\r\n            </Card.Body>\r\n            <Card.Footer content={message.seqNo}/>\r\n        </Card>\r\n    </List.Item>);\r\n};\r\n\r\nclass MessageLog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            logs: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshLogs();\r\n        this.refreshTimmer = setInterval(() => {\r\n            this.refreshLogs();\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.refreshTimmer);\r\n    }\r\n\r\n    refreshLogs() {\r\n        fetchMessageLog().then(res => {\r\n            this.setState({\r\n                logs: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {logs} = this.state;\r\n        return (\r\n            <div className=\"message-log\">\r\n                <List renderHeader={() => 'Message Logs'}>\r\n                    {\r\n                        logs.map(renderMessageItem)\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageLog;\r\n","import React, {Component} from 'react';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {ActionSheet, Card, Flex, List, Modal, Progress, Toast} from 'antd-mobile';\r\nimport {cleanCounter, sensorHealthy} from '../../../api/healthy';\r\nimport {tryRecoveryElabelAddress, tryRecoverySensorAddress} from '../../../api/sensor';\r\nimport {abortFirmwareUpgrade, fetchUpgradeProgress, sensorFirmwareUpgrade} from '../../../api/firmware';\r\nimport './SensorHealthy.sass';\r\n\r\nconst operations = ['重置计数器', '刷新', '取消'];\r\nconst ClickOperations = ['传感器固件升级', '电子标签固件升级', '恢复传感器地址', '恢复电子标签地址', '取消'];\r\nconst WARN_RATE = 0.1;\r\nconst UPGRADE_PROGRESS_STATE_TABLE = {\r\n    0: '等待升级',\r\n    1: '升级成功',\r\n    2: '升级失败',\r\n    3: '升级中',\r\n};\r\n\r\nclass SensorHealthy extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: [],\r\n            upgradePercent: 0,\r\n            upgradeProgress: {},\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshSensors();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n    }\r\n\r\n    tryReleaseUpgradeProgressTimmer() {\r\n        if (this.upgradeFirmwareTimmer) {\r\n            clearTimeout(this.upgradeFirmwareTimmer);\r\n        }\r\n    }\r\n\r\n    refreshSensors() {\r\n        sensorHealthy().then(res => {\r\n            const healthyList = res.sort((a, b) => a.sensor.address - b.sensor.address);\r\n            this.setState({\r\n                sensors: healthyList,\r\n                showUpgradeProgress: false,\r\n            })\r\n        });\r\n    }\r\n\r\n    refreshUpgradeProgress(cb) {\r\n        fetchUpgradeProgress().then(res => {\r\n            this.setState({upgradeProgress: res});\r\n            cb(res);\r\n        });\r\n    }\r\n\r\n    doAbortFirmwareUpgrade() {\r\n        abortFirmwareUpgrade().then(() => {\r\n            Toast.show('升级已取消', 3, false);\r\n        });\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n    }\r\n\r\n    render() {\r\n        const {sensors, showUpgradeProgress, upgradeProgress} = this.state;\r\n        let upgradeProgressPercent = 0;\r\n        if (upgradeProgress.total !== undefined && upgradeProgress.current !== undefined && upgradeProgress.total !== 0) {\r\n            upgradeProgressPercent = upgradeProgress.current / upgradeProgress.total * 100;\r\n        }\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Sensor Healthy'}>\r\n                    {\r\n                        sensors.map(helthy => (<List.Item key={helthy.sensor.id}>\r\n                            {this.renderSensorCard(helthy)}\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <Modal visible={showUpgradeProgress}\r\n                       title=\"升级进度\"\r\n                       transparent\r\n                       maskClosable={false}\r\n                       onClose={() => this.onUpgradeProgressModalClose()}\r\n                       footer={[{\r\n                           text: 'Abort Upgrade',\r\n                           disabled: true,\r\n                           onPress: () => {\r\n                               this.onUpgradeProgressModalClose();\r\n                               this.doAbortFirmwareUpgrade();\r\n                           }\r\n                       }]}>\r\n                    <p>{UPGRADE_PROGRESS_STATE_TABLE[upgradeProgress.state]}</p>\r\n                    <p>{upgradeProgressPercent.toFixed(2)}%</p>\r\n                    <Progress percent={upgradeProgressPercent} position=\"normal\"/>\r\n                </Modal>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperations()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    recoveryElabelAddress(healthy) {\r\n        const {sensor} = healthy;\r\n        const {id} = sensor;\r\n        Modal.alert(`电子标签[${sensor.address}]地址恢复`, '确认重新设置该电子标签的物理地址？', [\r\n            {\r\n                text: '确认', onPress: () => {\r\n                    tryRecoveryElabelAddress(id).then(res => {\r\n                        Toast.show(`${res.address}:恢复成功`, 3, false);\r\n                    });\r\n                }\r\n            },\r\n            {text: '取消'},\r\n        ]);\r\n    }\r\n\r\n    recoverySensorAddress(healthy) {\r\n        const {sensor} = healthy;\r\n        const {id} = sensor;\r\n        Modal.alert(`传感器[${sensor.address}]地址恢复`, '确认重新设置该传感器的物理地址？', [\r\n            {\r\n                text: '确认', onPress: () => {\r\n                    tryRecoverySensorAddress(id).then(res => {\r\n                        Toast.show(`${res.address}:恢复成功`, 3, false);\r\n                    });\r\n                }\r\n            },\r\n            {text: '取消'},\r\n        ]);\r\n    }\r\n\r\n    onCardClick(healthy) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: ClickOperations,\r\n            title: '操作菜单',\r\n            cancelButtonIndex: ClickOperations.length - 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.upgradeFirmware(healthy);\r\n                    break;\r\n                case 1:\r\n                    this.upgradeElabelFirmware(healthy);\r\n                    break;\r\n                case 2:\r\n                    this.recoverySensorAddress(healthy);\r\n                    break;\r\n                case 3:\r\n                    this.recoveryElabelAddress(healthy);\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    upgradeFirmware(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const total = packageCounter.totalSuccess + packageCounter.totalErrors;\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.totalErrors / total));\r\n        let title = '';\r\n        let content = '';\r\n        let warn = false;\r\n        const errorRateInPer = (errorsRate * 100).toFixed(2);\r\n        if (errorsRate > WARN_RATE) {\r\n            const minRate = (WARN_RATE * 100).toFixed(2);\r\n            title = '谨慎升级！！！';\r\n            content = `传感器${sensor.address}的网络丢包率为${errorRateInPer}%，在极限值${minRate}%下，建议通过串口升级！`;\r\n            warn = true;\r\n        } else {\r\n            title = '升级确认';\r\n            content = `传感${sensor.address}器的网络丢包率为${errorRateInPer}%,升级后请手动reload启动重力服务！`;\r\n            warn = false;\r\n        }\r\n        Modal.alert(title, content, [\r\n            {\r\n                text: warn ? '仍要升级' : '升级',\r\n                onPress: () => {\r\n                    this.doFirmwareUpgrade(sensor);\r\n                }\r\n            },\r\n            {\r\n                text: '取消升级',\r\n            }\r\n        ])\r\n    }\r\n\r\n    upgradeElabelFirmware(healthy) {\r\n\r\n    }\r\n\r\n    doFirmwareUpgrade(sensor) {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n        sensorFirmwareUpgrade(sensor.id).then(() => {\r\n            Toast.show('升级已完成', 2, false);\r\n            this.tryReleaseUpgradeProgressTimmer();\r\n        });\r\n        this.showUpgradeProgress();\r\n        this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n    }\r\n\r\n    refreshUpgradeProgressCb() {\r\n        return () => {\r\n            this.upgradeFirmwareTimmer = setTimeout(() => {\r\n                this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n            }, 500);\r\n        };\r\n    }\r\n\r\n    showUpgradeProgress() {\r\n        this.setState({showUpgradeProgress: true});\r\n    }\r\n\r\n    onUpgradeProgressModalClose() {\r\n        this.setState({showUpgradeProgress: false});\r\n    }\r\n\r\n    renderSensorCard(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const zeroOffset = `ZeroOffset:${sensor.zeroReference}`;\r\n        const total = packageCounter.totalSuccess + packageCounter.totalErrors;\r\n        const successRate = total === 0 ? 0 : ((packageCounter.totalSuccess / total) * 100).toFixed(0);\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.totalErrors / total) * 100).toFixed(0);\r\n\r\n        const elabelSuccess = packageCounter.elabelSuccess;\r\n        const elabelErrors = packageCounter.elabelErrors;\r\n        const eLabelTotal = elabelErrors + elabelSuccess;\r\n        const elabelSuccessRate = eLabelTotal === 0 ? 0 : ((elabelSuccess / eLabelTotal) * 100).toFixed(0);\r\n        const elabelErrorosRate = eLabelTotal === 0 ? 0 : ((elabelErrors / eLabelTotal) * 100).toFixed(0);\r\n        const elabelContinueErrors = packageCounter.elabelContinueErrors;\r\n        return (<Card key={sensor.id} onClick={() => this.onCardClick(healthy)}>\r\n            <Card.Header title={sensor.address} extra={sensor.deviceSn}/>\r\n            <Card.Body className=\"healthy-package-counter\">\r\n                <Flex>\r\n                    <Flex.Item>\r\n                        <div className=\"total\">\r\n                            <p className=\"title\">SUCCESS</p>\r\n                            <p className=\"value\">{packageCounter.totalSuccess}/{successRate}%</p>\r\n                            <p className=\"title\">ELABEL SUCCESS</p>\r\n                            <p className=\"value\">{elabelSuccess}/{elabelSuccessRate}%</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <div className=\"error\">\r\n                            <p className=\"title\">ERRORS</p>\r\n                            <p className=\"value\">{packageCounter.totalErrors}/{errorsRate}%</p>\r\n                            <p className=\"title\">ELABEL ERRORS</p>\r\n                            <p className=\"value\">{elabelErrors}/{elabelErrorosRate}%</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <div className=\"continue\">\r\n                            <p className=\"title\">CONTINUE</p>\r\n                            <p className=\"value\">{packageCounter.continueErrors}</p>\r\n                            <p className=\"title\">ELABEL CONTINUE</p>\r\n                            <p className=\"value\">{elabelContinueErrors}</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            </Card.Body>\r\n            <Card.Footer content={zeroOffset}/>\r\n        </Card>);\r\n    }\r\n\r\n    showOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: operations,\r\n            title: 'Operations',\r\n            cancelButtonIndex: operations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    //Clean\r\n                    this.showCleanCounterConfirm();\r\n                    break;\r\n                case 1:\r\n                    this.refreshSensors();\r\n                    break;\r\n                case 2:\r\n                    //Cancel\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    showCleanCounterConfirm() {\r\n        Modal.alert('Clean Counter?', 'Clean counter?', [\r\n            {text: 'Cancel'},\r\n            {text: 'Yes', onPress: () => this.doCleanCounter()}\r\n        ]);\r\n    }\r\n\r\n    doCleanCounter() {\r\n        cleanCounter().then(() => {\r\n            Toast.show('Clean success!', 1, false);\r\n        })\r\n    }\r\n}\r\n\r\nexport default SensorHealthy;\r\n","import {request} from './request';\r\n\r\nexport const sensorHealthy = () => {\r\n    return request({\r\n        url: '/api/sensor-healthy/_healthy',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const cleanCounter = () => {\r\n    return request({\r\n        url: '/api/sensor-healthy/_clean-counter',\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const sensorFirmwareUpgrade = sensorId => {\r\n    return request({\r\n        url: `/api/firmware/${sensorId}/_upgrade`,\r\n        method: 'post',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchUpgradeProgress = () => {\r\n    return request({\r\n        url: '/api/firmware/_upgrade-progress',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const abortFirmwareUpgrade = () => {\r\n    return request({\r\n        url: '/api/firmware/_abort-upgrade',\r\n        method: 'post',\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {sensorParams} from '../../../api/systemStatus';\r\nimport {ActionSheet, List} from 'antd-mobile';\r\nimport FloatButton from \"../../commons/FloatButton\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst operations = ['刷新', '取消'];\r\n\r\nclass SensorDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensor: {},\r\n            slot: {},\r\n            sensorParams: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('传感器详细参数');\r\n        this.props.setTabBarState(false);\r\n        const address = this.props.match.params.address;\r\n        this.refreshParams(address);\r\n    }\r\n\r\n    refreshParams(address) {\r\n        sensorParams(address).then(res => {\r\n            const {slot, sensor} = res;\r\n            delete res.slot;\r\n            delete res.sensor;\r\n            const params = [];\r\n            for (let name in res) {\r\n                if (!res.hasOwnProperty(name)) {\r\n                    continue;\r\n                }\r\n                params.push({\r\n                    name: name,\r\n                    value: res[name],\r\n                });\r\n            }\r\n            this.setState({\r\n                sensor: sensor,\r\n                slot: slot,\r\n                sensorParams: params,\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {sensor, slot, sensorParams} = this.state;\r\n        return (\r\n            <div className=\"sensor-details\">\r\n                <List renderHeader={() => '传感器基本信息'}>\r\n                    <List.Item extra={sensor.deviceSn}>序列号</List.Item>\r\n                    <List.Item extra={sensor.hasElabel ? 'yes' : 'no'}>电子标签</List.Item>\r\n                    <List.Item extra={sensor.address}>地址</List.Item>\r\n                    <List.Item extra={sensor.zeroReference}>零点偏移</List.Item>\r\n                    <List.Item extra={slot.slotNo}>绑定货道号</List.Item>\r\n                    <List.Item extra={slot.skuApw}>SKU单重</List.Item>\r\n                    <List.Item extra={slot.skuName}>SKU名称</List.Item>\r\n                    <List.Item extra={slot.skuTolerance}>SKU允差</List.Item>\r\n                    <List.Item extra={slot.skuNo}>SKU号</List.Item>\r\n                </List>\r\n                <List renderHeader={() => '传感器硬件信息'}>\r\n                    {\r\n                        sensorParams.map(param => (\r\n                            <List.Item key={param.name} extra={JSON.stringify(param.value)}>\r\n                                {param.name}\r\n                            </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperations()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: operations,\r\n            title: '操作选择',\r\n            cancelButtonIndex: operations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.refreshParams(this.props.match.params.address);\r\n                    break;\r\n                case 1:\r\n                    //Cancel\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SensorDetails);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {List} from 'antd-mobile';\r\nimport {fetchThSensors} from '../../../api/thSensor';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass ThSensorSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('温湿度传感器');\r\n        this.refreshSensors();\r\n    }\r\n\r\n    refreshSensors() {\r\n        fetchThSensors().then(res => {\r\n            this.setState({\r\n                sensors: res\r\n            });\r\n        });\r\n    }\r\n\r\n    toDetail(sensor) {\r\n        this.props.history.push({\r\n            pathname: `/setting/${sensor.id}/th-detail`,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.state;\r\n        return (\r\n            <div className=\"th-sensors\">\r\n                <List renderHeader={() => '温湿度传感器'}>\r\n                    {\r\n                        sensors.map(sensor => (\r\n                            <List.Item key={sensor.id} arrow=\"horizontal\" onClick={() => this.toDetail(sensor)}>\r\n                                {sensor.no} [{sensor.address}]\r\n                            </List.Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(ThSensorSetting);\r\n","import {request} from './request';\r\n\r\nexport const fetchThSensors = () => {\r\n    return request({\r\n        url: '/api/th-sensor/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchOneSensor = id => {\r\n    return request({\r\n        url: `/api/th-sensor/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setRange = data => {\r\n    return request({\r\n        url: `/api/th-sensor/${data.id}/_range`,\r\n        method: 'post',\r\n        data\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport './LineCharts.sass';\r\nimport PropTypes from 'prop-types';\r\nimport echarts from 'echarts';\r\n\r\nclass LineCharts extends Component {\r\n    static propTypes = {\r\n        width: PropTypes.number.isRequired,\r\n        height: PropTypes.number.isRequired,\r\n        xData: PropTypes.array.isRequired,\r\n        yData: PropTypes.array.isRequired,\r\n    };\r\n    static defaultProps = {\r\n        width: 1000,\r\n        height: 300,\r\n        xData: [],\r\n        yData: [],\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    onCanvasLoad(canvas) {\r\n        if (!canvas || canvas === this.canvas) {\r\n            return;\r\n        }\r\n        this.canvas = canvas;\r\n        this.charts = echarts.init(this.canvas);\r\n        this.refreshCharts();\r\n    }\r\n\r\n    refreshCharts() {\r\n        const {xData, yData} = this.props;\r\n        const series = [];\r\n        const names = [];\r\n        for (let y of yData) {\r\n            names.push(y.name);\r\n            series.push({\r\n                ...y,\r\n                type: 'line',\r\n            });\r\n        }\r\n        const option = {\r\n            tooltip: {\r\n                trigger: 'axis'\r\n            },\r\n            legend: {\r\n                data: names,\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                data: xData\r\n            },\r\n            yAxis: {\r\n                type: 'value'\r\n            },\r\n            series: series,\r\n        };\r\n        this.charts.setOption(option);\r\n    }\r\n\r\n    render() {\r\n        const {width, height} = this.props;\r\n        return (\r\n            <canvas ref={canvas => this.onCanvasLoad(canvas)}\r\n                    className=\"charts\"\r\n                    height={height}\r\n                    width={width}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LineCharts;\r\n","import React, {Component} from 'react';\r\nimport {fetchOneSensor, setRange} from '../../../api/thSensor';\r\nimport {reloadSensors} from '../../../api/sensor';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {Button, Card, Flex, InputItem, List, Modal, Toast} from 'antd-mobile';\r\nimport {fetchSensorDataLog} from '../../../api/tempHumidityLog';\r\nimport LineCharts from '../../commons/LineCharts';\r\nimport {thSensorStateText} from '../../../util/DataConvertor';\r\n\r\nconst maxAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass ThSensorDetailsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensor: {},\r\n            dataLogs: [],\r\n            chartsXData: [],\r\n            chartsYData: [],\r\n        };\r\n    }\r\n\r\n    refreshDataLog() {\r\n        fetchSensorDataLog(this.sensorId).then(res => {\r\n            const xData = [];\r\n            const tempData = [];\r\n            // const humiData = [];\r\n            // const maxHumiData = [];\r\n            // const minHumiData = [];\r\n            const maxTempData = [];\r\n            const minTempData = [];\r\n            for (let log of res) {\r\n                const {\r\n                    createTime,\r\n                    temperature,\r\n                    // humidity,\r\n                    // maxHumidity, minHumidity,\r\n                    maxTemperature, minTemperature\r\n                } = log;\r\n                const date = new Date(createTime);\r\n                const timeStr = `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\r\n                xData.push(timeStr);\r\n                tempData.push(temperature);\r\n                // humiData.push(humidity);\r\n                // maxHumiData.push(maxHumidity);\r\n                // minHumiData.push(minHumidity);\r\n                maxTempData.push(maxTemperature);\r\n                minTempData.push(minTemperature);\r\n            }\r\n            const yData = [\r\n                {name: '温度', data: tempData},\r\n                // {name: '湿度', data: humiData},\r\n                // maxHumiData, minHumiData,\r\n                {name: '温度上限', data: maxTempData}, {name: '温度下限', data: minTempData},\r\n            ];\r\n            this.setState({\r\n                dataLogs: res,\r\n                chartsXData: xData,\r\n                chartsYData: yData,\r\n            });\r\n            this.charts.refreshCharts();\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {id} = this.props.match.params;\r\n        this.sensorId = id;\r\n        this.props.setTitle('温湿度传感器报警范围');\r\n        this.refreshDataLog();\r\n        fetchOneSensor(id).then(res => {\r\n            this.setState({\r\n                sensor: res,\r\n            });\r\n        })\r\n    }\r\n\r\n    setSensorData(data) {\r\n        const {sensor} = this.state;\r\n        this.setState({\r\n            sensor: {\r\n                ...sensor,\r\n                ...data,\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensor, dataLogs, chartsXData, chartsYData} = this.state;\r\n        return (\r\n            <div className=\"th-sensor-detail\">\r\n                <List renderHeader={() => '报警范围'}>\r\n                    <InputItem value={sensor.maxTemperature} labelNumber={10}\r\n                               onChange={text => this.setSensorData({maxTemperature: text})}>温度上限(°C)：</InputItem>\r\n                    <InputItem value={sensor.minTemperature} labelNumber={10}\r\n                               onChange={text => this.setSensorData({minTemperature: text})}>温度下限(°C)：</InputItem>\r\n                    <InputItem value={sensor.maxHumidity} labelNumber={10}\r\n                               onChange={text => this.setSensorData({maxHumidity: text})}>湿度上限( %)：</InputItem>\r\n                    <InputItem value={sensor.minHumidity} labelNumber={10}\r\n                               onChange={text => this.setSensorData({minHumidity: text})}>湿度下限( %)：</InputItem>\r\n                    <List.Item>\r\n                        <Button type=\"primary\" onClick={() => this.updateRange()}>保存</Button>\r\n                    </List.Item>\r\n                </List>\r\n                <Card>\r\n                    <Card.Header title=\"历史数据\"/>\r\n                    <Card.Body>\r\n                        <LineCharts width={500} height={300} xData={chartsXData} yData={chartsYData}\r\n                                    ref={charts => this.charts = charts}/>\r\n                    </Card.Body>\r\n                    <Card.Footer content={dataLogs.length}/>\r\n                </Card>\r\n                <List renderHeader={() => '温湿度日志'}>\r\n                    {\r\n                        dataLogs.map(log => (<List.Item key={log.id}>\r\n                            <Flex>\r\n                                <Flex.Item>{log.createTime}</Flex.Item>\r\n                                <Flex.Item>温度:{log.temperature}°C({thSensorStateText(log.temperatureState)})</Flex.Item>\r\n                                {/*<Flex.Item>湿度:{log.humidity}%({thSensorStateText(log.humidityState)})</Flex.Item>*/}\r\n                            </Flex>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateRange() {\r\n        setRange(this.state.sensor).then(res => {\r\n            this.setState({sensor: res});\r\n            this.showReloadConfirm();\r\n        });\r\n    }\r\n\r\n    showReloadConfirm() {\r\n        Modal.alert('重新加载', '数据已更新，是否重新加载生效？', [\r\n            {\r\n                text: 'No'\r\n            },\r\n            {\r\n                text: 'Yes',\r\n                onPress: () => {\r\n                    reloadSensors().then(() => {\r\n                        Toast.show('重新加载成功', 1, false);\r\n                    });\r\n                }\r\n            }\r\n        ]);\r\n    }\r\n}\r\n\r\nexport default connect(null, maxAction2Props)(ThSensorDetailsSetting);\r\n","import {request} from './request';\r\n\r\nexport const fetchSensorDataLog = sensorId => {\r\n    return request({\r\n        url: '/api/temp-humidity-log/_sensor-logs',\r\n        method: 'get',\r\n        params: {\r\n            sensorId: sensorId,\r\n        }\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport SensorSetting from './setting/SensorSetting'\r\nimport SettingMenu from './setting/SettingMenu'\r\nimport SlotSetting from './setting/SlotSetting'\r\nimport ConnectionSetting from './setting/ConnectionSetting'\r\nimport SlotDetailSetting from './setting/SlotDetailSetting'\r\nimport SystemSetting from './setting/SystemSetting'\r\nimport SystemPropsSetting from './setting/SystemPropsSetting'\r\nimport SlotSensorsSetting from './setting/SlotSensorsSetting'\r\nimport Overview from './setting/Overview'\r\nimport SystemCheck from './setting/SystemCheck'\r\nimport MessageLog from './setting/MessageLog'\r\nimport SensorHealthy from './setting/SensorHealthy'\r\nimport SensorDetails from './setting/SensorDetails'\r\nimport ThSensorSetting from './setting/ThSensorSetting'\r\nimport ThSensorDetailsSetting from './setting/ThSensorDetailsSetting'\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n    };\r\n};\r\n\r\nclass Setting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/setting/\" component={SettingMenu} exact/>\r\n                    <Route path=\"/setting/sensor\" component={SensorSetting} exact/>\r\n                    <Route path=\"/setting/slot\" component={SlotSetting} exact/>\r\n                    <Route path=\"/setting/connection\" component={ConnectionSetting} exact/>\r\n                    <Route path=\"/setting/slot-detail/:id\" component={SlotDetailSetting} exact/>\r\n                    <Route path=\"/setting/system\" component={SystemSetting} exact/>\r\n                    <Route path=\"/setting/system-props\" component={SystemPropsSetting} exact/>\r\n                    <Route path=\"/setting/slot-sensors/:id\" component={SlotSensorsSetting} exact/>\r\n                    <Route path=\"/setting/overview\" component={Overview} exact/>\r\n                    <Route path=\"/setting/system-check\" component={SystemCheck} exact/>\r\n                    <Route path=\"/setting/message-log\" component={MessageLog} exact/>\r\n                    <Route path=\"/setting/sensor-healthy\" component={SensorHealthy} exact/>\r\n                    <Route path=\"/setting/th-sensor\" component={ThSensorSetting} exact/>\r\n                    <Route path=\"/setting/:address/sensor-details\" component={SensorDetails} exact/>\r\n                    <Route path=\"/setting/:id/th-detail\" component={ThSensorDetailsSetting} exact/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Setting);\r\n","import React, {Component} from 'react';\r\nimport {Button, InputItem, List, Toast} from \"antd-mobile\";\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport './Address.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Address extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('设备编址');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"address\">\r\n                <List renderHeader={() => '编址'}>\r\n                    <InputItem>设备SN</InputItem>\r\n                    <InputItem>地址</InputItem>\r\n                    <List.Item>\r\n                        <Button type=\"primary\">编址</Button>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中', 1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Address);\r\n","import React, {Component} from 'react';\r\nimport {setTitle} from \"../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport MessageLog from './setting/MessageLog';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Logs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Logs');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MessageLog/>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Logs);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {Carousel, NoticeBar, WhiteSpace, WingBlank} from 'antd-mobile';\r\nimport './About.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass About extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            drawerOpen: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('About');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"about\">\r\n                <NoticeBar marqueeProps={{loop: true,}}>磐石电气（常州）有限公司：http://www.monolith-iot.com</NoticeBar>\r\n                <WhiteSpace/>\r\n                <WingBlank>\r\n                    <Carousel\r\n                        autoplay={true}\r\n                        infinite\r\n                        className=\"headerCarousel\"\r\n                    >\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#FF9808'}}>\r\n                            <div className=\"title\">\r\n                                磐石电气（常州）有限公司\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#3171FA'}}>\r\n                            <div className=\"title\">\r\n                                MonolithIoT\r\n                            </div>\r\n                        </div>\r\n                    </Carousel>\r\n                </WingBlank>\r\n                <WingBlank className=\"article\">\r\n                    <h1 className=\"title\">关于我们</h1>\r\n                    <div className=\"text\">\r\n                        <p>\r\n                            磐石电气(常州)有限公司,是一家高科技智能测量装备研发及生产企业，把传统体积，重量的测量数字化物联网化，可以与WMS,ERP，SAP等企业管理软件相结合，便于企业更直观的管理自己的仓储，物流等。磐石电气下设研发部，工程部，业务部，有较强的设计，研发和生产能力，可为客户提供嵌入式计算机系统产品设计，开发，系统集成，工程实施等服务。\r\n                        </p>\r\n                        <p>\r\n                            随着公司的发展，主要产品有自主研发的智能数字卷尺，智能手动叉车秤，安卓智能称重终端，静态/动态DWS等各种物联网类智能称重量方设备及软件定制系统,可为客户最大程度地提供智能化系统化的测量系统解决方案。产品广泛应用于快递物流、生鲜供应、港口订舱、仓储、工业离散制造及各种以长度(含面\r\n                            积、体积)测量为手段的民用、商用用途中。凭着可靠的产品质量和良好的售后服务，我公司已与顺丰、中国邮政、京东、国际快递DHL、华为等多家知名企业合作。\r\n                        </p>\r\n                        <p>\r\n                            目前公司已申请中国专利24项,美国专利1项，并拥有一支以博士、硕士为主的优秀研发团队，具有较高的研发能力和管理水平，现有多名员工曾在外企作为技术骨干，承传欧美设计制造理念，并采用先进的产品生命周期管理（PLM），重视产品质量，为公司产品的技术引领、技术创新和公司的可持续发展奠定了坚实基础。\r\n                        </p>\r\n                    </div>\r\n                </WingBlank>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(About);\r\n","import React, {Component} from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Dashboard from './content/Dashboard'\r\nimport Setting from './content/Setting';\r\nimport Address from './content/Address';\r\nimport Logs from './content/Logs';\r\nimport About from './content/About';\r\nimport './AppContent.sass';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"appContent\">\r\n                {\r\n                    this.props.showHeader ? <div className=\"headerMask\"/> : null\r\n                }\r\n                <Switch>\r\n                    <Route path=\"/\" component={Dashboard} exact/>\r\n                    <Route path=\"/setting**\" component={Setting} exact/>\r\n                    <Route path=\"/address\" component={Address} exact/>\r\n                    <Route path=\"/logs\" component={Logs} exact/>\r\n                    <Route path=\"/about\" component={About} exact/>\r\n                </Switch>\r\n                <div className=\"tabBarMask\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, null)(AppContent);\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Icon, Modal, NavBar, Popover, Toast} from \"antd-mobile\";\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\nimport './AppHeader.sass';\r\nimport {reloadSensors} from \"../api/sensor\";\r\nimport {setCompensationState} from '../api/slot';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        title: state.globalTitle,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\nconst CompensationActions = ['Enable', 'Disable', 'Cancel'];\r\n\r\nclass AppHeader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            popoverVisible: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.showHeader) {\r\n            return null;\r\n        }\r\n        const {title} = this.props;\r\n        return (\r\n            <div className=\"appHeader\">\r\n                <NavBar\r\n                    leftContent={<Icon type=\"left\" onClick={() => this.onBackClick()}/>}\r\n                    rightContent={this.rightContent()}\r\n                    mode=\"light\"\r\n                >{title}</NavBar>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    rightContent() {\r\n        const {popoverVisible} = this.state;\r\n        const Item = Popover.Item;\r\n        return (<Popover mask\r\n                         visible={popoverVisible}\r\n                         overlay={[\r\n                             (<Item key=\"about\" value=\"about\"\r\n                                    data-seed=\"logId\">关于我们</Item>),\r\n                             (<Item key=\"settings\" value=\"settings\"\r\n                                    style={{whiteSpace: 'nowrap'}}>货道设置</Item>),\r\n                             (<Item key=\"reload\" value=\"reload\"\r\n                                    style={{whiteSpace: 'nowrap'}}>重新加载</Item>),\r\n                             (<Item key=\"compensation\" value=\"compensation\"\r\n                                    style={{whiteSpace: 'nowrap'}}>补偿管理</Item>),\r\n                         ]}\r\n                         onSelect={e => this.onPopoverSelect(e)}\r\n        >\r\n            <Icon type=\"ellipsis\"/>\r\n        </Popover>);\r\n    }\r\n\r\n    onBackClick() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    onPopoverSelect(e) {\r\n        switch (e.key) {\r\n            case 'about':\r\n                this.props.history.push({\r\n                    pathname: '/about',\r\n                });\r\n                break;\r\n            case 'settings':\r\n                this.props.history.push({\r\n                    pathname: '/setting/',\r\n                });\r\n                break;\r\n            case 'reload':\r\n                this.doReloadSensors();\r\n                break;\r\n            case 'compensation':\r\n                this.showCompensationOperations();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({\r\n            popoverVisible: false\r\n        });\r\n    }\r\n\r\n    showCompensationOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: CompensationActions,\r\n            title: 'Compensation operations',\r\n            cancelButtonIndex: CompensationActions.length - 1,\r\n            destructiveButtonIndex: 1,\r\n        }, index => {\r\n            const name = CompensationActions[index];\r\n            switch (name) {\r\n                case 'Enable':\r\n                    this.doSetCompensationState(true);\r\n                    break;\r\n                case 'Disable':\r\n                    this.doSetCompensationState(false);\r\n                    break;\r\n                default:\r\n                    break\r\n            }\r\n        });\r\n    }\r\n\r\n    doSetCompensationState(state) {\r\n        setCompensationState(state).then(() => {\r\n            const message = (state ? 'Enable' : 'Disable') + ' Compensation Success!';\r\n            Toast.show(message, 1, false);\r\n        });\r\n    }\r\n\r\n    doReloadSensors() {\r\n        Modal.alert('Reload Sensors', 'Reload sensors from database into weightService',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                },\r\n                {\r\n                    text: 'Yes',\r\n                    onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('Reload Success!');\r\n                        });\r\n                    },\r\n                },\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props)(AppHeader));\r\n","import {createBrowserHistory} from 'history';\r\nimport {setRouterPath} from '../store/actionCreators'\r\nimport store from '../store';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst notifyPathChanged = location => {\r\n    const info = {\r\n        pathname: location.pathname,\r\n        search: location.search,\r\n        hash: location.hash\r\n    };\r\n    const action = setRouterPath(info);\r\n    store.dispatch(action);\r\n};\r\nhistory.listen((action) => {\r\n    notifyPathChanged(action.location);\r\n});\r\n\r\n\r\nnotifyPathChanged(history.location);\r\nexport default history;\r\n","const printBanner = () => {\r\n    console.log(\r\n        '%cMonolithIoT%cPoweredBy%cLevent8421',\r\n        'color:#108EE9;font-size:50px;font-family:Microsoft-yahei;background-color:#F5F5F9',\r\n        'color:#FF8800;background-color:#F5F5F9',\r\n        'color:#108EE9;background-color:#F5F5F9'\r\n    );\r\n};\r\nexport default printBanner;\r\n","import React from 'react'\nimport './App.css'\nimport store from './store'\nimport {Provider} from 'react-redux'\nimport AppTabBar from './component/AppTabBar'\nimport AppContent from './component/AppContent'\nimport AppHeader from './component/AppHeader'\nimport {HashRouter as Router} from 'react-router-dom'\nimport history from './util/History'\nimport {fetchEnableTabBarAction} from './store/actionCreators';\nimport consoleBanner from './util/consoleBanner';\n\nclass App extends React.Component {\n    componentDidMount() {\n        store.dispatch(fetchEnableTabBarAction());\n        consoleBanner();\n    }\n\n    render() {\n        return (\n            <Router history={history}>\n                <Provider store={store}>\n                    <div className=\"app-content\">\n                        <AppHeader/>\n                        <AppContent/>\n                        <AppTabBar/>\n                    </div>\n                </Provider>\n            </Router>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import 'babel-polyfill'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n/*ReactDOM.render(\n    <React.StrictMode>\n        <App/>,\n    </React.StrictMode>,\n    document.getElementById('root')\n);*/\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}