{"version":3,"sources":["store/reducer.js","store/actionTypes.js","store/index.js","component/AppTabBar.jsx","api/request.js","util/httpUtils.js","api/dashboard.js","api/sensor.js","store/actionCreators.js","api/connection.js","util/DataConvertor.js","component/content/Dashboard.jsx","component/commons/FloatButton.jsx","component/content/setting/SensorSetting.jsx","component/content/setting/SettingMenu.jsx","component/content/setting/SlotSetting.jsx","api/slot.js","component/content/setting/ConnectionSetting.jsx","component/content/setting/SlotDetailSetting.jsx","component/content/setting/SystemSetting.jsx","component/content/Setting.jsx","component/content/Address.jsx","component/content/Logs.jsx","component/content/About.jsx","component/AppContent.jsx","component/AppHeader.jsx","util/History.js","App.js","serviceWorker.js","index.js"],"names":["defaultState","showTabBar","globalTitle","routerPath","dashboardSlots","sensors","connections","user","name","actionTable","registerReducer","type","reducer","state","action","data","sensorId","hasElable","hasElabel","sensor","id","JSON","parse","stringify","filter","connection","allEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","handler","AppTabBar","this","props","className","unselectedTintColor","tintColor","barTintColor","hidden","tabBarPosition","Item","title","icon","onPress","pushPath","path","history","push","pathname","React","Component","withRouter","connect","hideLoading","hide","showError","msg","fail","request","options","loading","Promise","resolve","reject","axios","httpRequest","then","res","status","body","code","catch","err","errStr","toString","dataTemplate","deviceSn","address","slotId","slot","slotNo","setTabBarState","show","setTitle","asyncFetchDashboardSlotData","dispatch","url","method","slots","key","hasOwnProperty","sort","a","b","localeCompare","asyncFetchSensors","toggleSensorElable","asyncFetchConnection","asyncDeleteConnection","deleteConnection","isWarn","toleranceState","connectionTypes","1","2","asConnectionType","isStable","weightState","Dashboard","startFetchData","clearInterval","fetchTimer","fetchSlotData","setInterval","renderHeader","map","Header","extra","sku","Body","justify","count","weight","toFixed","Footer","content","skuNo","FloatButton","onClick","iconType","SensorSetting","checked","onChange","e","toggleElabel","showOperationActions","fetchSensors","buttons","showActionSheetWithOptions","cancelButtonIndex","length","destructiveButtonIndex","index","callReloadSensors","alert","text","SettingMenu","go","OperationActions","SlotSetting","fetchSlots","toSlotDetail","skuName","showOperationSheet","doZeroAll","setState","label","value","ConnectionSetting","createDialogVisible","create","target","serialPorts","fetchConnection","showCreateDialog","visible","transparent","footer","createConnection","maskClosable","cols","setCreateType","disabled","placeholder","input","setCreateTarget","arr","setCreateTargetSerial","types","newCreate","port","serialIndexList","ActionButtons","SlotDetailSetting","match","params","fetchSlotInfo","setUpdateSlotProp","skuApw","skuTolerance","skuShelfLifeOpenDays","applyModify","toggleELabel","openOperation","buttonIndex","button","doZero","hasELabel","option","SystemSetting","systemInfo","killButtonState","appName","appVersion","dbVersion","pid","killProcess","Setting","component","exact","Address","img","size","style","fill","message","info","Logs","About","drawerOpen","marqueeProps","loop","autoplay","infinite","backgroundColor","AppContent","AppHeader","popoverVisible","leftContent","onBackClick","rightContent","mode","mask","overlay","data-seed","whiteSpace","onSelect","onPopoverSelect","goBack","createBrowserHistory","notifyPathChanged","location","setRouterPath","search","hash","listen","App","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.623fddb6.chunk.js","sourcesContent":["import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\n\r\nconst defaultState = {\r\n    showTabBar: true,\r\n    globalTitle: '重力货道',\r\n    routerPath: null,\r\n    dashboardSlots: [],\r\n    sensors: [],\r\n    connections: [],\r\n    user: {\r\n        name: 'MonolithIoT'\r\n    }\r\n};\r\nconst actionTable = {};\r\nconst registerReducer = (type, reducer) => {\r\n    actionTable[type] = reducer;\r\n};\r\nregisterReducer(SET_TABBAR_STATE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showTabBar: action.data\r\n    };\r\n});\r\nregisterReducer(SET_ROUTER_PATH, (state, action) => {\r\n    return {\r\n        ...state,\r\n        routerPath: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_DASHBOARD_SLOT_DATA, (state, action) => {\r\n    return {\r\n        ...state,\r\n        dashboardSlots: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(SET_TITLE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        globalTitle: action.data,\r\n    }\r\n});\r\nregisterReducer(ASYNC_FETCH_SENSORS, (state, action) => {\r\n    return {\r\n        ...state,\r\n        sensors: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(TOGGLE_SENSOR_ELABLE, (state, action) => {\r\n    const sensors = state.sensors;\r\n    const sensorId = action.data.sensorId;\r\n    const hasElable = action.data.hasElabel;\r\n    for (let sensor of sensors) {\r\n        if (sensor.id === sensorId) {\r\n            sensor.hasElable = hasElable;\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        sensors: JSON.parse(JSON.stringify(sensors))\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_CONNECTION, (state, action) => {\r\n    return {\r\n        ...state,\r\n        connections: action.data,\r\n    };\r\n});\r\nregisterReducer(DELETE_CONNECTION, (state, action) => {\r\n    const id = action.data.id;\r\n    const connections = state.connections.filter(connection => connection.id !== id);\r\n    return {\r\n        ...state,\r\n        connections\r\n    };\r\n});\r\nexport default (state = defaultState, action) => {\r\n    const type = action.type;\r\n    if (type in actionTable) {\r\n        const handler = actionTable[type];\r\n        return handler(state, action);\r\n    }\r\n    return state;\r\n}\r\n","export const SET_USER = \"user.set\";\r\n\r\nexport const SET_TABBAR_STATE = 'tabBar.set';\r\n\r\nexport const SET_ROUTER_PATH = 'router.path.set';\r\n\r\nexport const ASYNC_FETCH_DASHBOARD_SLOT_DATA = 'dashboard.slot_data.fetch.async';\r\n\r\nexport const SET_TITLE = 'title.set';\r\n\r\nexport const ASYNC_FETCH_SENSORS = 'sensors.fetch.async';\r\n\r\nexport const TOGGLE_SENSOR_ELABLE = 'sensor.elabel.toggle';\r\n\r\nexport const ASYNC_FETCH_CONNECTION = 'connections.fetch.async';\r\n\r\nexport const DELETE_CONNECTION = 'connection.delete';\r\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport reducer from './reducer';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst allEnhancers = reduxDevTools(applyMiddleware(thunk));\r\nconst store = createStore(reducer, allEnhancers);\r\n\r\nexport default store;\r\n","import React from 'react'\r\nimport {Icon, TabBar} from 'antd-mobile'\r\nimport {connect} from 'react-redux';\r\nimport './AppTabBar.sass'\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showTabBar: state.showTabBar,\r\n    };\r\n};\r\n\r\nclass AppTabBar extends React.Component {\r\n    render() {\r\n        const showTabBar = this.props.showTabBar;\r\n        if (showTabBar) {\r\n            return (\r\n                <div className=\"appTabBar\">\r\n                    <TabBar\r\n                        unselectedTintColor=\"#949494\"\r\n                        tintColor=\"#33A3F4\"\r\n                        barTintColor=\"white\"\r\n                        hidden={!this.props.showTabBar}\r\n                        tabBarPosition=\"bottom\">\r\n                        <TabBar.Item title=\"Dashboard\" icon={<Icon type=\"check-circle\"/>}\r\n                                     onPress={() => this.pushPath('/')}/>\r\n                        <TabBar.Item title=\"Logs\" icon={<Icon type=\"check-circle\"/>}\r\n                                     onPress={() => this.pushPath('/logs')}/>\r\n                        <TabBar.Item title=\"Address\" icon={<Icon type=\"check-circle\"/>}\r\n                                     onPress={() => this.pushPath('/address')}/>\r\n                        <TabBar.Item title=\"Setting\" icon={<Icon type=\"check-circle\"/>}\r\n                                     onPress={() => this.pushPath('/setting')}/>\r\n                    </TabBar>\r\n                </div>)\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    pushPath(path) {\r\n        this.props.history.push({\r\n            pathname: path,\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(AppTabBar));\r\n","import {httpRequest} from '../util/httpUtils';\r\nimport {Toast} from 'antd-mobile'\r\n\r\nconst showLoading = () => {\r\n    Toast.loading('Loading', 0);\r\n};\r\nconst hideLoading = () => {\r\n    Toast.hide();\r\n};\r\nconst showError = (msg) => {\r\n    Toast.fail(msg);\r\n};\r\n\r\n\r\nexport function request(options) {\r\n    if (!options.hideLoading) {\r\n        showLoading();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        httpRequest(options)\r\n            .then(res => {\r\n                hideLoading();\r\n                if (res.status !== 200) {\r\n                    showError(`Http Response Status:${res.status}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                const body = res.data;\r\n                if (body.code !== 200) {\r\n                    showError(`Error [${body.code}]:${body.msg}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                resolve(body.data);\r\n            }).catch(err => {\r\n                hideLoading();\r\n                const errStr = err.toString();\r\n                showError(errStr);\r\n                reject(err);\r\n            }\r\n        );\r\n    })\r\n}\r\n","import axios from 'axios'\r\n\r\nexport function httpRequest(options) {\r\n    return axios(options);\r\n}\r\n","import {request} from './request';\r\n\r\nexport const fetchSlotData = () => {\r\n    return request({\r\n        url: '/api/dashboard/slot-data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\nexport const fetchSystemInfo = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-infos',\r\n        method: 'get',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nconst dataTemplate = [\r\n    {\r\n        id: 1,\r\n        deviceSn: '123456789',\r\n        address: 10,\r\n        hasElable: true,\r\n        slotId: 1,\r\n        slot: {\r\n            id: 1,\r\n            slotNo: 'A-1-1'\r\n        }\r\n    },\r\n    {\r\n        id: 2,\r\n        deviceSn: '123456789',\r\n        address: 10,\r\n        hasElable: true,\r\n        slotId: 1,\r\n        slot: {\r\n            id: 1,\r\n            slotNo: 'A-1-1'\r\n        }\r\n    },\r\n    {\r\n        id: 3,\r\n        deviceSn: '123456789',\r\n        address: 10,\r\n        hasElable: false,\r\n        slotId: 1,\r\n        slot: {\r\n            id: 1,\r\n            slotNo: 'A-1-1'\r\n        }\r\n    }\r\n];\r\n\r\nexport const fetchSensors = () => {\r\n    return new Promise((resolve, reject) => {\r\n        resolve(dataTemplate);\r\n    });\r\n};\r\n\r\nexport const toggleElable = (sensorId, hasElabel) => {\r\n    return new Promise((resolve, reject) => {\r\n        resolve();\r\n    })\r\n};\r\n\r\n\r\nexport const reloadSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/reload',\r\n        method: 'post',\r\n    });\r\n};\r\n","import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    SET_USER,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\nimport {fetchSlotData} from '../api/dashboard';\r\nimport {fetchSensors, toggleElable} from '../api/sensor';\r\nimport {deleteConnection, fetchConnections} from '../api/connection';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: SET_USER,\r\n        data: user\r\n    }\r\n};\r\nexport const setTabBarState = show => {\r\n    return {\r\n        type: SET_TABBAR_STATE,\r\n        data: show\r\n    };\r\n};\r\n\r\nexport const setRouterPath = info => {\r\n    return {\r\n        type: SET_ROUTER_PATH,\r\n        data: info\r\n    };\r\n};\r\nexport const setTitle = title => {\r\n    return {\r\n        type: SET_TITLE,\r\n        data: title,\r\n    }\r\n};\r\nexport const asyncFetchDashboardSlotData = () => {\r\n    return dispatch => {\r\n        fetchSlotData().then(res => {\r\n            const slots = [];\r\n            for (const key in res) {\r\n                if (res.hasOwnProperty(key)) {\r\n                    slots.push(res[key]);\r\n                }\r\n            }\r\n            const action = {\r\n                type: ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n                data: slots.sort((a, b) => a.slotNo.localeCompare(b.slotNo)),\r\n            };\r\n            dispatch(action);\r\n        });\r\n    }\r\n};\r\n\r\nexport const asyncFetchSensors = () => {\r\n    return dispatch => {\r\n        fetchSensors().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_SENSORS,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const toggleSensorElable = (sensorId, hasElabel) => {\r\n    return dispatch => {\r\n        toggleElable().then(() => {\r\n            const action = {\r\n                type: TOGGLE_SENSOR_ELABLE,\r\n                data: {\r\n                    sensorId,\r\n                    hasElabel\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    };\r\n};\r\n\r\n\r\nexport const asyncFetchConnection = () => {\r\n    return dispatch => {\r\n        fetchConnections().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_CONNECTION,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const asyncDeleteConnection = id => {\r\n    return dispatch => {\r\n        deleteConnection(id).then(() => {\r\n            const action = {\r\n                type: DELETE_CONNECTION,\r\n                data: {\r\n                    id: id\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    }\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchConnections = () => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const deleteConnection = id => {\r\n    return request({\r\n        url: `/api/connection/${id}`,\r\n        method: 'delete',\r\n    });\r\n};\r\n\r\nexport const createConnection = connection => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'put',\r\n        data: connection,\r\n    });\r\n};\r\n\r\n\r\nexport const scanPort = () => {\r\n    return request({\r\n        url: '/api/serial/scan',\r\n        method: 'get',\r\n    });\r\n};\r\n","export const asKg = g => {\r\n    return (g / 1000.0).toFixed(3);\r\n};\r\n\r\nexport const isWarn = (slot) => {\r\n    return (slot.data && slot.data.toleranceState) !== 1;\r\n};\r\n\r\nconst connectionTypes = {\r\n    1: 'Serial',\r\n    2: 'Network',\r\n};\r\n\r\nexport const asConnectionType = type => {\r\n    if (type in connectionTypes) {\r\n        return connectionTypes[type];\r\n    }\r\n    return `Unknown [${type}]`;\r\n};\r\n\r\nconst weightStateTable = {\r\n    1: 'stable',\r\n    2: 'dynamic',\r\n    3: 'underLoad',\r\n    4: 'overLoad',\r\n};\r\nexport const isStable = weightState => {\r\n    return weightState === 1;\r\n};\r\n\r\nexport const asWeightStateString = state => {\r\n    return state in weightStateTable ? weightStateTable[state] : state;\r\n};\r\n","import React, {Component} from 'react';\r\nimport {asyncFetchDashboardSlotData, setTitle} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {Card, Flex, List} from 'antd-mobile';\r\nimport './Dashboard.sass'\r\nimport {asKg, isStable, isWarn} from '../../util/DataConvertor';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        slots: state.dashboardSlots\r\n    };\r\n};\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSlotData: (...args) => dispatch(asyncFetchDashboardSlotData(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Dashboard');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startFetchData();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.fetchTimer);\r\n    }\r\n\r\n    startFetchData() {\r\n        this.props.fetchSlotData();\r\n        this.fetchTimer = setInterval(() => {\r\n            this.props.fetchSlotData();\r\n        }, 3000);\r\n    }\r\n\r\n    render() {\r\n        const slots = this.props.slots;\r\n        const {Item} = List;\r\n        return (\r\n            <div className=\"dashboard\">\r\n                <List renderHeader={() => 'SLOT LIST'}>\r\n                    {slots.map(slot => (<Item key={slot.slotNo}>\r\n                        <Card className={isWarn(slot) ? 'warn' : ''}>\r\n                            <Card.Header title={slot.slotNo} extra={slot.sku && slot.sku.name}/>\r\n                            <Card.Body>\r\n                                <Flex className=\"slotCard\" justify=\"center\">\r\n                                    <div className=\"count\">\r\n                                        <span\r\n                                            className={isWarn(slot) ? 'warn value' : 'value'}>{slot.data && slot.data.count}</span>\r\n                                        <span className=\"unit\">pis</span>\r\n                                    </div>\r\n                                    <div\r\n                                        className={isStable(slot.data && slot.data.weightState) ? 'weight' : 'weight warn'}>\r\n                                        <span\r\n                                            className={isWarn(slot) ? 'warn value' : 'value'}>{isStable(slot.data && slot.data.weightState) ? '' : '~'}{slot.data && asKg(slot.data.weight)}</span>\r\n                                        <span className=\"unit\">kg</span>\r\n                                    </div>\r\n                                </Flex>\r\n                            </Card.Body>\r\n                            <Card.Footer content={slot.sku && slot.sku.skuNo}/>\r\n                        </Card>\r\n                    </Item>))}\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(Dashboard);\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from 'antd-mobile';\r\nimport './FloatButton.sass';\r\n\r\nclass FloatButton extends Component {\r\n    static propTypes = {\r\n        iconType: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func,\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"floatButton\" onClick={() => this.onClick()}>\r\n                <Icon type={this.props.iconType} className=\"icon\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onClick() {\r\n        if (this.props.onClick) {\r\n            this.props.onClick();\r\n        }\r\n    }\r\n}\r\n\r\nexport default FloatButton;\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Card, Flex, List, Modal, Switch, Toast} from \"antd-mobile\";\r\nimport {asyncFetchSensors, setTabBarState, setTitle, toggleSensorElable} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {reloadSensors} from \"../../../api/sensor\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSensors: (...args) => dispatch(asyncFetchSensors(...args)),\r\n        toggleSensorElable: (...args) => dispatch(toggleSensorElable(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    }\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        sensors: state.sensors,\r\n    };\r\n};\r\n\r\nclass SensorSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Sensor Setting');\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.props;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <List renderHeader={() => 'Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => (<List.Item key={sensor.id}>\r\n                            <Card>\r\n                                <Card.Header title={`Address:${sensor.address}`} extra={sensor.deviceSn}/>\r\n                                <Card.Body>\r\n                                    <Flex justify=\"between\">\r\n                                        <span>ELabel</span>\r\n                                        <Switch checked={sensor.hasElable}\r\n                                                onChange={(e) => this.toggleElabel(sensor, e)}/>\r\n                                    </Flex>\r\n                                </Card.Body>\r\n                                <Card.Footer content={`Slot:[${sensor.slot && sensor.slot.slotNo}]`}\r\n                                             extra={sensor.slot && sensor.slot.id}/>\r\n                            </Card>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationActions()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchSensors();\r\n    }\r\n\r\n    toggleElabel(sensor, e) {\r\n        this.props.toggleSensorElable(sensor.id, e);\r\n    }\r\n\r\n    showOperationActions() {\r\n        const buttons = ['Reload Sensors', 'Cancel'];\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: 'Operations',\r\n            options: buttons,\r\n            cancelButtonIndex: buttons.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            if (index === 0) {\r\n                this.callReloadSensors();\r\n            }\r\n        })\r\n    }\r\n\r\n    callReloadSensors() {\r\n        Modal.alert('Reload', 'Are you sure to reload?',\r\n            [\r\n                {\r\n                    text: 'Yes', onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('Reload Success!', 1, false);\r\n                        })\r\n                    }\r\n                },\r\n                {\r\n                    text: 'Cancel', onPress: () => {\r\n                        Toast.show('Cancel', 1, false);\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(SensorSetting);\r\n","import React, {Component} from 'react';\r\nimport {Flex, Icon, List, WhiteSpace} from \"antd-mobile\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nclass SettingMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Setting');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"setting\">\r\n                <List renderHeader={() => 'Settings:'}>\r\n                    <List.Item onClick={() => this.go('/setting/sensor')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>Sensors</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/slot')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>Slots</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/connection')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>Connections</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/system')}>\r\n                        <WhiteSpace/>\r\n                        <Flex justify=\"between\">\r\n                            <span>System</span>\r\n                            <Icon type=\"right\"/>\r\n                        </Flex>\r\n                        <WhiteSpace/>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    go(path) {\r\n        this.props.history.push({\r\n            pathname: path\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SettingMenu));\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Flex, Icon, List, Toast} from 'antd-mobile';\r\nimport {doZeroAll, fetchAllSlots} from '../../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport './SlotSetting.sass';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst OperationActions = ['Refresh', 'Do Zero All', 'Cancel'];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slots: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(false);\r\n        this.props.setTitle('Slot Settings');\r\n        this.fetchSlots();\r\n    }\r\n\r\n    render() {\r\n        const {slots} = this.state;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <List renderHeader={() => 'Slot List'}>\r\n                    {\r\n                        slots.map(slot => (\r\n                            <Item key={slot.id} extra={<Icon type=\"right\"/>} onClick={() => this.toSlotDetail(slot)}>\r\n                                <Flex justify=\"between\">\r\n                                    <span className=\"slotNo\">{slot.slotNo}</span>\r\n                                    <span className=\"name\">{slot.skuName}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationSheet()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showOperationSheet() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: OperationActions,\r\n            title: 'Operations',\r\n            cancelButtonIndex: OperationActions.length - 1,\r\n            destructiveButtonIndex: 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.fetchSlots();\r\n                    break;\r\n                case 1:\r\n                    this.doZeroAll();\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        })\r\n    }\r\n\r\n    toSlotDetail(slot) {\r\n        this.props.history.push({\r\n            pathname: `/setting/slot-detail/${slot.id}`,\r\n        });\r\n    }\r\n\r\n    doZeroAll() {\r\n        doZeroAll().then(() => {\r\n            Toast.show('All Zeroed!');\r\n        })\r\n    }\r\n\r\n    fetchSlots() {\r\n        fetchAllSlots().then(res => {\r\n            this.setState({slots: res})\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotSetting));\r\n","import {request} from './request';\r\n\r\nexport const doZeroAll = () => {\r\n    return request({\r\n        url: '/api/slot/zero-all',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const zeroOne = slotNo => {\r\n    return request({\r\n        url: `/api/slot/${slotNo}/zero`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllSlots = () => {\r\n    return request({\r\n        url: '/api/slot/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDetail = id => {\r\n    return request({\r\n        url: `/api/slot/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const updateSlot = slot => {\r\n    return request({\r\n        url: `/api/slot/${slot.id}`,\r\n        method: 'post',\r\n        data: slot\r\n    });\r\n};\r\n\r\n\r\nexport const toggleELabelState = option => {\r\n    return request({\r\n        url: `/api/slot/${option.id}/has-e-label`,\r\n        method: 'post',\r\n        data: {hasElabel: option.hasELabel},\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {asyncDeleteConnection, asyncFetchConnection, setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {Button, Flex, Icon, InputItem, List, Modal, Picker, Toast} from 'antd-mobile';\r\nimport {asConnectionType} from '../../../util/DataConvertor';\r\nimport './ConnectionSetting.sass'\r\nimport {createConnection, scanPort} from '../../../api/connection';\r\nimport {connect} from 'react-redux';\r\n\r\nconst connectionTypes = [\r\n    {\r\n        label: 'Serial',\r\n        value: 1,\r\n    },\r\n    {\r\n        label: 'Network',\r\n        value: 2,\r\n    }\r\n];\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchConnection: (...args) => dispatch(asyncFetchConnection(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        deleteConnection: (...args) => dispatch(asyncDeleteConnection(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        connections: state.connections,\r\n    };\r\n};\r\n\r\nclass ConnectionSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            createDialogVisible: false,\r\n            create: {\r\n                type: null,\r\n                target: ''\r\n            },\r\n            serialPorts: []\r\n        };\r\n        this.props.setTitle('Connection Setting');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchConnection();\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {connections} = this.props;\r\n        const {createDialogVisible} = this.state;\r\n        const {create} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Connections'}>\r\n                    {\r\n                        connections.map(connection => (<Item key={connection.id}>\r\n                            <Flex justify=\"between\" className=\"connectionItem\">\r\n                                <span className=\"type\">{asConnectionType(connection.type)}</span>\r\n                                <span className=\"target\">{connection.target}</span>\r\n                                <Icon className=\"deleteButton\" type=\"cross-circle\"\r\n                                      onClick={() => this.deleteConnection(connection)}/>\r\n                            </Flex>\r\n                        </Item>))\r\n                    }\r\n                    <Item key=\"createButton\">\r\n                        <Button type=\"primary\" onClick={() => this.showCreateDialog()}>Create New</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={createDialogVisible}\r\n                    transparent\r\n                    title=\"Create A Connection\"\r\n                    footer={[\r\n                        {text: 'Cancel', onPress: () => this.setState({createDialogVisible: false})},\r\n                        {text: 'Create', onPress: () => this.createConnection()},\r\n                    ]}\r\n                    maskClosable={true}>\r\n                    <List title=\"Connection\">\r\n                        <Picker data={connectionTypes} title=\"Connection Type\" cols={1}\r\n                                extra=\"Choose\"\r\n                                onChange={e => this.setCreateType(e)}>\r\n                            <List.Item>\r\n                                <InputItem value={create.type && asConnectionType(create.type)}\r\n                                           disabled={true}\r\n                                           placeholder=\"Type\"/>\r\n                            </List.Item>\r\n                        </Picker>\r\n                        {\r\n                            (() => {\r\n                                const input = (<List.Item key=\"target\"><InputItem placeholder=\"Connection Target\"\r\n                                                                                  onChange={e => this.setCreateTarget(e)}\r\n                                                                                  value={create.target}\r\n                                                                                  disabled={this.state.create.type === 1}/></List.Item>);\r\n                                if (create.type === 1) {\r\n                                    return (<Picker data={this.state.serialPorts}\r\n                                                    extra=\"Choose\"\r\n                                                    title=\"Serial Port List\"\r\n                                                    cols={1}\r\n                                                    onChange={arr => this.setCreateTargetSerial(arr)}>\r\n                                        {input}\r\n                                    </Picker>)\r\n                                } else {\r\n                                    return input;\r\n                                }\r\n                            })()\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    deleteConnection(connection) {\r\n        this.props.deleteConnection(connection.id);\r\n    }\r\n\r\n    showCreateDialog() {\r\n        this.setState({\r\n            createDialogVisible: true\r\n        })\r\n    }\r\n\r\n    createConnection() {\r\n        createConnection(this.state.create).then(() => {\r\n            this.props.fetchConnection();\r\n            this.setState({\r\n                create: {},\r\n                createDialogVisible: false,\r\n            });\r\n        })\r\n    }\r\n\r\n    setCreateType(types) {\r\n        if (types.length < 1) {\r\n            Toast.show('Please Choose A Connection Type!');\r\n        }\r\n        const type = types[0];\r\n        const newCreate = {\r\n            type,\r\n            target: ''\r\n        };\r\n        this.setState({create: newCreate});\r\n        if (type === 1 && this.state.serialPorts.length <= 0) {\r\n            scanPort().then(res => {\r\n                const serialPorts = [];\r\n                for (const port of res) {\r\n                    serialPorts.push({\r\n                        label: port,\r\n                        value: port,\r\n                    });\r\n                }\r\n                this.setState({serialPorts});\r\n            });\r\n        }\r\n    }\r\n\r\n    setCreateTarget(e) {\r\n        const create = {\r\n            ...this.state.create,\r\n            target: e,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    setCreateTargetSerial(serialIndexList) {\r\n        if (!serialIndexList) {\r\n            Toast.show('Please Choose A Serial Port!');\r\n            return;\r\n        }\r\n        const port = serialIndexList[0];\r\n        const create = {\r\n            ...this.state.create,\r\n            target: port,\r\n        };\r\n        this.setState({create});\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(ConnectionSetting);\r\n","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDetail, toggleELabelState, updateSlot, zeroOne} from '../../../api/slot';\r\nimport {ActionSheet, Button, InputItem, List, Switch, Toast, WingBlank} from 'antd-mobile';\r\nimport {setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst ActionButtons = [\r\n    'Do Zero',\r\n    'Delete',\r\n    'Cancel',\r\n];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotDetailSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {}\r\n        };\r\n        this.slotId = this.props.match.params.id;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle(`${this.slotId} Settings`);\r\n        this.fetchSlotInfo();\r\n    }\r\n\r\n    fetchSlotInfo() {\r\n        fetchDetail(this.slotId).then(res => {\r\n            this.setState({slot: res});\r\n            this.props.setTitle(`${res.slotNo} Settings`);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {slot} = this.state;\r\n        return (\r\n            <div className=\"slotDetail\">\r\n                <List renderHeader={() => 'Slot Info'}>\r\n                    <Item key=\"slotNo\">\r\n                        <InputItem placeholder=\"Slot No\" value={slot.slotNo}\r\n                                   onChange={text => this.setUpdateSlotProp({slotNo: text})}>SlotNo</InputItem>\r\n                    </Item>\r\n                    <Item key=\"SkuName\">\r\n                        <InputItem placeholder=\"Sku Name\" value={slot.skuName}\r\n                                   onChange={text => this.setUpdateSlotProp({skuName: text})}>SKUName</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuNo\">\r\n                        <InputItem placeholder=\"SKU No\" value={slot.skuNo}\r\n                                   onChange={text => this.setUpdateSlotProp({skuNo: text})}>SKUNo</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuApw\">\r\n                        <InputItem placeholder=\"SKU Apw\" value={slot.skuApw}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuApw: text})}>Apw</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuTolerance\">\r\n                        <InputItem placeholder=\"SKU Tolerance\" value={slot.skuTolerance}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuTolerance: text})}>Tolerance</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuShelfLifeOpenDays\">\r\n                        <InputItem placeholder=\"SKU ShelfLifeOpenDays\" value={slot.skuShelfLifeOpenDays}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuShelfLifeOpenDays: text})}>\r\n                            SLO Days\r\n                        </InputItem>\r\n                    </Item>\r\n                    <Item key=\"applyBtn\">\r\n                        <WingBlank><Button type=\"primary\" onClick={() => this.applyModify()}>Apply\r\n                            Modify</Button></WingBlank>\r\n                    </Item>\r\n                </List>\r\n                <List renderHeader={() => 'ELabel'}>\r\n                    <List.Item\r\n                        key=\"hasELabel\"\r\n                        extra={<Switch checked={slot.hasElabel} onChange={state => this.toggleELabel(state)}/>}>\r\n                        Enable ELabel\r\n                    </List.Item>\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.openOperation()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    openOperation() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: 'Operations',\r\n            options: ActionButtons,\r\n            destructiveButtonIndex: 1,\r\n            cancelButtonIndex: ActionButtons.length - 1,\r\n        }, buttonIndex => {\r\n            const button = ActionButtons[buttonIndex];\r\n            if (button === 'Do Zero') {\r\n                this.doZero();\r\n            } else if (button === 'Delete') {\r\n                Toast.show('Unable To Delete!');\r\n            }\r\n        });\r\n    }\r\n\r\n    doZero() {\r\n        const {slot} = this.state;\r\n        zeroOne(slot.slotNo).then(() => {\r\n            Toast.show('Do Zero Success!');\r\n        });\r\n    }\r\n\r\n    setUpdateSlotProp(props) {\r\n        const slot = {\r\n            ...this.state.slot,\r\n            ...props\r\n        };\r\n        this.setState({slot});\r\n    }\r\n\r\n    applyModify() {\r\n        updateSlot(this.state.slot).then(() => {\r\n            Toast.show('Apply Success!');\r\n        });\r\n    }\r\n\r\n    toggleELabel(hasELabel) {\r\n        toggleELabelState({id: this.slotId, hasELabel}).then(() => {\r\n            Toast.show('Toggle ELabel Success!');\r\n            this.fetchSlotInfo();\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotDetailSetting));\r\n","import React, {Component} from 'react';\r\nimport {Button, List, Toast} from 'antd-mobile';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {fetchSystemInfo} from '../../../api/dashboard';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass SystemSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemInfo: {},\r\n            killButtonState: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('System Infos');\r\n        fetchSystemInfo().then(res => {\r\n            this.setState({\r\n                systemInfo: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {systemInfo} = this.state;\r\n        return (\r\n            <div className=\"systemSettings\">\r\n                <List renderHeader={() => 'System Infos'}>\r\n                    <Item key=\"appName\" extra={systemInfo.appName}>APPName</Item>\r\n                    <Item key=\"appVersion\" extra={systemInfo.appVersion}>APPVersion</Item>\r\n                    <Item key=\"dbVersion\" extra={systemInfo.dbVersion}>DBVersion</Item>\r\n                    <Item key=\"pid\" extra={systemInfo.pid}>ProcessID</Item>\r\n                    <Item key=\"kill\">\r\n                        <Button type=\"warning\" onClick={() => this.killProcess()}\r\n                                disabled={!this.state.killButtonState}>Kill Process</Button>\r\n                    </Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    killProcess() {\r\n        Toast.show('Do not kill this process!', 1, false);\r\n        this.setState({\r\n            killButtonState: false\r\n        });\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SystemSetting);\r\n","import React, {Component} from 'react';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport SensorSetting from './setting/SensorSetting'\r\nimport SettingMenu from './setting/SettingMenu'\r\nimport SlotSetting from './setting/SlotSetting'\r\nimport ConnectionSetting from './setting/ConnectionSetting'\r\nimport SlotDetailSetting from './setting/SlotDetailSetting'\r\nimport SystemSetting from './setting/SystemSetting'\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n    };\r\n};\r\n\r\nclass Setting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/setting/\" component={SettingMenu} exact/>\r\n                    <Route path=\"/setting/sensor\" component={SensorSetting} exact/>\r\n                    <Route path=\"/setting/slot\" component={SlotSetting} exact/>\r\n                    <Route path=\"/setting/connection\" component={ConnectionSetting} exact/>\r\n                    <Route path=\"/setting/slot-detail/:id\" component={SlotDetailSetting} exact/>\r\n                    <Route path=\"/setting/system\" component={SystemSetting} exact/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Setting);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Result, Toast} from \"antd-mobile\";\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Address extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Config Address');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Result\r\n                    img={<Icon type=\"check-circle\" size=\"lg\" style={{fill: '#1F90E6'}}/>}\r\n                    title=\"开发中\"\r\n                    message=\"开发中\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中',1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Address);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Result, Toast} from 'antd-mobile';\r\nimport {setTitle} from \"../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Logs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Logs');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Result\r\n                    img={<Icon type=\"check-circle\" size=\"lg\" style={{fill: '#1F90E6'}}/>}\r\n                    title=\"开发中\"\r\n                    message=\"开发中\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中',1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Logs);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {Carousel, NoticeBar, WhiteSpace, WingBlank} from 'antd-mobile';\r\nimport './About.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass About extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            drawerOpen: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('About');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"about\">\r\n                <NoticeBar marqueeProps={{loop: true,}}>磐石电气（常州）有限公司：http://www.monolith-iot.com</NoticeBar>\r\n                <WhiteSpace/>\r\n                <WingBlank>\r\n                    <Carousel\r\n                        autoplay={true}\r\n                        infinite\r\n                        className=\"headerCarousel\"\r\n                    >\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#FF9808'}}>\r\n                            <div className=\"title\">\r\n                                磐石电气（常州）有限公司\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#3171FA'}}>\r\n                            <div className=\"title\">\r\n                                MonolithIoT\r\n                            </div>\r\n                        </div>\r\n                    </Carousel>\r\n                </WingBlank>\r\n                <WingBlank className=\"article\">\r\n                    <h1 className=\"title\">关于我们</h1>\r\n                    <div className=\"text\">\r\n                        <p>\r\n                            磐石电气(常州)有限公司,是一家高科技智能测量装备研发及生产企业，把传统体积，重量的测量数字化物联网化，可以与WMS,ERP，SAP等企业管理软件相结合，便于企业更直观的管理自己的仓储，物流等。磐石电气下设研发部，工程部，业务部，有较强的设计，研发和生产能力，可为客户提供嵌入式计算机系统产品设计，开发，系统集成，工程实施等服务。\r\n                        </p>\r\n                        <p>\r\n                            随着公司的发展，主要产品有自主研发的智能数字卷尺，智能手动叉车秤，安卓智能称重终端，静态/动态DWS等各种物联网类智能称重量方设备及软件定制系统,可为客户最大程度地提供智能化系统化的测量系统解决方案。产品广泛应用于快递物流、生鲜供应、港口订舱、仓储、工业离散制造及各种以长度(含面\r\n                            积、体积)测量为手段的民用、商用用途中。凭着可靠的产品质量和良好的售后服务，我公司已与顺丰、中国邮政、京东、国际快递DHL、华为等多家知名企业合作。\r\n                        </p>\r\n                        <p>\r\n                            目前公司已申请中国专利24项,美国专利1项，并拥有一支以博士、硕士为主的优秀研发团队，具有较高的研发能力和管理水平，现有多名员工曾在外企作为技术骨干，承传欧美设计制造理念，并采用先进的产品生命周期管理（PLM），重视产品质量，为公司产品的技术引领、技术创新和公司的可持续发展奠定了坚实基础。\r\n                        </p>\r\n                    </div>\r\n                </WingBlank>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(About);\r\n","import React, {Component} from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Dashboard from './content/Dashboard'\r\nimport Setting from './content/Setting';\r\nimport Address from './content/Address';\r\nimport Logs from './content/Logs';\r\nimport About from './content/About';\r\nimport './AppContent.sass';\r\n\r\nclass AppContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"appContent\">\r\n                <div className=\"headerMask\"/>\r\n                <Switch>\r\n                    <Route path=\"/\" component={Dashboard} exact/>\r\n                    <Route path=\"/setting**\" component={Setting} exact/>\r\n                    <Route path=\"/address\" component={Address} exact/>\r\n                    <Route path=\"/logs\" component={Logs} exact/>\r\n                    <Route path=\"/about\" component={About} exact/>\r\n                </Switch>\r\n                <div className=\"tabBarMask\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppContent;\r\n","import React, {Component} from 'react';\r\nimport {Icon, NavBar, Popover} from \"antd-mobile\";\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\nimport './AppHeader.sass';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        title: state.globalTitle,\r\n    };\r\n};\r\n\r\nclass AppHeader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            popoverVisible: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const {title} = this.props;\r\n        return (\r\n            <div className=\"appHeader\">\r\n                <NavBar\r\n                    leftContent={<Icon type=\"left\" onClick={() => this.onBackClick()}/>}\r\n                    rightContent={this.rightContent()}\r\n                    mode=\"light\"\r\n                >{title}</NavBar>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    rightContent() {\r\n        const {popoverVisible} = this.state;\r\n        const Item = Popover.Item;\r\n        return (<Popover mask\r\n                         visible={popoverVisible}\r\n                         overlay={[\r\n                             (<Item key=\"about\" value=\"about\"\r\n                                    data-seed=\"logId\">About</Item>),\r\n                             (<Item key=\"settings\" value=\"settings\"\r\n                                    style={{whiteSpace: 'nowrap'}}>Settings</Item>),\r\n                         ]}\r\n                         onSelect={e => this.onPopoverSelect(e)}\r\n        >\r\n            <Icon type=\"ellipsis\"/>\r\n        </Popover>);\r\n    }\r\n\r\n    onBackClick() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    onPopoverSelect(e) {\r\n        switch (e.key) {\r\n            case 'about':\r\n                this.props.history.push({\r\n                    pathname: '/about',\r\n                });\r\n                break;\r\n            case 'settings':\r\n                this.props.history.push({\r\n                    pathname: '/setting/',\r\n                });\r\n                break\r\n        }\r\n        this.setState({\r\n            popoverVisible: false\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props)(AppHeader));\r\n","import {createBrowserHistory} from 'history';\r\nimport {setRouterPath} from '../store/actionCreators'\r\nimport store from '../store';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst notifyPathChanged = location => {\r\n    const info = {\r\n        pathname: location.pathname,\r\n        search: location.search,\r\n        hash: location.hash\r\n    };\r\n    const action = setRouterPath(info);\r\n    store.dispatch(action);\r\n};\r\nhistory.listen((action) => {\r\n    notifyPathChanged(action.location);\r\n});\r\n\r\n\r\nnotifyPathChanged(history.location);\r\nexport default history;\r\n","import React from 'react'\nimport './App.css'\nimport store from './store'\nimport {Provider} from 'react-redux'\nimport AppTabBar from './component/AppTabBar'\nimport AppContent from './component/AppContent'\nimport AppHeader from './component/AppHeader'\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport history from './util/History'\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router history={history}>\n                <Provider store={store}>\n                    <div className=\"app-content\">\n                        <AppHeader/>\n                        <AppContent/>\n                        <AppTabBar/>\n                    </div>\n                </Provider>\n            </Router>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    /*{<React.StrictMode>}*/\n    <App/>,\n    /*</React.StrictMode>,*/\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}