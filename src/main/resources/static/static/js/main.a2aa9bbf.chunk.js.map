{"version":3,"sources":["store/reducer.js","store/actionTypes.js","store/index.js","component/AppTabBar.jsx","api/request.js","util/httpUtils.js","api/dashboard.js","api/sensor.js","api/connection.js","api/config.js","store/actionCreators.js","util/datetimeUtils.js","context/metadata.js","util/DataConvertor.js","api/slot.js","component/content/Dashboard.jsx","store/storeUtils.js","component/commons/SlotCard.jsx","component/commons/SlotGroup.jsx","util/FetcherTask.js","component/commons/TempSensorCard.jsx","component/commons/SlotOperationModal.jsx","component/content/HomeDashboard.jsx","component/commons/FloatButton.jsx","component/content/setting/SensorSetting.jsx","component/content/setting/SettingMenu.jsx","component/content/setting/SlotSetting.jsx","component/content/setting/ConnectionSetting.jsx","component/content/setting/SlotDetailSetting.jsx","component/content/setting/SystemSetting.jsx","api/serial.js","component/content/setting/SystemPropsSetting.jsx","component/content/setting/SlotSensorsSetting.jsx","component/content/setting/Overview.jsx","component/content/setting/SystemCheck.jsx","api/systemStatus.js","component/content/setting/MessageLog.jsx","component/content/setting/SensorHealthy.jsx","api/healthy.js","api/firmware.js","component/content/setting/SensorDetails.jsx","component/content/setting/ThSensorSetting.jsx","api/thSensor.js","component/commons/LineCharts.jsx","component/content/setting/ThSensorDetailsSetting.jsx","api/tempHumidityLog.js","component/content/setting/ExtraPageSetting.jsx","component/content/Setting.jsx","component/content/Address.jsx","component/content/Logs.jsx","component/content/About.jsx","component/content/PidAnimation.jsx","util/DStar.js","util/DStarBoard.js","component/content/DStarAnimation.jsx","util/SlideDemoCanvas.js","component/content/SlideAnimation.jsx","component/content/ExtraPage.jsx","component/AppContent.jsx","component/AppHeader.jsx","util/History.js","util/consoleBanner.js","App.js","serviceWorker.js","index.js"],"names":["defaultState","showTabBar","enableTabBar","showHeader","globalTitle","routerPath","dashboardSlots","sensors","connections","user","name","actionTable","registerReducer","type","reducer","state","action","data","sensorId","hasElabel","sensor","id","JSON","parse","stringify","filter","connection","allEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","handler","AppTabBar","props","path","this","className","unselectedTintColor","tintColor","barTintColor","hidden","tabBarPosition","Item","title","selected","icon","selectedIcon","onPress","pushPath","setState","history","push","pathname","React","Component","withRouter","connect","hideLoading","hide","showError","msg","fail","request","options","showLoadingToast","loading","Promise","resolve","reject","axios","httpRequest","then","res","status","body","code","catch","err","errStr","toString","fetchDashboardData","url","method","reloadSensors","fetchScanProgress","fetchExtraPageUri","setTabBarState","show","setTitle","asyncFetchDashboardSlotData","dispatch","slots","key","hasOwnProperty","sort","a","b","slotNo","localeCompare","asyncFetchSensors","address","toggleSensorElable","toggleElable","asyncFetchConnection","asyncDeleteConnection","deleteConnection","fetchEnableTabBarAction","value","setEnableTabBarAction","enable","setEnableTabBar","parseDate","str","groups","match","year","parseInt","month","date","hour","min","sec","d","Date","setFullYear","setMonth","setDate","setHours","setMinutes","setSeconds","ERROR_STATE","4","5","2","STATE_TABLE","1","3","asKg","g","toFixed","connectionTypes","asConnectionType","slotSortWeight","compareBySlotNo","aName","bName","aNames","split","bNames","length","i","aItem","bItem","groupSlots","putSlot","slot","noItems","aWeight","substring","bWeight","asStateString","thSensorStateTable","thSensorStateText","lastHighlightSlot","lastTime","lastSlot","skuUpdateTime","time","getTime","zeroOne","encodedSlotNo","encodeURIComponent","fetchDetail","highlightBySku","sku","skuNo","TabItems","Dashboard","rootEle","document","groupedSlots","thSensors","sensorModalVisible","operationSlot","searchSkuNo","noticeSlots","lastNoticeSlot","renderSlotCard","bind","startFetchData","listenKeyPress","onkeypress","e","target","tagName","toLowerCase","keyCode","triggerHighlight","appendSearchSku","String","fromCharCode","c","fetchTimer","clearInterval","cancelKeyPress","setInterval","slotData","thData","temperatureHumidityData","temperature","humidity","tempStateText","temperatureState","tempWarn","humidityText","tempClass","stateClass","cardClass","stateStr","tempClassStr","join","no","map","renderThSensorCard","highlightSlotIds","tabs","onChange","tab","index","onTabChange","onSubmit","renderNoticeBar","group","renderGroupItem","renderThSensors","visible","transparent","footer","text","doSlotZero","onClose","renderHeader","extra","deviceSn","Brief","address485","content","skuName","skuShelfLifeOpenDays","wrap","justify","slotCardClassName","isWan","isDisable","isOffline","incredible","isIncredible","toleranceState","weightInKg","weight","count","isStable","weightState","asCount","onClick","onSlotCardClick","trim","ts","findLastNoticeSlot","setTimeout","alert","callDoZero","component","fetchSlotData","mapState","mapAction","mapStateAndAction","SLOT_CARD_CLASS_TABLE","TOLERANCE_STATE_CLASS_TABLE","SlotCard","highLight","errorOnly","pcs","formatPcs","formatSkuNo","slotCardClassStr","slotCardClass","pcsClassStr","pcsClass","merged","isHighLight","highLightSlotTable","SlotGroup","onCardClick","highlightSlotTable","renderSlots","FetcherTask","config","fetchData","onNewData","duration","onError","running","runNext","timmer","start","clearTimeout","CARD_CLASS_TABLE","BODY_CLASS_TABLE","TempSensorCard","temp","formatTemp","tempState","cardClassStr","bodyClassStr","bodyClass","renderSensor","SlotOperationModal","_this","maskClosable","doZero","renderSensors","asHighlightSlotTable","dict2List","dict","rootDom","searchValue","noticeSlot","tempSensors","currentTab","slotOperationVisible","selectedSlot","errorNotice","showErrorOnly","initFetcher","registerKeyPressHandler","fetcherTask","stop","cancelKeyPressHandler","char","submitSearch","searchSku","onDashboardDataRefresh","onFetcherError","console","error","WarningOutlined","tab0Class","tab1Class","tab2Class","switchPageWithDelay","renderErrorNotice","renderTabs","placeholder","ScanOutlined","renderSlotOperationModal","FloatButton","defaultPosition","right","bottom","down","style","callOnClick","iconType","SensorSetting","fetchSensors","Header","Body","checked","toggleElabel","platform","arrow","toSensorDetails","Footer","showOperationActions","buttons","showActionSheetWithOptions","cancelButtonIndex","destructiveButtonIndex","callReloadSensors","SettingMenu","go","OperationActions","SlotSetting","selectedNums","continueSelected","fetchSlots","s","selectedMap","selectedMinAddress","Object","keys","isContinueSelected","onItemClick","renderSlotSensors","selectedNumStyle","renderSlotItem","showOperationSheet","findSelectedSlots","slotNos","ids","slotIds","toSlotDetail","doZeroAll","mergeSlot","resetSlotSensor","toSelectedSlotDetails","chooseAllSlotSensor","ConnectionOperations","label","scanResultMap2Arr","result","item","scanStateTable","ConnectionSetting","createDialogVisible","create","serialPorts","scanProgressVisible","scanProgress","progress","end","errors","scanError","fetchConnection","scanProgressFetcher","currentAddress","scanResult","showConnectionOperations","showCreateDialog","createConnection","cols","setCreateType","disabled","input","setCreateTarget","arr","setCreateTargetSerial","percent","position","stopFetchScanProgress","sensorSn","elabelSn","startFetchScanProgress","types","newCreate","port","serialIndexList","connectionId","scanConnection","startScanTHSensors","ActionButtons","SlotDetailSetting","slotId","params","fetchSlotInfo","setUpdateSlotProp","skuApw","skuTolerance","applyModify","toggleELabel","openOperation","buttonIndex","hasELabel","option","SystemSetting","systemInfo","libLoadVisible","reloadLibPath","appName","appVersion","dbVersion","dbVersionName","pid","showLibLoadModal","libPath","stopWeightService","reloadLibrary","autoHeight","SystemPropsSetting","systemProps","propList","p","labelNumber","log","SENSOR_OPERATIONS","SlotSensorsSetting","sensorRemoveMode","allSlots","sensorPickerData","changed","pickerData","children","sensorItem","openSensorOperations","v","onSelectSensor","oldSensor","selectedSensor","selectedSensors","renderSensorItem","addSensor","applySensors","removeSensor","newSensors","sensorIds","setSlotByIds","Overview","refresh","onSensorClick","list","SoftFilterLevelTable","0","SoftFilterLevels","doSetCompensationState","enableCompensation","setCompensationState","SystemCheck","statusTable","tcpApi","databaseTables","softFilterLevel","softFilterLevelLabel","refreshStatusTable","refreshSoftFilterLevel","level","operation","color","ip","reconnectTcp","setSoftFilterLevel","showCompensationOperations","showReloadConfirm","showCleanBackupSnConfirm","tableName","showDbResetConfirm","refreshDatabaseTables","updateSoftFilterLevel","doDbReset","renderMessageItem","message","rows","seqNo","MessageLog","logs","refreshLogs","refreshTimmer","operations","ClickOperations","UPGRADE_PROGRESS_STATE_TABLE","SensorHealthy","upgradePercent","upgradeProgress","refreshSensors","tryReleaseUpgradeProgressTimmer","upgradeFirmwareTimmer","healthyList","showUpgradeProgress","cb","upgradeProgressPercent","undefined","total","current","helthy","renderSensorCard","onUpgradeProgressModalClose","doAbortFirmwareUpgrade","showOperations","healthy","tryRecoveryElabelAddress","tryRecoverySensorAddress","tryRecoverySensorAddressWithOriginSn","upgradeFirmware","upgradeElabelFirmware","recoverySensorAddress","recoveryElabelAddress","packageCounter","totalSuccess","totalErrors","errorsRate","warn","errorRateInPer","minRate","doFirmwareUpgrade","elabelSuccess","elabelErrors","doElabelFirmwareUpgrade","refreshUpgradeProgress","refreshUpgradeProgressCb","zeroOffset","zeroReference","successRate","eLabelTotal","elabelSuccessRate","elabelErrorosRate","elabelContinueErrors","continueErrors","showCleanCounterConfirm","doCleanCounter","SensorDetails","sensorParams","refreshParams","param","ThSensorSetting","toDetail","LineCharts","canvas","charts","echarts","init","refreshCharts","xData","yData","series","names","y","tooltip","trigger","legend","xAxis","yAxis","setOption","width","height","ref","onCanvasLoad","defaultProps","ThSensorDetailsSetting","dataLogs","chartsXData","chartsYData","currentTemp","tempData","maxTempData","minTempData","createTime","maxTemperature","minTemperature","timeStr","getHours","getMinutes","getSeconds","refreshDataLog","fetchOneSensor","currentTemperature","calibrateTemp","setSensorData","maxHumidity","minHumidity","updateRange","txt","ExtraPageSetting","pageUri","uri","createIfNotExists","setPageUri","gotoExtraPage","exact","Address","info","Logs","About","drawerOpen","autoplay","infinite","backgroundColor","I","PidAnimation","x","xSum","lastErrorX","ySum","lastErrorY","onTimer","onclick","offsetX","offsetY","onCanvasClick","canvasContext","getContext","reDrawPoint","clearRect","fillStyle","fillRect","errorX","derivativeX","outX","Math","CanvasWidth","max","errorY","derivativeY","outY","CanvasHeight","calcDistance","pa","pb","dx","abs","tx","dy","ty","CloseList","pointTable","priority","point","DStar","onRePlan","requestPoint","mapSize","updateCurrent","wallCache","planPath","planPathIndex","rePlan","steps","nextPoint","closeList","nextStep","asPath","openList","nearPoint","minCoastPoint","minNum","num","calcMin","xMax","yMax","nextX","nextY","hasKey","updateNearPointInfo","updatePointInfo","base","xOffset","yOffset","drawCross","ctx","strokeStyle","beginPath","moveTo","lineTo","stroke","DStarBoard","onMessage","wallList","clickAction","currentPoint","targetPoint","onCanvasPress","rePaint","setupDStar","shutdown","timer","dStar","firstPlan","floor","getPressPoint","addWall","removeWall","markTarget","setTarget","drawBackground","drawWall","drawCurrent","drawTarget","drawPlanPath","WIDTH_STEP","HEIGHT_STEP","arc","PI","wall","CLICK_ACTION_NAMES","rePlanSteps","board","checkCanvasChanged","pathList","setup","setClickAction","clickActionName","changeBoardClickAction","setupTimer","onCanvasBind","BOX_LIST","mode","SlideDemoCanvas","getAttribute","boxList","box","drawBox","rect","last","pop","unshift","nextFrame","slideCanvas","slideDemoBoard","play","onSlideAnimationCanvasBind","ExtraPage","src","renderFrame","AppContent","HomeDashboard","Setting","DStarAnimation","SlideAnimation","AppHeader","popoverVisible","leftContent","onBackClick","rightContent","mask","overlay","data-seed","whiteSpace","onSelect","onPopoverSelect","goBack","doReloadSensors","createBrowserHistory","notifyPathChanged","location","setRouterPath","search","hash","listen","printBanner","App","consoleBanner","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2aa9bbf.chunk.js","sourcesContent":["import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\n\r\nconst defaultState = {\r\n    showTabBar: true,\r\n    enableTabBar: false,\r\n    showHeader: true,\r\n    globalTitle: '重力货道',\r\n    routerPath: null,\r\n    dashboardSlots: [],\r\n    sensors: [],\r\n    connections: [],\r\n    user: {\r\n        name: 'MonolithIoT'\r\n    }\r\n};\r\nconst actionTable = {};\r\nconst registerReducer = (type, reducer) => {\r\n    actionTable[type] = reducer;\r\n};\r\nregisterReducer(SET_TABBAR_STATE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showTabBar: action.data\r\n    };\r\n});\r\nregisterReducer(SET_ROUTER_PATH, (state, action) => {\r\n    return {\r\n        ...state,\r\n        routerPath: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_DASHBOARD_SLOT_DATA, (state, action) => {\r\n    return {\r\n        ...state,\r\n        dashboardSlots: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(SET_TITLE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        globalTitle: action.data,\r\n    }\r\n});\r\nregisterReducer(ASYNC_FETCH_SENSORS, (state, action) => {\r\n    return {\r\n        ...state,\r\n        sensors: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(TOGGLE_SENSOR_ELABLE, (state, action) => {\r\n    const sensors = state.sensors;\r\n    const sensorId = action.data.sensorId;\r\n    const hasElabel = action.data.hasElabel;\r\n    for (let sensor of sensors) {\r\n        if (sensor.id === sensorId) {\r\n            sensor.hasElabel = hasElabel;\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        sensors: JSON.parse(JSON.stringify(sensors))\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_CONNECTION, (state, action) => {\r\n    return {\r\n        ...state,\r\n        connections: action.data,\r\n    };\r\n});\r\nregisterReducer(DELETE_CONNECTION, (state, action) => {\r\n    const id = action.data.id;\r\n    const connections = state.connections.filter(connection => connection.id !== id);\r\n    return {\r\n        ...state,\r\n        connections\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_TAB_BAR, (state, action) => {\r\n    return {\r\n        ...state,\r\n        enableTabBar: action.data,\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_HEADER, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showHeader: action.data\r\n    };\r\n});\r\nexport default (state = defaultState, action) => {\r\n    const type = action.type;\r\n    if (type in actionTable) {\r\n        const handler = actionTable[type];\r\n        return handler(state, action);\r\n    }\r\n    return state;\r\n}\r\n","export const SET_USER = \"user.set\";\r\n\r\nexport const SET_TABBAR_STATE = 'tabBar.set';\r\n\r\nexport const SET_ROUTER_PATH = 'router.path.set';\r\n\r\nexport const ASYNC_FETCH_DASHBOARD_SLOT_DATA = 'dashboard.slot_data.fetch.async';\r\n\r\nexport const SET_TITLE = 'title.set';\r\n\r\nexport const ASYNC_FETCH_SENSORS = 'sensors.fetch.async';\r\n\r\nexport const TOGGLE_SENSOR_ELABLE = 'sensor.elabel.toggle';\r\n\r\nexport const ASYNC_FETCH_CONNECTION = 'connections.fetch.async';\r\n\r\nexport const DELETE_CONNECTION = 'connection.delete';\r\n\r\nexport const SET_ENABLE_TAB_BAR = 'system.tabBar.set';\r\n\r\nexport const SET_ENABLE_HEADER = 'system.header.set';\r\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport reducer from './reducer';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst allEnhancers = reduxDevTools(applyMiddleware(thunk));\r\nconst store = createStore(reducer, allEnhancers);\r\n\r\nexport default store;\r\n","import React from 'react'\r\nimport {TabBar} from 'antd-mobile'\r\nimport {connect} from 'react-redux';\r\nimport './AppTabBar.sass'\r\nimport {withRouter} from 'react-router-dom';\r\nimport {CodeSandboxCircleFilled as ExtraIcon} from '@ant-design/icons';\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showTabBar: state.showTabBar,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass AppTabBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            path: '/',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const showTabBar = this.props.showTabBar && this.props.enableTabBar;\r\n        const {path} = this.state;\r\n        if (showTabBar) {\r\n            return (\r\n                <div className=\"appTabBar\">\r\n                    <TabBar\r\n                        unselectedTintColor=\"#949494\"\r\n                        tintColor=\"#33A3F4\"\r\n                        barTintColor=\"white\"\r\n                        hidden={!this.props.showTabBar}\r\n                        tabBarPosition=\"bottom\">\r\n                        <TabBar.Item title=\"看板\"\r\n                                     selected={path === '/'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe64e;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe64e;</i>}\r\n                                     onPress={() => this.pushPath('/')}/>\r\n                        <TabBar.Item title=\"扩展\"\r\n                                     selected={path === '/extra'}\r\n                                     icon={<ExtraIcon className=\"buttonIcon\"/>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe60c;</i>}\r\n                                     onPress={() => this.pushPath('/extra')}/>\r\n                        <TabBar.Item title=\"日志\"\r\n                                     selected={path === '/logs'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe60c;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe60c;</i>}\r\n                                     onPress={() => this.pushPath('/logs')}/>\r\n                        <TabBar.Item title=\"编址\"\r\n                                     selected={path === '/address'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe61b;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe61b;</i>}\r\n                                     onPress={() => this.pushPath('/address')}/>\r\n                        <TabBar.Item title=\"设置\"\r\n                                     selected={path === '/setting'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe660;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe660;</i>}\r\n                                     onPress={() => this.pushPath('/setting')}/>\r\n                    </TabBar>\r\n                </div>)\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    pushPath(path) {\r\n        this.setState({\r\n            path,\r\n        });\r\n        this.props.history.push({\r\n            pathname: path,\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(AppTabBar));\r\n","import {httpRequest} from '../util/httpUtils';\r\nimport {Toast} from 'antd-mobile'\r\n\r\nconst showLoading = () => {\r\n    Toast.loading('Loading', 0);\r\n};\r\nconst hideLoading = () => {\r\n    Toast.hide();\r\n};\r\nconst showError = (msg) => {\r\n    Toast.fail(msg);\r\n};\r\n\r\n\r\nexport function request(options) {\r\n    const showLoadingToast = !options.hideLoading;\r\n    if (showLoadingToast) {\r\n        showLoading();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        httpRequest(options)\r\n            .then(res => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                if (res.status !== 200) {\r\n                    showError(`Http Response Status:${res.status}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                const body = res.data;\r\n                if (body.code !== 200) {\r\n                    showError(`Error [${body.code}]:${body.msg}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                resolve(body.data);\r\n            }).catch(err => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                const errStr = err.toString();\r\n                showError(errStr);\r\n                reject(err);\r\n            }\r\n        );\r\n    })\r\n}\r\n","import axios from 'axios'\r\n\r\nexport function httpRequest(options) {\r\n    return axios(options);\r\n}\r\n","import {request} from './request';\r\n\r\nexport const fetchSlotData = () => {\r\n    return request({\r\n        url: '/api/dashboard/slot-data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchSystemInfo = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-infos',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchSystemProps = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-props',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDashboardData = () => {\r\n    return request({\r\n        url: '/api/dashboard/_data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/_with-slot',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const toggleElable = (sensorId, hasElabel) => {\r\n    return request({\r\n        url: `/api/sensor/${sensorId}/haselabel`,\r\n        method: 'post',\r\n        data: {\r\n            hasElabel: hasElabel\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const reloadSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/reload',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const setSlotByIds = (sensorIds, slotId) => {\r\n    return request({\r\n        url: '/api/sensor/_set-slot-id-by-ids',\r\n        method: 'post',\r\n        data: {\r\n            sensorIds,\r\n            slotId,\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const stopWeightService = () => {\r\n    return request({\r\n        url: '/api/sensor/_stop-weight-service',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const dumpAll = () => {\r\n    return request({\r\n        url: '/api/sensor/_dump-all',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const findSensorById = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\nexport const tryRecoverySensorAddress = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_recovery-sensor-address`,\r\n        method: 'post',\r\n    });\r\n};\r\nexport const tryRecoverySensorAddressWithOriginSn = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_recovery-sensor-address-with-origin-sn`,\r\n        method: 'post',\r\n    });\r\n};\r\nexport const tryRecoveryElabelAddress = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_recovery-elabel-address`,\r\n        method: 'post',\r\n    });\r\n};\r\nexport const cleanAllBackupSn = () => {\r\n    return request({\r\n        url: '/api/sensor/_clean-backup-sn',\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchConnections = () => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const deleteConnection = id => {\r\n    return request({\r\n        url: `/api/connection/${id}`,\r\n        method: 'delete',\r\n    });\r\n};\r\n\r\nexport const createConnection = connection => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'put',\r\n        data: connection,\r\n    });\r\n};\r\n\r\n\r\nexport const scanPort = () => {\r\n    return request({\r\n        url: '/api/serial/scan',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const scanDevice = id => {\r\n    return request({\r\n        url: `/api/connection/${id}/_scan`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const startScanTempHumiSensors = connectionId => {\r\n    return request({\r\n        url: `/api/connection/${connectionId}/_scan-th-device`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const fetchScanProgress = () => {\r\n    return request({\r\n        url: '/api/connection/_scan-progress',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\n\r\nexport const fetchEnableTabBar = () => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setEnableTabBar = enable => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'post',\r\n        data: {\r\n            value: enable,\r\n        },\r\n    });\r\n};\r\n\r\nexport const fetchSoftFilterLevel = () => {\r\n    return request({\r\n        url: '/api/config/weight.soft_filter_level',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const updateSoftFilterLevel = value => {\r\n    return request({\r\n        url: '/api/config/weight.soft_filter_level',\r\n        method: 'post',\r\n        data: {\r\n            value: value,\r\n        }\r\n    });\r\n};\r\n\r\nexport const fetchExtraPageUri = () => {\r\n    return request({\r\n        url: '/api/config/extra.page_uri',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setExtraPageUri = uri => {\r\n    return request({\r\n        url: '/api/config/extra.page_uri',\r\n        method: 'post',\r\n        data: {\r\n            value: uri,\r\n            createIfNotExists: true,\r\n        }\r\n    });\r\n};\r\n","import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    SET_USER,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\nimport {fetchSlotData} from '../api/dashboard';\r\nimport {fetchSensors, toggleElable} from '../api/sensor';\r\nimport {deleteConnection, fetchConnections} from '../api/connection';\r\nimport {fetchEnableTabBar, setEnableTabBar} from '../api/config';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: SET_USER,\r\n        data: user\r\n    }\r\n};\r\nexport const setTabBarState = show => {\r\n    return {\r\n        type: SET_TABBAR_STATE,\r\n        data: show\r\n    };\r\n};\r\n\r\nexport const setRouterPath = info => {\r\n    return {\r\n        type: SET_ROUTER_PATH,\r\n        data: info\r\n    };\r\n};\r\nexport const setTitle = title => {\r\n    return {\r\n        type: SET_TITLE,\r\n        data: title,\r\n    }\r\n};\r\nexport const asyncFetchDashboardSlotData = () => {\r\n    return dispatch => {\r\n        fetchSlotData().then(res => {\r\n            const slots = [];\r\n            for (const key in res) {\r\n                if (res.hasOwnProperty(key)) {\r\n                    slots.push(res[key]);\r\n                }\r\n            }\r\n            const action = {\r\n                type: ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n                data: slots.sort((a, b) => a.slotNo.localeCompare(b.slotNo)),\r\n            };\r\n            dispatch(action);\r\n        });\r\n    }\r\n};\r\n\r\nexport const asyncFetchSensors = () => {\r\n    return dispatch => {\r\n        fetchSensors().then(res => {\r\n            const sensors = res.sort((a, b) => a.address - b.address);\r\n            const action = {\r\n                type: ASYNC_FETCH_SENSORS,\r\n                data: sensors,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const toggleSensorElable = (sensorId, hasElabel) => {\r\n    return dispatch => {\r\n        toggleElable(sensorId, hasElabel).then(() => {\r\n            const action = {\r\n                type: TOGGLE_SENSOR_ELABLE,\r\n                data: {\r\n                    sensorId,\r\n                    hasElabel\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    };\r\n};\r\n\r\n\r\nexport const asyncFetchConnection = () => {\r\n    return dispatch => {\r\n        fetchConnections().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_CONNECTION,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const asyncDeleteConnection = id => {\r\n    return dispatch => {\r\n        deleteConnection(id).then(() => {\r\n            const action = {\r\n                type: DELETE_CONNECTION,\r\n                data: {\r\n                    id: id\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    }\r\n};\r\n\r\nexport const fetchEnableTabBarAction = () => {\r\n    return dispatch => {\r\n        fetchEnableTabBar().then(res => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: res.value === 'true',\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const setEnableTabBarAction = enable => {\r\n    return dispatch => {\r\n        setEnableTabBar(enable).then(() => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: enable,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const showHeader = show => {\r\n    return {\r\n        type: SET_ENABLE_HEADER,\r\n        data: show,\r\n    };\r\n};\r\n","export const parseDate = str => {\r\n    const groups = str.match(/^(\\d{4})-(\\d+)-(\\d+)\\s(\\d+):(\\d+):(\\d+)$/);\r\n    if (groups) {\r\n        const year = parseInt(groups[1]);\r\n        const month = parseInt(groups[2]);\r\n        const date = parseInt(groups[3]);\r\n        const hour = parseInt(groups[4]);\r\n        const min = parseInt(groups[5]);\r\n        const sec = parseInt(groups[6]);\r\n        const d = new Date();\r\n        d.setFullYear(year);\r\n        d.setMonth(month - 1);\r\n        d.setDate(date);\r\n        d.setHours(hour);\r\n        d.setMinutes(min);\r\n        d.setSeconds(sec);\r\n        return d;\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const parseTimstamp = str => {\r\n    const date = parseDate(str);\r\n    return date ? date.getTime() : -1;\r\n};\r\n","export const ERROR_STATE = {\r\n    4: '超载',\r\n    5: '欠载',\r\n    2: '离线',\r\n};\r\nexport const STATE_TABLE = {\r\n    1: '使用中',\r\n    2: '离线',\r\n    3: '已停用',\r\n    4: '超载',\r\n    5: '欠载',\r\n};\r\n","import {parseDate} from './datetimeUtils';\r\nimport {STATE_TABLE} from '../context/metadata';\r\n\r\nexport const asKg = g => {\r\n    return (g / 1000.0).toFixed(3);\r\n};\r\n\r\nexport const isWan = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isIncredible = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isDisable = state => {\r\n    return state === 3;\r\n};\r\n\r\nexport const isOffline = state => {\r\n    return state === 2;\r\n};\r\n\r\nconst connectionTypes = {\r\n    1: '串口',\r\n    2: '网络',\r\n};\r\n\r\nexport const asConnectionType = type => {\r\n    if (type in connectionTypes) {\r\n        return connectionTypes[type];\r\n    }\r\n    return `Unknown [${type}]`;\r\n};\r\n\r\nconst weightStateTable = {\r\n    1: 'stable',\r\n    2: 'dynamic',\r\n    3: 'underLoad',\r\n    4: 'overLoad',\r\n};\r\nexport const isStable = weightState => {\r\n    return weightState === 1;\r\n};\r\n\r\nexport const asWeightStateString = state => {\r\n    return state in weightStateTable ? weightStateTable[state] : state;\r\n};\r\nconst slotSortWeight = {\r\n    'S': 1,\r\n    'D': 2,\r\n    'F': 3,\r\n};\r\n\r\nconst compareBySlotNo = (a, b) => {\r\n    const aName = a.slotNo;\r\n    const bName = b.slotNo;\r\n    const aNames = aName.split('-');\r\n    const bNames = bName.split('-');\r\n    if (aNames.length !== bNames.length) {\r\n        return aNames.length - bNames.length;\r\n    }\r\n    for (let i = 0; i < aNames.length; i++) {\r\n        const aItem = parseInt(aNames[i]);\r\n        const bItem = parseInt(bNames[i]);\r\n        if (!(aItem && bItem)) {\r\n            continue;\r\n        }\r\n        if (aItem !== bItem) {\r\n            return aItem - bItem;\r\n        }\r\n    }\r\n    return 0;\r\n};\r\nexport const groupSlots = slots => {\r\n    const groups = {};\r\n    const putSlot = (name, slot) => {\r\n        if (name in groups) {\r\n            groups[name].push(slot);\r\n        } else {\r\n            groups[name] = [slot];\r\n        }\r\n    };\r\n    for (let slot of slots) {\r\n        const slotNo = slot.slotNo;\r\n        const noItems = slotNo.match(/^(\\w+)-(\\w+)-(\\w+)$/);\r\n        if (noItems) {\r\n            const groupName = `${noItems[1]}货架第${noItems[2]}层`;\r\n            putSlot(groupName, slot);\r\n        } else {\r\n            putSlot('未分组货道', slot);\r\n        }\r\n    }\r\n    const res = [];\r\n    for (let name in groups) {\r\n        if (!groups.hasOwnProperty(name)) {\r\n            continue;\r\n        }\r\n        const slots = groups[name];\r\n        res.push({\r\n            name,\r\n            slots: slots.sort(compareBySlotNo),\r\n        });\r\n    }\r\n    return res.sort((a, b) => {\r\n        const aWeight = slotSortWeight[a.name.substring(0, 1)];\r\n        const bWeight = slotSortWeight[b.name.substring(0, 1)];\r\n        if (aWeight !== bWeight) {\r\n            return aWeight - bWeight;\r\n        }\r\n        return a.name.localeCompare(b.name);\r\n    });\r\n};\r\n\r\nexport const asStateString = state => {\r\n    if (state in STATE_TABLE) {\r\n        return STATE_TABLE[state];\r\n    }\r\n    return 'Unknown State:' + state;\r\n};\r\n\r\nexport const asCount = data => {\r\n    const count = data.count;\r\n    const isStable = data.weightState === 1;\r\n    if (count === null) {\r\n        return '~❗';\r\n    }\r\n    if (isStable) {\r\n        return count;\r\n    }\r\n    return '~' + count;\r\n};\r\n\r\nconst thSensorStateTable = {\r\n    4: '过高',\r\n    5: '过低',\r\n    1: '正常',\r\n};\r\n\r\nexport const thSensorStateText = state => {\r\n    if (state in thSensorStateTable) {\r\n        return thSensorStateTable[state];\r\n    }\r\n    return '未知' + state;\r\n};\r\n\r\nexport const thSensorStateWarn = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const lastHighlightSlot = slots => {\r\n    if (!slots) {\r\n        return null;\r\n    }\r\n    debugger;\r\n    let lastTime = -1;\r\n    let lastSlot = null;\r\n    for (let slot of slots) {\r\n        if (!slot.skuUpdateTime) {\r\n            continue;\r\n        }\r\n        const skuUpdateTime = parseDate(slot.skuUpdateTime);\r\n        if (skuUpdateTime && skuUpdateTime['getTime']) {\r\n            const time = skuUpdateTime.getTime();\r\n            if (time - lastTime > 0) {\r\n                lastTime = time;\r\n                lastSlot = slot;\r\n            }\r\n        }\r\n    }\r\n    if (!lastSlot) {\r\n        lastSlot = slots[0];\r\n    }\r\n    return lastSlot;\r\n};\r\n","import {request} from './request';\r\n\r\nexport const doZeroAll = () => {\r\n    return request({\r\n        url: '/api/slot/zero-all',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const zeroOne = slotNo => {\r\n    const encodedSlotNo = encodeURIComponent(slotNo);\r\n    const apiUrl = `/api/slot/${encodedSlotNo}/zero`;\r\n    return request({\r\n        url: apiUrl,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllSlots = () => {\r\n    return request({\r\n        url: '/api/slot/_with-sensors',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDetail = id => {\r\n    return request({\r\n        url: `/api/slot/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const updateSlot = slot => {\r\n    return request({\r\n        url: `/api/slot/${slot.id}`,\r\n        method: 'post',\r\n        data: slot\r\n    });\r\n};\r\n\r\n\r\nexport const toggleELabelState = option => {\r\n    return request({\r\n        url: `/api/slot/${option.id}/has-e-label`,\r\n        method: 'post',\r\n        data: {hasElabel: option.hasELabel},\r\n    });\r\n};\r\n\r\nexport const highlightBySku = sku => {\r\n    return request({\r\n        url: '/api/slot/highlight',\r\n        method: 'post',\r\n        data: {\r\n            skuNo: sku\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllWithSensors = () => {\r\n    return request({\r\n        url: '/api/slot/_with-sensors',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setCompensationState = state => {\r\n    return request({\r\n        url: '/api/slot/_all-compensation',\r\n        method: 'post',\r\n        data: {\r\n            enableCompensation: state,\r\n        }\r\n    });\r\n};\r\n\r\nexport const mergeSlotsByIds = ids => {\r\n    return request({\r\n        url: '/api/slot/_merge',\r\n        method: 'post',\r\n        data: {\r\n            slotIds: ids,\r\n        }\r\n    });\r\n};\r\n\r\nexport const resetSlotBySlots = ids => {\r\n    return request({\r\n        url: '/api/slot/_reset-slot-sensors',\r\n        method: 'post',\r\n        data: {\r\n            slotIds: ids,\r\n        },\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {asyncFetchDashboardSlotData, setTabBarState, setTitle, showHeader} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport './Dashboard.sass'\r\nimport {Flex, List, Modal, NoticeBar, SearchBar, Tabs, Toast, WingBlank} from 'antd-mobile';\r\nimport {\r\n    asCount,\r\n    asKg,\r\n    asStateString,\r\n    groupSlots,\r\n    isDisable,\r\n    isIncredible,\r\n    isOffline,\r\n    isWan,\r\n    thSensorStateText,\r\n    thSensorStateWarn,\r\n} from '../../util/DataConvertor';\r\nimport {highlightBySku, zeroOne} from '../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDashboardData} from \"../../api/dashboard\";\r\nimport {parseDate} from '../../util/datetimeUtils';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        slots: state.dashboardSlots\r\n    };\r\n};\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSlotData: (...args) => dispatch(asyncFetchDashboardSlotData(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        showHeader: (...args) => dispatch(showHeader(...args)),\r\n        showTabBar: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nconst TabItems = [\r\n    {\r\n        title: '重力货道数据',\r\n        key: 'dashboard',\r\n    },\r\n    {\r\n        title: '重力货道配置',\r\n        key: 'settings',\r\n    }\r\n];\r\nconst findLastNoticeSlot = slots => {\r\n    let lastTime = 0;\r\n    let res = null;\r\n    for (let slot of slots) {\r\n        let ts = slot.skuUpdateTime ? parseDate(slot.skuUpdateTime) : 0;\r\n        if (ts > lastTime) {\r\n            lastTime = ts;\r\n            res = slot;\r\n        }\r\n    }\r\n    return res;\r\n};\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.rootEle = document;\r\n        this.state = {\r\n            slots: [],\r\n            groupedSlots: [],\r\n            thSensors: [],\r\n            sensors: [],\r\n            sensorModalVisible: false,\r\n            operationSlot: {},\r\n            searchSkuNo: '',\r\n            noticeSlots: [],\r\n            lastNoticeSlot: null,\r\n        };\r\n        this.props.setTitle('Dashboard');\r\n        this.renderSlotCard = this.renderSlotCard.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startFetchData();\r\n        this.props.showHeader(false);\r\n        this.props.showTabBar(false);\r\n        this.listenKeyPress();\r\n    }\r\n\r\n    listenKeyPress() {\r\n        this.rootEle.onkeypress = e => {\r\n            const sourceTagName = e.target.tagName.toLowerCase();\r\n            if (sourceTagName !== 'body') {\r\n                return;\r\n            }\r\n            const keyCode = e.keyCode;\r\n            if (keyCode === 13) {\r\n                this.triggerHighlight(this.state.searchSkuNo);\r\n            } else {\r\n                this.appendSearchSku(String.fromCharCode(keyCode));\r\n            }\r\n        };\r\n    }\r\n\r\n    appendSearchSku(c) {\r\n        const {searchSkuNo} = this.state;\r\n        this.setState({\r\n            searchSkuNo: searchSkuNo + c,\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.fetchTimer) {\r\n            clearInterval(this.fetchTimer);\r\n        }\r\n        this.props.showHeader(true);\r\n        this.props.showTabBar(true);\r\n        this.cancelKeyPress();\r\n    }\r\n\r\n    cancelKeyPress() {\r\n        this.rootEle.onkeypress = null;\r\n    }\r\n\r\n    startFetchData() {\r\n        this.fetchTimer = setInterval(() => {\r\n            fetchDashboardData().then(res => {\r\n                const slotData = res.slotData;\r\n                const thData = res.temperatureHumidityData;\r\n                const slots = [];\r\n                const thSensors = [];\r\n                for (let slotNo in slotData) {\r\n                    if (slotData.hasOwnProperty(slotNo)) {\r\n                        slots.push(slotData[slotNo]);\r\n                    }\r\n                }\r\n                for (let id in thData) {\r\n                    if (thData.hasOwnProperty(id)) {\r\n                        thSensors.push(thData[id]);\r\n                    }\r\n                }\r\n                const groupedSlots = groupSlots(slots);\r\n                this.setState({\r\n                    slots: slots,\r\n                    thSensors: thSensors,\r\n                    groupedSlots: groupedSlots,\r\n                });\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    renderThSensorCard(sensor) {\r\n        const {data} = sensor;\r\n        let {temperature, humidity} = data;\r\n        temperature = temperature && temperature.toFixed(1);\r\n        const tempStateText = thSensorStateText(data.temperatureState);\r\n        const tempWarn = thSensorStateWarn(data.temperatureState);\r\n        const humidityText = humidity && humidity.toFixed(1);\r\n        const tempClass = ['value'];\r\n        const stateClass = ['dot'];\r\n        const cardClass = ['th-card'];\r\n        if (tempWarn) {\r\n            stateClass.push('warn');\r\n            tempClass.push('warn');\r\n            cardClass.push('warn');\r\n        } else {\r\n            tempClass.push('ok');\r\n        }\r\n        const stateStr = asStateString(sensor.state);\r\n        const tempClassStr = tempClass.join(' ');\r\n        return (<div className={cardClass.join(' ')} key={sensor.id}>\r\n            <div className=\"card-header\">\r\n                <div className=\"no\">{sensor.no}</div>\r\n                <div className=\"state\"><span>{humidityText}%</span><span className={stateClass.join(' ')}/>\r\n                    {stateStr}\r\n                </div>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"inner\">\r\n                    <div className=\"item\">\r\n                        <span className=\"name\">温度:</span>\r\n                        <span className={tempClassStr}>{temperature}°C</span>\r\n                    </div>\r\n                    <div className=\"delimiter\"/>\r\n                    <div className=\"item\">\r\n                        <span className=\"name\">状态</span>\r\n                        <span className={tempClassStr}>{tempStateText}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n    renderThSensors() {\r\n        const {thSensors} = this.state;\r\n        return (<div className=\"th-sensor-group\">\r\n            <div className=\"title\">温湿度传感器</div>\r\n            <WingBlank className=\"sensors\">\r\n                {\r\n                    thSensors.map(sensor => this.renderThSensorCard(sensor))\r\n                }\r\n            </WingBlank>\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        const {lastNoticeSlot, searchSkuNo, noticeSlots, sensorModalVisible, operationSlot, sensors, groupedSlots} = this.state;\r\n        this.highlightSlotIds = {};\r\n        for (let slot of noticeSlots) {\r\n            this.highlightSlotIds[slot.id] = true;\r\n        }\r\n        return (\r\n            <div className=\"dashboard\">\r\n                <Tabs tabs={TabItems} onChange={(tab, index) => this.onTabChange(tab, index)}/>\r\n                <SearchBar\r\n                    value={searchSkuNo}\r\n                    onSubmit={e => this.triggerHighlight(e)}\r\n                    onChange={searchSkuNo => this.setState({searchSkuNo})}/>\r\n                <div className=\"notice-list\">\r\n                    {\r\n                        this.renderNoticeBar(lastNoticeSlot)\r\n                    }\r\n                </div>\r\n                <div className=\"slot-groups\">\r\n                    {\r\n                        groupedSlots.map(group => this.renderGroupItem(group))\r\n                    }\r\n                </div>\r\n                <div className=\"th-sensors\">\r\n                    {\r\n                        this.renderThSensors()\r\n                    }\r\n                </div>\r\n                <Modal visible={sensorModalVisible}\r\n                       title={`货道[${operationSlot.slotNo}]传感器`}\r\n                       transparent\r\n                       footer={[\r\n                           {\r\n                               text: '清零', onPress: () => this.doSlotZero(this.state.operationSlot)\r\n                           },\r\n                           {text: '关闭', onPress: () => this.setState({sensorModalVisible: false})},\r\n                       ]}\r\n                       onClose={() => this.setState({sensorModalVisible: false})}>\r\n                    <List renderHeader={() => 'Sensors'}>\r\n                        {\r\n                            sensors ? sensors.map(sensor => (<List.Item\r\n                                    extra={asStateString(sensor.state)}\r\n                                    key={sensor.id}>\r\n                                    {sensor.deviceSn}\r\n                                    <List.Item.Brief>{sensor.address485}</List.Item.Brief>\r\n                                </List.Item>)) :\r\n                                <List.Item>Empty List</List.Item>\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n                <div className=\"clear-float\"/>\r\n                <div className=\"bottom-white\">\r\n                    留白\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderNoticeBar(slot) {\r\n        if (!slot) {\r\n            return;\r\n        }\r\n        const content = [];\r\n        content.push(<span key={0}>{slot.skuName}</span>);\r\n        if (slot.skuShelfLifeOpenDays) {\r\n            content.push(<span key={1}>，开封后保质期</span>);\r\n            content.push((<span key={2} className=\"days\">{slot.skuShelfLifeOpenDays}</span>));\r\n            content.push(<span key={3}>天</span>);\r\n        } else {\r\n            content.push(<span key={1}>，开封后保质期未设置！</span>);\r\n        }\r\n        return (<NoticeBar className=\"notice\">\r\n            {content}\r\n        </NoticeBar>)\r\n    }\r\n\r\n    renderGroupItem(group) {\r\n        return (<div className=\"group-item\" key={group.name}>\r\n            <p className=\"group-name\">\r\n                {group.name}\r\n            </p>\r\n            <WingBlank>\r\n                <Flex className=\"slots\" wrap={\"wrap\"} justify=\"between\">\r\n                    {\r\n                        group.slots.map(slot => this.renderSlotCard(slot))\r\n                    }\r\n                </Flex>\r\n            </WingBlank>\r\n        </div>)\r\n    }\r\n\r\n    renderSlotCard(slot) {\r\n        const sensors = slot.sensors;\r\n        if (!sensors) {\r\n            return null;\r\n        }\r\n        const sku = slot.sku || {};\r\n        const data = slot.data || {};\r\n        let slotCardClassName = 'slot-card';\r\n        if (slot.id in this.highlightSlotIds) {\r\n            slotCardClassName += ' slot-card-highlight';\r\n        } else {\r\n            if (isWan(slot.state)) {\r\n                if (isDisable(slot.state)) {\r\n                    slotCardClassName += ' slot-card-disable';\r\n                } else if (isOffline(slot.state)) {\r\n                    slotCardClassName += ' slot-card-offline';\r\n                } else {\r\n                    slotCardClassName += ' slot-card-warn';\r\n                }\r\n            }\r\n        }\r\n        const incredible = isIncredible(data.toleranceState);\r\n        const state = asStateString(slot.state);\r\n        const weightInKg = asKg(data.weight);\r\n        const count = asCount(data);\r\n        return (<div key={slot.id}\r\n                     className={slotCardClassName}>\r\n            <Flex className=\"card-header\" justify=\"between\">\r\n                <div className=\"slot-no\">\r\n                    {slot.slotNo}\r\n                </div>\r\n                <div className=\"state\">\r\n                    <span className=\"weight\">({weightInKg}kg)</span>\r\n                    <span className=\"dot\"/>\r\n                    <span>{state}</span>\r\n                </div>\r\n            </Flex>\r\n            <Flex className=\"card-body\" justify=\"between\">\r\n                <div className=\"left\">\r\n                    <div className=\"sku-no\">SKU:{sku.skuNo}</div>\r\n                    <div className=\"sku-name\">{sku.name}</div>\r\n                </div>\r\n                <div className=\"delimiter\"/>\r\n                <div className={`right ${incredible ? 'right-incredible' : ''}`}\r\n                     onClick={() => this.onSlotCardClick(slot)}>\r\n                    <span className=\"pcs-value\">{count}</span>\r\n                    <span className=\"pcs-unit\">(数量)</span>\r\n                </div>\r\n            </Flex>\r\n        </div>);\r\n    }\r\n\r\n    onSlotCardClick(slot) {\r\n        this.setState({\r\n            operationSlot: slot,\r\n            sensors: slot.sensors,\r\n            sensorModalVisible: true,\r\n        });\r\n    }\r\n\r\n    triggerHighlight(skuNo) {\r\n        if (skuNo === '' || skuNo.trim() === '') {\r\n            Toast.show('Please Type a SkuNo!', 1, false);\r\n            return;\r\n        }\r\n        highlightBySku(skuNo).then(res => {\r\n            const lastNoticeSlot = findLastNoticeSlot(res);\r\n            this.setState({\r\n                noticeSlots: res,\r\n                lastNoticeSlot: lastNoticeSlot,\r\n            });\r\n            setTimeout(() => this.setState({noticeSlots: [], searchSkuNo: '', lastNoticeSlot: null}), 5000);\r\n        }).catch(err => {\r\n            this.setState({\r\n                searchSkuNo: '',\r\n            });\r\n            const {data} = err;\r\n            Modal.alert(`无法查询物料:${data.code}`, `无法查询物料号[${skuNo}]!(${data.msg})`);\r\n        });\r\n    }\r\n\r\n    onTabChange(tab, index) {\r\n        switch (index) {\r\n            case 0:\r\n                // dashboard\r\n                this.props.history.push({\r\n                    pathname: '/dashboard'\r\n                });\r\n                break;\r\n            case 1:\r\n                // settings\r\n                this.props.history.push({\r\n                    pathname: '/setting/'\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    doSlotZero(slot) {\r\n        const {slotNo} = slot;\r\n        Modal.alert(`清零${slotNo}?`, `确定清零货道[${slotNo}]?`, [\r\n            {text: '取消'},\r\n            {text: '确定', onPress: () => this.callDoZero(slotNo)}\r\n        ])\r\n    }\r\n\r\n    callDoZero(slotNo) {\r\n        zeroOne(slotNo).then(() => {\r\n            Toast.show(`slot[${slotNo}] Zero success!`, 3, false);\r\n        });\r\n    }\r\n}\r\n\r\nconst component = connect(mapState2Props, mapAction2Props)(Dashboard);\r\nexport default withRouter(component);\r\n","import {connect} from 'react-redux';\r\nimport {setTabBarState, setTitle, showHeader} from './actionCreators';\r\n\r\nconst mapState = (state, props) => {\r\n    return {\r\n        ...state,\r\n        ...props,\r\n    };\r\n};\r\nconst mapAction = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n        showHeader: (...args) => dispatch(showHeader(...args)),\r\n    };\r\n};\r\nexport const mapStateAndAction = (component) => {\r\n    return connect(mapState, mapAction)(component);\r\n};\r\n","import React, {Component} from 'react';\r\nimport {bool, func, object} from 'prop-types';\r\nimport './SlotCard.sass';\r\nimport {asKg, asStateString} from '../../util/DataConvertor';\r\nimport {ERROR_STATE} from '../../context/metadata';\r\n\r\nconst formatPcs = pcs => {\r\n    if (pcs === 0) {\r\n        return 0;\r\n    }\r\n    return pcs ? pcs : '-';\r\n};\r\nconst formatSkuNo = skuNo => {\r\n    return skuNo ? skuNo : '---------';\r\n};\r\n\r\nconst SLOT_CARD_CLASS_TABLE = {\r\n    1: 'slot-card-online',\r\n    2: 'slot-card-offline',\r\n    3: 'slot-card-disable',\r\n    4: 'slot-card-overload',\r\n    5: 'slot-card-under-load',\r\n};\r\n\r\nconst slotCardClass = (state, highLight) => {\r\n    const res = ['slot-card'];\r\n    if (highLight) {\r\n        res.push('slot-card-highlight');\r\n    } else {\r\n        res.push(SLOT_CARD_CLASS_TABLE[state]);\r\n    }\r\n    return res.join(' ');\r\n};\r\nconst TOLERANCE_STATE_CLASS_TABLE = {\r\n    1: 'count-credible',\r\n    2: 'count-incredible',\r\n};\r\nconst pcsClass = state => {\r\n    const res = ['count'];\r\n    res.push(TOLERANCE_STATE_CLASS_TABLE[state]);\r\n    return res.join(' ');\r\n};\r\n\r\nclass SlotCard extends Component {\r\n    static propTypes = {\r\n        slot: object.isRequired,\r\n        onClick: func.isRequired,\r\n        highLight: bool.isRequired,\r\n        errorOnly: bool.isRequired,\r\n    };\r\n\r\n    render() {\r\n        const {slot, onClick, highLight, errorOnly} = this.props;\r\n        if (!slot.sensors) {\r\n            return null;\r\n        }\r\n        if (errorOnly && !ERROR_STATE.hasOwnProperty(slot.state)) {\r\n            return null;\r\n        }\r\n        const {state, data, sku} = slot;\r\n        const {weight, count, toleranceState} = data;\r\n        const weightInKg = asKg(weight);\r\n        const stateStr = asStateString(state);\r\n        const pcs = formatPcs(count);\r\n        const skuNo = formatSkuNo(sku.skuNo);\r\n\r\n        const slotCardClassStr = slotCardClass(state, highLight);\r\n        const pcsClassStr = pcsClass(toleranceState);\r\n        const merged = slot.sensors.length > 1;\r\n        return (\r\n            <div className={slotCardClassStr}>\r\n                <div className=\"header\">\r\n                    <div className=\"slot-no\">{slot.slotNo}{merged ? '(合并货道)' : ''}</div>\r\n                    <div className=\"state\">\r\n                        <span className=\"weight\">({weightInKg}kg)</span>\r\n                        <div className=\"dot\"/>\r\n                        <span className=\"text\">{stateStr}</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"body\">\r\n                    <div className=\"sku\">\r\n                        <div className=\"sku-no\">\r\n                            <span>SKU:</span>\r\n                            <span>{skuNo}</span>\r\n                        </div>\r\n                        <div className=\"sku-name\">\r\n                            {sku.name}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"delimiter\"/>\r\n                    <div className={pcsClassStr} onClick={() => onClick(slot)}>\r\n                        <span className=\"value\">\r\n                            {pcs}\r\n                        </span>\r\n                        <span className=\"label\">\r\n                            (数量)\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SlotCard;\r\n","import React, {Component} from 'react';\r\nimport {bool, func, object} from 'prop-types';\r\nimport './SlotGroup.sass';\r\nimport SlotCard from './SlotCard';\r\n\r\nconst isHighLight = (slot, highLightSlotTable) => {\r\n    const {id} = slot;\r\n    return highLightSlotTable.hasOwnProperty(id);\r\n};\r\n\r\nconst renderSlots = (slots, onCardClick, highLightSlotTable, errorOnly) => {\r\n    if (!slots) {\r\n        return;\r\n    }\r\n    return slots.map(slot => (\r\n        <SlotCard\r\n            highLight={isHighLight(slot, highLightSlotTable)}\r\n            slot={slot}\r\n            key={slot.id}\r\n            errorOnly={errorOnly}\r\n            onClick={slot => onCardClick(slot)}/>));\r\n};\r\n\r\nclass SlotGroup extends Component {\r\n    static propTypes = {\r\n        group: object.isRequired,\r\n        onCardClick: func.isRequired,\r\n        highlightSlotTable: object.isRequired,\r\n        errorOnly: bool.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const {group, onCardClick, highlightSlotTable, errorOnly} = this.props;\r\n        const {name, slots} = group;\r\n        return (\r\n            <div className=\"slot-group\">\r\n                <div className=\"group-name\">{name}</div>\r\n                <div className=\"slot-list\">\r\n                    {\r\n                        renderSlots(slots, onCardClick, highlightSlotTable, errorOnly)\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SlotGroup;\r\n","class FetcherTask {\r\n    constructor(config) {\r\n        const {fetchData, onNewData, duration, onError} = config;\r\n        this.fetchData = fetchData;\r\n        this.onNewData = onNewData;\r\n        this.duration = duration;\r\n        this.onError = onError;\r\n        this.running = true;\r\n    }\r\n\r\n    start() {\r\n        this.fetchData()\r\n            .then(res => {\r\n                this.onNewData(res);\r\n                this.runNext();\r\n            })\r\n            .catch(err => {\r\n                this.onError(err);\r\n                this.runNext();\r\n            });\r\n    }\r\n\r\n    runNext() {\r\n        if (!this.running) {\r\n            return;\r\n        }\r\n        this.timmer = setTimeout(() => {\r\n            this.start();\r\n        }, this.duration);\r\n    }\r\n\r\n    stop() {\r\n        this.running = false;\r\n        if (this.timmer) {\r\n            clearTimeout(this.timmer);\r\n        }\r\n    }\r\n}\r\n\r\nexport default FetcherTask;\r\n","import React, {Component} from 'react';\r\nimport {object} from 'prop-types';\r\nimport {asStateString, thSensorStateText} from '../../util/DataConvertor';\r\nimport './TempSensorCard.sass';\r\n\r\nconst formatTemp = temp => {\r\n    if (temp === 0) {\r\n        return 0;\r\n    }\r\n    return temp ? temp.toFixed(1) : '--';\r\n};\r\n\r\nconst CARD_CLASS_TABLE = {\r\n    1: 'temp-sensor-card-online',\r\n    2: 'temp-sensor-card-offline',\r\n    3: 'temp-sensor-card-disable',\r\n    4: 'temp-sensor-card-overload',\r\n    5: 'temp-sensor-card-under-load',\r\n};\r\nconst cardClass = state => {\r\n    const res = ['temp-sensor-card'];\r\n    res.push(CARD_CLASS_TABLE[state]);\r\n    return res.join(' ');\r\n};\r\nconst BODY_CLASS_TABLE = {\r\n    4: 'body-overflow',\r\n    5: 'body-overflow',\r\n    1: 'body-ok',\r\n};\r\nconst bodyClass = state => {\r\n    const res = ['body'];\r\n    res.push(BODY_CLASS_TABLE[state]);\r\n    return res.join(' ');\r\n};\r\n\r\nclass TempSensorCard extends Component {\r\n    static propTypes = {\r\n        sensor: object.isRequired,\r\n    };\r\n\r\n    render() {\r\n        const {sensor} = this.props;\r\n        const {no, data, state} = sensor;\r\n        const {humidity, temperature, temperatureState} = data;\r\n        const stateStr = asStateString(state);\r\n        const temp = formatTemp(temperature);\r\n        const tempState = thSensorStateText(temperatureState);\r\n\r\n        const cardClassStr = cardClass(state);\r\n        const bodyClassStr = bodyClass(temperatureState);\r\n        return (\r\n            <div className={cardClassStr}>\r\n                <div className=\"header\">\r\n                    <div className=\"slot-no\">{no}</div>\r\n                    <div className=\"state\">\r\n                        <span className=\"humidity\">({humidity}%)</span>\r\n                        <span className=\"dot\"/>\r\n                        <span className=\"text\">{stateStr}</span>\r\n                    </div>\r\n                </div>\r\n                <div className={bodyClassStr}>\r\n                    <div className=\"temp\">\r\n                        <span className=\"value\">{temp}°C</span>\r\n                        <span className=\"label\">(温度)</span>\r\n                    </div>\r\n                    <div className=\"delimiter\"/>\r\n                    <div className=\"state\">\r\n                        <span className=\"value\">{tempState}</span>\r\n                        <span className=\"label\">(状态)</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TempSensorCard;\r\n","import React, {Component} from 'react';\r\nimport {func, object} from 'prop-types';\r\nimport {Modal, Toast} from 'antd-mobile';\r\nimport './SlotOperationModal.sass';\r\nimport {asStateString} from '../../util/DataConvertor';\r\nimport {zeroOne} from '../../api/slot';\r\n\r\nconst renderSensor = sensor => {\r\n    const state = asStateString(sensor.state);\r\n    return <div key={sensor.id} className=\"item\">\r\n        <div className=\"address\">\r\n            {sensor.address485}\r\n        </div>\r\n        <div className=\"state\">\r\n            {state}\r\n        </div>\r\n    </div>\r\n};\r\nconst renderSensors = sensors => {\r\n    if (!sensors || sensors.length <= 0) {\r\n        return null;\r\n    }\r\n    return sensors.map(renderSensor);\r\n};\r\n\r\nclass SlotOperationModal extends Component {\r\n    static propTypes = {\r\n        slot: object.isRequired,\r\n        onClose: func.isRequired,\r\n    };\r\n\r\n    doZero() {\r\n        const {slot} = this.props;\r\n        const {slotNo} = slot;\r\n        Modal.alert('清零确认', `确认清零货道[${slotNo}]？`, [\r\n            {\r\n                text: '取消',\r\n            },\r\n            {\r\n                text: '确认',\r\n                onPress() {\r\n                    zeroOne(slotNo).then(() => {\r\n                        Toast.show('清零成功', 3, false);\r\n                    });\r\n                },\r\n            }\r\n        ]);\r\n    }\r\n\r\n    render() {\r\n        const _this = this;\r\n        const {slot, onClose} = this.props;\r\n        const title = `货道[${slot.slotNo}]操作`;\r\n        const {sensors} = slot;\r\n        return (\r\n            <Modal className=\"slot-operation-modal\"\r\n                   visible={true}\r\n                   maskClosable={true}\r\n                   title={title}\r\n                   transparent={true}\r\n                   onClose={onClose}\r\n                   footer={\r\n                       [\r\n                           {\r\n                               text: '关闭',\r\n                               onPress: onClose,\r\n                           },\r\n                           {\r\n                               text: '清零',\r\n                               onPress() {\r\n                                   _this.doZero()\r\n                               }\r\n                           }\r\n                       ]\r\n                   }>\r\n                <div className=\"slot\">\r\n                    {slot.slotNo}\r\n                </div>\r\n                <div className=\"sensors\">\r\n                    {\r\n                        renderSensors(sensors)\r\n                    }\r\n                </div>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SlotOperationModal;\r\n","import React, {Component} from 'react';\r\nimport {mapStateAndAction} from '../../store/storeUtils';\r\nimport './HomeDashboard.sass';\r\nimport SlotGroup from '../commons/SlotGroup';\r\nimport {NoticeBar, SearchBar, Toast, WingBlank} from 'antd-mobile';\r\nimport {ScanOutlined, WarningOutlined} from '@ant-design/icons';\r\nimport {highlightBySku} from '../../api/slot';\r\nimport {fetchDashboardData} from '../../api/dashboard';\r\nimport {groupSlots, lastHighlightSlot} from '../../util/DataConvertor';\r\nimport FetcherTask from '../../util/FetcherTask';\r\nimport TempSensorCard from '../commons/TempSensorCard';\r\nimport SlotOperationModal from '../commons/SlotOperationModal';\r\n\r\nconst SEARCH_NOTICE_BAR_AUTO_CLEAN_DURATION = 5000;\r\nconst asHighlightSlotTable = slots => {\r\n    const res = {};\r\n    for (let slot of slots) {\r\n        res[slot.id] = slot;\r\n    }\r\n    return res;\r\n};\r\nconst renderNoticeBar = slot => {\r\n    if (!slot) {\r\n        return;\r\n    }\r\n    const msg = [];\r\n    const {skuName, skuShelfLifeOpenDays} = slot;\r\n    msg.push(<span key={1}>{skuName}</span>);\r\n    if (skuShelfLifeOpenDays) {\r\n        msg.push(\r\n            <span key={2}>\r\n                ，开封后保质期\r\n                <b className=\"days\">{skuShelfLifeOpenDays}</b>\r\n                天\r\n            </span>\r\n        );\r\n    }\r\n    return (<NoticeBar\r\n        className=\"search-notice\"\r\n        icon={<ScanOutlined/>}>\r\n        {\r\n            msg\r\n        }\r\n    </NoticeBar>);\r\n};\r\n\r\nconst dict2List = dict => {\r\n    const res = [];\r\n    for (let key in dict) {\r\n        if (dict.hasOwnProperty(key)) {\r\n            res.push(dict[key]);\r\n        }\r\n    }\r\n    return res;\r\n};\r\n\r\nconst renderTempSensors = sensors => {\r\n    if (!sensors || sensors.length <= 0) {\r\n        return null;\r\n    }\r\n    return (<>\r\n        <p className=\"group-name\">温湿度传感器</p>\r\n        <div className=\"sensors\">\r\n            {\r\n                sensors.map(sensor => (<TempSensorCard sensor={sensor} key={sensor.id}/>))\r\n            }\r\n        </div>\r\n    </>);\r\n};\r\nconst SETTING_PAGE_DELAY = 500;\r\nconst ENTER_CHAR_CODE = 13;\r\n\r\nclass HomeDashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.rootDom = document;\r\n        this.state = {\r\n            searchValue: '',\r\n            highlightSlotTable: {},\r\n            noticeSlot: null,\r\n            groupedSlots: [],\r\n            tempSensors: [],\r\n            currentTab: 0,\r\n            slotOperationVisible: false,\r\n            selectedSlot: {},\r\n            errorNotice: null,\r\n            showErrorOnly: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {setTitle, setTabBarState, showHeader} = this.props;\r\n        setTitle('数据看板');\r\n        setTabBarState(false);\r\n        showHeader(false);\r\n        this.initFetcher();\r\n        this.registerKeyPressHandler();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.fetcherTask) {\r\n            this.fetcherTask.stop();\r\n        }\r\n        this.cancelKeyPressHandler();\r\n    }\r\n\r\n    cancelKeyPressHandler() {\r\n        this.rootDom.onkeypress = null;\r\n    }\r\n\r\n    registerKeyPressHandler() {\r\n        const _this = this;\r\n        this.rootDom.onkeypress = e => {\r\n            const {tagName} = e.target;\r\n            if (tagName.toLowerCase() !== 'body') {\r\n                return;\r\n            }\r\n            const {keyCode} = e;\r\n            if (keyCode === ENTER_CHAR_CODE) {\r\n                _this.submitSearch();\r\n                return;\r\n            }\r\n            const char = String.fromCharCode(keyCode);\r\n            const {searchValue} = _this.state;\r\n            _this.setState({\r\n                searchValue: searchValue + char,\r\n            });\r\n        };\r\n    }\r\n\r\n    submitSearch() {\r\n        const {searchValue} = this.state;\r\n        this.searchSku(searchValue);\r\n    }\r\n\r\n    initFetcher() {\r\n        const _this = this;\r\n        this.fetcherTask = new FetcherTask({\r\n            fetchData: fetchDashboardData,\r\n            onNewData(data) {\r\n                _this.onDashboardDataRefresh(data);\r\n            },\r\n            duration: 1000,\r\n            onError(err) {\r\n                _this.onFetcherError(err);\r\n            }\r\n        });\r\n        this.fetcherTask.start();\r\n    }\r\n\r\n    onFetcherError(err) {\r\n        console.error('Error on fetch dashboard data!', err);\r\n        this.setState({errorNotice: err.toString()})\r\n    }\r\n\r\n    onDashboardDataRefresh(data) {\r\n        const {slotData, temperatureHumidityData} = data;\r\n        const groupedSlots = groupSlots(dict2List(slotData));\r\n        const tempSensors = dict2List(temperatureHumidityData);\r\n        this.setState({\r\n            groupedSlots,\r\n            tempSensors,\r\n            errorNotice: null,\r\n        });\r\n    }\r\n\r\n    searchSku(skuNo) {\r\n        if (!skuNo || !skuNo.trim()) {\r\n            Toast.show('请输入SKU', 1, false);\r\n            return;\r\n        }\r\n        this.setState({searchValue: ''});\r\n        highlightBySku(skuNo).then(res => {\r\n            this.setState({\r\n                highlightSlotTable: asHighlightSlotTable(res),\r\n                noticeSlot: lastHighlightSlot(res),\r\n            });\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    highlightSlotTable: {},\r\n                    noticeSlot: null,\r\n                });\r\n            }, SEARCH_NOTICE_BAR_AUTO_CLEAN_DURATION);\r\n        });\r\n    }\r\n\r\n    switchPageWithDelay(path) {\r\n        this.setState({currentTab: 1});\r\n        Toast.loading('跳转中', 1, null, true);\r\n        const {history} = this.props;\r\n        setTimeout(() => {\r\n            history.push({\r\n                pathname: path,\r\n            });\r\n        }, SETTING_PAGE_DELAY);\r\n    }\r\n\r\n    onSlotCardClick(slot) {\r\n        this.setState({\r\n            selectedSlot: slot,\r\n            slotOperationVisible: true,\r\n        })\r\n    }\r\n\r\n    renderErrorNotice() {\r\n        const {errorNotice} = this.state;\r\n        if (!errorNotice) {\r\n            return null;\r\n        }\r\n        return (<NoticeBar icon={<WarningOutlined/>}>\r\n            {errorNotice}\r\n        </NoticeBar>)\r\n    }\r\n\r\n    renderSlotOperationModal() {\r\n        const {slotOperationVisible, selectedSlot} = this.state;\r\n        if (!slotOperationVisible) {\r\n            return null;\r\n        }\r\n        return (<SlotOperationModal\r\n            slot={selectedSlot}\r\n            onClose={() => this.setState({slotOperationVisible: false})}/>);\r\n    }\r\n\r\n    renderTabs() {\r\n        const {currentTab} = this.state;\r\n        const tab0Class = ['item'];\r\n        const tab1Class = ['item'];\r\n        const tab2Class = ['item'];\r\n        const tabsClass = [tab0Class, tab1Class, tab2Class];\r\n        tabsClass[currentTab].push('item-focus');\r\n        return (<div className=\"tabs-wrapper\">\r\n            <div className=\"tabs\">\r\n                <div className={tab0Class.join(' ')}\r\n                     onClick={() => this.setState({currentTab: 0, showErrorOnly: false,})}>\r\n                    <div className=\"text\">重力货道数据</div>\r\n                    <div className=\"focus\"/>\r\n                </div>\r\n                <div className={tab1Class.join(' ')} onClick={() => this.switchPageWithDelay('/setting/')}>\r\n                    <div className=\"text\">重力货道配置</div>\r\n                    <div className=\"focus\"/>\r\n                </div>\r\n                <div className={tab2Class.join(' ')}\r\n                     onClick={() => this.setState({currentTab: 2, showErrorOnly: true})}>\r\n                    <div className=\"text\">异常货道排查</div>\r\n                    <div className=\"focus\"/>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        const {searchValue, noticeSlot, groupedSlots, tempSensors, highlightSlotTable, showErrorOnly} = this.state;\r\n        return (\r\n            <div className=\"home-dashboard\">\r\n                {\r\n                    this.renderErrorNotice()\r\n                }\r\n                {\r\n                    this.renderTabs()\r\n                }\r\n                <SearchBar value={searchValue}\r\n                           placeholder=\"请输入搜索的SKU号或扫描二维码\"\r\n                           onSubmit={text => this.searchSku(text)}\r\n                           onChange={text => this.setState({searchValue: text})}/>\r\n                {\r\n                    renderNoticeBar(noticeSlot)\r\n                }\r\n                <WingBlank className=\"slots\">\r\n                    {\r\n                        groupedSlots.map(group => <SlotGroup group={group}\r\n                                                             highlightSlotTable={highlightSlotTable}\r\n                                                             onCardClick={slot => this.onSlotCardClick(slot)}\r\n                                                             key={group.name}\r\n                                                             errorOnly={showErrorOnly}/>)\r\n                    }\r\n                </WingBlank>\r\n                <WingBlank className=\"temp-sensors\">\r\n                    {\r\n                        renderTempSensors(tempSensors)\r\n                    }\r\n                </WingBlank>\r\n                <div className=\"blank\">-</div>\r\n                {\r\n                    this.renderSlotOperationModal()\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default mapStateAndAction(HomeDashboard);\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from 'antd-mobile';\r\nimport './FloatButton.sass';\r\n\r\nclass FloatButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.defaultPosition = {\r\n            right: 20,\r\n            bottom: 100,\r\n        };\r\n        this.state = {\r\n            down: false,\r\n        };\r\n    }\r\n\r\n    static propTypes = {\r\n        iconType: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func,\r\n    };\r\n\r\n    render() {\r\n        const {down} = this.state;\r\n        return (\r\n            <div className={\"floatButton \" + (down ? 'move' : '')}\r\n                 style={this.defaultPosition}\r\n                 onClick={e => this.callOnClick(e)}\r\n            >\r\n                <Icon type={this.props.iconType} className=\"icon\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    callOnClick(e) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport default FloatButton;\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Card, List, Modal, Switch, Toast} from \"antd-mobile\";\r\nimport {asyncFetchSensors, setTabBarState, setTitle, toggleSensorElable} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {reloadSensors} from \"../../../api/sensor\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSensors: (...args) => dispatch(asyncFetchSensors(...args)),\r\n        toggleSensorElable: (...args) => dispatch(toggleSensorElable(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    }\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        sensors: state.sensors,\r\n    };\r\n};\r\n\r\nclass SensorSetting extends Component {\r\n    componentDidMount() {\r\n        this.props.setTitle('重力传感器设置');\r\n        this.props.fetchSensors();\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.props;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <Card>\r\n                    <Card.Header title=\"传感器信息\" extra=\"WeightSensor\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <List.Item extra={sensors.length}>传感器数量</List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n                <List renderHeader={() => '传感器列表'}>\r\n                    {\r\n                        sensors.map(sensor => (<List.Item key={sensor.id}>\r\n                            <Card>\r\n                                <Card.Header title={`地址:${sensor.address}`} extra={sensor.deviceSn}/>\r\n                                <Card.Body>\r\n                                    <List>\r\n                                        <List.Item extra={<Switch checked={sensor.hasElabel}\r\n                                                                  onChange={(e) => this.toggleElabel(sensor, e)}\r\n                                                                  platform=\"android\"/>}>\r\n                                            启用电子标签\r\n                                        </List.Item>\r\n                                        <List.Item arrow=\"horizontal\" onClick={() => this.toSensorDetails(sensor)}>\r\n                                            传感器详细参数\r\n                                        </List.Item>\r\n                                    </List>\r\n                                </Card.Body>\r\n                                <Card.Footer content={`绑定货道:[${sensor.slot && sensor.slot.slotNo}]`}\r\n                                             extra={sensor.slot && sensor.slot.id}/>\r\n                            </Card>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationActions()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    toSensorDetails(sensor) {\r\n        this.props.history.push({pathname: `/setting/${sensor.address}/sensor-details`});\r\n    }\r\n\r\n\r\n    toggleElabel(sensor, e) {\r\n        const sensorId = sensor.id;\r\n        this.props.toggleSensorElable(sensorId, e);\r\n    }\r\n\r\n    showOperationActions() {\r\n        const buttons = ['重新加载', '取消'];\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: '操作选择',\r\n            options: buttons,\r\n            cancelButtonIndex: buttons.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            if (index === 0) {\r\n                this.callReloadSensors();\r\n            }\r\n        })\r\n    }\r\n\r\n    callReloadSensors() {\r\n        Modal.alert('重新加载', '确定重新加载，该操作需等到一段时间（30s）才可生效?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '确定', onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('加载成功!', 1, false);\r\n                        })\r\n                    }\r\n                },\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(SensorSetting);\r\n","import React, {Component} from 'react';\r\nimport {List} from \"antd-mobile\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nclass SettingMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('设置');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"setting\">\r\n                <List renderHeader={() => '设置'}>\r\n                    <List.Item onClick={() => this.go('/setting/sensor')} arrow=\"horizontal\">\r\n                        重力传感器\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/th-sensor')} arrow=\"horizontal\">\r\n                        温湿度传感器\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/slot')} arrow=\"horizontal\">\r\n                        货道管理\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/connection')} arrow=\"horizontal\">\r\n                        连接管理\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/system')} arrow=\"horizontal\">\r\n                        系统信息\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\" onClick={() => this.go('/setting/system-check')}>\r\n                        系统检查\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/overview')} arrow=\"horizontal\">\r\n                        货道概览信息\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/extra-setting')} arrow=\"horizontal\">\r\n                        扩展页面设置\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    go(path) {\r\n        this.props.history.push({\r\n            pathname: path\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SettingMenu));\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Checkbox, List, Modal, Toast} from 'antd-mobile';\r\nimport {doZeroAll, fetchAllSlots, mergeSlotsByIds, resetSlotBySlots} from '../../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport './SlotSetting.sass';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst OperationActions = ['刷新', '全部清零', '合并选中货道', '拆分选中货道', '管理选中货道', '全选', '取消'];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\nconst isContinueSelected = slots => {\r\n    const selectedMap = {};\r\n    let selectedMinAddress = 999999;\r\n    for (let slot of slots) {\r\n        if (slot.selected) {\r\n            selectedMap[slot.address] = slot;\r\n            if (slot.address < selectedMinAddress) {\r\n                selectedMinAddress = slot.address;\r\n            }\r\n        }\r\n    }\r\n    delete selectedMap[selectedMinAddress];\r\n    while (Object.keys(selectedMap).length > 0) {\r\n        selectedMinAddress++;\r\n        const nextSelected = selectedMap[selectedMinAddress];\r\n        if (!nextSelected) {\r\n            return false;\r\n        }\r\n        delete selectedMap[selectedMinAddress];\r\n    }\r\n    return true;\r\n};\r\n\r\nclass SlotSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slots: [],\r\n            selectedNums: 0,\r\n            continueSelected: true,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(false);\r\n        this.props.setTitle('重力货道设置');\r\n        this.fetchSlots();\r\n    }\r\n\r\n    onItemClick(slot) {\r\n        const {slots} = this.state;\r\n        for (let s of slots) {\r\n            if (s.id === slot.id) {\r\n                s.selected = !s.selected;\r\n            }\r\n        }\r\n        const selectedNums = slots.filter(slot => slot.selected).length;\r\n        const continueSelected = isContinueSelected(slots);\r\n        this.setState({\r\n            slots: slots,\r\n            selectedNums: selectedNums,\r\n            continueSelected: continueSelected,\r\n        });\r\n    }\r\n\r\n    renderSlotSensors(sensors) {\r\n        if (sensors.length <= 0) {\r\n            return (<span className=\"msg\">该货道已被合并</span>);\r\n        }\r\n        return sensors.map(sensor => (<span className=\"sensor-dot\" key={sensor.id}>{sensor.address}</span>));\r\n    }\r\n\r\n    renderSlotItem(slot) {\r\n        const sensors = slot.sensors || [];\r\n        if (slot.id < 0 && sensors.length <= 0) {\r\n            return\r\n        }\r\n        return (<Item key={slot.id} arrow=\"horizontal\" onClick={() => this.onItemClick(slot)}>\r\n            <div className=\"slot-item\">\r\n                <div className=\"cb-wrapper\">\r\n                    <Checkbox checked={slot.selected}/>\r\n                </div>\r\n                <div className=\"slot-no\">\r\n                    <span>{slot.slotNo}</span>\r\n                </div>\r\n                <div>\r\n                    {\r\n                        this.renderSlotSensors(sensors)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Item>);\r\n    }\r\n\r\n    render() {\r\n        const {slots, selectedNums, continueSelected} = this.state;\r\n        const _this = this;\r\n        const selectedNumStyle = continueSelected ? 'continue' : 'warn';\r\n        return (\r\n            <div className=\"slot-setting\">\r\n                <List renderHeader={() => '重力货道列表'} className=\"slots\">\r\n                    {\r\n                        slots.map(slot => _this.renderSlotItem(slot))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationSheet()}/>\r\n                <div className=\"fixed-tips\">\r\n                    <p>已选择：\r\n                        <span className={selectedNumStyle}>{selectedNums}</span>\r\n                        个\r\n                        <span className={selectedNumStyle}>{continueSelected ? '连续选择' : '未连续选择'}</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    findSelectedSlots() {\r\n        const {slots} = this.state;\r\n        return slots.filter(slot => slot.selected);\r\n    }\r\n\r\n    mergeSlot() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length < 2) {\r\n            Toast.show('请选中一个以上货道', 3, false);\r\n            return;\r\n        }\r\n        const slotNos = slots.map(slot => slot.slotNo).join(',');\r\n        const {continueSelected} = this.state;\r\n        if (!continueSelected) {\r\n            Modal.alert('无法合并不连续货道', '合并货道时需选择地址连续的货道！', [{text: '知道了'}]);\r\n            return;\r\n        }\r\n        Modal.alert('合并货道', `确认合并:${slotNos}?`, [\r\n            {\r\n                text: '取消',\r\n            },\r\n            {\r\n                text: '确定',\r\n                onPress: () => {\r\n                    mergeSlotsByIds(slots.map(slot => slot.id)).then(() => {\r\n                        Toast.show('合并成功', 3, false);\r\n                        this.fetchSlots();\r\n                    }).catch(err => {\r\n                        Toast.hide();\r\n                        const {data, status} = err;\r\n                        const {code, msg} = data;\r\n                        if (status === 200 && code === 400) {\r\n                            Modal.alert('操作提醒', msg, [{text: '知道了'}], 'android');\r\n                        }\r\n                    });\r\n                },\r\n            }\r\n        ]);\r\n    }\r\n\r\n    resetSlotSensor() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length < 1) {\r\n            Toast.show('请选中至少一个货道', 3, false);\r\n            return;\r\n        }\r\n        const slotNos = slots.map(slot => slot.slotNo).join(',');\r\n        Modal.alert('拆分货道', `确认拆分:${slotNos}?`, [\r\n            {\r\n                text: '取消',\r\n            },\r\n            {\r\n                text: '确定',\r\n                onPress: () => {\r\n                    resetSlotBySlots(slots.map(slot => slot.id)).then(() => {\r\n                        Toast.show('拆分成功', 3, false);\r\n                        this.fetchSlots();\r\n                    });\r\n                },\r\n            }\r\n        ]);\r\n    }\r\n\r\n    chooseAllSlotSensor() {\r\n        const {slots} = this.state;\r\n        const selected = slots.filter(slot => slot.selected).length !== slots.length;\r\n        for (let slot of slots) {\r\n            slot.selected = selected;\r\n        }\r\n        this.setState({slots});\r\n    }\r\n\r\n    toSelectedSlotDetails() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length !== 1) {\r\n            Toast.show('请选中一个货道', 3, false);\r\n            return;\r\n        }\r\n        const slot = slots[0];\r\n        this.toSlotDetail(slot);\r\n    }\r\n\r\n    showOperationSheet() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: OperationActions,\r\n            title: '操作选择',\r\n            cancelButtonIndex: OperationActions.length - 1,\r\n            destructiveButtonIndex: 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.fetchSlots();\r\n                    break;\r\n                case 1:\r\n                    this.doZeroAll();\r\n                    break;\r\n                case 2:\r\n                    this.mergeSlot();\r\n                    break;\r\n                case 3:\r\n                    this.resetSlotSensor();\r\n                    break;\r\n                case 4:\r\n                    this.toSelectedSlotDetails();\r\n                    break;\r\n                case 5:\r\n                    this.chooseAllSlotSensor();\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        })\r\n    }\r\n\r\n    toSlotDetail(slot) {\r\n        this.props.history.push({\r\n            pathname: `/setting/slot-detail/${slot.id}`,\r\n        });\r\n    }\r\n\r\n    doZeroAll() {\r\n        Modal.alert('确认清零？', '确认清零全部货道？', [\r\n            {\r\n                text: '清零',\r\n                onPress: () => {\r\n                    doZeroAll().then(() => {\r\n                        Toast.show('全部货道已经被清零!');\r\n                    });\r\n                },\r\n            },\r\n            {\r\n                text: '取消',\r\n            }\r\n        ]);\r\n    }\r\n\r\n    fetchSlots() {\r\n        fetchAllSlots().then(res => {\r\n            const slots = res.map(slot => {\r\n                slot.selected = false;\r\n                return slot;\r\n            }).sort((a, b) => a.address - b.address);\r\n            this.setState({slots})\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotSetting));\r\n","import React, {Component} from 'react';\r\nimport {asyncDeleteConnection, asyncFetchConnection, setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Card, Flex, InputItem, List, Modal, Picker, Progress, Toast, WingBlank} from 'antd-mobile';\r\nimport {asConnectionType} from '../../../util/DataConvertor';\r\nimport './ConnectionSetting.sass'\r\nimport {\r\n    createConnection,\r\n    fetchScanProgress,\r\n    scanDevice,\r\n    scanPort,\r\n    startScanTempHumiSensors\r\n} from '../../../api/connection';\r\nimport {connect} from 'react-redux';\r\nimport FetcherTask from '../../../util/FetcherTask';\r\n\r\nconst ConnectionOperations = [\r\n    '删除',\r\n    '扫描重力货道',\r\n    '扫描温湿度传感器',\r\n    '取消',\r\n];\r\nconst connectionTypes = [\r\n    {\r\n        label: '串口',\r\n        value: 1,\r\n    },\r\n    {\r\n        label: '网络',\r\n        value: 2,\r\n    }\r\n];\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchConnection: (...args) => dispatch(asyncFetchConnection(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        deleteConnection: (...args) => dispatch(asyncDeleteConnection(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        connections: state.connections,\r\n    };\r\n};\r\nconst SCAN_PROGRESS_FETC_DURATION = 1000;\r\nconst scanResultMap2Arr = result => {\r\n    const res = [];\r\n    for (let key in result) {\r\n        if (!result.hasOwnProperty(key)) {\r\n            continue;\r\n        }\r\n        const item = result[key];\r\n        res.push({\r\n            ...item,\r\n            address: key,\r\n        });\r\n    }\r\n    return res.sort((a, b) => a.address - b.address);\r\n};\r\nconst scanStateTable = {\r\n    1: '准备扫描',\r\n    2: '扫描中',\r\n    3: '扫描结束',\r\n};\r\n\r\nclass ConnectionSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            createDialogVisible: false,\r\n            create: {\r\n                type: null,\r\n                target: ''\r\n            },\r\n            serialPorts: [],\r\n            scanProgressVisible: false,\r\n            scanProgress: {\r\n                progress: 50,\r\n                start: 0,\r\n                end: 0,\r\n                address: -1,\r\n                result: [],\r\n                errors: [],\r\n                state: 1,\r\n            },\r\n            scanError: null,\r\n        };\r\n        this.props.setTitle('物理连接设置');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchConnection();\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    startFetchScanProgress() {\r\n        if (this.scanProgressFetcher) {\r\n            this.scanProgressFetcher.stop();\r\n        }\r\n        const _this = this;\r\n        this.scanProgressFetcher = new FetcherTask({\r\n            fetchData: fetchScanProgress,\r\n            onNewData: data => {\r\n                const {currentAddress, end, start, progress, scanResult, errors, state} = data;\r\n                const scanProgress = {\r\n                    progress: progress.toFixed(2),\r\n                    end: end,\r\n                    start: start,\r\n                    address: currentAddress,\r\n                    result: scanResultMap2Arr(scanResult),\r\n                    errors: errors,\r\n                    state: state,\r\n                };\r\n                _this.setState({scanProgress: scanProgress});\r\n                if (state === 3) {\r\n                    _this.scanProgressFetcher.stop();\r\n                    Modal.alert('扫描完成', '扫描完成', [\r\n                        {\r\n                            text: '确认',\r\n                            onPress() {\r\n                                _this.setState({scanProgressVisible: false});\r\n                            }\r\n                        }\r\n                    ]);\r\n                }\r\n            },\r\n            duration: SCAN_PROGRESS_FETC_DURATION,\r\n            onError: err => {\r\n                console.error('Fetch scan progress error!', err);\r\n                _this.setState({scanError: err.toString()});\r\n            },\r\n        });\r\n        this.scanProgressFetcher.start();\r\n        this.setState({\r\n            scanProgressVisible: true\r\n        });\r\n    }\r\n\r\n    stopFetchScanProgress() {\r\n        if (this.scanProgressFetcher) {\r\n            this.scanProgressFetcher.stop();\r\n            this.scanProgressFetcher = null;\r\n        }\r\n        this.setState({\r\n            scanProgressVisible: false,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {connections} = this.props;\r\n        const {createDialogVisible, scanProgressVisible, scanProgress} = this.state;\r\n        const {create} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => '连接列表'}>\r\n                    {\r\n                        connections.map(connection => (\r\n                            <Item key={connection.id} arrow=\"horizontal\"\r\n                                  onClick={() => this.showConnectionOperations(connection)}>\r\n                                <Flex justify=\"between\" className=\"connectionItem\">\r\n                                    <span className=\"type\">{asConnectionType(connection.type)}</span>\r\n                                    <span className=\"target\">{connection.target}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                    <Item key=\"createButton\">\r\n                        <Button type=\"primary\" onClick={() => this.showCreateDialog()}>创建连接</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={createDialogVisible}\r\n                    transparent\r\n                    title=\"创建连接\"\r\n                    footer={[\r\n                        {text: '取消', onPress: () => this.setState({createDialogVisible: false})},\r\n                        {text: '创建', onPress: () => this.createConnection()},\r\n                    ]}\r\n                    onClose={() => this.setState({createDialogVisible: false})}>\r\n                    <List>\r\n                        <Picker data={connectionTypes} title=\"连接类型\" cols={1}\r\n                                extra=\"请选择\"\r\n                                onChange={e => this.setCreateType(e)}>\r\n                            <List.Item>\r\n                                <InputItem value={create.type && asConnectionType(create.type)}\r\n                                           disabled={true}\r\n                                           placeholder=\"类型\"/>\r\n                            </List.Item>\r\n                        </Picker>\r\n                        {\r\n                            (() => {\r\n                                const input = (<List.Item key=\"target\"><InputItem placeholder=\"Connection Target\"\r\n                                                                                  onChange={e => this.setCreateTarget(e)}\r\n                                                                                  value={create.target}\r\n                                                                                  disabled={this.state.create.type === 1}/></List.Item>);\r\n                                if (create.type === 1) {\r\n                                    return (<Picker data={this.state.serialPorts}\r\n                                                    extra=\"选择\"\r\n                                                    title=\"串口列表\"\r\n                                                    cols={1}\r\n                                                    onChange={arr => this.setCreateTargetSerial(arr)}>\r\n                                        {input}\r\n                                    </Picker>)\r\n                                } else {\r\n                                    return input;\r\n                                }\r\n                            })()\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n                <Modal visible={scanProgressVisible} title=\"扫描进度\">\r\n                    <WingBlank>\r\n                        <Card>\r\n                            <Card.Header title=\"扫描进度\" extra={scanStateTable[scanProgress.state]}/>\r\n                            <Card.Body>\r\n                                <Progress percent={scanProgress.progress} position=\"normal\"/>\r\n                                <Flex className=\"scan-overview\">\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">开始地址</p>\r\n                                        <p className=\"value\">{scanProgress.start}</p>\r\n                                    </Flex.Item>\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">结束地址</p>\r\n                                        <p className=\"value\">{scanProgress.end}</p>\r\n                                    </Flex.Item>\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">扫描进度</p>\r\n                                        <p className=\"value\">{scanProgress.progress}%</p>\r\n                                    </Flex.Item>\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">发现设备</p>\r\n                                        <p className=\"value\">{scanProgress.result.length}</p>\r\n                                    </Flex.Item>\r\n                                    <Flex.Item>\r\n                                        <p className=\"name\">正在扫描</p>\r\n                                        <p className=\"value\">ADDR:{scanProgress.address}</p>\r\n                                    </Flex.Item>\r\n                                </Flex>\r\n                                <Button type=\"primary\" onClick={() => this.stopFetchScanProgress()}>后台扫描</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                        <Flex>\r\n                            <Flex.Item>\r\n                                <List renderHeader={() => '扫描结果:'}>\r\n                                    {scanProgress.result.map(item => (\r\n                                        <List.Item key={item.address} extra={item.address}>\r\n                                            {item.sensorSn}/{item.elabelSn}\r\n                                        </List.Item>))}\r\n                                </List>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <List renderHeader={() => '错误信息:'}>\r\n                                    {\r\n                                        scanProgress.errors.map((item, index) => (\r\n                                            <List.Item key={index} extra={index}>{item}</List.Item>))\r\n                                    }\r\n                                </List>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </WingBlank>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    deleteConnection(connection) {\r\n        Modal.alert('删除连接!', '确定删除连接？',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '删除',\r\n                    onPress: () => {\r\n                        this.props.deleteConnection(connection.id);\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    scanConnection(connection) {\r\n        const _this = this;\r\n        Modal.alert('扫描重力传感器!', '扫描该连接下的传感器？?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '扫描',\r\n                    onPress: () => {\r\n                        scanDevice(connection.id).then(() => {\r\n                            _this.startFetchScanProgress();\r\n                            Toast.show('扫描已开始!', 2, false)\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    showCreateDialog() {\r\n        this.setState({\r\n            createDialogVisible: true\r\n        })\r\n    }\r\n\r\n    createConnection() {\r\n        createConnection(this.state.create).then(() => {\r\n            this.props.fetchConnection();\r\n            this.setState({\r\n                create: {},\r\n                createDialogVisible: false,\r\n            });\r\n        })\r\n    }\r\n\r\n    setCreateType(types) {\r\n        if (types.length < 1) {\r\n            Toast.show('请选择连接类型!');\r\n        }\r\n        const type = types[0];\r\n        const newCreate = {\r\n            type,\r\n            target: ''\r\n        };\r\n        this.setState({create: newCreate});\r\n        if (type === 1 && this.state.serialPorts.length <= 0) {\r\n            scanPort().then(res => {\r\n                const serialPorts = [];\r\n                for (const port of res) {\r\n                    serialPorts.push({\r\n                        label: port,\r\n                        value: port,\r\n                    });\r\n                }\r\n                this.setState({serialPorts});\r\n            });\r\n        }\r\n    }\r\n\r\n    setCreateTarget(e) {\r\n        const create = {\r\n            ...this.state.create,\r\n            target: e,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    setCreateTargetSerial(serialIndexList) {\r\n        if (!serialIndexList) {\r\n            Toast.show('请选择串口!');\r\n            return;\r\n        }\r\n        const port = serialIndexList[0];\r\n        const create = {\r\n            ...this.state.create,\r\n            target: port,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    startScanTHSensors(connection) {\r\n        Modal.alert('扫描温湿度传感器!', '扫描该连接下的温湿度传感器?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '扫描',\r\n                    onPress: () => {\r\n                        startScanTempHumiSensors(connection.id).then(() => {\r\n                            Toast.show('扫描已开始!', 2, false)\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    showConnectionOperations(connection) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: `${connection.target} 操作`,\r\n            options: ConnectionOperations,\r\n            cancelButtonIndex: ConnectionOperations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.deleteConnection(connection);\r\n                    break;\r\n                case 1:\r\n                    this.scanConnection(connection);\r\n                    break;\r\n                case 2:\r\n                    this.startScanTHSensors(connection);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(ConnectionSetting);\r\n","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDetail, toggleELabelState, updateSlot, zeroOne} from '../../../api/slot';\r\nimport {ActionSheet, Button, InputItem, List, Switch, Toast, WingBlank} from 'antd-mobile';\r\nimport {setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst ActionButtons = [\r\n    '清零该货道',\r\n    '删除货道',\r\n    '取消',\r\n];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotDetailSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {}\r\n        };\r\n        this.slotId = this.props.match.params.id;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle(`${this.slotId} 货道设置`);\r\n        this.fetchSlotInfo();\r\n    }\r\n\r\n    fetchSlotInfo() {\r\n        fetchDetail(this.slotId).then(res => {\r\n            this.setState({slot: res});\r\n            this.props.setTitle(`${res.slotNo} 货道设置`);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {slot} = this.state;\r\n        return (\r\n            <div className=\"slotDetail\">\r\n                <List renderHeader={() => '货道信息'}>\r\n                    <InputItem placeholder=\"逻辑货道号\" value={slot.slotNo}\r\n                               onChange={text => this.setUpdateSlotProp({slotNo: text})}>货道号</InputItem>\r\n                    <InputItem placeholder=\"SKU名称\" value={slot.skuName}\r\n                               onChange={text => this.setUpdateSlotProp({skuName: text})}>SKU名称</InputItem>\r\n                    <InputItem placeholder=\"SKU号\" value={slot.skuNo}\r\n                               onChange={text => this.setUpdateSlotProp({skuNo: text})}>SKU号</InputItem>\r\n                    <InputItem placeholder=\"SKU单重\" value={slot.skuApw}\r\n                               type=\"money\"\r\n                               onChange={text => this.setUpdateSlotProp({skuApw: text})}>SKU单重</InputItem>\r\n                    <InputItem placeholder=\"SKU允差\" value={slot.skuTolerance}\r\n                               type=\"money\"\r\n                               onChange={text => this.setUpdateSlotProp({skuTolerance: text})}>SKU允差</InputItem>\r\n                    <InputItem placeholder=\"开封后保质天数\" value={slot.skuShelfLifeOpenDays}\r\n                               type=\"number\"\r\n                               onChange={text => this.setUpdateSlotProp({skuShelfLifeOpenDays: text})}>\r\n                        保质期\r\n                    </InputItem>\r\n                    <Item key=\"applyBtn\">\r\n                        <WingBlank><Button type=\"primary\" onClick={() => this.applyModify()}>保存</Button></WingBlank>\r\n                    </Item>\r\n                </List>\r\n                <List renderHeader={() => 'Operations'}>\r\n                    <List.Item\r\n                        key=\"hasELabel\"\r\n                        extra={<Switch\r\n                            checked={slot.hasElabel}\r\n                            onChange={state => this.toggleELabel(state)}\r\n                            platform=\"android\"/>}>\r\n                        启用电子标签\r\n                    </List.Item>\r\n                    <List.Item\r\n                        arrow=\"horizontal\"\r\n                        onClick={() => this.props.history.push({pathname: `/setting/slot-sensors/${slot.id}`})}>\r\n                        货道传感器管理\r\n                    </List.Item>\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.openOperation()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    openOperation() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: '操作选择',\r\n            options: ActionButtons,\r\n            destructiveButtonIndex: 1,\r\n            cancelButtonIndex: ActionButtons.length - 1,\r\n        }, buttonIndex => {\r\n            switch (buttonIndex) {\r\n                case 0:\r\n                    this.doZero();\r\n                    break;\r\n                case 1:\r\n                    Toast.show('暂时不能删除货道', 2, false);\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    doZero() {\r\n        const {slot} = this.state;\r\n        zeroOne(slot.slotNo).then(() => {\r\n            Toast.show('清零成功!');\r\n        });\r\n    }\r\n\r\n    setUpdateSlotProp(props) {\r\n        const slot = {\r\n            ...this.state.slot,\r\n            ...props\r\n        };\r\n        this.setState({slot});\r\n    }\r\n\r\n    applyModify() {\r\n        updateSlot(this.state.slot).then(() => {\r\n            Toast.show('Apply Success!');\r\n        });\r\n    }\r\n\r\n    toggleELabel(hasELabel) {\r\n        toggleELabelState({id: this.slotId, hasELabel}).then(() => {\r\n            Toast.show('Toggle ELabel Success!');\r\n            this.fetchSlotInfo();\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotDetailSetting));\r\n","import React, {Component} from 'react';\r\nimport {Button, List, Modal, Switch, TextareaItem, Toast} from 'antd-mobile';\r\nimport {setEnableTabBarAction, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {fetchSystemInfo} from '../../../api/dashboard';\r\nimport {reloadLibPath} from '../../../api/serial';\r\nimport {stopWeightService} from '../../../api/sensor';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setEnableTabBar: (...args) => dispatch(setEnableTabBarAction(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass SystemSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemInfo: {},\r\n            libLoadVisible: false,\r\n            reloadLibPath: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('系统信息');\r\n        fetchSystemInfo().then(res => {\r\n            this.setState({\r\n                systemInfo: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {systemInfo, libLoadVisible, reloadLibPath} = this.state;\r\n        const {enableTabBar} = this.props;\r\n        return (\r\n            <div className=\"systemSettings\">\r\n                <List renderHeader={() => '系统信息'}>\r\n                    <Item key=\"appName\" extra={systemInfo.appName}>应用名称</Item>\r\n                    <Item key=\"appVersion\" extra={systemInfo.appVersion}>应用版本</Item>\r\n                    <Item key=\"dbVersion\" extra={systemInfo.dbVersion}>数据库版本</Item>\r\n                    <Item key=\"dbVersionName\" extra={systemInfo.dbVersionName}>数据库版本名</Item>\r\n                    <Item key=\"pid\" extra={systemInfo.pid}>进程ID</Item>\r\n                    <Item key=\"libPath\" arrow=\"horizontal\"\r\n                          onClick={() => this.showLibLoadModal()}> 驱动路径: {systemInfo.libPath}</Item>\r\n                </List>\r\n                <List renderHeader={() => '系统设置'}>\r\n                    <Item\r\n                        key=\"tabBar\"\r\n                        extra={<Switch\r\n                            checked={enableTabBar}\r\n                            onChange={target => this.setEnableTabBar(target)}\r\n                            platform=\"android\"/>}>\r\n                        底部标签栏\r\n                    </Item>\r\n                    <Item key=\"systemProps\" arrow=\"horizontal\"\r\n                          onClick={() => this.props.history.push({pathname: '/setting/system-props'})}>\r\n                        JVM信息\r\n                    </Item>\r\n                    <Item key=\"stopService\">\r\n                        <Button type=\"warning\" onClick={() => this.stopWeightService()}>停止重力服务</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={libLoadVisible}\r\n                    title=\"重新加载驱动\"\r\n                    transparent\r\n                    maskClosable={true}\r\n                    footer={[\r\n                        {\r\n                            text: '取消',\r\n                            onPress: () => this.showLibLoadModal(false),\r\n                        },\r\n                        {\r\n                            text: '加载',\r\n                            onPress: () => this.reloadLibrary()\r\n                        },\r\n                    ]}>\r\n                    <TextareaItem\r\n                        placeholder=\"驱动路径!\"\r\n                        autoHeight\r\n                        value={reloadLibPath} onChange={e => this.setState({reloadLibPath: e})}/>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setEnableTabBar(target) {\r\n        this.props.setEnableTabBar(target);\r\n    }\r\n\r\n    showLibLoadModal(show = true) {\r\n        const reloadLibPath = this.state.systemInfo.libPath;\r\n        this.setState({\r\n            reloadLibPath,\r\n            libLoadVisible: show\r\n        });\r\n    }\r\n\r\n    reloadLibrary() {\r\n        reloadLibPath(this.state.reloadLibPath).then(res => {\r\n            Toast.show(`加载成功: [${res}]`);\r\n            this.setState({\r\n                libLoadVisible: false,\r\n            })\r\n        })\r\n    }\r\n\r\n    stopWeightService() {\r\n        stopWeightService().then(() => {\r\n            Toast.show(\"重力服务已停止!\");\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props, mapAction2Props)(SystemSetting));\r\n","import {request} from './request';\r\n\r\nexport const reloadLibPath = path => {\r\n    return request({\r\n        url: '/api/serial/load-lib',\r\n        method: 'post',\r\n        data: {\r\n            libPath: path\r\n        }\r\n    })\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchSystemProps} from '../.././../api/dashboard';\r\nimport {List, TextareaItem} from 'antd-mobile';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    console.log(props, dispatch);\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\nconst {Item} = List;\r\n\r\nclass SystemPropsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemProps: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('JVM环境变量');\r\n        fetchSystemProps().then(res => {\r\n            const propList = [];\r\n            for (const name in res) {\r\n                if (res.hasOwnProperty(name)) {\r\n                    propList.push({\r\n                        name,\r\n                        value: res[name],\r\n                    });\r\n                }\r\n            }\r\n            this.setState({\r\n                systemProps: propList\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {systemProps} = this.state;\r\n        return (\r\n            <div className=\"systemProps\">\r\n                <List renderHeader={() => 'System Properties'}>\r\n                    {\r\n                        systemProps.map(p => (<Item key={p.name}>\r\n                            <div>{p.name}</div>\r\n                            <TextareaItem value={p.value} autoHeight labelNumber={5}/>\r\n                        </Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SystemPropsSetting);\r\n","import React, {Component} from 'react';\r\nimport {fetchAllWithSensors, fetchDetail} from '../../../api/slot';\r\nimport {setSlotByIds} from '../../../api/sensor';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Flex, List, Modal, Picker, Toast, WingBlank} from \"antd-mobile\";\r\nimport './SlotSensorsSetting.sass'\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\nconst SENSOR_OPERATIONS = ['移除', '取消'];\r\n\r\nclass SlotSensorsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {},\r\n            sensors: [],\r\n            sensorRemoveMode: false,\r\n            allSlots: [],\r\n            sensorPickerData: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('货道传感器管理');\r\n        const {id} = this.props.match.params;\r\n        fetchDetail(id).then(res => {\r\n            const sensors = res.sensors;\r\n            for (let sensor of sensors) {\r\n                sensor.changed = false;\r\n            }\r\n            this.setState({\r\n                slot: res,\r\n                sensors: sensors,\r\n            });\r\n            this.props.setTitle(`传感器管理[${res.slotNo}]`);\r\n        });\r\n        fetchAllWithSensors().then(res => {\r\n            const pickerData = [];\r\n            for (let slot of res) {\r\n                const sensors = slot.sensors;\r\n                const children = [];\r\n                for (let sensor of sensors) {\r\n                    children.push({\r\n                        value: sensor.id,\r\n                        label: sensor.address,\r\n                    });\r\n                }\r\n                pickerData.push({\r\n                    value: slot.id,\r\n                    label: slot.slotNo,\r\n                    children: children,\r\n                });\r\n            }\r\n            this.setState({allSlots: res, sensorPickerData: pickerData,});\r\n        });\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {sensorRemoveMode, sensorPickerData} = this.state;\r\n        const sensorItem = (\r\n            <List.Item key={sensor.id}\r\n                       arrow=\"horizontal\"\r\n                       className={`sensor-item ${sensor.changed ? 'sensor-item-changed' : ''}`}\r\n                       onClick={() => this.openSensorOperations(sensor)}\r\n                       extra={sensorRemoveMode ? '点击删除' : ''}>\r\n                {sensor.deviceSn}\r\n            </List.Item>);\r\n        if (sensorRemoveMode) {\r\n            return sensorItem;\r\n        } else {\r\n            return (<Picker\r\n                data={sensorPickerData}\r\n                key={sensor.id}\r\n                value={[sensor.slotId, sensor.id]}\r\n                cols={2}\r\n                onChange={v => this.onSelectSensor(sensor, v)}>{sensorItem}</Picker>)\r\n        }\r\n    }\r\n\r\n    onSelectSensor(oldSensor, selected) {\r\n        const slotId = selected[0];\r\n        const sensorId = selected[1];\r\n        let index = -1;\r\n        const selectedSensors = this.state.sensors;\r\n        for (let i in selectedSensors) {\r\n            if (!selectedSensors.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            const sensor = selectedSensors[i];\r\n            if (sensor.id === oldSensor.id) {\r\n                index = i;\r\n            }\r\n        }\r\n        let selectedSensor;\r\n        for (let slot of this.state.allSlots) {\r\n            if (slot.id === slotId) {\r\n                for (let sensor of slot.sensors) {\r\n                    if (sensor.id === sensorId) {\r\n                        sensor.changed = true;\r\n                        selectedSensor = sensor;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let s of selectedSensors) {\r\n            if (s.id === selectedSensor.id) {\r\n                Toast.show('传感器重复!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        selectedSensors[index] = selectedSensor;\r\n        this.setState({sensors: selectedSensors,})\r\n    }\r\n\r\n    render() {\r\n        const {slot, sensors, sensorRemoveMode} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => '货道信息'}>\r\n                    <List.Item extra={slot.slotNo}>货道号</List.Item>\r\n                    <List.Item extra={slot.skuName}>SKU名称</List.Item>\r\n                    <List.Item extra={slot.skuNo}>SKU号</List.Item>\r\n                </List>\r\n                <List renderHeader={() => 'Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => this.renderSensorItem(sensor))\r\n                    }\r\n                    <List.Item>\r\n                        <WingBlank>\r\n                            <Flex justify={\"between\"}>\r\n                                <Flex.Item>\r\n                                    <Button type=\"warning\"\r\n                                            onClick={() => this.setState({sensorRemoveMode: !this.state.sensorRemoveMode})}>\r\n                                        {sensorRemoveMode ? '退出删除' : '删除'}\r\n                                    </Button>\r\n                                </Flex.Item>\r\n                                <Flex.Item>\r\n                                    <Button type=\"ghost\" onClick={() => this.addSensor()}\r\n                                            disabled={sensorRemoveMode}>添加</Button>\r\n                                </Flex.Item>\r\n                                <Flex.Item>\r\n                                    <Button type=\"primary\" disabled={sensorRemoveMode}\r\n                                            onClick={() => this.applySensors()}>保存</Button>\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </WingBlank>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    addSensor() {\r\n        for (let sensor of this.state.sensors) {\r\n            if (sensor.id < 0) {\r\n                Toast.show('请选择一个传感器!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        const {sensors} = this.state;\r\n        sensors.push({\r\n            id: -1,\r\n            deviceSn: '未选择',\r\n            changed: true,\r\n        });\r\n        this.setState({sensors});\r\n    }\r\n\r\n    openSensorOperations(sensor) {\r\n        const {sensorRemoveMode} = this.state;\r\n        if (!sensorRemoveMode) {\r\n            return;\r\n        }\r\n        ActionSheet.showActionSheetWithOptions(\r\n            {\r\n                options: SENSOR_OPERATIONS,\r\n                title: `传感器 ${sensor.deviceSn}`,\r\n                cancelButtonIndex: 2,\r\n                destructiveButtonIndex: 0,\r\n            },\r\n            index => {\r\n                if (index === 0) {\r\n                    Modal.alert('移除传感器',\r\n                        `移除传感器 ${sensor.deviceSn}?`,\r\n                        [\r\n                            {text: '取消'},\r\n                            {\r\n                                text: '移除',\r\n                                onPress: () => this.removeSensor(sensor),\r\n                            }\r\n                        ]);\r\n                }\r\n            })\r\n    }\r\n\r\n    removeSensor(sensor) {\r\n        const {sensors} = this.state;\r\n        const newSensors = [];\r\n        for (let i in sensors) {\r\n            if (!sensors.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            const s = sensors[i];\r\n            if (s.id === sensor.id) {\r\n                continue;\r\n            }\r\n            newSensors.push(s);\r\n        }\r\n        this.setState({sensors: newSensors});\r\n    }\r\n\r\n    applySensors() {\r\n        const sensorIds = this.state.sensors.map(v => v.id);\r\n        for (let id of sensorIds) {\r\n            if (id <= 0) {\r\n                Toast.show('Any sensor not selected!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        const slot = this.state.slot;\r\n        Modal.alert('Apply Sensor Setting', 'Do you want to apply this changes?', [{text: 'Cancel'}, {\r\n            text: 'Apply',\r\n            onPress: () => {\r\n                setSlotByIds(sensorIds, slot.id).then(res => {\r\n                    Toast.show('Apply Success!');\r\n                    const {sensors} = this.state;\r\n                    for (let s of sensors) {\r\n                        s.changed = false;\r\n                    }\r\n                    this.setState({sensors});\r\n                })\r\n            }\r\n        }])\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SlotSensorsSetting);\r\n","import React, {Component} from 'react';\r\nimport {dumpAll} from '../../../api/sensor';\r\nimport {Button, List, Modal, TextareaItem, WingBlank} from 'antd-mobile';\r\n\r\nclass Overview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        dumpAll().then(res => {\r\n            const sensors = res.sort((a, b) => a.address - b.address);\r\n            this.setState({sensors})\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.state;\r\n        return (\r\n            <div className=\"overview\">\r\n                <List renderHeader={() => 'All Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => (\r\n                            <List.Item key={sensor.id}>\r\n                                {this.renderSensorItem(sensor)}\r\n                            </List.Item>\r\n                        ))\r\n                    }\r\n                </List>\r\n                <WingBlank>\r\n                    <Button onClick={() => this.refresh()} type=\"primary\">刷新</Button>\r\n                </WingBlank>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {slot, connection} = sensor;\r\n        return (<div onClick={() => this.onSensorClick(sensor)}>\r\n            传感器:[id:{sensor.id}/address:{sensor.address}]\r\n            货道:[id:{slot && slot.id}/No:{slot && slot.slotNo}]\r\n            连接:[id:{connection && connection.id}/{connection && connection.target}]\r\n        </div>);\r\n    }\r\n\r\n    onSensorClick(sensor) {\r\n        const {connection, slot} = sensor;\r\n        sensor.slot = null;\r\n        sensor.connection = null;\r\n        const list = (<List renderHeader={() => '传感器'}>\r\n            <TextareaItem value={JSON.stringify(sensor)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(connection)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(slot)} autoHeight/>\r\n        </List>);\r\n        Modal.alert('Sensor', list);\r\n    }\r\n}\r\n\r\nexport default Overview;\r\n","import React, {Component} from 'react';\r\nimport {disconnectTcp, fetchDatabaseTables, fetchStatusTable, resetDatabase} from '../../../api/systemStatus';\r\nimport {Button, Flex, InputItem, List, Modal, Picker, Toast} from 'antd-mobile';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchSoftFilterLevel, updateSoftFilterLevel} from '../../../api/config';\r\nimport {setCompensationState} from '../../../api/slot';\r\nimport {cleanAllBackupSn, reloadSensors} from '../../../api/sensor';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\nconst renderConnectionStatus = status => {\r\n    if (status) {\r\n        return (<span style={{color: '#1F90E6'}}>Connected</span>)\r\n    } else {\r\n        return (<span style={{color: '#E94F4F'}}>Disconnected</span>)\r\n    }\r\n};\r\n\r\nconst SoftFilterLevelTable = {\r\n    0: '关闭[0]',\r\n    1: '低[1]',\r\n    2: '中[2]',\r\n    3: '高[3]',\r\n};\r\n\r\nconst SoftFilterLevels = [\r\n    {\r\n        label: SoftFilterLevelTable[3],\r\n        value: 3,\r\n        key: 3,\r\n    },\r\n    {\r\n        label: SoftFilterLevelTable[2],\r\n        value: 2,\r\n        key: 2,\r\n    },\r\n    {\r\n        label: SoftFilterLevelTable[1],\r\n        value: 1,\r\n        key: 1,\r\n    },\r\n    {\r\n        label: SoftFilterLevelTable[0],\r\n        value: 0,\r\n        key: 0,\r\n    },\r\n];\r\n\r\nconst doSetCompensationState = state => {\r\n    setCompensationState(state).then(() => {\r\n        Toast.show(`补偿${state ? '开启' : '关闭'}成功！`, 3, false);\r\n    });\r\n};\r\n\r\nclass SystemCheck extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            statusTable: {\r\n                tcpApi: {},\r\n            },\r\n            databaseTables: [],\r\n            softFilterLevel: -1,\r\n            softFilterLevelLabel: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('系统检查');\r\n        this.refreshStatusTable();\r\n        this.refreshSoftFilterLevel();\r\n    }\r\n\r\n    refreshSoftFilterLevel() {\r\n        fetchSoftFilterLevel().then(res => {\r\n            const {value} = res;\r\n            const level = parseInt(value);\r\n            this.setState({\r\n                softFilterLevelLabel: SoftFilterLevelTable[level],\r\n                softFilterLevel: level,\r\n            });\r\n        });\r\n    }\r\n\r\n    refreshStatusTable() {\r\n        fetchStatusTable().then(res => {\r\n            this.setState({\r\n                statusTable: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    refreshDatabaseTables() {\r\n        fetchDatabaseTables().then(res => {\r\n            this.setState({databaseTables: res,})\r\n        });\r\n    }\r\n\r\n    showCompensationOperations() {\r\n        Modal.operation([\r\n            {\r\n                text: '关闭补偿', onPress: () => {\r\n                    doSetCompensationState(false);\r\n                }\r\n            },\r\n            {\r\n                text: '开启补偿', onPress: () => {\r\n                    doSetCompensationState(true);\r\n                }\r\n            },\r\n        ]);\r\n    }\r\n\r\n    render() {\r\n        const {statusTable, databaseTables, softFilterLevel, softFilterLevelLabel} = this.state;\r\n        const {tcpApi} = statusTable;\r\n        return (\r\n            <div className=\"system-check\">\r\n                <List renderHeader={() => 'SCADA_API状态'}>\r\n                    <List.Item extra={renderConnectionStatus(tcpApi.connection)}>\r\n                        连接状态\r\n                    </List.Item>\r\n                    <List.Item extra={tcpApi.ip}>\r\n                        IP地址\r\n                    </List.Item>\r\n                    <List.Item extra={tcpApi.port}>\r\n                        端口\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\"\r\n                               onClick={() => this.props.history.push({pathname: '/setting/message-log'})}>\r\n                        交互日志\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <Flex justify=\"between\">\r\n                            <Flex.Item>\r\n                                <Button type=\"warning\" onClick={() => this.reconnectTcp()}>重新连接</Button>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <Button type=\"primary\" onClick={() => this.refreshStatusTable()}>刷新</Button>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </List.Item>\r\n                </List>\r\n                <List renderHeader={() => '传感器信息'}>\r\n                    <List.Item arrow=\"horizontal\"\r\n                               onClick={() => this.props.history.push({pathname: '/setting/sensor-healthy'})}>\r\n                        传感器健康\r\n                    </List.Item>\r\n                    <Picker data={SoftFilterLevels}\r\n                            cols={1}\r\n                            title=\"软件滤波等级\"\r\n                            value={softFilterLevel}\r\n                            onChange={value => {\r\n                                this.setSoftFilterLevel(value)\r\n                            }}>\r\n                        <InputItem value={softFilterLevelLabel}>软滤波等级</InputItem>\r\n                    </Picker>\r\n                    <List.Item extra=\"Disable/Enable\"\r\n                               onClick={() => this.showCompensationOperations()}>\r\n                        补偿管理\r\n                    </List.Item>\r\n                    <List.Item extra=\"强制刷新货道数据\"\r\n                               onClick={() => this.showReloadConfirm()}>\r\n                        重新加载\r\n                    </List.Item>\r\n                    <List.Item extra=\"清除备份SN并重新收集\"\r\n                               onClick={() => this.showCleanBackupSnConfirm()}>\r\n                        重新收集SN\r\n                    </List.Item>\r\n                </List>\r\n                <List renderHeader={() => '数据库信息'}>\r\n                    {databaseTables.map(tableName => (<List.Item key={tableName}>{tableName}</List.Item>))}\r\n                    <List.Item>\r\n                        <Flex>\r\n                            <Flex.Item>\r\n                                <Button type=\"warning\" onClick={() => this.showDbResetConfirm()}>重置数据库</Button>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <Button type=\"primary\"\r\n                                        onClick={() => this.refreshDatabaseTables()}>数据表</Button>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showCleanBackupSnConfirm() {\r\n        Modal.alert('重新收集SN', '确认清空备份SN并重新收集？', [\r\n            {text: '取消'},\r\n            {\r\n                text: '确认', onPress: () => {\r\n                    cleanAllBackupSn().then(res => {\r\n                        Toast.show('备份SN清空成功，操作记录数为：' + res, 3, false);\r\n                    });\r\n                }\r\n            },\r\n        ]);\r\n    }\r\n\r\n    showReloadConfirm() {\r\n        Modal.alert('重新加载', '确认重新加载货道数据?', [\r\n            {text: '取消'},\r\n            {\r\n                text: '确认', onPress: () => {\r\n                    reloadSensors().then(() => {\r\n                        Toast.show('重新加载成功', 3, false);\r\n                    });\r\n                }\r\n            },\r\n        ]);\r\n    }\r\n\r\n    setSoftFilterLevel(value) {\r\n        updateSoftFilterLevel(value[0]).then(() => {\r\n            Toast.show('滤波等级设置成功，重新加载后生效！', 3, false);\r\n            this.refreshSoftFilterLevel();\r\n        });\r\n    }\r\n\r\n    reconnectTcp() {\r\n        Modal.alert('确定重连', '确定段考连接并重新建立连接？?', [{text: '取消'}, {\r\n            text: '确定', onPress() {\r\n                disconnectTcp().then(() => {\r\n                    Toast.show('断开成功，系统将在3秒后重新连接!', 3, false);\r\n                });\r\n            }\r\n        }])\r\n    }\r\n\r\n    showDbResetConfirm() {\r\n        Modal.alert('清空数据库？',\r\n            '该操作将会清空数据库中全部内容，操作完成后需要对货道重新扫描并重新下发库位信息！（该操作无法恢复）',\r\n            [{text: '取消'}, {text: '确定', onPress: () => this.doDbReset()}])\r\n    }\r\n\r\n    doDbReset() {\r\n        resetDatabase().then(() => {\r\n            Modal.alert('Database Reset Success!', 'Reset success, please scan again!');\r\n        });\r\n    }\r\n}\r\n\r\nconst component = connect(null, mapAction2Props)(SystemCheck);\r\nexport default withRouter(component);\r\n","import {request} from './request';\r\n\r\nexport const fetchStatusTable = () => {\r\n    return request({\r\n        url: '/api/status/',\r\n        method: 'get',\r\n    })\r\n};\r\n\r\nexport const disconnectTcp = () => {\r\n    return request({\r\n        url: '/api/status/tcp-disconnect',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const fetchDatabaseTables = () => {\r\n    return request({\r\n        url: '/api/status/tables',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchMessageLog = () => {\r\n    return request({\r\n        url: '/api/status/message-log',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const resetDatabase = () => {\r\n    return request({\r\n        url: '/api/status/_db-reset',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const sensorParams = address => {\r\n    return request({\r\n        url: `/api/status/${address}/_details`,\r\n        method: 'get'\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchMessageLog} from '../../../api/systemStatus';\r\nimport {Card, List, TextareaItem} from \"antd-mobile\";\r\nimport './MessageLog.sass'\r\n\r\nconst renderMessageItem = (message, index) => {\r\n    return (<List.Item key={index}>\r\n        <Card className=\"message-item\">\r\n            <Card.Header title={message.action} extra={message.type}/>\r\n            <Card.Body>\r\n                <TextareaItem value={JSON.stringify(message.data)} rows={3}/>\r\n            </Card.Body>\r\n            <Card.Footer content={message.seqNo}/>\r\n        </Card>\r\n    </List.Item>);\r\n};\r\n\r\nclass MessageLog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            logs: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshLogs();\r\n        this.refreshTimmer = setInterval(() => {\r\n            this.refreshLogs();\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.refreshTimmer);\r\n    }\r\n\r\n    refreshLogs() {\r\n        fetchMessageLog().then(res => {\r\n            this.setState({\r\n                logs: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {logs} = this.state;\r\n        return (\r\n            <div className=\"message-log\">\r\n                <List renderHeader={() => 'Message Logs'}>\r\n                    {\r\n                        logs.map(renderMessageItem)\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageLog;\r\n","import React, {Component} from 'react';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {ActionSheet, Card, Flex, List, Modal, Progress, Toast} from 'antd-mobile';\r\nimport {cleanCounter, sensorHealthy} from '../../../api/healthy';\r\nimport {\r\n    tryRecoveryElabelAddress,\r\n    tryRecoverySensorAddress,\r\n    tryRecoverySensorAddressWithOriginSn\r\n} from '../../../api/sensor';\r\nimport {\r\n    abortFirmwareUpgrade,\r\n    eLabelFirmwareUpgrade,\r\n    fetchUpgradeProgress,\r\n    sensorFirmwareUpgrade\r\n} from '../../../api/firmware';\r\nimport './SensorHealthy.sass';\r\n\r\nconst operations = ['重置计数器', '刷新', '取消'];\r\nconst ClickOperations = ['传感器固件升级', '电子标签固件升级', '恢复传感器地址', '恢复电子标签地址', '取消'];\r\nconst WARN_RATE = 0.1;\r\nconst UPGRADE_PROGRESS_STATE_TABLE = {\r\n    0: '等待升级',\r\n    1: '升级成功',\r\n    2: '升级失败',\r\n    3: '升级中',\r\n};\r\n\r\nclass SensorHealthy extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: [],\r\n            upgradePercent: 0,\r\n            upgradeProgress: {},\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshSensors();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n    }\r\n\r\n    tryReleaseUpgradeProgressTimmer() {\r\n        if (this.upgradeFirmwareTimmer) {\r\n            clearTimeout(this.upgradeFirmwareTimmer);\r\n        }\r\n    }\r\n\r\n    refreshSensors() {\r\n        sensorHealthy().then(res => {\r\n            const healthyList = res.sort((a, b) => a.sensor.address - b.sensor.address);\r\n            this.setState({\r\n                sensors: healthyList,\r\n                showUpgradeProgress: false,\r\n            });\r\n        });\r\n    }\r\n\r\n    refreshUpgradeProgress(cb) {\r\n        fetchUpgradeProgress().then(res => {\r\n            this.setState({upgradeProgress: res});\r\n            cb(res);\r\n        });\r\n    }\r\n\r\n    doAbortFirmwareUpgrade() {\r\n        abortFirmwareUpgrade().then(() => {\r\n            Toast.show('升级已取消', 3, false);\r\n        });\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n    }\r\n\r\n    render() {\r\n        const {sensors, showUpgradeProgress, upgradeProgress} = this.state;\r\n        let upgradeProgressPercent = 0;\r\n        if (upgradeProgress.total !== undefined && upgradeProgress.current !== undefined && upgradeProgress.total !== 0) {\r\n            upgradeProgressPercent = upgradeProgress.current / upgradeProgress.total * 100;\r\n        }\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Sensor Healthy'}>\r\n                    {\r\n                        sensors.map(helthy => (<List.Item key={helthy.sensor.id}>\r\n                            {this.renderSensorCard(helthy)}\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <Modal visible={showUpgradeProgress}\r\n                       title=\"升级进度\"\r\n                       transparent\r\n                       maskClosable={false}\r\n                       onClose={() => this.onUpgradeProgressModalClose()}\r\n                       footer={[{\r\n                           text: 'Abort Upgrade',\r\n                           disabled: true,\r\n                           onPress: () => {\r\n                               this.onUpgradeProgressModalClose();\r\n                               this.doAbortFirmwareUpgrade();\r\n                           }\r\n                       }]}>\r\n                    <p>{UPGRADE_PROGRESS_STATE_TABLE[upgradeProgress.state]}</p>\r\n                    <p>{upgradeProgressPercent.toFixed(2)}%</p>\r\n                    <Progress percent={upgradeProgressPercent} position=\"normal\"/>\r\n                </Modal>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperations()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    recoveryElabelAddress(healthy) {\r\n        const {sensor} = healthy;\r\n        const {id, elabelSn} = sensor;\r\n        const content = (<p>确认使用序列号[{elabelSn}]恢复地址?</p>);\r\n        Modal.alert(`电子标签[${sensor.address}]地址恢复`, content, [\r\n            {\r\n                text: '确认', onPress: () => {\r\n                    tryRecoveryElabelAddress(id).then(res => {\r\n                        Toast.show(`${res.address}:恢复成功`, 3, false);\r\n                    });\r\n                }\r\n            },\r\n            {text: '取消'},\r\n        ]);\r\n    }\r\n\r\n    recoverySensorAddress(healthy) {\r\n        const {sensor} = healthy;\r\n        const {id, deviceSn, sensorSn} = sensor;\r\n        const content = (<p>初始SN:[{deviceSn}]<br/>备份SN:[{sensorSn}]<br/>确认使用该SN恢复地址?</p>);\r\n        Modal.alert(`传感器[${sensor.address}]地址恢复`, content, [\r\n            {\r\n                text: '使用新SN恢复', onPress: () => {\r\n                    tryRecoverySensorAddress(id).then(res => {\r\n                        Toast.show(`${res.address}:恢复成功`, 3, false);\r\n                    });\r\n                }\r\n            },\r\n            {\r\n                text: '使用原SN恢复', onPress: () => {\r\n                    tryRecoverySensorAddressWithOriginSn(id).then(res => {\r\n                        Toast.show(`${res.address}:恢复成功`, 3, false);\r\n                    });\r\n                }\r\n            },\r\n            {text: '取消'},\r\n        ]);\r\n    }\r\n\r\n    onCardClick(healthy) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: ClickOperations,\r\n            title: '操作菜单',\r\n            cancelButtonIndex: ClickOperations.length - 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.upgradeFirmware(healthy);\r\n                    break;\r\n                case 1:\r\n                    this.upgradeElabelFirmware(healthy);\r\n                    break;\r\n                case 2:\r\n                    this.recoverySensorAddress(healthy);\r\n                    break;\r\n                case 3:\r\n                    this.recoveryElabelAddress(healthy);\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    upgradeFirmware(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const total = packageCounter.totalSuccess + packageCounter.totalErrors;\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.totalErrors / total));\r\n        let title = '';\r\n        let content = '';\r\n        let warn = false;\r\n        const errorRateInPer = (errorsRate * 100).toFixed(2);\r\n        if (errorsRate > WARN_RATE) {\r\n            const minRate = (WARN_RATE * 100).toFixed(2);\r\n            title = '谨慎升级！！！';\r\n            content = `传感器${sensor.address}的网络丢包率为${errorRateInPer}%，在极限值${minRate}%下，建议通过串口升级！`;\r\n            warn = true;\r\n        } else {\r\n            title = '升级确认';\r\n            content = `传感${sensor.address}器的网络丢包率为${errorRateInPer}%,升级后请手动reload启动重力服务！`;\r\n            warn = false;\r\n        }\r\n        Modal.alert(title, content, [\r\n            {\r\n                text: warn ? '仍要升级' : '升级',\r\n                onPress: () => {\r\n                    this.doFirmwareUpgrade(sensor);\r\n                }\r\n            },\r\n            {\r\n                text: '取消升级',\r\n            }\r\n        ]);\r\n    }\r\n\r\n    upgradeElabelFirmware(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const total = packageCounter.elabelSuccess + packageCounter.elabelErrors;\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.elabelErrors / total));\r\n        let title = '';\r\n        let content = '';\r\n        let warn = false;\r\n        const errorRateInPer = (errorsRate * 100).toFixed(2);\r\n        if (errorsRate > WARN_RATE) {\r\n            const minRate = (WARN_RATE * 100).toFixed(2);\r\n            title = '谨慎升级！！！';\r\n            content = `电子标签器${sensor.address}的网络丢包率为${errorRateInPer}%，在极限值${minRate}%下，建议通过串口升级！`;\r\n            warn = true;\r\n        } else {\r\n            title = '升级确认';\r\n            content = `电子标签${sensor.address}器的网络丢包率为${errorRateInPer}%,升级后请手动reload启动重力服务！`;\r\n            warn = false;\r\n        }\r\n        Modal.alert(title, content, [\r\n            {\r\n                text: warn ? '仍要升级' : '升级',\r\n                onPress: () => {\r\n                    this.doElabelFirmwareUpgrade(sensor);\r\n                }\r\n            },\r\n            {\r\n                text: '取消升级',\r\n            }\r\n        ])\r\n    }\r\n\r\n    doFirmwareUpgrade(sensor) {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n        sensorFirmwareUpgrade(sensor.id).then(() => {\r\n            Toast.show('升级已完成', 2, false);\r\n            this.tryReleaseUpgradeProgressTimmer();\r\n        });\r\n        this.showUpgradeProgress();\r\n        this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n    }\r\n\r\n    doElabelFirmwareUpgrade(sensor) {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n        eLabelFirmwareUpgrade(sensor.id).then(() => {\r\n            Toast.show('升级已完成', 2, false);\r\n            this.tryReleaseUpgradeProgressTimmer();\r\n        });\r\n        this.showUpgradeProgress();\r\n        this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n    }\r\n\r\n    refreshUpgradeProgressCb() {\r\n        return () => {\r\n            this.upgradeFirmwareTimmer = setTimeout(() => {\r\n                this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n            }, 500);\r\n        };\r\n    }\r\n\r\n    showUpgradeProgress() {\r\n        this.setState({showUpgradeProgress: true});\r\n    }\r\n\r\n    onUpgradeProgressModalClose() {\r\n        this.setState({showUpgradeProgress: false});\r\n    }\r\n\r\n    renderSensorCard(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const zeroOffset = `ZeroOffset:${sensor.zeroReference}`;\r\n        const total = packageCounter.totalSuccess + packageCounter.totalErrors;\r\n        const successRate = total === 0 ? 0 : ((packageCounter.totalSuccess / total) * 100).toFixed(0);\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.totalErrors / total) * 100).toFixed(0);\r\n\r\n        const elabelSuccess = packageCounter.elabelSuccess;\r\n        const elabelErrors = packageCounter.elabelErrors;\r\n        const eLabelTotal = elabelErrors + elabelSuccess;\r\n        const elabelSuccessRate = eLabelTotal === 0 ? 0 : ((elabelSuccess / eLabelTotal) * 100).toFixed(0);\r\n        const elabelErrorosRate = eLabelTotal === 0 ? 0 : ((elabelErrors / eLabelTotal) * 100).toFixed(0);\r\n        const elabelContinueErrors = packageCounter.elabelContinueErrors;\r\n        return (<Card key={sensor.id} onClick={() => this.onCardClick(healthy)}>\r\n            <Card.Header title={sensor.address} extra={sensor.deviceSn}/>\r\n            <Card.Body className=\"healthy-package-counter\">\r\n                <Flex>\r\n                    <Flex.Item>\r\n                        <div className=\"total\">\r\n                            <p className=\"title\">SUCCESS</p>\r\n                            <p className=\"value\">{packageCounter.totalSuccess}/{successRate}%</p>\r\n                            <p className=\"title\">ELABEL SUCCESS</p>\r\n                            <p className=\"value\">{elabelSuccess}/{elabelSuccessRate}%</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <div className=\"error\">\r\n                            <p className=\"title\">ERRORS</p>\r\n                            <p className=\"value\">{packageCounter.totalErrors}/{errorsRate}%</p>\r\n                            <p className=\"title\">ELABEL ERRORS</p>\r\n                            <p className=\"value\">{elabelErrors}/{elabelErrorosRate}%</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <div className=\"continue\">\r\n                            <p className=\"title\">CONTINUE</p>\r\n                            <p className=\"value\">{packageCounter.continueErrors}</p>\r\n                            <p className=\"title\">ELABEL CONTINUE</p>\r\n                            <p className=\"value\">{elabelContinueErrors}</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            </Card.Body>\r\n            <Card.Footer content={zeroOffset}/>\r\n        </Card>);\r\n    }\r\n\r\n    showOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: operations,\r\n            title: 'Operations',\r\n            cancelButtonIndex: operations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    //Clean\r\n                    this.showCleanCounterConfirm();\r\n                    break;\r\n                case 1:\r\n                    this.refreshSensors();\r\n                    break;\r\n                case 2:\r\n                    //Cancel\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    showCleanCounterConfirm() {\r\n        Modal.alert('Clean Counter?', 'Clean counter?', [\r\n            {text: 'Cancel'},\r\n            {text: 'Yes', onPress: () => this.doCleanCounter()}\r\n        ]);\r\n    }\r\n\r\n    doCleanCounter() {\r\n        cleanCounter().then(() => {\r\n            Toast.show('Clean success!', 1, false);\r\n        })\r\n    }\r\n}\r\n\r\nexport default SensorHealthy;\r\n","import {request} from './request';\r\n\r\nexport const sensorHealthy = () => {\r\n    return request({\r\n        url: '/api/sensor-healthy/_healthy',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const cleanCounter = () => {\r\n    return request({\r\n        url: '/api/sensor-healthy/_clean-counter',\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const sensorFirmwareUpgrade = sensorId => {\r\n    return request({\r\n        url: `/api/firmware/${sensorId}/_upgrade`,\r\n        method: 'post',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const eLabelFirmwareUpgrade = sensorId => {\r\n    return request({\r\n        url: `/api/firmware/${sensorId}/_elabel-upgrade`,\r\n        method: 'post',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchUpgradeProgress = () => {\r\n    return request({\r\n        url: '/api/firmware/_upgrade-progress',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const abortFirmwareUpgrade = () => {\r\n    return request({\r\n        url: '/api/firmware/_abort-upgrade',\r\n        method: 'post',\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {sensorParams} from '../../../api/systemStatus';\r\nimport {ActionSheet, List} from 'antd-mobile';\r\nimport FloatButton from \"../../commons/FloatButton\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst operations = ['刷新', '取消'];\r\n\r\nclass SensorDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensor: {},\r\n            slot: {},\r\n            sensorParams: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('传感器详细参数');\r\n        this.props.setTabBarState(false);\r\n        const address = this.props.match.params.address;\r\n        this.refreshParams(address);\r\n    }\r\n\r\n    refreshParams(address) {\r\n        sensorParams(address).then(res => {\r\n            const {slot, sensor} = res;\r\n            delete res.slot;\r\n            delete res.sensor;\r\n            const params = [];\r\n            for (let name in res) {\r\n                if (!res.hasOwnProperty(name)) {\r\n                    continue;\r\n                }\r\n                params.push({\r\n                    name: name,\r\n                    value: res[name],\r\n                });\r\n            }\r\n            this.setState({\r\n                sensor: sensor,\r\n                slot: slot,\r\n                sensorParams: params,\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {sensor, slot, sensorParams} = this.state;\r\n        return (\r\n            <div className=\"sensor-details\">\r\n                <List renderHeader={() => '传感器基本信息'}>\r\n                    <List.Item extra={sensor.deviceSn}>序列号</List.Item>\r\n                    <List.Item extra={sensor.hasElabel ? 'yes' : 'no'}>电子标签</List.Item>\r\n                    <List.Item extra={sensor.address}>地址</List.Item>\r\n                    <List.Item extra={sensor.zeroReference}>零点偏移</List.Item>\r\n                    <List.Item extra={slot.slotNo}>绑定货道号</List.Item>\r\n                    <List.Item extra={slot.skuApw}>SKU单重</List.Item>\r\n                    <List.Item extra={slot.skuName}>SKU名称</List.Item>\r\n                    <List.Item extra={slot.skuTolerance}>SKU允差</List.Item>\r\n                    <List.Item extra={slot.skuNo}>SKU号</List.Item>\r\n                </List>\r\n                <List renderHeader={() => '传感器硬件信息'}>\r\n                    {\r\n                        sensorParams.map(param => (\r\n                            <List.Item key={param.name} extra={JSON.stringify(param.value)}>\r\n                                {param.name}\r\n                            </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperations()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: operations,\r\n            title: '操作选择',\r\n            cancelButtonIndex: operations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.refreshParams(this.props.match.params.address);\r\n                    break;\r\n                case 1:\r\n                    //Cancel\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SensorDetails);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {List} from 'antd-mobile';\r\nimport {fetchThSensors} from '../../../api/thSensor';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass ThSensorSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('温湿度传感器');\r\n        this.refreshSensors();\r\n    }\r\n\r\n    refreshSensors() {\r\n        fetchThSensors().then(res => {\r\n            this.setState({\r\n                sensors: res\r\n            });\r\n        });\r\n    }\r\n\r\n    toDetail(sensor) {\r\n        this.props.history.push({\r\n            pathname: `/setting/${sensor.id}/th-detail`,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.state;\r\n        return (\r\n            <div className=\"th-sensors\">\r\n                <List renderHeader={() => '温湿度传感器'}>\r\n                    {\r\n                        sensors.map(sensor => (\r\n                            <List.Item key={sensor.id} arrow=\"horizontal\" onClick={() => this.toDetail(sensor)}>\r\n                                {sensor.no} [{sensor.address}]\r\n                            </List.Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(ThSensorSetting);\r\n","import {request} from './request';\r\n\r\nexport const fetchThSensors = () => {\r\n    return request({\r\n        url: '/api/th-sensor/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchOneSensor = id => {\r\n    return request({\r\n        url: `/api/th-sensor/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setRange = data => {\r\n    return request({\r\n        url: `/api/th-sensor/${data.id}/_range`,\r\n        method: 'post',\r\n        data\r\n    });\r\n};\r\n\r\nexport const calibrateTemp = (id, temp) => {\r\n    return request({\r\n        url: `/api/th-sensor/${id}/_calibrate-temperature`,\r\n        method: 'post',\r\n        data: {\r\n            currentTemperature: temp,\r\n        },\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport './LineCharts.sass';\r\nimport PropTypes from 'prop-types';\r\nimport echarts from 'echarts';\r\n\r\nclass LineCharts extends Component {\r\n    static propTypes = {\r\n        width: PropTypes.number.isRequired,\r\n        height: PropTypes.number.isRequired,\r\n        xData: PropTypes.array.isRequired,\r\n        yData: PropTypes.array.isRequired,\r\n    };\r\n    static defaultProps = {\r\n        width: 1000,\r\n        height: 300,\r\n        xData: [],\r\n        yData: [],\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    onCanvasLoad(canvas) {\r\n        if (!canvas || canvas === this.canvas) {\r\n            return;\r\n        }\r\n        this.canvas = canvas;\r\n        this.charts = echarts.init(this.canvas);\r\n        this.refreshCharts();\r\n    }\r\n\r\n    refreshCharts() {\r\n        const {xData, yData} = this.props;\r\n        const series = [];\r\n        const names = [];\r\n        for (let y of yData) {\r\n            names.push(y.name);\r\n            series.push({\r\n                ...y,\r\n                type: 'line',\r\n            });\r\n        }\r\n        const option = {\r\n            tooltip: {\r\n                trigger: 'axis'\r\n            },\r\n            legend: {\r\n                data: names,\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                data: xData\r\n            },\r\n            yAxis: {\r\n                type: 'value'\r\n            },\r\n            series: series,\r\n        };\r\n        this.charts.setOption(option);\r\n    }\r\n\r\n    render() {\r\n        const {width, height} = this.props;\r\n        return (\r\n            <canvas ref={canvas => this.onCanvasLoad(canvas)}\r\n                    className=\"charts\"\r\n                    height={height}\r\n                    width={width}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LineCharts;\r\n","import React, {Component} from 'react';\r\nimport {calibrateTemp, fetchOneSensor, setRange} from '../../../api/thSensor';\r\nimport {reloadSensors} from '../../../api/sensor';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {Button, Card, Flex, InputItem, List, Modal, Toast} from 'antd-mobile';\r\nimport {fetchSensorDataLog} from '../../../api/tempHumidityLog';\r\nimport LineCharts from '../../commons/LineCharts';\r\nimport {thSensorStateText} from '../../../util/DataConvertor';\r\n\r\nconst maxAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass ThSensorDetailsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensor: {},\r\n            dataLogs: [],\r\n            chartsXData: [],\r\n            chartsYData: [],\r\n            currentTemp: '0',\r\n        };\r\n    }\r\n\r\n    refreshDataLog() {\r\n        fetchSensorDataLog(this.sensorId).then(res => {\r\n            const xData = [];\r\n            const tempData = [];\r\n            // const humiData = [];\r\n            // const maxHumiData = [];\r\n            // const minHumiData = [];\r\n            const maxTempData = [];\r\n            const minTempData = [];\r\n            for (let log of res) {\r\n                const {\r\n                    createTime,\r\n                    temperature,\r\n                    // humidity,\r\n                    // maxHumidity, minHumidity,\r\n                    maxTemperature, minTemperature\r\n                } = log;\r\n                const date = new Date(createTime);\r\n                const timeStr = `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\r\n                xData.push(timeStr);\r\n                tempData.push(temperature);\r\n                // humiData.push(humidity);\r\n                // maxHumiData.push(maxHumidity);\r\n                // minHumiData.push(minHumidity);\r\n                maxTempData.push(maxTemperature);\r\n                minTempData.push(minTemperature);\r\n            }\r\n            const yData = [\r\n                {name: '温度', data: tempData},\r\n                // {name: '湿度', data: humiData},\r\n                // maxHumiData, minHumiData,\r\n                {name: '温度上限', data: maxTempData}, {name: '温度下限', data: minTempData},\r\n            ];\r\n            this.setState({\r\n                dataLogs: res,\r\n                chartsXData: xData,\r\n                chartsYData: yData,\r\n            });\r\n            this.charts.refreshCharts();\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {id} = this.props.match.params;\r\n        this.sensorId = id;\r\n        this.props.setTitle('温湿度传感器报警范围');\r\n        this.refreshDataLog();\r\n        fetchOneSensor(id).then(res => {\r\n            this.setState({\r\n                sensor: res,\r\n            });\r\n        })\r\n    }\r\n\r\n    setSensorData(data) {\r\n        const {sensor} = this.state;\r\n        this.setState({\r\n            sensor: {\r\n                ...sensor,\r\n                ...data,\r\n            }\r\n        });\r\n    }\r\n\r\n    calibrateTemp() {\r\n        const {currentTemp} = this.state;\r\n        const {id} = this.props.match.params;\r\n        if (!currentTemp.match(/^-?\\d+\\.?\\d*$/)) {\r\n            Toast.show('请输入正确的温度值', 3, false);\r\n            return;\r\n        }\r\n        Modal.alert('确定标定？', '确定校准该温度传感器？', [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '确定',\r\n                    onPress() {\r\n                        calibrateTemp(id, currentTemp).then(res => {\r\n                            Toast.show('标定成功', 3, false);\r\n                        });\r\n                    }\r\n                }\r\n            ]\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const {sensor, dataLogs, chartsXData, chartsYData, currentTemp} = this.state;\r\n        return (\r\n            <div className=\"th-sensor-detail\">\r\n                <List renderHeader={() => '报警范围'}>\r\n                    <InputItem value={sensor.maxTemperature} labelNumber={10}\r\n                               onChange={text => this.setSensorData({maxTemperature: text})}>温度上限(°C)：</InputItem>\r\n                    <InputItem value={sensor.minTemperature} labelNumber={10}\r\n                               onChange={text => this.setSensorData({minTemperature: text})}>温度下限(°C)：</InputItem>\r\n                    <InputItem value={sensor.maxHumidity} labelNumber={10}\r\n                               onChange={text => this.setSensorData({maxHumidity: text})}>湿度上限( %)：</InputItem>\r\n                    <InputItem value={sensor.minHumidity} labelNumber={10}\r\n                               onChange={text => this.setSensorData({minHumidity: text})}>湿度下限( %)：</InputItem>\r\n                    <List.Item>\r\n                        <Button type=\"primary\" onClick={() => this.updateRange()}>保存</Button>\r\n                    </List.Item>\r\n                </List>\r\n                <Card>\r\n                    <Card.Header\r\n                        title=\"温度标定\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <InputItem value={currentTemp}\r\n                                       onChange={txt => this.setState({currentTemp: txt})}>当前温度：</InputItem>\r\n                            <List.Item>\r\n                                <Button type=\"primary\" onClick={() => this.calibrateTemp()}>标定</Button>\r\n                            </List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n                <Card>\r\n                    <Card.Header title=\"历史数据\"/>\r\n                    <Card.Body>\r\n                        <LineCharts width={500} height={300} xData={chartsXData} yData={chartsYData}\r\n                                    ref={charts => this.charts = charts}/>\r\n                    </Card.Body>\r\n                    <Card.Footer content={dataLogs.length}/>\r\n                </Card>\r\n                <List renderHeader={() => '温湿度日志'}>\r\n                    {\r\n                        dataLogs.map(log => (<List.Item key={log.id}>\r\n                            <Flex>\r\n                                <Flex.Item>{log.createTime}</Flex.Item>\r\n                                <Flex.Item>温度:{log.temperature}°C({thSensorStateText(log.temperatureState)})</Flex.Item>\r\n                                {/*<Flex.Item>湿度:{log.humidity}%({thSensorStateText(log.humidityState)})</Flex.Item>*/}\r\n                            </Flex>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateRange() {\r\n        setRange(this.state.sensor).then(res => {\r\n            this.setState({sensor: res});\r\n            this.showReloadConfirm();\r\n        });\r\n    }\r\n\r\n    showReloadConfirm() {\r\n        Modal.alert('重新加载', '数据已更新，是否重新加载生效？', [\r\n            {\r\n                text: 'No'\r\n            },\r\n            {\r\n                text: 'Yes',\r\n                onPress: () => {\r\n                    reloadSensors().then(() => {\r\n                        Toast.show('重新加载成功', 1, false);\r\n                    });\r\n                }\r\n            }\r\n        ]);\r\n    }\r\n}\r\n\r\nexport default connect(null, maxAction2Props)(ThSensorDetailsSetting);\r\n","import {request} from './request';\r\n\r\nexport const fetchSensorDataLog = sensorId => {\r\n    return request({\r\n        url: '/api/temp-humidity-log/_sensor-logs',\r\n        method: 'get',\r\n        params: {\r\n            sensorId: sensorId,\r\n        }\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {Button, Card, List, Modal, TextareaItem, Toast} from 'antd-mobile';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {fetchExtraPageUri, setExtraPageUri} from '../../../api/config';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass ExtraPageSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pageUri: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('扩展页面配置');\r\n        fetchExtraPageUri().then(res => {\r\n            this.setState({\r\n                pageUri: res.value,\r\n            });\r\n        }).catch(err => {\r\n            const data = err.data;\r\n            if (data) {\r\n                const {code} = data;\r\n                if (code === 404) {\r\n                    this.setState({\r\n                        pageUri: '页面路径未设置',\r\n                    })\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    setPageUri() {\r\n        const {pageUri} = this.state;\r\n        const pattern = /^[a-zA-z]+:\\/\\/[^\\\\s]*$/;\r\n        if (!pageUri.match(pattern)) {\r\n            Modal.alert('输入提示', '请输入正确的URI!', [{text: '知道了'}]);\r\n            return;\r\n        }\r\n        setExtraPageUri(pageUri).then(res => {\r\n            Toast.show('配置成功', 3, false);\r\n        });\r\n    }\r\n\r\n    gotoExtraPage() {\r\n        this.props.history.push({\r\n            pathname: '/extra',\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {pageUri} = this.state;\r\n        return (\r\n            <div className=\"extra-page-setting\">\r\n                <Card>\r\n                    <Card.Header\r\n                        title=\"页面配置\"\r\n                        extra=\"页面路径配置\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <TextareaItem title=\"页面路径\"\r\n                                          autoHeight\r\n                                          value={pageUri}\r\n                                          onChange={text => this.setState({pageUri: text})}/>\r\n                            <List.Item>\r\n                                <Button type=\"primary\" onClick={() => this.setPageUri()}>保存</Button>\r\n                            </List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n                <Card>\r\n                    <Card.Header\r\n                        title=\"页面入口\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <List.Item arrow=\"horizontal\" onClick={() => this.gotoExtraPage()}>\r\n                                进入扩展页面\r\n                            </List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(ExtraPageSetting);\r\n","import React, {Component} from 'react';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport SensorSetting from './setting/SensorSetting'\r\nimport SettingMenu from './setting/SettingMenu'\r\nimport SlotSetting from './setting/SlotSetting'\r\nimport ConnectionSetting from './setting/ConnectionSetting'\r\nimport SlotDetailSetting from './setting/SlotDetailSetting'\r\nimport SystemSetting from './setting/SystemSetting'\r\nimport SystemPropsSetting from './setting/SystemPropsSetting'\r\nimport SlotSensorsSetting from './setting/SlotSensorsSetting'\r\nimport Overview from './setting/Overview'\r\nimport SystemCheck from './setting/SystemCheck'\r\nimport MessageLog from './setting/MessageLog'\r\nimport SensorHealthy from './setting/SensorHealthy'\r\nimport SensorDetails from './setting/SensorDetails'\r\nimport ThSensorSetting from './setting/ThSensorSetting'\r\nimport ThSensorDetailsSetting from './setting/ThSensorDetailsSetting'\r\nimport ExtraPageSetting from './setting/ExtraPageSetting'\r\nimport {mapStateAndAction} from '../../store/storeUtils';\r\n\r\nclass Setting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {showHeader, setTabBarState} = this.props;\r\n        showHeader(true);\r\n        setTabBarState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/setting/\" component={SettingMenu} exact/>\r\n                    <Route path=\"/setting/sensor\" component={SensorSetting} exact/>\r\n                    <Route path=\"/setting/slot\" component={SlotSetting} exact/>\r\n                    <Route path=\"/setting/connection\" component={ConnectionSetting} exact/>\r\n                    <Route path=\"/setting/slot-detail/:id\" component={SlotDetailSetting} exact/>\r\n                    <Route path=\"/setting/system\" component={SystemSetting} exact/>\r\n                    <Route path=\"/setting/system-props\" component={SystemPropsSetting} exact/>\r\n                    <Route path=\"/setting/slot-sensors/:id\" component={SlotSensorsSetting} exact/>\r\n                    <Route path=\"/setting/overview\" component={Overview} exact/>\r\n                    <Route path=\"/setting/system-check\" component={SystemCheck} exact/>\r\n                    <Route path=\"/setting/message-log\" component={MessageLog} exact/>\r\n                    <Route path=\"/setting/sensor-healthy\" component={SensorHealthy} exact/>\r\n                    <Route path=\"/setting/th-sensor\" component={ThSensorSetting} exact/>\r\n                    <Route path=\"/setting/:address/sensor-details\" component={SensorDetails} exact/>\r\n                    <Route path=\"/setting/:id/th-detail\" component={ThSensorDetailsSetting} exact/>\r\n                    <Route path=\"/setting/extra-setting\" component={ExtraPageSetting} exact/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default mapStateAndAction(Setting);\r\n","import React, {Component} from 'react';\r\nimport {Button, InputItem, List, Toast} from \"antd-mobile\";\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport './Address.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Address extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('设备编址');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"address\">\r\n                <List renderHeader={() => '编址'}>\r\n                    <InputItem>设备SN</InputItem>\r\n                    <InputItem>地址</InputItem>\r\n                    <List.Item>\r\n                        <Button type=\"primary\">编址</Button>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中', 1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Address);\r\n","import React, {Component} from 'react';\r\nimport {setTitle} from \"../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport MessageLog from './setting/MessageLog';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Logs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Logs');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MessageLog/>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Logs);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {Carousel, List, WhiteSpace, WingBlank} from 'antd-mobile';\r\nimport './About.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass About extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            drawerOpen: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('About');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"about\">\r\n                <WhiteSpace/>\r\n                <WingBlank>\r\n                    <Carousel\r\n                        autoplay={true}\r\n                        infinite\r\n                        className=\"headerCarousel\"\r\n                    >\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#FF9808'}}>\r\n                            <div className=\"title\">\r\n                                磐石电气（常州）有限公司\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#3171FA'}}>\r\n                            <div className=\"title\">\r\n                                MonolithIoT\r\n                            </div>\r\n                        </div>\r\n                    </Carousel>\r\n                </WingBlank>\r\n                <WingBlank className=\"article\">\r\n                    <h1 className=\"title\">关于我们</h1>\r\n                    <div className=\"text\">\r\n                        <p>\r\n                            磐石电气(常州)有限公司,是一家高科技智能测量装备研发及生产企业，把传统体积，重量的测量数字化物联网化，可以与WMS,ERP，SAP等企业管理软件相结合，便于企业更直观的管理自己的仓储，物流等。磐石电气下设研发部，工程部，业务部，有较强的设计，研发和生产能力，可为客户提供嵌入式计算机系统产品设计，开发，系统集成，工程实施等服务。\r\n                        </p>\r\n                        <p>\r\n                            随着公司的发展，主要产品有自主研发的智能数字卷尺，智能手动叉车秤，安卓智能称重终端，静态/动态DWS等各种物联网类智能称重量方设备及软件定制系统,可为客户最大程度地提供智能化系统化的测量系统解决方案。产品广泛应用于快递物流、生鲜供应、港口订舱、仓储、工业离散制造及各种以长度(含面\r\n                            积、体积)测量为手段的民用、商用用途中。凭着可靠的产品质量和良好的售后服务，我公司已与顺丰、中国邮政、京东、国际快递DHL、华为等多家知名企业合作。\r\n                        </p>\r\n                        <p>\r\n                            目前公司已申请中国专利24项,美国专利1项，并拥有一支以博士、硕士为主的优秀研发团队，具有较高的研发能力和管理水平，现有多名员工曾在外企作为技术骨干，承传欧美设计制造理念，并采用先进的产品生命周期管理（PLM），重视产品质量，为公司产品的技术引领、技术创新和公司的可持续发展奠定了坚实基础。\r\n                        </p>\r\n                    </div>\r\n                </WingBlank>\r\n                <List renderHeader=\"TestEntries\">\r\n                    <List.Item arrow=\"horizontal\" onClick={() => {\r\n                        this.props.history.push({pathname: '/pid'})\r\n                    }}>\r\n                        PID Animation\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\" onClick={() => {\r\n                        this.props.history.push({pathname: '/dstar'})\r\n                    }}>\r\n                        DStar Animation\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\" onClick={() => {\r\n                        this.props.history.push({pathname: '/slide'})\r\n                    }}>\r\n                        Slide Animation\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(About);\r\n","import React, {Component} from 'react';\r\nimport {List} from 'antd-mobile';\r\nimport './PidAnimation.sass';\r\n\r\nconst currentColor = '#3171FA';\r\nconst targetColor = '#666666';\r\n// 比例参数\r\nconst P = 0.6;\r\n// 积分参数\r\nconst I = 0.02;\r\n// 微分参数\r\nconst D = 0.1;\r\n\r\nconst CanvasWidth = 300, CanvasHeight = 300;\r\nconst PointSize = 4;\r\n\r\nclass PidAnimation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            target: {\r\n                x: 150,\r\n                y: 150,\r\n            },\r\n            current: {\r\n                x: 150,\r\n                y: 150,\r\n            },\r\n        };\r\n        this.xSum = 0;\r\n        this.lastErrorX = 0;\r\n        this.ySum = 0;\r\n        this.lastErrorY = 0;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timmer = setInterval(() => {\r\n            this.onTimer();\r\n        }, 10);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timmer);\r\n    }\r\n\r\n    render() {\r\n        const {target, current} = this.state;\r\n        return (\r\n            <div className=\"pid\">\r\n                <div className=\"wrapper\">\r\n                    <List renderHeader={() => 'Params'}>\r\n                        <List.Item extra={P}>P</List.Item>\r\n                        <List.Item extra={I}>I</List.Item>\r\n                        <List.Item extra={D}>D</List.Item>\r\n                        <List.Item extra={`${current.x},${current.y}`}>Current</List.Item>\r\n                        <List.Item extra={`${target.x},${target.y}`}>Target</List.Item>\r\n                    </List>\r\n                    <canvas ref={canvas => this.onCanvasLoad(canvas)} width={CanvasWidth} height={CanvasHeight}>\r\n                        Unsupported Canvas\r\n                    </canvas>\r\n                </div>\r\n                <div className=\"stake\">None</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onCanvasLoad(canvas) {\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n        if (this.canvas === canvas) {\r\n            return;\r\n        }\r\n        this.canvas = canvas;\r\n        canvas.onclick = e => {\r\n            const {offsetX, offsetY} = e;\r\n            this.onCanvasClick(offsetX, offsetY);\r\n        };\r\n        this.canvasContext = canvas.getContext('2d');\r\n        this.reDrawPoint();\r\n    }\r\n\r\n    onCanvasClick(x, y) {\r\n        this.xSum = 0;\r\n        this.ySum = 0;\r\n        this.setState({\r\n            target: {\r\n                x: x,\r\n                y: y,\r\n            }\r\n        });\r\n        this.reDrawPoint();\r\n    }\r\n\r\n    reDrawPoint() {\r\n        const {target, current} = this.state;\r\n        this.canvasContext.clearRect(0, 0, CanvasWidth, CanvasHeight);\r\n        this.canvasContext.fillStyle = targetColor;\r\n        this.canvasContext.fillRect(target.x, target.y, PointSize, PointSize);\r\n        this.canvasContext.fillStyle = currentColor;\r\n        this.canvasContext.fillRect(current.x, current.y, PointSize, PointSize);\r\n    }\r\n\r\n    onTimer() {\r\n        const {target, current} = this.state;\r\n\r\n        const errorX = (target.x - current.x) / 10;\r\n        this.xSum += errorX;\r\n        const derivativeX = (errorX - this.lastErrorX) / 10;\r\n        this.lastErrorX = errorX;\r\n\r\n        let outX = current.x + (P * errorX + I * this.xSum + D * derivativeX);\r\n        outX = Math.min(outX, CanvasWidth - PointSize);\r\n        outX = Math.max(outX, 0);\r\n        outX = parseInt(outX);\r\n\r\n        const errorY = (target.y - current.y) / 10;\r\n        this.ySum += errorY;\r\n        const derivativeY = (errorY - this.lastErrorY) / 10;\r\n        this.lastErrorY = errorY;\r\n\r\n        let outY = current.y + (P * errorY + I * this.ySum + D * derivativeY);\r\n        outY = Math.min(outY, CanvasHeight - PointSize);\r\n        outY = Math.max(outY, 0);\r\n        outY = parseInt(outY);\r\n        if (current.x === outX && current.y === outY) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            current: {\r\n                x: outX,\r\n                y: outY,\r\n            }\r\n        });\r\n        this.reDrawPoint();\r\n    }\r\n}\r\n\r\nexport default PidAnimation;\r\n","const SQRT2 = 1.4142135623730951;\r\n\r\nconst calcDistance = (pa, pb) => {\r\n    const dx = Math.abs(pa.tx - pb.tx);\r\n    const dy = Math.abs(pa.ty - pb.ty);\r\n    return Math.max(dx, dy);\r\n};\r\nconst calcCoast = (current, dx, dy) => {\r\n    if (dx === 0) {\r\n        return Math.abs(dy);\r\n    }\r\n    if (dy === 0) {\r\n        return Math.abs(dx);\r\n    }\r\n    return SQRT2;\r\n};\r\nconst pointEquals = (pa, pb) => {\r\n    return pa.tx === pb.tx && pa.ty === pb.ty;\r\n};\r\nconst MAX_STEP = 1000;\r\nconst calcMin = (list, current, target) => {\r\n    let minCoastPoint = list[0];\r\n    let minNum = 999999999;\r\n    for (const point of list) {\r\n        const coast = calcCoast(point, point.tx - current.tx, point.ty - current.ty);\r\n        const distance = calcDistance(point, target);\r\n        const num = coast + distance;\r\n        if (num < minNum) {\r\n            minNum = num;\r\n            minCoastPoint = point;\r\n        }\r\n    }\r\n    return minCoastPoint;\r\n};\r\n\r\nclass CloseList {\r\n    constructor() {\r\n        this.pointTable = {};\r\n        this.priority = 0;\r\n    }\r\n\r\n    push(point) {\r\n        this.priority++;\r\n        point.priority = this.priority;\r\n        this.pointTable[point.key] = point;\r\n    }\r\n\r\n    hasKey(key) {\r\n        return this.pointTable.hasOwnProperty(key);\r\n    }\r\n\r\n    asPath() {\r\n        const res = [];\r\n        for (const key in this.pointTable) {\r\n            if (!this.pointTable.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            res.push(this.pointTable[key]);\r\n        }\r\n        return res.sort((a, b) => b.priority - a.priority);\r\n    }\r\n}\r\n\r\nclass DStar {\r\n    constructor(props) {\r\n        const {onRePlan, start, target, requestPoint, onError, mapSize, updateCurrent} = props;\r\n        this.onRePlan = onRePlan;\r\n        this.current = start;\r\n        this.target = target;\r\n        this.requestPoint = requestPoint;\r\n        this.onError = onError;\r\n        this.mapSize = mapSize;\r\n        this.updateCurrent = updateCurrent;\r\n        this.wallCache = {};\r\n        this.planPath = [];\r\n        this.planPathIndex = 0;\r\n    }\r\n\r\n    setTarget(point) {\r\n        this.target = point;\r\n    }\r\n\r\n    firstPlan() {\r\n        return this.rePlan();\r\n    }\r\n\r\n    rePlan() {\r\n        let current = this.current;\r\n        const target = this.target;\r\n        let steps = 0;\r\n        let nextPoint = target;\r\n        const closeList = new CloseList();\r\n        closeList.push(target);\r\n        while (!pointEquals(current, nextPoint)) {\r\n            steps++;\r\n            if (steps > MAX_STEP) {\r\n                this.onError('Target is not available! Step overflow1');\r\n                return;\r\n            }\r\n            nextPoint = this.nextStep(current, nextPoint, closeList);\r\n            if (nextPoint == null) {\r\n                this.onError('Target is not available! Open list null!');\r\n                return;\r\n            }\r\n            closeList.push(nextPoint);\r\n        }\r\n        const planPath = closeList.asPath();\r\n        this.planPath = planPath;\r\n        this.planPathIndex = 0;\r\n        this.onRePlan(planPath);\r\n        return closeList;\r\n    }\r\n\r\n    nextStep(target, current, closeList) {\r\n        let openList = [];\r\n        openList.push(this.nearPoint(current, closeList, 1, 1));\r\n        openList.push(this.nearPoint(current, closeList, 1, 0));\r\n        openList.push(this.nearPoint(current, closeList, 1, -1));\r\n        openList.push(this.nearPoint(current, closeList, 0, 1));\r\n        openList.push(this.nearPoint(current, closeList, 0, -1));\r\n        openList.push(this.nearPoint(current, closeList, -1, 1));\r\n        openList.push(this.nearPoint(current, closeList, -1, 0));\r\n        openList.push(this.nearPoint(current, closeList, -1, -1));\r\n        openList = openList.filter(point => point !== null);\r\n        if (openList.length <= 0) {\r\n            return null;\r\n        }\r\n        return calcMin(openList, current, target);\r\n    }\r\n\r\n    nearPoint(point, closeList, dx, dy) {\r\n        const xMax = this.mapSize.width;\r\n        const yMax = this.mapSize.height;\r\n        const nextX = point.tx + dx;\r\n        const nextY = point.ty + dy;\r\n        if (nextX > xMax || nextX < 0 || nextY > yMax || nextY < 0) {\r\n            return null;\r\n        }\r\n        const key = `${nextX}/${nextY}`;\r\n        if (closeList.hasKey(key)) {\r\n            return null;\r\n        }\r\n        if (this.wallCache.hasOwnProperty(key)) {\r\n            return null;\r\n        }\r\n        return {\r\n            tx: nextX,\r\n            ty: nextY,\r\n            key: key,\r\n        };\r\n    }\r\n\r\n    go() {\r\n        this.updateNearPointInfo();\r\n        this.planPathIndex++;\r\n        if (this.planPathIndex >= this.planPath.length) {\r\n            return;\r\n        }\r\n        const point = this.planPath[this.planPathIndex];\r\n        if (this.wallCache.hasOwnProperty(point.key)) {\r\n            this.planPath = [];\r\n            this.planPathIndex = 0;\r\n            this.rePlan();\r\n            return;\r\n        }\r\n        this.current = point;\r\n        this.updateCurrent(point);\r\n    }\r\n\r\n    updateNearPointInfo() {\r\n        const current = this.current;\r\n        this.updatePointInfo(current, 1, 1);\r\n        this.updatePointInfo(current, 1, 0);\r\n        this.updatePointInfo(current, 1, -1);\r\n        this.updatePointInfo(current, 0, 1);\r\n        this.updatePointInfo(current, 0, -1);\r\n        this.updatePointInfo(current, -1, 1);\r\n        this.updatePointInfo(current, -1, 0);\r\n        this.updatePointInfo(current, -1, -1);\r\n    }\r\n\r\n    updatePointInfo(base, xOffset, yOffset) {\r\n        const x = base.tx + xOffset;\r\n        const y = base.ty + yOffset;\r\n        const {width, height} = this.mapSize;\r\n        if (x > width || y > height || x < 0 || y < 0) {\r\n            return;\r\n        }\r\n        const point = this.requestPoint(x, y);\r\n        if (point == null) {\r\n            // 为墙\r\n            this.wallCache[`${x}/${y}`] = {\r\n                tx: x,\r\n                ty: y,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport default DStar;\r\n","import DStar from './DStar';\r\n\r\nconst HEIGHT_STEP = 10;\r\nconst WIDTH_STEP = 10;\r\nconst BACKGROUND_LINE_COLOR = '#AAAAAA';\r\nconst WALL_COLOR = '#666666';\r\nconst CURRENT_COLOR = '#FF8800';\r\nconst TARGET_COLOR = '#FF0000';\r\nconst PLAN_PATH_COLOR = '#3271FA';\r\nconst PLAN_PATH_POINT_RADIUS = 3;\r\nconst PLAN_PATH_POINT_X_OFFSET = WIDTH_STEP / 2;\r\nconst PLAN_PATH_POINT_Y_OFFSET = HEIGHT_STEP / 2;\r\nexport const CLICK_ACTION_ADD_WALL = 0x00;\r\nexport const CLICK_ACTION_REMOVE_WALL = 0x01;\r\nexport const CLICK_ACTION_MARK_TARGET = 0x02;\r\n\r\nconst getPressPoint = e => {\r\n    const {offsetX, offsetY} = e;\r\n    const tx = Math.floor(offsetX / WIDTH_STEP);\r\n    const x = tx * WIDTH_STEP;\r\n    const ty = Math.floor(offsetY / HEIGHT_STEP);\r\n    const y = ty * HEIGHT_STEP;\r\n    const key = `${tx}/${ty}`;\r\n    return {x, y, tx, ty, key};\r\n};\r\n\r\nconst drawCross = (ctx, point, color) => {\r\n    ctx.strokeStyle = color;\r\n    ctx.beginPath();\r\n    ctx.moveTo(point.x, point.y);\r\n    ctx.lineTo(point.x + WIDTH_STEP, point.y + HEIGHT_STEP);\r\n    ctx.moveTo(point.x, point.y + HEIGHT_STEP);\r\n    ctx.lineTo(point.x + WIDTH_STEP, point.y);\r\n    ctx.stroke();\r\n};\r\n\r\nclass DStarBoard {\r\n    constructor(props) {\r\n        const _this = this;\r\n        const {canvas, height, width, onMessage, onRePlan} = props;\r\n        this.canvas = canvas;\r\n        this.height = height;\r\n        this.width = width;\r\n        this.onMessage = onMessage;\r\n        this.onRePlan = onRePlan;\r\n        this.wallList = {};\r\n        this.clickAction = CLICK_ACTION_ADD_WALL;\r\n        this.currentPoint = {x: 100, y: 100, tx: 10, ty: 10, key: '10/10'};\r\n        this.targetPoint = {x: 300, y: 300, tx: 30, ty: 30, key: '30/30'};\r\n        this.planPath = [];\r\n        this.canvas.onclick = e => {\r\n            _this.onCanvasPress(e);\r\n        };\r\n    }\r\n\r\n    setup() {\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.rePaint();\r\n        this.setupDStar();\r\n    }\r\n\r\n    setupTimer() {\r\n        this.shutdown();\r\n        const _this = this;\r\n        this.timer = setInterval(() => {\r\n            _this.go();\r\n        }, 100);\r\n    }\r\n\r\n    shutdown() {\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n\r\n    go() {\r\n        this.dStar.go();\r\n    }\r\n\r\n    setupDStar() {\r\n        const _this = this;\r\n        const width = this.width;\r\n        const height = this.height;\r\n        const start = this.currentPoint;\r\n        const target = this.targetPoint;\r\n        this.dStar = new DStar({\r\n            onRePlan(list) {\r\n                console.log('Re Plan', list);\r\n                _this.planPath = list;\r\n                _this.rePaint();\r\n                _this.onRePlan(list);\r\n            },\r\n            start,\r\n            target,\r\n            requestPoint(x, y) {\r\n                const key = `${x}/${y}`;\r\n                if (_this.wallList.hasOwnProperty(key)) {\r\n                    return null;\r\n                }\r\n                return {tx: x, ty: y};\r\n            },\r\n            onError(err) {\r\n                console.log(err);\r\n                _this.onMessage(err);\r\n            },\r\n            updateCurrent(point) {\r\n                _this.currentPoint = point;\r\n                _this.rePaint();\r\n            },\r\n            mapSize: {\r\n                width,\r\n                height,\r\n            }\r\n        });\r\n        this.dStar.firstPlan();\r\n    }\r\n\r\n    onCanvasPress(e) {\r\n        const point = getPressPoint(e);\r\n        switch (this.clickAction) {\r\n            case CLICK_ACTION_ADD_WALL:\r\n                this.addWall(point);\r\n                break;\r\n            case CLICK_ACTION_REMOVE_WALL:\r\n                this.removeWall(point);\r\n                break;\r\n            case CLICK_ACTION_MARK_TARGET:\r\n                this.markTarget(point);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    markTarget(point) {\r\n        this.targetPoint = point;\r\n        this.dStar.setTarget(point);\r\n        this.dStar.firstPlan();\r\n    }\r\n\r\n    removeWall(point) {\r\n        const {key} = point;\r\n        delete this.wallList[key];\r\n        this.rePaint();\r\n    }\r\n\r\n    addWall(point) {\r\n        const {key} = point;\r\n        if (key in this.wallList) {\r\n            return;\r\n        }\r\n        this.wallList[key] = point;\r\n        this.rePaint();\r\n    }\r\n\r\n    rePaint() {\r\n        this.ctx.clearRect(0, 0, this.width, this.height);\r\n        this.drawBackground();\r\n        this.drawWall();\r\n        this.drawCurrent();\r\n        this.drawTarget();\r\n        this.drawPlanPath();\r\n    }\r\n\r\n\r\n    drawPlanPath() {\r\n        const planPath = this.planPath;\r\n        const ctx = this.ctx;\r\n        ctx.strokeStyle = PLAN_PATH_COLOR;\r\n        ctx.beginPath();\r\n        for (const point of planPath) {\r\n            point.x = point.tx * WIDTH_STEP;\r\n            point.y = point.ty * HEIGHT_STEP;\r\n            ctx.moveTo(point.x + PLAN_PATH_POINT_X_OFFSET, point.y + PLAN_PATH_POINT_Y_OFFSET);\r\n            ctx.arc(point.x + PLAN_PATH_POINT_X_OFFSET, point.y + PLAN_PATH_POINT_Y_OFFSET, PLAN_PATH_POINT_RADIUS, 0, Math.PI * 2);\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n    drawBackground() {\r\n        const ctx = this.ctx;\r\n        const width = this.width;\r\n        const height = this.height;\r\n        ctx.strokeStyle = BACKGROUND_LINE_COLOR;\r\n        for (let x = 0; x < width; x += WIDTH_STEP) {\r\n            ctx.moveTo(x, 0);\r\n            ctx.lineTo(x, height);\r\n        }\r\n        for (let y = 0; y < height; y += HEIGHT_STEP) {\r\n            ctx.moveTo(0, y);\r\n            ctx.lineTo(width, y);\r\n        }\r\n        ctx.stroke();\r\n    }\r\n\r\n    drawCurrent() {\r\n        const current = this.currentPoint;\r\n        const ctx = this.ctx;\r\n        drawCross(ctx, current, CURRENT_COLOR);\r\n    }\r\n\r\n    drawTarget() {\r\n        const target = this.targetPoint;\r\n        const ctx = this.ctx;\r\n        drawCross(ctx, target, TARGET_COLOR);\r\n    }\r\n\r\n    drawWall() {\r\n        const ctx = this.ctx;\r\n        ctx.fillStyle = WALL_COLOR;\r\n        for (const key in this.wallList) {\r\n            if (!this.wallList.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n            const wall = this.wallList[key];\r\n            ctx.fillRect(wall.x, wall.y, WIDTH_STEP, HEIGHT_STEP);\r\n        }\r\n    }\r\n\r\n    checkCanvasChanged(canvas) {\r\n        return canvas !== this.canvas;\r\n    }\r\n\r\n    setClickAction(action) {\r\n        this.clickAction = action;\r\n    }\r\n}\r\n\r\nexport default DStarBoard;\r\n","import React, {Component} from 'react';\r\nimport './DStarAnimation.sass';\r\nimport {mapStateAndAction} from '../../store/storeUtils';\r\nimport {Button, List} from 'antd-mobile';\r\nimport DStarBoard, {\r\n    CLICK_ACTION_ADD_WALL,\r\n    CLICK_ACTION_MARK_TARGET,\r\n    CLICK_ACTION_REMOVE_WALL\r\n} from '../../util/DStarBoard';\r\n\r\nconst CLICK_ACTION_NAMES = {};\r\nCLICK_ACTION_NAMES[CLICK_ACTION_ADD_WALL] = 'Add Wall';\r\nCLICK_ACTION_NAMES[CLICK_ACTION_REMOVE_WALL] = 'Remove Wall';\r\nCLICK_ACTION_NAMES[CLICK_ACTION_MARK_TARGET] = 'Mark Target';\r\n\r\nclass DStarAnimation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clickAction: CLICK_ACTION_ADD_WALL,\r\n            message: '',\r\n            rePlanSteps: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('D* Animation');\r\n    }\r\n\r\n    onCanvasBind(canvas) {\r\n        const _this = this;\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n        if (this.board && !this.board.checkCanvasChanged(canvas)) {\r\n            return;\r\n        }\r\n        if (this.board) {\r\n            this.board.shutdown();\r\n            this.board = null;\r\n        }\r\n        this.board = new DStarBoard({\r\n            canvas,\r\n            height: 500,\r\n            width: 500,\r\n            onMessage(msg) {\r\n                _this.setState({message: msg})\r\n            },\r\n            onRePlan(pathList) {\r\n                _this.setState({rePlanSteps: pathList.length})\r\n            }\r\n        });\r\n        this.board.setup();\r\n    }\r\n\r\n    changeBoardClickAction() {\r\n        let {clickAction} = this.state;\r\n        if (!this.board) {\r\n            return;\r\n        }\r\n        clickAction++;\r\n        clickAction = clickAction % 3;\r\n        this.setState({clickAction: clickAction});\r\n        this.board.setClickAction(clickAction);\r\n    }\r\n\r\n    render() {\r\n        const {clickAction, message, rePlanSteps} = this.state;\r\n        const clickActionName = CLICK_ACTION_NAMES[clickAction];\r\n        return (\r\n            <div className=\"d-star\">\r\n                <List renderHeader={() => 'State'}>\r\n                    <List.Item extra={rePlanSteps}>\r\n                        RePlanSteps\r\n                    </List.Item>\r\n                    <List.Item extra={message}>\r\n                        Message\r\n                    </List.Item>\r\n                    <List.Item extra=\"click to change\" onClick={() => this.changeBoardClickAction()}>\r\n                        Click Action : ({clickActionName})\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <Button type=\"primary\" onClick={() => this.board.setupTimer()}>\r\n                            Start\r\n                        </Button>\r\n                    </List.Item>\r\n                </List>\r\n                <canvas className=\"board-canvas\" width={500} height={500} ref={canvas => this.onCanvasBind(canvas)}>\r\n                    Unsupported Canvas\r\n                </canvas>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default mapStateAndAction(DStarAnimation);\r\n","const BOX_LIST = [\r\n    {\r\n        mode: 'b',\r\n    },\r\n    {\r\n        mode: 'f',\r\n    },\r\n    {\r\n        mode: 'b',\r\n    },\r\n    {\r\n        mode: 'f',\r\n    },\r\n];\r\nconst BACKGROUND_COLOR = '#000000';\r\nconst FRAME_DURATION = 1000;\r\n\r\nconst BOX_SIZE = 20;\r\n// const FOCUS_BOX_SIZE = 40;\r\nconst BOX_MARGIN = 1;\r\n// const FOCUS_X = 45;\r\n// const NORMAL_L_X = 1;\r\n// const NORMAL_R_X = 1;\r\n// const SIZE_K = 20 / 46;\r\n// const SIZE_B = 900 / 46;\r\n// const getPosition = (x, y) => {\r\n//\r\n// };\r\n\r\nclass SlideDemoCanvas {\r\n    constructor(canvas) {\r\n        this.ctx = canvas.getContext('2d');\r\n        this.width = parseInt(canvas.getAttribute('width'));\r\n        this.height = parseInt(canvas.getAttribute('height'));\r\n        this.boxList = BOX_LIST;\r\n    }\r\n\r\n    setup() {\r\n        this.drawBackground();\r\n    }\r\n\r\n    nextFrame() {\r\n        this.drawBackground();\r\n        let x = 0;\r\n        let y = 0;\r\n        for (const box of this.boxList) {\r\n            const res = this.drawBox(x, y, box.mode);\r\n            x = res.x + BOX_MARGIN;\r\n            y = res.y;\r\n        }\r\n    }\r\n\r\n    drawBox(x, y, mode) {\r\n        const ctx = this.ctx;\r\n        if (mode === 'b') {\r\n            ctx.fillStyle = '#FFFFFF';\r\n            ctx.fillRect(x, y, BOX_SIZE, BOX_SIZE);\r\n        } else {\r\n            ctx.strokeStyle = '#FFFFFF';\r\n            ctx.beginPath();\r\n            ctx.rect(x, y, BOX_SIZE, BOX_SIZE);\r\n            ctx.stroke();\r\n        }\r\n        console.log(x, y, mode);\r\n        return {x: x + BOX_SIZE, y: y}\r\n    }\r\n\r\n    drawBackground() {\r\n        this.ctx.fillStyle = BACKGROUND_COLOR;\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n    }\r\n\r\n    nextBox() {\r\n        const last = this.boxList.pop();\r\n        this.boxList.unshift(last);\r\n        console.log(this.boxList);\r\n    }\r\n\r\n    play() {\r\n        this.timmer = setInterval(() => {\r\n            this.nextFrame();\r\n        }, FRAME_DURATION);\r\n    }\r\n\r\n    stop() {\r\n        if (this.timmer) {\r\n            clearInterval(this.timmer);\r\n        }\r\n    }\r\n}\r\n\r\nexport default SlideDemoCanvas;\r\n","import React, {Component} from 'react';\r\nimport {mapStateAndAction} from '../../store/storeUtils';\r\nimport {List} from 'antd-mobile';\r\nimport './SlideAnimation.sass';\r\nimport SlideDemoCanvas from '../../util/SlideDemoCanvas';\r\n\r\nclass SlideAnimation extends Component {\r\n    componentDidMount() {\r\n        this.props.setTitle('Slide Animation');\r\n    }\r\n\r\n    onSlideAnimationCanvasBind(canvas) {\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n        if (this.slideCanvas || this.slideCanvas !== canvas) {\r\n            if (this.slideDemoBoard) {\r\n                this.slideDemoBoard.stop();\r\n            }\r\n            this.slideCanvas = canvas;\r\n            this.slideDemoBoard = new SlideDemoCanvas(canvas);\r\n            this.slideDemoBoard.setup();\r\n            this.slideDemoBoard.play();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.slideDemoBoard) {\r\n            this.slideDemoBoard.stop();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"slide-animation\">\r\n                <List renderHeader={() => 'Slide Animation Demo'}>\r\n                    <List.Item extra=\"Wold!\">\r\n                        Hello\r\n                    </List.Item>\r\n                </List>\r\n                <div className=\"canvas-wrapper\">\r\n                    <canvas ref={canvas => this.onSlideAnimationCanvasBind(canvas)} width=\"128\" height=\"64\">\r\n                        Unsupported Canvas\r\n                    </canvas>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default mapStateAndAction(SlideAnimation);","import React, {Component} from 'react';\r\nimport './ExtraPage.sass';\r\nimport {fetchExtraPageUri} from '../../api/config';\r\nimport {NoticeBar} from 'antd-mobile';\r\nimport {WarningOutlined} from '@ant-design/icons';\r\n\r\nclass ExtraPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pageUri: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchExtraPageUri().then(res => {\r\n            this.setState({\r\n                pageUri: res.value,\r\n            })\r\n        });\r\n    }\r\n\r\n    renderFrame() {\r\n        const {pageUri} = this.state;\r\n        if (pageUri) {\r\n            return (<iframe title=\"inner\" src={pageUri}>IFrame</iframe>);\r\n        } else {\r\n            return (<NoticeBar icon={<WarningOutlined/>}>页面地址未设置</NoticeBar>);\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"extra\">\r\n                {\r\n                    this.renderFrame()\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExtraPage;\r\n","import React, {Component} from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Dashboard from './content/Dashboard'\r\nimport HomeDashboard from './content/HomeDashboard'\r\nimport Setting from './content/Setting';\r\nimport Address from './content/Address';\r\nimport Logs from './content/Logs';\r\nimport About from './content/About';\r\nimport PidAnimation from './content/PidAnimation';\r\nimport DStarAnimation from './content/DStarAnimation';\r\nimport SlideAnimation from './content/SlideAnimation';\r\nimport ExtraPage from './content/ExtraPage';\r\nimport './AppContent.sass';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"appContent\">\r\n                {\r\n                    this.props.showHeader ? <div className=\"headerMask\"/> : null\r\n                }\r\n                <Switch>\r\n                    <Route path=\"/dashboard\" component={Dashboard} exact/>\r\n                    <Route path=\"/\" component={HomeDashboard} exact/>\r\n                    <Route path=\"/setting**\" component={Setting} exact/>\r\n                    <Route path=\"/address\" component={Address} exact/>\r\n                    <Route path=\"/logs\" component={Logs} exact/>\r\n                    <Route path=\"/about\" component={About} exact/>\r\n                    <Route path=\"/pid\" component={PidAnimation} exact/>\r\n                    <Route path=\"/extra\" component={ExtraPage} exact/>\r\n                    <Route path=\"/dstar\" component={DStarAnimation} exact/>\r\n                    <Route path=\"/slide\" component={SlideAnimation} exact/>\r\n                </Switch>\r\n                <div className=\"tabBarMask\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, null)(AppContent);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Modal, NavBar, Popover, Toast} from \"antd-mobile\";\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\nimport './AppHeader.sass';\r\nimport {reloadSensors} from \"../api/sensor\";\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        title: state.globalTitle,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppHeader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            popoverVisible: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.showHeader) {\r\n            return null;\r\n        }\r\n        const {title} = this.props;\r\n        return (\r\n            <div className=\"appHeader\">\r\n                <NavBar\r\n                    leftContent={<Icon type=\"left\" onClick={() => this.onBackClick()}/>}\r\n                    rightContent={this.rightContent()}\r\n                    mode=\"light\"\r\n                >{title}</NavBar>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    rightContent() {\r\n        const {popoverVisible} = this.state;\r\n        const Item = Popover.Item;\r\n        return (<Popover mask\r\n                         visible={popoverVisible}\r\n                         overlay={[\r\n                             (<Item key=\"about\" value=\"about\"\r\n                                    data-seed=\"logId\">关于我们</Item>),\r\n                             (<Item key=\"settings\" value=\"settings\"\r\n                                    style={{whiteSpace: 'nowrap'}}>货道设置</Item>),\r\n                             (<Item key=\"reload\" value=\"reload\"\r\n                                    style={{whiteSpace: 'nowrap'}}>重新加载</Item>),\r\n                         ]}\r\n                         onSelect={e => this.onPopoverSelect(e)}\r\n        >\r\n            <Icon type=\"ellipsis\"/>\r\n        </Popover>);\r\n    }\r\n\r\n    onBackClick() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    onPopoverSelect(e) {\r\n        switch (e.key) {\r\n            case 'about':\r\n                this.props.history.push({\r\n                    pathname: '/about',\r\n                });\r\n                break;\r\n            case 'settings':\r\n                this.props.history.push({\r\n                    pathname: '/setting/',\r\n                });\r\n                break;\r\n            case 'reload':\r\n                this.doReloadSensors();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({\r\n            popoverVisible: false\r\n        });\r\n    }\r\n\r\n    doReloadSensors() {\r\n        Modal.alert('Reload Sensors', 'Reload sensors from database into weightService',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                },\r\n                {\r\n                    text: 'Yes',\r\n                    onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('Reload Success!');\r\n                        });\r\n                    },\r\n                },\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props)(AppHeader));\r\n","import {createBrowserHistory} from 'history';\r\nimport {setRouterPath} from '../store/actionCreators'\r\nimport store from '../store';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst notifyPathChanged = location => {\r\n    const info = {\r\n        pathname: location.pathname,\r\n        search: location.search,\r\n        hash: location.hash\r\n    };\r\n    const action = setRouterPath(info);\r\n    store.dispatch(action);\r\n};\r\nhistory.listen((action) => {\r\n    notifyPathChanged(action.location);\r\n});\r\n\r\n\r\nnotifyPathChanged(history.location);\r\nexport default history;\r\n","const printBanner = () => {\r\n    console.log(\r\n        '%cMonolithIoT%cPoweredBy%cLevent8421',\r\n        'color:#108EE9;font-size:50px;font-family:Microsoft-yahei;background-color:#F5F5F9',\r\n        'color:#FF8800;background-color:#F5F5F9',\r\n        'color:#108EE9;background-color:#F5F5F9'\r\n    );\r\n};\r\nexport default printBanner;\r\n","import React from 'react'\nimport './App.css'\nimport store from './store'\nimport {Provider} from 'react-redux'\nimport AppTabBar from './component/AppTabBar'\nimport AppContent from './component/AppContent'\nimport AppHeader from './component/AppHeader'\nimport {HashRouter as Router} from 'react-router-dom'\nimport history from './util/History'\nimport {fetchEnableTabBarAction} from './store/actionCreators';\nimport consoleBanner from './util/consoleBanner';\n\nclass App extends React.Component {\n    componentDidMount() {\n        store.dispatch(fetchEnableTabBarAction());\n        consoleBanner();\n    }\n\n    render() {\n        return (\n            <Router history={history}>\n                <Provider store={store}>\n                    <div className=\"app-content\">\n                        <AppHeader/>\n                        <AppContent/>\n                        <AppTabBar/>\n                    </div>\n                </Provider>\n            </Router>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import 'babel-polyfill'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\n\n/*ReactDOM.render(\n    <React.StrictMode>\n        <App/>,\n    </React.StrictMode>,\n    document.getElementById('root')\n);*/\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}