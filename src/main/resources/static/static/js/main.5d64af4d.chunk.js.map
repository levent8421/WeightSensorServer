{"version":3,"sources":["store/reducer.js","store/actionTypes.js","store/index.js","component/AppTabBar.jsx","api/request.js","util/httpUtils.js","api/dashboard.js","api/sensor.js","api/config.js","store/actionCreators.js","api/connection.js","util/DataConvertor.js","api/slot.js","component/content/Dashboard.jsx","component/commons/FloatButton.jsx","component/content/setting/SensorSetting.jsx","component/content/setting/SettingMenu.jsx","component/content/setting/SlotSetting.jsx","component/content/setting/ConnectionSetting.jsx","component/content/setting/SlotDetailSetting.jsx","component/content/setting/SystemSetting.jsx","api/serial.js","component/content/setting/SystemPropsSetting.jsx","component/content/setting/SlotSensorsSetting.jsx","component/content/setting/Overview.jsx","component/content/setting/SystemCheck.jsx","api/systemStatus.js","component/content/setting/MessageLog.jsx","component/content/setting/SensorHealthy.jsx","api/healthy.js","api/firmware.js","component/content/setting/SensorDetails.jsx","component/content/setting/ThSensorSetting.jsx","api/thSensor.js","component/commons/LineCharts.jsx","component/content/setting/ThSensorDetailsSetting.jsx","api/tempHumidityLog.js","component/content/setting/ExtraPageSetting.jsx","component/content/Setting.jsx","component/content/Address.jsx","component/content/Logs.jsx","component/content/About.jsx","component/content/PidAnimation.jsx","component/content/ExtraPage.jsx","component/AppContent.jsx","component/AppHeader.jsx","util/History.js","util/consoleBanner.js","App.js","serviceWorker.js","index.js"],"names":["defaultState","showTabBar","enableTabBar","showHeader","globalTitle","routerPath","dashboardSlots","sensors","connections","user","name","actionTable","registerReducer","type","reducer","state","action","data","sensorId","hasElabel","sensor","id","JSON","parse","stringify","filter","connection","allEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","handler","AppTabBar","props","path","this","className","unselectedTintColor","tintColor","barTintColor","hidden","tabBarPosition","Item","title","selected","icon","selectedIcon","onPress","pushPath","setState","history","push","pathname","React","Component","withRouter","connect","hideLoading","hide","showError","msg","fail","request","options","showLoadingToast","loading","Promise","resolve","reject","axios","httpRequest","then","res","status","body","code","catch","err","errStr","toString","reloadSensors","url","method","fetchExtraPageUri","setTabBarState","show","setTitle","asyncFetchDashboardSlotData","dispatch","slots","key","hasOwnProperty","sort","a","b","slotNo","localeCompare","asyncFetchSensors","address","toggleSensorElable","toggleElable","asyncFetchConnection","asyncDeleteConnection","deleteConnection","fetchEnableTabBarAction","value","setEnableTabBarAction","enable","setEnableTabBar","connectionTypes","1","2","asConnectionType","slotSortWeight","compareBySlotNo","aName","bName","aNames","split","bNames","length","i","aItem","parseInt","bItem","stateTable","3","4","5","asStateString","thSensorStateTable","thSensorStateText","zeroOne","encodedSlotNo","encodeURIComponent","fetchDetail","TabItems","Dashboard","rootEle","document","groupedSlots","thSensors","sensorModalVisible","operationSlot","searchSkuNo","noticeSlots","renderSlotCard","bind","startFetchData","listenKeyPress","onkeypress","e","target","tagName","toLowerCase","keyCode","triggerHighlight","appendSearchSku","String","fromCharCode","c","fetchTimer","clearInterval","cancelKeyPress","setInterval","slotData","thData","temperatureHumidityData","groups","putSlot","slot","noItems","match","aWeight","substring","bWeight","groupSlots","temperature","humidity","toFixed","tempStateText","temperatureState","tempWarn","humidityText","tempClass","no","join","map","renderThSensorCard","highlightSlotIds","firstNoticeSlot","tabs","onChange","tab","index","onTabChange","onSubmit","renderNoticeBar","group","renderGroupItem","renderThSensors","visible","transparent","footer","text","doSlotZero","onClose","renderHeader","extra","deviceSn","Brief","address485","content","skuName","skuShelfLifeOpenDays","wrap","justify","sku","slotCardClassName","isWan","isDisable","isOffline","incredible","isIncredible","toleranceState","weightInKg","weight","count","isStable","weightState","asCount","skuNo","onClick","onSlotCardClick","trim","setTimeout","alert","callDoZero","component","fetchSlotData","FloatButton","defaultPosition","right","bottom","down","style","callOnClick","iconType","SensorSetting","fetchSensors","Header","Body","checked","toggleElabel","platform","arrow","toSensorDetails","Footer","showOperationActions","buttons","showActionSheetWithOptions","cancelButtonIndex","destructiveButtonIndex","callReloadSensors","SettingMenu","go","OperationActions","SlotSetting","selectedNums","continueSelected","fetchSlots","s","selectedMap","selectedMinAddress","Object","keys","isContinueSelected","onItemClick","renderSlotSensors","_this","selectedNumStyle","renderSlotItem","showOperationSheet","findSelectedSlots","slotNos","ids","slotIds","toSlotDetail","doZeroAll","mergeSlot","resetSlotSensor","toSelectedSlotDetails","chooseAllSlotSensor","ConnectionOperations","label","ConnectionSetting","createDialogVisible","create","serialPorts","fetchConnection","showConnectionOperations","showCreateDialog","createConnection","cols","setCreateType","disabled","placeholder","input","setCreateTarget","arr","setCreateTargetSerial","types","newCreate","port","serialIndexList","connectionId","scanConnection","startScanTHSensors","ActionButtons","SlotDetailSetting","slotId","params","fetchSlotInfo","setUpdateSlotProp","skuApw","skuTolerance","applyModify","toggleELabel","openOperation","buttonIndex","doZero","hasELabel","option","SystemSetting","systemInfo","libLoadVisible","reloadLibPath","appName","appVersion","dbVersion","dbVersionName","pid","showLibLoadModal","libPath","stopWeightService","maskClosable","reloadLibrary","autoHeight","SystemPropsSetting","systemProps","propList","p","labelNumber","console","log","SENSOR_OPERATIONS","SlotSensorsSetting","sensorRemoveMode","allSlots","sensorPickerData","changed","pickerData","children","sensorItem","openSensorOperations","v","onSelectSensor","oldSensor","selectedSensor","selectedSensors","renderSensorItem","addSensor","applySensors","removeSensor","newSensors","sensorIds","setSlotByIds","Overview","refresh","onSensorClick","list","SoftFilterLevelTable","0","SoftFilterLevels","doSetCompensationState","enableCompensation","setCompensationState","SystemCheck","statusTable","tcpApi","databaseTables","softFilterLevel","softFilterLevelLabel","refreshStatusTable","refreshSoftFilterLevel","level","operation","color","ip","reconnectTcp","setSoftFilterLevel","showCompensationOperations","showReloadConfirm","showCleanBackupSnConfirm","tableName","showDbResetConfirm","refreshDatabaseTables","updateSoftFilterLevel","doDbReset","renderMessageItem","message","rows","seqNo","MessageLog","logs","refreshLogs","refreshTimmer","operations","ClickOperations","UPGRADE_PROGRESS_STATE_TABLE","SensorHealthy","upgradePercent","upgradeProgress","refreshSensors","tryReleaseUpgradeProgressTimmer","upgradeFirmwareTimmer","clearTimeout","healthyList","showUpgradeProgress","cb","upgradeProgressPercent","undefined","total","current","helthy","renderSensorCard","onUpgradeProgressModalClose","doAbortFirmwareUpgrade","percent","position","showOperations","healthy","elabelSn","tryRecoveryElabelAddress","sensorSn","tryRecoverySensorAddress","tryRecoverySensorAddressWithOriginSn","upgradeFirmware","upgradeElabelFirmware","recoverySensorAddress","recoveryElabelAddress","packageCounter","totalSuccess","totalErrors","errorsRate","warn","errorRateInPer","minRate","doFirmwareUpgrade","elabelSuccess","elabelErrors","doElabelFirmwareUpgrade","refreshUpgradeProgress","refreshUpgradeProgressCb","zeroOffset","zeroReference","successRate","eLabelTotal","elabelSuccessRate","elabelErrorosRate","elabelContinueErrors","onCardClick","continueErrors","showCleanCounterConfirm","doCleanCounter","SensorDetails","sensorParams","refreshParams","param","ThSensorSetting","toDetail","LineCharts","canvas","charts","echarts","init","refreshCharts","xData","yData","series","names","y","tooltip","trigger","legend","xAxis","yAxis","setOption","width","height","ref","onCanvasLoad","defaultProps","ThSensorDetailsSetting","dataLogs","chartsXData","chartsYData","tempData","maxTempData","minTempData","createTime","maxTemperature","minTemperature","date","Date","timeStr","getHours","getMinutes","getSeconds","refreshDataLog","fetchOneSensor","setSensorData","maxHumidity","minHumidity","updateRange","ExtraPageSetting","pageUri","uri","createIfNotExists","setPageUri","gotoExtraPage","Setting","exact","Address","info","Logs","About","drawerOpen","autoplay","infinite","backgroundColor","I","PidAnimation","x","xSum","lastErrorX","ySum","lastErrorY","timmer","onTimer","onclick","offsetX","offsetY","onCanvasClick","canvasContext","getContext","reDrawPoint","clearRect","fillStyle","fillRect","errorX","derivativeX","outX","Math","min","CanvasWidth","max","errorY","derivativeY","outY","CanvasHeight","ExtraPage","src","WarningOutlined","renderFrame","AppContent","AppHeader","popoverVisible","leftContent","onBackClick","rightContent","mode","mask","overlay","data-seed","whiteSpace","onSelect","onPopoverSelect","goBack","doReloadSensors","createBrowserHistory","notifyPathChanged","location","setRouterPath","search","hash","listen","printBanner","App","consoleBanner","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.5d64af4d.chunk.js","sourcesContent":["import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\n\r\nconst defaultState = {\r\n    showTabBar: true,\r\n    enableTabBar: false,\r\n    showHeader: true,\r\n    globalTitle: '重力货道',\r\n    routerPath: null,\r\n    dashboardSlots: [],\r\n    sensors: [],\r\n    connections: [],\r\n    user: {\r\n        name: 'MonolithIoT'\r\n    }\r\n};\r\nconst actionTable = {};\r\nconst registerReducer = (type, reducer) => {\r\n    actionTable[type] = reducer;\r\n};\r\nregisterReducer(SET_TABBAR_STATE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showTabBar: action.data\r\n    };\r\n});\r\nregisterReducer(SET_ROUTER_PATH, (state, action) => {\r\n    return {\r\n        ...state,\r\n        routerPath: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_DASHBOARD_SLOT_DATA, (state, action) => {\r\n    return {\r\n        ...state,\r\n        dashboardSlots: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(SET_TITLE, (state, action) => {\r\n    return {\r\n        ...state,\r\n        globalTitle: action.data,\r\n    }\r\n});\r\nregisterReducer(ASYNC_FETCH_SENSORS, (state, action) => {\r\n    return {\r\n        ...state,\r\n        sensors: action.data,\r\n    };\r\n});\r\n\r\nregisterReducer(TOGGLE_SENSOR_ELABLE, (state, action) => {\r\n    const sensors = state.sensors;\r\n    const sensorId = action.data.sensorId;\r\n    const hasElabel = action.data.hasElabel;\r\n    for (let sensor of sensors) {\r\n        if (sensor.id === sensorId) {\r\n            sensor.hasElabel = hasElabel;\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        ...state,\r\n        sensors: JSON.parse(JSON.stringify(sensors))\r\n    };\r\n});\r\n\r\nregisterReducer(ASYNC_FETCH_CONNECTION, (state, action) => {\r\n    return {\r\n        ...state,\r\n        connections: action.data,\r\n    };\r\n});\r\nregisterReducer(DELETE_CONNECTION, (state, action) => {\r\n    const id = action.data.id;\r\n    const connections = state.connections.filter(connection => connection.id !== id);\r\n    return {\r\n        ...state,\r\n        connections\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_TAB_BAR, (state, action) => {\r\n    return {\r\n        ...state,\r\n        enableTabBar: action.data,\r\n    };\r\n});\r\nregisterReducer(SET_ENABLE_HEADER, (state, action) => {\r\n    return {\r\n        ...state,\r\n        showHeader: action.data\r\n    };\r\n});\r\nexport default (state = defaultState, action) => {\r\n    const type = action.type;\r\n    if (type in actionTable) {\r\n        const handler = actionTable[type];\r\n        return handler(state, action);\r\n    }\r\n    return state;\r\n}\r\n","export const SET_USER = \"user.set\";\r\n\r\nexport const SET_TABBAR_STATE = 'tabBar.set';\r\n\r\nexport const SET_ROUTER_PATH = 'router.path.set';\r\n\r\nexport const ASYNC_FETCH_DASHBOARD_SLOT_DATA = 'dashboard.slot_data.fetch.async';\r\n\r\nexport const SET_TITLE = 'title.set';\r\n\r\nexport const ASYNC_FETCH_SENSORS = 'sensors.fetch.async';\r\n\r\nexport const TOGGLE_SENSOR_ELABLE = 'sensor.elabel.toggle';\r\n\r\nexport const ASYNC_FETCH_CONNECTION = 'connections.fetch.async';\r\n\r\nexport const DELETE_CONNECTION = 'connection.delete';\r\n\r\nexport const SET_ENABLE_TAB_BAR = 'system.tabBar.set';\r\n\r\nexport const SET_ENABLE_HEADER = 'system.header.set';\r\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport reducer from './reducer';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\nconst allEnhancers = reduxDevTools(applyMiddleware(thunk));\r\nconst store = createStore(reducer, allEnhancers);\r\n\r\nexport default store;\r\n","import React from 'react'\r\nimport {TabBar} from 'antd-mobile'\r\nimport {connect} from 'react-redux';\r\nimport './AppTabBar.sass'\r\nimport {withRouter} from 'react-router-dom';\r\nimport {CodeSandboxCircleFilled as ExtraIcon} from '@ant-design/icons';\r\n\r\nconst mapStateToProps = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showTabBar: state.showTabBar,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass AppTabBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            path: '/',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const showTabBar = this.props.showTabBar && this.props.enableTabBar;\r\n        const {path} = this.state;\r\n        if (showTabBar) {\r\n            return (\r\n                <div className=\"appTabBar\">\r\n                    <TabBar\r\n                        unselectedTintColor=\"#949494\"\r\n                        tintColor=\"#33A3F4\"\r\n                        barTintColor=\"white\"\r\n                        hidden={!this.props.showTabBar}\r\n                        tabBarPosition=\"bottom\">\r\n                        <TabBar.Item title=\"看板\"\r\n                                     selected={path === '/'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe64e;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe64e;</i>}\r\n                                     onPress={() => this.pushPath('/')}/>\r\n                        <TabBar.Item title=\"扩展\"\r\n                                     selected={path === '/extra'}\r\n                                     icon={<ExtraIcon className=\"buttonIcon\"/>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe60c;</i>}\r\n                                     onPress={() => this.pushPath('/extra')}/>\r\n                        <TabBar.Item title=\"日志\"\r\n                                     selected={path === '/logs'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe60c;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe60c;</i>}\r\n                                     onPress={() => this.pushPath('/logs')}/>\r\n                        <TabBar.Item title=\"编址\"\r\n                                     selected={path === '/address'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe61b;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe61b;</i>}\r\n                                     onPress={() => this.pushPath('/address')}/>\r\n                        <TabBar.Item title=\"设置\"\r\n                                     selected={path === '/setting'}\r\n                                     icon={<i className=\"iconfont buttonIcon\">&#xe660;</i>}\r\n                                     selectedIcon={<i className=\"iconfont buttonIcon buttonIconChecked\">&#xe660;</i>}\r\n                                     onPress={() => this.pushPath('/setting')}/>\r\n                    </TabBar>\r\n                </div>)\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    pushPath(path) {\r\n        this.setState({\r\n            path,\r\n        });\r\n        this.props.history.push({\r\n            pathname: path,\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(AppTabBar));\r\n","import {httpRequest} from '../util/httpUtils';\r\nimport {Toast} from 'antd-mobile'\r\n\r\nconst showLoading = () => {\r\n    Toast.loading('Loading', 0);\r\n};\r\nconst hideLoading = () => {\r\n    Toast.hide();\r\n};\r\nconst showError = (msg) => {\r\n    Toast.fail(msg);\r\n};\r\n\r\n\r\nexport function request(options) {\r\n    const showLoadingToast = !options.hideLoading;\r\n    if (showLoadingToast) {\r\n        showLoading();\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n        httpRequest(options)\r\n            .then(res => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                if (res.status !== 200) {\r\n                    showError(`Http Response Status:${res.status}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                const body = res.data;\r\n                if (body.code !== 200) {\r\n                    showError(`Error [${body.code}]:${body.msg}`);\r\n                    reject(res);\r\n                    return;\r\n                }\r\n                resolve(body.data);\r\n            }).catch(err => {\r\n                if (showLoadingToast) {\r\n                    hideLoading();\r\n                }\r\n                const errStr = err.toString();\r\n                showError(errStr);\r\n                reject(err);\r\n            }\r\n        );\r\n    })\r\n}\r\n","import axios from 'axios'\r\n\r\nexport function httpRequest(options) {\r\n    return axios(options);\r\n}\r\n","import {request} from './request';\r\n\r\nexport const fetchSlotData = () => {\r\n    return request({\r\n        url: '/api/dashboard/slot-data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchSystemInfo = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-infos',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchSystemProps = () => {\r\n    return request({\r\n        url: '/api/dashboard/system-props',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDashboardData = () => {\r\n    return request({\r\n        url: '/api/dashboard/_data',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/_with-slot',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const toggleElable = (sensorId, hasElabel) => {\r\n    return request({\r\n        url: `/api/sensor/${sensorId}/haselabel`,\r\n        method: 'post',\r\n        data: {\r\n            hasElabel: hasElabel\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const reloadSensors = () => {\r\n    return request({\r\n        url: '/api/sensor/reload',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const setSlotByIds = (sensorIds, slotId) => {\r\n    return request({\r\n        url: '/api/sensor/_set-slot-id-by-ids',\r\n        method: 'post',\r\n        data: {\r\n            sensorIds,\r\n            slotId,\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const stopWeightService = () => {\r\n    return request({\r\n        url: '/api/sensor/_stop-weight-service',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const dumpAll = () => {\r\n    return request({\r\n        url: '/api/sensor/_dump-all',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const findSensorById = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\nexport const tryRecoverySensorAddress = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_recovery-sensor-address`,\r\n        method: 'post',\r\n    });\r\n};\r\nexport const tryRecoverySensorAddressWithOriginSn = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_recovery-sensor-address-with-origin-sn`,\r\n        method: 'post',\r\n    });\r\n};\r\nexport const tryRecoveryElabelAddress = id => {\r\n    return request({\r\n        url: `/api/sensor/${id}/_recovery-elabel-address`,\r\n        method: 'post',\r\n    });\r\n};\r\nexport const cleanAllBackupSn = () => {\r\n    return request({\r\n        url: '/api/sensor/_clean-backup-sn',\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\n\r\nexport const fetchEnableTabBar = () => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setEnableTabBar = enable => {\r\n    return request({\r\n        url: '/api/config/application.ui.enable_tabBar',\r\n        method: 'post',\r\n        data: {\r\n            value: enable,\r\n        },\r\n    });\r\n};\r\n\r\nexport const fetchSoftFilterLevel = () => {\r\n    return request({\r\n        url: '/api/config/weight.soft_filter_level',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const updateSoftFilterLevel = value => {\r\n    return request({\r\n        url: '/api/config/weight.soft_filter_level',\r\n        method: 'post',\r\n        data: {\r\n            value: value,\r\n        }\r\n    });\r\n};\r\n\r\nexport const fetchExtraPageUri = () => {\r\n    return request({\r\n        url: '/api/config/extra.page_uri',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setExtraPageUri = uri => {\r\n    return request({\r\n        url: '/api/config/extra.page_uri',\r\n        method: 'post',\r\n        data: {\r\n            value: uri,\r\n            createIfNotExists: true,\r\n        }\r\n    });\r\n};\r\n","import {\r\n    ASYNC_FETCH_CONNECTION,\r\n    ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n    ASYNC_FETCH_SENSORS,\r\n    DELETE_CONNECTION,\r\n    SET_ENABLE_HEADER,\r\n    SET_ENABLE_TAB_BAR,\r\n    SET_ROUTER_PATH,\r\n    SET_TABBAR_STATE,\r\n    SET_TITLE,\r\n    SET_USER,\r\n    TOGGLE_SENSOR_ELABLE,\r\n} from './actionTypes';\r\nimport {fetchSlotData} from '../api/dashboard';\r\nimport {fetchSensors, toggleElable} from '../api/sensor';\r\nimport {deleteConnection, fetchConnections} from '../api/connection';\r\nimport {fetchEnableTabBar, setEnableTabBar} from '../api/config';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: SET_USER,\r\n        data: user\r\n    }\r\n};\r\nexport const setTabBarState = show => {\r\n    return {\r\n        type: SET_TABBAR_STATE,\r\n        data: show\r\n    };\r\n};\r\n\r\nexport const setRouterPath = info => {\r\n    return {\r\n        type: SET_ROUTER_PATH,\r\n        data: info\r\n    };\r\n};\r\nexport const setTitle = title => {\r\n    return {\r\n        type: SET_TITLE,\r\n        data: title,\r\n    }\r\n};\r\nexport const asyncFetchDashboardSlotData = () => {\r\n    return dispatch => {\r\n        fetchSlotData().then(res => {\r\n            const slots = [];\r\n            for (const key in res) {\r\n                if (res.hasOwnProperty(key)) {\r\n                    slots.push(res[key]);\r\n                }\r\n            }\r\n            const action = {\r\n                type: ASYNC_FETCH_DASHBOARD_SLOT_DATA,\r\n                data: slots.sort((a, b) => a.slotNo.localeCompare(b.slotNo)),\r\n            };\r\n            dispatch(action);\r\n        });\r\n    }\r\n};\r\n\r\nexport const asyncFetchSensors = () => {\r\n    return dispatch => {\r\n        fetchSensors().then(res => {\r\n            const sensors = res.sort((a, b) => a.address - b.address);\r\n            const action = {\r\n                type: ASYNC_FETCH_SENSORS,\r\n                data: sensors,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const toggleSensorElable = (sensorId, hasElabel) => {\r\n    return dispatch => {\r\n        toggleElable(sensorId, hasElabel).then(() => {\r\n            const action = {\r\n                type: TOGGLE_SENSOR_ELABLE,\r\n                data: {\r\n                    sensorId,\r\n                    hasElabel\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    };\r\n};\r\n\r\n\r\nexport const asyncFetchConnection = () => {\r\n    return dispatch => {\r\n        fetchConnections().then(res => {\r\n            const action = {\r\n                type: ASYNC_FETCH_CONNECTION,\r\n                data: res\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const asyncDeleteConnection = id => {\r\n    return dispatch => {\r\n        deleteConnection(id).then(() => {\r\n            const action = {\r\n                type: DELETE_CONNECTION,\r\n                data: {\r\n                    id: id\r\n                }\r\n            };\r\n            dispatch(action);\r\n        })\r\n    }\r\n};\r\n\r\nexport const fetchEnableTabBarAction = () => {\r\n    return dispatch => {\r\n        fetchEnableTabBar().then(res => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: res.value === 'true',\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const setEnableTabBarAction = enable => {\r\n    return dispatch => {\r\n        setEnableTabBar(enable).then(() => {\r\n            const action = {\r\n                type: SET_ENABLE_TAB_BAR,\r\n                data: enable,\r\n            };\r\n            dispatch(action);\r\n        });\r\n    };\r\n};\r\n\r\nexport const showHeader = show => {\r\n    return {\r\n        type: SET_ENABLE_HEADER,\r\n        data: show,\r\n    };\r\n};\r\n","import {request} from './request';\r\n\r\nexport const fetchConnections = () => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const deleteConnection = id => {\r\n    return request({\r\n        url: `/api/connection/${id}`,\r\n        method: 'delete',\r\n    });\r\n};\r\n\r\nexport const createConnection = connection => {\r\n    return request({\r\n        url: '/api/connection/',\r\n        method: 'put',\r\n        data: connection,\r\n    });\r\n};\r\n\r\n\r\nexport const scanPort = () => {\r\n    return request({\r\n        url: '/api/serial/scan',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const scanDevice = id => {\r\n    return request({\r\n        url: `/api/connection/${id}/_scan`,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const startScanTempHumiSensors = connectionId => {\r\n    return request({\r\n        url: `/api/connection/${connectionId}/_scan-th-device`,\r\n        method: 'post',\r\n    });\r\n};\r\n","export const asKg = g => {\r\n    return (g / 1000.0).toFixed(3);\r\n};\r\n\r\nexport const isWan = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isIncredible = state => {\r\n    return state !== 1;\r\n};\r\n\r\nexport const isDisable = state => {\r\n    return state === 3;\r\n};\r\n\r\nexport const isOffline = state => {\r\n    return state === 2;\r\n};\r\n\r\nconst connectionTypes = {\r\n    1: '串口',\r\n    2: '网络',\r\n};\r\n\r\nexport const asConnectionType = type => {\r\n    if (type in connectionTypes) {\r\n        return connectionTypes[type];\r\n    }\r\n    return `Unknown [${type}]`;\r\n};\r\n\r\nconst weightStateTable = {\r\n    1: 'stable',\r\n    2: 'dynamic',\r\n    3: 'underLoad',\r\n    4: 'overLoad',\r\n};\r\nexport const isStable = weightState => {\r\n    return weightState === 1;\r\n};\r\n\r\nexport const asWeightStateString = state => {\r\n    return state in weightStateTable ? weightStateTable[state] : state;\r\n};\r\nconst slotSortWeight = {\r\n    'S': 1,\r\n    'D': 2,\r\n    'F': 3,\r\n};\r\n\r\nconst compareBySlotNo = (a, b) => {\r\n    const aName = a.slotNo;\r\n    const bName = b.slotNo;\r\n    const aNames = aName.split('-');\r\n    const bNames = bName.split('-');\r\n    if (aNames.length !== bNames.length) {\r\n        return aNames.length - bNames.length;\r\n    }\r\n    for (let i = 0; i < aNames.length; i++) {\r\n        const aItem = parseInt(aNames[i]);\r\n        const bItem = parseInt(bNames[i]);\r\n        if (!(aItem && bItem)) {\r\n            continue;\r\n        }\r\n        if (aItem !== bItem) {\r\n            return aItem - bItem;\r\n        }\r\n    }\r\n    return 0;\r\n};\r\nexport const groupSlots = slots => {\r\n    const groups = {};\r\n    const putSlot = (name, slot) => {\r\n        if (name in groups) {\r\n            groups[name].push(slot);\r\n        } else {\r\n            groups[name] = [slot];\r\n        }\r\n    };\r\n    for (let slot of slots) {\r\n        const slotNo = slot.slotNo;\r\n        const noItems = slotNo.match(/^(\\w+)-(\\w+)-(\\w+)$/);\r\n        if (noItems) {\r\n            const groupName = `${noItems[1]}货架第${noItems[2]}层`;\r\n            putSlot(groupName, slot);\r\n        } else {\r\n            putSlot('未分组货道', slot);\r\n        }\r\n    }\r\n    const res = [];\r\n    for (let name in groups) {\r\n        if (!groups.hasOwnProperty(name)) {\r\n            continue;\r\n        }\r\n        const slots = groups[name];\r\n        res.push({\r\n            name,\r\n            slots: slots.sort(compareBySlotNo),\r\n        });\r\n    }\r\n    return res.sort((a, b) => {\r\n        const aWeight = slotSortWeight[a.name.substring(0, 1)];\r\n        const bWeight = slotSortWeight[b.name.substring(0, 1)];\r\n        if (aWeight !== bWeight) {\r\n            return aWeight - bWeight;\r\n        }\r\n        return a.name.localeCompare(b.name);\r\n    });\r\n};\r\n\r\nconst stateTable = {\r\n    1: '使用中',\r\n    2: '离线',\r\n    3: '已停用',\r\n    4: '超载',\r\n    5: '欠载',\r\n};\r\nexport const asStateString = state => {\r\n    if (state in stateTable) {\r\n        return stateTable[state];\r\n    }\r\n    return 'Unknown State:' + state;\r\n};\r\n\r\nexport const asCount = data => {\r\n    const count = data.count;\r\n    const isStable = data.weightState === 1;\r\n    if (count === null) {\r\n        return '~❗';\r\n    }\r\n    if (isStable) {\r\n        return count;\r\n    }\r\n    return '~' + count;\r\n};\r\n\r\nconst thSensorStateTable = {\r\n    4: '过高',\r\n    5: '过低',\r\n    1: '正常',\r\n};\r\n\r\nexport const thSensorStateText = state => {\r\n    if (state in thSensorStateTable) {\r\n        return thSensorStateTable[state];\r\n    }\r\n    return '未知' + state;\r\n};\r\n\r\nexport const thSensorStateWarn = state => {\r\n    return state !== 1;\r\n};\r\n","import {request} from './request';\r\n\r\nexport const doZeroAll = () => {\r\n    return request({\r\n        url: '/api/slot/zero-all',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const zeroOne = slotNo => {\r\n    const encodedSlotNo = encodeURIComponent(slotNo);\r\n    const apiUrl = `/api/slot/${encodedSlotNo}/zero`;\r\n    return request({\r\n        url: apiUrl,\r\n        method: 'post',\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllSlots = () => {\r\n    return request({\r\n        url: '/api/slot/_with-sensors',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchDetail = id => {\r\n    return request({\r\n        url: `/api/slot/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const updateSlot = slot => {\r\n    return request({\r\n        url: `/api/slot/${slot.id}`,\r\n        method: 'post',\r\n        data: slot\r\n    });\r\n};\r\n\r\n\r\nexport const toggleELabelState = option => {\r\n    return request({\r\n        url: `/api/slot/${option.id}/has-e-label`,\r\n        method: 'post',\r\n        data: {hasElabel: option.hasELabel},\r\n    });\r\n};\r\n\r\nexport const highlightBySku = sku => {\r\n    return request({\r\n        url: '/api/slot/highlight',\r\n        method: 'post',\r\n        data: {\r\n            skuNo: sku\r\n        }\r\n    });\r\n};\r\n\r\n\r\nexport const fetchAllWithSensors = () => {\r\n    return request({\r\n        url: '/api/slot/_with-sensors',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setCompensationState = state => {\r\n    return request({\r\n        url: '/api/slot/_all-compensation',\r\n        method: 'post',\r\n        data: {\r\n            enableCompensation: state,\r\n        }\r\n    });\r\n};\r\n\r\nexport const mergeSlotsByIds = ids => {\r\n    return request({\r\n        url: '/api/slot/_merge',\r\n        method: 'post',\r\n        data: {\r\n            slotIds: ids,\r\n        }\r\n    });\r\n};\r\n\r\nexport const resetSlotBySlots = ids => {\r\n    return request({\r\n        url: '/api/slot/_reset-slot-sensors',\r\n        method: 'post',\r\n        data: {\r\n            slotIds: ids,\r\n        },\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {asyncFetchDashboardSlotData, setTabBarState, setTitle, showHeader} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport './Dashboard.sass'\r\nimport {Flex, List, Modal, NoticeBar, SearchBar, Tabs, Toast, WingBlank} from 'antd-mobile';\r\nimport {\r\n    asCount,\r\n    asKg,\r\n    asStateString,\r\n    groupSlots,\r\n    isDisable,\r\n    isIncredible,\r\n    isOffline,\r\n    isWan,\r\n    thSensorStateText,\r\n    thSensorStateWarn,\r\n} from '../../util/DataConvertor';\r\nimport {highlightBySku, zeroOne} from '../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDashboardData} from \"../../api/dashboard\";\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        slots: state.dashboardSlots\r\n    };\r\n};\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSlotData: (...args) => dispatch(asyncFetchDashboardSlotData(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        showHeader: (...args) => dispatch(showHeader(...args)),\r\n        showTabBar: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nconst TabItems = [\r\n    {\r\n        title: '重力货道数据',\r\n        key: 'dashboard',\r\n    },\r\n    {\r\n        title: '重力货道配置',\r\n        key: 'settings',\r\n    }\r\n];\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.rootEle = document;\r\n        this.state = {\r\n            slots: [],\r\n            groupedSlots: [],\r\n            thSensors: [],\r\n            sensors: [],\r\n            sensorModalVisible: false,\r\n            operationSlot: {},\r\n            searchSkuNo: '',\r\n            noticeSlots: [],\r\n        };\r\n        this.props.setTitle('Dashboard');\r\n        this.renderSlotCard = this.renderSlotCard.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startFetchData();\r\n        this.props.showHeader(false);\r\n        this.props.showTabBar(false);\r\n        this.listenKeyPress();\r\n    }\r\n\r\n    listenKeyPress() {\r\n        this.rootEle.onkeypress = e => {\r\n            const sourceTagName = e.target.tagName.toLowerCase();\r\n            if (sourceTagName !== 'body') {\r\n                return;\r\n            }\r\n            const keyCode = e.keyCode;\r\n            if (keyCode === 13) {\r\n                this.triggerHighlight(this.state.searchSkuNo);\r\n            } else {\r\n                this.appendSearchSku(String.fromCharCode(keyCode));\r\n            }\r\n        };\r\n    }\r\n\r\n    appendSearchSku(c) {\r\n        const {searchSkuNo} = this.state;\r\n        this.setState({\r\n            searchSkuNo: searchSkuNo + c,\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.fetchTimer) {\r\n            clearInterval(this.fetchTimer);\r\n        }\r\n        this.props.showHeader(true);\r\n        this.props.showTabBar(true);\r\n        this.cancelKeyPress();\r\n    }\r\n\r\n    cancelKeyPress() {\r\n        this.rootEle.onkeypress = null;\r\n    }\r\n\r\n    startFetchData() {\r\n        this.fetchTimer = setInterval(() => {\r\n            fetchDashboardData().then(res => {\r\n                const slotData = res.slotData;\r\n                const thData = res.temperatureHumidityData;\r\n                const slots = [];\r\n                const thSensors = [];\r\n                for (let slotNo in slotData) {\r\n                    if (slotData.hasOwnProperty(slotNo)) {\r\n                        slots.push(slotData[slotNo]);\r\n                    }\r\n                }\r\n                for (let id in thData) {\r\n                    if (thData.hasOwnProperty(id)) {\r\n                        thSensors.push(thData[id]);\r\n                    }\r\n                }\r\n                const groupedSlots = groupSlots(slots);\r\n                this.setState({\r\n                    slots: slots,\r\n                    thSensors: thSensors,\r\n                    groupedSlots: groupedSlots,\r\n                });\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    renderThSensorCard(sensor) {\r\n        const {data} = sensor;\r\n        let {temperature, humidity} = data;\r\n        temperature = temperature && temperature.toFixed(1);\r\n        const tempStateText = thSensorStateText(data.temperatureState);\r\n        const tempWarn = thSensorStateWarn(data.temperatureState);\r\n        const humidityText = humidity && humidity.toFixed(1);\r\n        const tempClass = ['value'];\r\n        if (tempWarn) {\r\n            tempClass.push('warn');\r\n        } else {\r\n            tempClass.push('ok');\r\n        }\r\n\r\n        return (<div className=\"th-card\" key={sensor.id}>\r\n            <div className=\"card-header\">\r\n                <div className=\"no\">{sensor.no}</div>\r\n                <div className=\"state\"><span>{humidityText}%</span><span className=\"dot\"/>使用中</div>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"inner\">\r\n                    <div className=\"item\">\r\n                        <span className=\"name\">温度:</span>\r\n                        <span className={tempClass.join(' ')}>{temperature}°C</span>\r\n                    </div>\r\n                    <div className=\"delimiter\"/>\r\n                    <div className=\"item\">\r\n                        <span className=\"name\">状态</span>\r\n                        <span className={tempClass.join(' ')}>{tempStateText}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n    }\r\n\r\n    renderThSensors() {\r\n        const {thSensors} = this.state;\r\n        return (<div className=\"th-sensor-group\">\r\n            <div className=\"title\">温湿度传感器</div>\r\n            <WingBlank className=\"sensors\">\r\n                {\r\n                    thSensors.map(sensor => this.renderThSensorCard(sensor))\r\n                }\r\n            </WingBlank>\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        const {searchSkuNo, noticeSlots, sensorModalVisible, operationSlot, sensors, groupedSlots} = this.state;\r\n        this.highlightSlotIds = {};\r\n        for (let slot of noticeSlots) {\r\n            this.highlightSlotIds[slot.id] = true;\r\n        }\r\n        const firstNoticeSlot = noticeSlots ? noticeSlots[0] : null;\r\n        return (\r\n            <div className=\"dashboard\">\r\n                <Tabs tabs={TabItems} onChange={(tab, index) => this.onTabChange(tab, index)}/>\r\n                <SearchBar\r\n                    value={searchSkuNo}\r\n                    onSubmit={e => this.triggerHighlight(e)}\r\n                    onChange={searchSkuNo => this.setState({searchSkuNo})}/>\r\n                <div className=\"notice-list\">\r\n                    {\r\n                        this.renderNoticeBar(firstNoticeSlot)\r\n                    }\r\n                </div>\r\n                <div className=\"slot-groups\">\r\n                    {\r\n                        groupedSlots.map(group => this.renderGroupItem(group))\r\n                    }\r\n                </div>\r\n                <div className=\"th-sensors\">\r\n                    {\r\n                        this.renderThSensors()\r\n                    }\r\n                </div>\r\n                <Modal visible={sensorModalVisible}\r\n                       title={`货道[${operationSlot.slotNo}]传感器`}\r\n                       transparent\r\n                       footer={[\r\n                           {\r\n                               text: '清零', onPress: () => this.doSlotZero(this.state.operationSlot)\r\n                           },\r\n                           {text: '关闭', onPress: () => this.setState({sensorModalVisible: false})},\r\n                       ]}\r\n                       onClose={() => this.setState({sensorModalVisible: false})}>\r\n                    <List renderHeader={() => 'Sensors'}>\r\n                        {\r\n                            sensors ? sensors.map(sensor => (<List.Item\r\n                                    extra={asStateString(sensor.state)}\r\n                                    key={sensor.id}>\r\n                                    {sensor.deviceSn}\r\n                                    <List.Item.Brief>{sensor.address485}</List.Item.Brief>\r\n                                </List.Item>)) :\r\n                                <List.Item>Empty List</List.Item>\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n                <div className=\"clear-float\"/>\r\n                <div className=\"bottom-white\">\r\n                    留白\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderNoticeBar(slot) {\r\n        if (!slot) {\r\n            return;\r\n        }\r\n        const content = [];\r\n        content.push(slot.skuName);\r\n        if (slot.skuShelfLifeOpenDays) {\r\n            content.push('，开封后保质期');\r\n            content.push((<span className=\"days\">{slot.skuShelfLifeOpenDays}</span>));\r\n            content.push('天');\r\n        } else {\r\n            content.push('，开封后保质期未设置！');\r\n        }\r\n        return (<NoticeBar className=\"notice\">\r\n            {content}\r\n        </NoticeBar>)\r\n    }\r\n\r\n    renderGroupItem(group) {\r\n        return (<div className=\"group-item\" key={group.name}>\r\n            <p className=\"group-name\">\r\n                {group.name}\r\n            </p>\r\n            <WingBlank>\r\n                <Flex className=\"slots\" wrap={\"wrap\"} justify=\"between\">\r\n                    {\r\n                        group.slots.map(slot => this.renderSlotCard(slot))\r\n                    }\r\n                </Flex>\r\n            </WingBlank>\r\n        </div>)\r\n    }\r\n\r\n    renderSlotCard(slot) {\r\n        const sensors = slot.sensors;\r\n        if (!sensors) {\r\n            return null;\r\n        }\r\n        const sku = slot.sku || {};\r\n        const data = slot.data || {};\r\n        let slotCardClassName = 'slot-card';\r\n        if (slot.id in this.highlightSlotIds) {\r\n            slotCardClassName += ' slot-card-highlight';\r\n        } else {\r\n            if (isWan(slot.state)) {\r\n                if (isDisable(slot.state)) {\r\n                    slotCardClassName += ' slot-card-disable';\r\n                } else if (isOffline(slot.state)) {\r\n                    slotCardClassName += ' slot-card-offline';\r\n                } else {\r\n                    slotCardClassName += ' slot-card-warn';\r\n                }\r\n            }\r\n        }\r\n        const incredible = isIncredible(data.toleranceState);\r\n        const state = asStateString(slot.state);\r\n        const weightInKg = asKg(data.weight);\r\n        const count = asCount(data);\r\n        return (<div key={slot.id}\r\n                     className={slotCardClassName}>\r\n            <Flex className=\"card-header\" justify=\"between\">\r\n                <div className=\"slot-no\">\r\n                    {slot.slotNo}\r\n                </div>\r\n                <div className=\"state\">\r\n                    <span className=\"weight\">({weightInKg}kg)</span>\r\n                    <span className=\"dot\"/>\r\n                    <span>{state}</span>\r\n                </div>\r\n            </Flex>\r\n            <Flex className=\"card-body\" justify=\"between\">\r\n                <div className=\"left\">\r\n                    <div className=\"sku-no\">SKU:{sku.skuNo}</div>\r\n                    <div className=\"sku-name\">{sku.name}</div>\r\n                </div>\r\n                <div className=\"delimiter\"/>\r\n                <div className={`right ${incredible ? 'right-incredible' : ''}`}\r\n                     onClick={() => this.onSlotCardClick(slot)}>\r\n                    <span className=\"pcs-value\">{count}</span>\r\n                    <span className=\"pcs-unit\">(数量)</span>\r\n                </div>\r\n            </Flex>\r\n        </div>);\r\n    }\r\n\r\n    onSlotCardClick(slot) {\r\n        this.setState({\r\n            operationSlot: slot,\r\n            sensors: slot.sensors,\r\n            sensorModalVisible: true,\r\n        });\r\n    }\r\n\r\n    triggerHighlight(skuNo) {\r\n        if (skuNo === '' || skuNo.trim() === '') {\r\n            Toast.show('Please Type a SkuNo!', 1, false);\r\n            return;\r\n        }\r\n        highlightBySku(skuNo).then(res => {\r\n            this.setState({\r\n                noticeSlots: res\r\n            });\r\n            setTimeout(() => this.setState({noticeSlots: [], searchSkuNo: '',}), 5000);\r\n        }).catch(err => {\r\n            this.setState({\r\n                searchSkuNo: '',\r\n            });\r\n            const {data} = err;\r\n            Modal.alert(`无法查询物料:${data.code}`, `无法查询物料号[${skuNo}]!(${data.msg})`);\r\n        });\r\n    }\r\n\r\n    onTabChange(tab, index) {\r\n        switch (index) {\r\n            case 0:\r\n                // dashboard\r\n                this.props.history.push({\r\n                    pathname: '/dashboard'\r\n                });\r\n                break;\r\n            case 1:\r\n                // settings\r\n                this.props.history.push({\r\n                    pathname: '/setting/'\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    doSlotZero(slot) {\r\n        const {slotNo} = slot;\r\n        Modal.alert(`清零${slotNo}?`, `确定清零货道[${slotNo}]?`, [\r\n            {text: '取消'},\r\n            {text: '确定', onPress: () => this.callDoZero(slotNo)}\r\n        ])\r\n    }\r\n\r\n    callDoZero(slotNo) {\r\n        zeroOne(slotNo).then(() => {\r\n            Toast.show(`slot[${slotNo}] Zero success!`, 3, false);\r\n        });\r\n    }\r\n}\r\n\r\nconst component = connect(mapState2Props, mapAction2Props)(Dashboard);\r\nexport default withRouter(component);\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Icon} from 'antd-mobile';\r\nimport './FloatButton.sass';\r\n\r\nclass FloatButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.defaultPosition = {\r\n            right: 20,\r\n            bottom: 100,\r\n        };\r\n        this.state = {\r\n            down: false,\r\n        };\r\n    }\r\n\r\n    static propTypes = {\r\n        iconType: PropTypes.string.isRequired,\r\n        onClick: PropTypes.func,\r\n    };\r\n\r\n    render() {\r\n        const {down} = this.state;\r\n        return (\r\n            <div className={\"floatButton \" + (down ? 'move' : '')}\r\n                 style={this.defaultPosition}\r\n                 onClick={e => this.callOnClick(e)}\r\n            >\r\n                <Icon type={this.props.iconType} className=\"icon\"/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    callOnClick(e) {\r\n        if (this.props.onClick) {\r\n            this.props.onClick(e);\r\n        }\r\n    }\r\n}\r\n\r\nexport default FloatButton;\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Card, List, Modal, Switch, Toast} from \"antd-mobile\";\r\nimport {asyncFetchSensors, setTabBarState, setTitle, toggleSensorElable} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {reloadSensors} from \"../../../api/sensor\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchSensors: (...args) => dispatch(asyncFetchSensors(...args)),\r\n        toggleSensorElable: (...args) => dispatch(toggleSensorElable(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    }\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        sensors: state.sensors,\r\n    };\r\n};\r\n\r\nclass SensorSetting extends Component {\r\n    componentDidMount() {\r\n        this.props.setTitle('重力传感器设置');\r\n        this.props.fetchSensors();\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.props;\r\n        return (\r\n            <div className=\"slotSetting\">\r\n                <Card>\r\n                    <Card.Header title=\"传感器信息\" extra=\"WeightSensor\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <List.Item extra={sensors.length}>传感器数量</List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n                <List renderHeader={() => '传感器列表'}>\r\n                    {\r\n                        sensors.map(sensor => (<List.Item key={sensor.id}>\r\n                            <Card>\r\n                                <Card.Header title={`地址:${sensor.address}`} extra={sensor.deviceSn}/>\r\n                                <Card.Body>\r\n                                    <List>\r\n                                        <List.Item extra={<Switch checked={sensor.hasElabel}\r\n                                                                  onChange={(e) => this.toggleElabel(sensor, e)}\r\n                                                                  platform=\"android\"/>}>\r\n                                            启用电子标签\r\n                                        </List.Item>\r\n                                        <List.Item arrow=\"horizontal\" onClick={() => this.toSensorDetails(sensor)}>\r\n                                            传感器详细参数\r\n                                        </List.Item>\r\n                                    </List>\r\n                                </Card.Body>\r\n                                <Card.Footer content={`绑定货道:[${sensor.slot && sensor.slot.slotNo}]`}\r\n                                             extra={sensor.slot && sensor.slot.id}/>\r\n                            </Card>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationActions()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    toSensorDetails(sensor) {\r\n        this.props.history.push({pathname: `/setting/${sensor.address}/sensor-details`});\r\n    }\r\n\r\n\r\n    toggleElabel(sensor, e) {\r\n        const sensorId = sensor.id;\r\n        this.props.toggleSensorElable(sensorId, e);\r\n    }\r\n\r\n    showOperationActions() {\r\n        const buttons = ['重新加载', '取消'];\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: '操作选择',\r\n            options: buttons,\r\n            cancelButtonIndex: buttons.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            if (index === 0) {\r\n                this.callReloadSensors();\r\n            }\r\n        })\r\n    }\r\n\r\n    callReloadSensors() {\r\n        Modal.alert('重新加载', '确定重新加载，该操作需等到一段时间（30s）才可生效?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '确定', onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('加载成功!', 1, false);\r\n                        })\r\n                    }\r\n                },\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(SensorSetting);\r\n","import React, {Component} from 'react';\r\nimport {List} from \"antd-mobile\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\n\r\nclass SettingMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('设置');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(true);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"setting\">\r\n                <List renderHeader={() => '设置'}>\r\n                    <List.Item onClick={() => this.go('/setting/sensor')} arrow=\"horizontal\">\r\n                        重力传感器\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/th-sensor')} arrow=\"horizontal\">\r\n                        温湿度传感器\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/slot')} arrow=\"horizontal\">\r\n                        货道管理\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/connection')} arrow=\"horizontal\">\r\n                        连接管理\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/system')} arrow=\"horizontal\">\r\n                        系统信息\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\" onClick={() => this.go('/setting/system-check')}>\r\n                        系统检查\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/overview')} arrow=\"horizontal\">\r\n                        货道概览信息\r\n                    </List.Item>\r\n                    <List.Item onClick={() => this.go('/setting/extra-setting')} arrow=\"horizontal\">\r\n                        扩展页面设置\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    go(path) {\r\n        this.props.history.push({\r\n            pathname: path\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SettingMenu));\r\n","import React, {Component} from 'react';\r\nimport {ActionSheet, Checkbox, List, Modal, Toast} from 'antd-mobile';\r\nimport {doZeroAll, fetchAllSlots, mergeSlotsByIds, resetSlotBySlots} from '../../../api/slot';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {setTabBarState, setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport './SlotSetting.sass';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst OperationActions = ['刷新', '全部清零', '合并选中货道', '拆分选中货道', '管理选中货道', '全选', '取消'];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\nconst isContinueSelected = slots => {\r\n    const selectedMap = {};\r\n    let selectedMinAddress = 999999;\r\n    for (let slot of slots) {\r\n        if (slot.selected) {\r\n            selectedMap[slot.address] = slot;\r\n            if (slot.address < selectedMinAddress) {\r\n                selectedMinAddress = slot.address;\r\n            }\r\n        }\r\n    }\r\n    delete selectedMap[selectedMinAddress];\r\n    while (Object.keys(selectedMap).length > 0) {\r\n        selectedMinAddress++;\r\n        const nextSelected = selectedMap[selectedMinAddress];\r\n        if (!nextSelected) {\r\n            return false;\r\n        }\r\n        delete selectedMap[selectedMinAddress];\r\n    }\r\n    return true;\r\n};\r\n\r\nclass SlotSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slots: [],\r\n            selectedNums: 0,\r\n            continueSelected: true,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTabBarState(false);\r\n        this.props.setTitle('重力货道设置');\r\n        this.fetchSlots();\r\n    }\r\n\r\n    onItemClick(slot) {\r\n        const {slots} = this.state;\r\n        for (let s of slots) {\r\n            if (s.id === slot.id) {\r\n                s.selected = !s.selected;\r\n            }\r\n        }\r\n        const selectedNums = slots.filter(slot => slot.selected).length;\r\n        const continueSelected = isContinueSelected(slots);\r\n        this.setState({\r\n            slots: slots,\r\n            selectedNums: selectedNums,\r\n            continueSelected: continueSelected,\r\n        });\r\n    }\r\n\r\n    renderSlotSensors(sensors) {\r\n        if (sensors.length <= 0) {\r\n            return (<span className=\"msg\">该货道已被合并</span>);\r\n        }\r\n        return sensors.map(sensor => (<span className=\"sensor-dot\" key={sensor.id}>{sensor.address}</span>));\r\n    }\r\n\r\n    renderSlotItem(slot) {\r\n        const sensors = slot.sensors || [];\r\n        if (slot.id < 0 && sensors.length <= 0) {\r\n            return\r\n        }\r\n        return (<Item key={slot.id} arrow=\"horizontal\" onClick={() => this.onItemClick(slot)}>\r\n            <div className=\"slot-item\">\r\n                <div className=\"cb-wrapper\">\r\n                    <Checkbox checked={slot.selected}/>\r\n                </div>\r\n                <div className=\"slot-no\">\r\n                    <span>{slot.slotNo}</span>\r\n                </div>\r\n                <div>\r\n                    {\r\n                        this.renderSlotSensors(sensors)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </Item>);\r\n    }\r\n\r\n    render() {\r\n        const {slots, selectedNums, continueSelected} = this.state;\r\n        const _this = this;\r\n        const selectedNumStyle = continueSelected ? 'continue' : 'warn';\r\n        return (\r\n            <div className=\"slot-setting\">\r\n                <List renderHeader={() => '重力货道列表'} className=\"slots\">\r\n                    {\r\n                        slots.map(slot => _this.renderSlotItem(slot))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperationSheet()}/>\r\n                <div className=\"fixed-tips\">\r\n                    <p>已选择：\r\n                        <span className={selectedNumStyle}>{selectedNums}</span>\r\n                        个\r\n                        <span className={selectedNumStyle}>{continueSelected ? '连续选择' : '未连续选择'}</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    findSelectedSlots() {\r\n        const {slots} = this.state;\r\n        return slots.filter(slot => slot.selected);\r\n    }\r\n\r\n    mergeSlot() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length < 2) {\r\n            Toast.show('请选中一个以上货道', 3, false);\r\n            return;\r\n        }\r\n        const slotNos = slots.map(slot => slot.slotNo).join(',');\r\n        const {continueSelected} = this.state;\r\n        if (!continueSelected) {\r\n            Modal.alert('无法合并不连续货道', '合并货道时需选择地址连续的货道！', [{text: '知道了'}]);\r\n            return;\r\n        }\r\n        Modal.alert('合并货道', `确认合并:${slotNos}?`, [\r\n            {\r\n                text: '取消',\r\n            },\r\n            {\r\n                text: '确定',\r\n                onPress: () => {\r\n                    mergeSlotsByIds(slots.map(slot => slot.id)).then(() => {\r\n                        Toast.show('合并成功', 3, false);\r\n                        this.fetchSlots();\r\n                    });\r\n                },\r\n            }\r\n        ]);\r\n    }\r\n\r\n    resetSlotSensor() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length < 1) {\r\n            Toast.show('请选中至少一个货道', 3, false);\r\n            return;\r\n        }\r\n        const slotNos = slots.map(slot => slot.slotNo).join(',');\r\n        Modal.alert('拆分货道', `确认拆分:${slotNos}?`, [\r\n            {\r\n                text: '取消',\r\n            },\r\n            {\r\n                text: '确定',\r\n                onPress: () => {\r\n                    resetSlotBySlots(slots.map(slot => slot.id)).then(() => {\r\n                        Toast.show('拆分成功', 3, false);\r\n                        this.fetchSlots();\r\n                    });\r\n                },\r\n            }\r\n        ]);\r\n    }\r\n\r\n    chooseAllSlotSensor() {\r\n        const {slots} = this.state;\r\n        const selected = slots.filter(slot => slot.selected).length !== slots.length;\r\n        for (let slot of slots) {\r\n            slot.selected = selected;\r\n        }\r\n        this.setState({slots});\r\n    }\r\n\r\n    toSelectedSlotDetails() {\r\n        const slots = this.findSelectedSlots();\r\n        if (slots.length !== 1) {\r\n            Toast.show('请选中一个货道', 3, false);\r\n            return;\r\n        }\r\n        const slot = slots[0];\r\n        this.toSlotDetail(slot);\r\n    }\r\n\r\n    showOperationSheet() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: OperationActions,\r\n            title: '操作选择',\r\n            cancelButtonIndex: OperationActions.length - 1,\r\n            destructiveButtonIndex: 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.fetchSlots();\r\n                    break;\r\n                case 1:\r\n                    this.doZeroAll();\r\n                    break;\r\n                case 2:\r\n                    this.mergeSlot();\r\n                    break;\r\n                case 3:\r\n                    this.resetSlotSensor();\r\n                    break;\r\n                case 4:\r\n                    this.toSelectedSlotDetails();\r\n                    break;\r\n                case 5:\r\n                    this.chooseAllSlotSensor();\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        })\r\n    }\r\n\r\n    toSlotDetail(slot) {\r\n        this.props.history.push({\r\n            pathname: `/setting/slot-detail/${slot.id}`,\r\n        });\r\n    }\r\n\r\n    doZeroAll() {\r\n        doZeroAll().then(() => {\r\n            Toast.show('全部货道已经被清零!');\r\n        });\r\n    }\r\n\r\n    fetchSlots() {\r\n        fetchAllSlots().then(res => {\r\n            const slots = res.map(slot => {\r\n                slot.selected = false;\r\n                return slot;\r\n            }).sort((a, b) => a.address - b.address);\r\n            this.setState({slots})\r\n        })\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotSetting));\r\n","import React, {Component} from 'react';\r\nimport {asyncDeleteConnection, asyncFetchConnection, setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Flex, InputItem, List, Modal, Picker, Toast} from 'antd-mobile';\r\nimport {asConnectionType} from '../../../util/DataConvertor';\r\nimport './ConnectionSetting.sass'\r\nimport {createConnection, scanDevice, scanPort, startScanTempHumiSensors} from '../../../api/connection';\r\nimport {connect} from 'react-redux';\r\n\r\nconst ConnectionOperations = [\r\n    '删除',\r\n    '扫描重力货道',\r\n    '扫描温湿度传感器',\r\n    '取消',\r\n];\r\nconst connectionTypes = [\r\n    {\r\n        label: '串口',\r\n        value: 1,\r\n    },\r\n    {\r\n        label: '网络',\r\n        value: 2,\r\n    }\r\n];\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        fetchConnection: (...args) => dispatch(asyncFetchConnection(...args)),\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        deleteConnection: (...args) => dispatch(asyncDeleteConnection(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        connections: state.connections,\r\n    };\r\n};\r\n\r\nclass ConnectionSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            createDialogVisible: false,\r\n            create: {\r\n                type: null,\r\n                target: ''\r\n            },\r\n            serialPorts: []\r\n        };\r\n        this.props.setTitle('物理连接设置');\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchConnection();\r\n        this.props.setTabBarState(false);\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {connections} = this.props;\r\n        const {createDialogVisible} = this.state;\r\n        const {create} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => '连接列表'}>\r\n                    {\r\n                        connections.map(connection => (\r\n                            <Item key={connection.id} arrow=\"horizontal\"\r\n                                  onClick={() => this.showConnectionOperations(connection)}>\r\n                                <Flex justify=\"between\" className=\"connectionItem\">\r\n                                    <span className=\"type\">{asConnectionType(connection.type)}</span>\r\n                                    <span className=\"target\">{connection.target}</span>\r\n                                </Flex>\r\n                            </Item>))\r\n                    }\r\n                    <Item key=\"createButton\">\r\n                        <Button type=\"primary\" onClick={() => this.showCreateDialog()}>创建连接</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={createDialogVisible}\r\n                    transparent\r\n                    title=\"创建连接\"\r\n                    footer={[\r\n                        {text: '取消', onPress: () => this.setState({createDialogVisible: false})},\r\n                        {text: '创建', onPress: () => this.createConnection()},\r\n                    ]}\r\n                    onClose={() => this.setState({createDialogVisible: false})}>\r\n                    <List>\r\n                        <Picker data={connectionTypes} title=\"连接类型\" cols={1}\r\n                                extra=\"请选择\"\r\n                                onChange={e => this.setCreateType(e)}>\r\n                            <List.Item>\r\n                                <InputItem value={create.type && asConnectionType(create.type)}\r\n                                           disabled={true}\r\n                                           placeholder=\"类型\"/>\r\n                            </List.Item>\r\n                        </Picker>\r\n                        {\r\n                            (() => {\r\n                                const input = (<List.Item key=\"target\"><InputItem placeholder=\"Connection Target\"\r\n                                                                                  onChange={e => this.setCreateTarget(e)}\r\n                                                                                  value={create.target}\r\n                                                                                  disabled={this.state.create.type === 1}/></List.Item>);\r\n                                if (create.type === 1) {\r\n                                    return (<Picker data={this.state.serialPorts}\r\n                                                    extra=\"选择\"\r\n                                                    title=\"串口列表\"\r\n                                                    cols={1}\r\n                                                    onChange={arr => this.setCreateTargetSerial(arr)}>\r\n                                        {input}\r\n                                    </Picker>)\r\n                                } else {\r\n                                    return input;\r\n                                }\r\n                            })()\r\n                        }\r\n                    </List>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    deleteConnection(connection) {\r\n        Modal.alert('删除连接!', '确定删除连接？',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '删除',\r\n                    onPress: () => {\r\n                        this.props.deleteConnection(connection.id);\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    scanConnection(connection) {\r\n        Modal.alert('扫描重力传感器!', '扫描该连接下的传感器？?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '扫描',\r\n                    onPress: () => {\r\n                        scanDevice(connection.id).then(() => {\r\n                            Toast.show('扫描已开始!', 2, false)\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    showCreateDialog() {\r\n        this.setState({\r\n            createDialogVisible: true\r\n        })\r\n    }\r\n\r\n    createConnection() {\r\n        createConnection(this.state.create).then(() => {\r\n            this.props.fetchConnection();\r\n            this.setState({\r\n                create: {},\r\n                createDialogVisible: false,\r\n            });\r\n        })\r\n    }\r\n\r\n    setCreateType(types) {\r\n        if (types.length < 1) {\r\n            Toast.show('请选择连接类型!');\r\n        }\r\n        const type = types[0];\r\n        const newCreate = {\r\n            type,\r\n            target: ''\r\n        };\r\n        this.setState({create: newCreate});\r\n        if (type === 1 && this.state.serialPorts.length <= 0) {\r\n            scanPort().then(res => {\r\n                const serialPorts = [];\r\n                for (const port of res) {\r\n                    serialPorts.push({\r\n                        label: port,\r\n                        value: port,\r\n                    });\r\n                }\r\n                this.setState({serialPorts});\r\n            });\r\n        }\r\n    }\r\n\r\n    setCreateTarget(e) {\r\n        const create = {\r\n            ...this.state.create,\r\n            target: e,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    setCreateTargetSerial(serialIndexList) {\r\n        if (!serialIndexList) {\r\n            Toast.show('请选择串口!');\r\n            return;\r\n        }\r\n        const port = serialIndexList[0];\r\n        const create = {\r\n            ...this.state.create,\r\n            target: port,\r\n        };\r\n        this.setState({create});\r\n    }\r\n\r\n    startScanTHSensors(connection) {\r\n        Modal.alert('扫描温湿度传感器!', '扫描该连接下的温湿度传感器?',\r\n            [\r\n                {\r\n                    text: '取消',\r\n                },\r\n                {\r\n                    text: '扫描',\r\n                    onPress: () => {\r\n                        startScanTempHumiSensors(connection.id).then(() => {\r\n                            Toast.show('扫描已开始!', 2, false)\r\n                        });\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n\r\n    showConnectionOperations(connection) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: `${connection.target} 操作`,\r\n            options: ConnectionOperations,\r\n            cancelButtonIndex: ConnectionOperations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.deleteConnection(connection);\r\n                    break;\r\n                case 1:\r\n                    this.scanConnection(connection);\r\n                    break;\r\n                case 2:\r\n                    this.startScanTHSensors(connection);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, mapAction2Props)(ConnectionSetting);\r\n","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchDetail, toggleELabelState, updateSlot, zeroOne} from '../../../api/slot';\r\nimport {ActionSheet, Button, InputItem, List, Switch, Toast, WingBlank} from 'antd-mobile';\r\nimport {setTitle} from \"../../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport FloatButton from '../../commons/FloatButton';\r\n\r\nconst ActionButtons = [\r\n    '清零该货道',\r\n    '删除货道',\r\n    '取消',\r\n];\r\nconst {Item} = List;\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass SlotDetailSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {}\r\n        };\r\n        this.slotId = this.props.match.params.id;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle(`${this.slotId} 货道设置`);\r\n        this.fetchSlotInfo();\r\n    }\r\n\r\n    fetchSlotInfo() {\r\n        fetchDetail(this.slotId).then(res => {\r\n            this.setState({slot: res});\r\n            this.props.setTitle(`${res.slotNo} 货道设置`);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {slot} = this.state;\r\n        return (\r\n            <div className=\"slotDetail\">\r\n                <List renderHeader={() => '货道信息'}>\r\n                    <Item key=\"slotNo\">\r\n                        <InputItem placeholder=\"逻辑货道号\" value={slot.slotNo}\r\n                                   onChange={text => this.setUpdateSlotProp({slotNo: text})}>货道号</InputItem>\r\n                    </Item>\r\n                    <Item key=\"SkuName\">\r\n                        <InputItem placeholder=\"SKU名称\" value={slot.skuName}\r\n                                   onChange={text => this.setUpdateSlotProp({skuName: text})}>SKU名称</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuNo\">\r\n                        <InputItem placeholder=\"SKU号\" value={slot.skuNo}\r\n                                   onChange={text => this.setUpdateSlotProp({skuNo: text})}>SKU号</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuApw\">\r\n                        <InputItem placeholder=\"SKU单重\" value={slot.skuApw}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuApw: text})}>SKU单重</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuTolerance\">\r\n                        <InputItem placeholder=\"SKU允差\" value={slot.skuTolerance}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuTolerance: text})}>SKU允差</InputItem>\r\n                    </Item>\r\n                    <Item key=\"skuShelfLifeOpenDays\">\r\n                        <InputItem placeholder=\"开封后保质天数\" value={slot.skuShelfLifeOpenDays}\r\n                                   type=\"number\"\r\n                                   onChange={text => this.setUpdateSlotProp({skuShelfLifeOpenDays: text})}>\r\n                            保质期\r\n                        </InputItem>\r\n                    </Item>\r\n                    <Item key=\"applyBtn\">\r\n                        <WingBlank><Button type=\"primary\" onClick={() => this.applyModify()}>保存</Button></WingBlank>\r\n                    </Item>\r\n                </List>\r\n                <List renderHeader={() => 'Operations'}>\r\n                    <List.Item\r\n                        key=\"hasELabel\"\r\n                        extra={<Switch\r\n                            checked={slot.hasElabel}\r\n                            onChange={state => this.toggleELabel(state)}\r\n                            platform=\"android\"/>}>\r\n                        启用电子标签\r\n                    </List.Item>\r\n                    <List.Item\r\n                        arrow=\"horizontal\"\r\n                        onClick={() => this.props.history.push({pathname: `/setting/slot-sensors/${slot.id}`})}>\r\n                        货道传感器管理\r\n                    </List.Item>\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.openOperation()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    openOperation() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            title: '操作选择',\r\n            options: ActionButtons,\r\n            destructiveButtonIndex: 1,\r\n            cancelButtonIndex: ActionButtons.length - 1,\r\n        }, buttonIndex => {\r\n            switch (buttonIndex) {\r\n                case 0:\r\n                    this.doZero();\r\n                    break;\r\n                case 1:\r\n                    Toast.show('暂时不能删除货道', 2, false);\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    doZero() {\r\n        const {slot} = this.state;\r\n        zeroOne(slot.slotNo).then(() => {\r\n            Toast.show('清零成功!');\r\n        });\r\n    }\r\n\r\n    setUpdateSlotProp(props) {\r\n        const slot = {\r\n            ...this.state.slot,\r\n            ...props\r\n        };\r\n        this.setState({slot});\r\n    }\r\n\r\n    applyModify() {\r\n        updateSlot(this.state.slot).then(() => {\r\n            Toast.show('Apply Success!');\r\n        });\r\n    }\r\n\r\n    toggleELabel(hasELabel) {\r\n        toggleELabelState({id: this.slotId, hasELabel}).then(() => {\r\n            Toast.show('Toggle ELabel Success!');\r\n            this.fetchSlotInfo();\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(null, mapAction2Props)(SlotDetailSetting));\r\n","import React, {Component} from 'react';\r\nimport {Button, List, Modal, Switch, TextareaItem, Toast} from 'antd-mobile';\r\nimport {setEnableTabBarAction, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {fetchSystemInfo} from '../../../api/dashboard';\r\nimport {reloadLibPath} from '../../../api/serial';\r\nimport {stopWeightService} from '../../../api/sensor';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setEnableTabBar: (...args) => dispatch(setEnableTabBarAction(...args)),\r\n    };\r\n};\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        enableTabBar: state.enableTabBar,\r\n    };\r\n};\r\n\r\nclass SystemSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemInfo: {},\r\n            libLoadVisible: false,\r\n            reloadLibPath: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('系统信息');\r\n        fetchSystemInfo().then(res => {\r\n            this.setState({\r\n                systemInfo: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {Item} = List;\r\n        const {systemInfo, libLoadVisible, reloadLibPath} = this.state;\r\n        const {enableTabBar} = this.props;\r\n        return (\r\n            <div className=\"systemSettings\">\r\n                <List renderHeader={() => '系统信息'}>\r\n                    <Item key=\"appName\" extra={systemInfo.appName}>应用名称</Item>\r\n                    <Item key=\"appVersion\" extra={systemInfo.appVersion}>应用版本</Item>\r\n                    <Item key=\"dbVersion\" extra={systemInfo.dbVersion}>数据库版本</Item>\r\n                    <Item key=\"dbVersionName\" extra={systemInfo.dbVersionName}>数据库版本名</Item>\r\n                    <Item key=\"pid\" extra={systemInfo.pid}>进程ID</Item>\r\n                    <Item key=\"libPath\" arrow=\"horizontal\"\r\n                          onClick={() => this.showLibLoadModal()}> 驱动路径: {systemInfo.libPath}</Item>\r\n                </List>\r\n                <List renderHeader={() => '系统设置'}>\r\n                    <Item\r\n                        key=\"tabBar\"\r\n                        extra={<Switch\r\n                            checked={enableTabBar}\r\n                            onChange={target => this.setEnableTabBar(target)}\r\n                            platform=\"android\"/>}>\r\n                        底部标签栏\r\n                    </Item>\r\n                    <Item key=\"systemProps\" arrow=\"horizontal\"\r\n                          onClick={() => this.props.history.push({pathname: '/setting/system-props'})}>\r\n                        JVM信息\r\n                    </Item>\r\n                    <Item key=\"stopService\">\r\n                        <Button type=\"warning\" onClick={() => this.stopWeightService()}>停止重力服务</Button>\r\n                    </Item>\r\n                </List>\r\n                <Modal\r\n                    visible={libLoadVisible}\r\n                    title=\"重新加载驱动\"\r\n                    transparent\r\n                    maskClosable={true}\r\n                    footer={[\r\n                        {\r\n                            text: '取消',\r\n                            onPress: () => this.showLibLoadModal(false),\r\n                        },\r\n                        {\r\n                            text: '加载',\r\n                            onPress: () => this.reloadLibrary()\r\n                        },\r\n                    ]}>\r\n                    <TextareaItem\r\n                        placeholder=\"驱动路径!\"\r\n                        autoHeight\r\n                        value={reloadLibPath} onChange={e => this.setState({reloadLibPath: e})}/>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setEnableTabBar(target) {\r\n        this.props.setEnableTabBar(target);\r\n    }\r\n\r\n    showLibLoadModal(show = true) {\r\n        const reloadLibPath = this.state.systemInfo.libPath;\r\n        this.setState({\r\n            reloadLibPath,\r\n            libLoadVisible: show\r\n        });\r\n    }\r\n\r\n    reloadLibrary() {\r\n        reloadLibPath(this.state.reloadLibPath).then(res => {\r\n            Toast.show(`加载成功: [${res}]`);\r\n            this.setState({\r\n                libLoadVisible: false,\r\n            })\r\n        })\r\n    }\r\n\r\n    stopWeightService() {\r\n        stopWeightService().then(() => {\r\n            Toast.show(\"重力服务已停止!\");\r\n        });\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props, mapAction2Props)(SystemSetting));\r\n","import {request} from './request';\r\n\r\nexport const reloadLibPath = path => {\r\n    return request({\r\n        url: '/api/serial/load-lib',\r\n        method: 'post',\r\n        data: {\r\n            libPath: path\r\n        }\r\n    })\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchSystemProps} from '../.././../api/dashboard';\r\nimport {List, TextareaItem} from 'antd-mobile';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    console.log(props, dispatch);\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\nconst {Item} = List;\r\n\r\nclass SystemPropsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            systemProps: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('JVM环境变量');\r\n        fetchSystemProps().then(res => {\r\n            const propList = [];\r\n            for (const name in res) {\r\n                if (res.hasOwnProperty(name)) {\r\n                    propList.push({\r\n                        name,\r\n                        value: res[name],\r\n                    });\r\n                }\r\n            }\r\n            this.setState({\r\n                systemProps: propList\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {systemProps} = this.state;\r\n        return (\r\n            <div className=\"systemProps\">\r\n                <List renderHeader={() => 'System Properties'}>\r\n                    {\r\n                        systemProps.map(p => (<Item key={p.name}>\r\n                            <div>{p.name}</div>\r\n                            <TextareaItem value={p.value} autoHeight labelNumber={5}/>\r\n                        </Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SystemPropsSetting);\r\n","import React, {Component} from 'react';\r\nimport {fetchAllWithSensors, fetchDetail} from '../../../api/slot';\r\nimport {setSlotByIds} from '../../../api/sensor';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {ActionSheet, Button, Flex, List, Modal, Picker, Toast, WingBlank} from \"antd-mobile\";\r\nimport './SlotSensorsSetting.sass'\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\nconst SENSOR_OPERATIONS = ['移除', '取消'];\r\n\r\nclass SlotSensorsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            slot: {},\r\n            sensors: [],\r\n            sensorRemoveMode: false,\r\n            allSlots: [],\r\n            sensorPickerData: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('货道传感器管理');\r\n        const {id} = this.props.match.params;\r\n        fetchDetail(id).then(res => {\r\n            const sensors = res.sensors;\r\n            for (let sensor of sensors) {\r\n                sensor.changed = false;\r\n            }\r\n            this.setState({\r\n                slot: res,\r\n                sensors: sensors,\r\n            });\r\n            this.props.setTitle(`传感器管理[${res.slotNo}]`);\r\n        });\r\n        fetchAllWithSensors().then(res => {\r\n            const pickerData = [];\r\n            for (let slot of res) {\r\n                const sensors = slot.sensors;\r\n                const children = [];\r\n                for (let sensor of sensors) {\r\n                    children.push({\r\n                        value: sensor.id,\r\n                        label: sensor.address,\r\n                    });\r\n                }\r\n                pickerData.push({\r\n                    value: slot.id,\r\n                    label: slot.slotNo,\r\n                    children: children,\r\n                });\r\n            }\r\n            this.setState({allSlots: res, sensorPickerData: pickerData,});\r\n        });\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {sensorRemoveMode, sensorPickerData} = this.state;\r\n        const sensorItem = (\r\n            <List.Item key={sensor.id}\r\n                       arrow=\"horizontal\"\r\n                       className={`sensor-item ${sensor.changed ? 'sensor-item-changed' : ''}`}\r\n                       onClick={() => this.openSensorOperations(sensor)}\r\n                       extra={sensorRemoveMode ? '点击删除' : ''}>\r\n                {sensor.deviceSn}\r\n            </List.Item>);\r\n        if (sensorRemoveMode) {\r\n            return sensorItem;\r\n        } else {\r\n            return (<Picker\r\n                data={sensorPickerData}\r\n                key={sensor.id}\r\n                value={[sensor.slotId, sensor.id]}\r\n                cols={2}\r\n                onChange={v => this.onSelectSensor(sensor, v)}>{sensorItem}</Picker>)\r\n        }\r\n    }\r\n\r\n    onSelectSensor(oldSensor, selected) {\r\n        const slotId = selected[0];\r\n        const sensorId = selected[1];\r\n        let index = -1;\r\n        const selectedSensors = this.state.sensors;\r\n        for (let i in selectedSensors) {\r\n            if (!selectedSensors.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            const sensor = selectedSensors[i];\r\n            if (sensor.id === oldSensor.id) {\r\n                index = i;\r\n            }\r\n        }\r\n        let selectedSensor;\r\n        for (let slot of this.state.allSlots) {\r\n            if (slot.id === slotId) {\r\n                for (let sensor of slot.sensors) {\r\n                    if (sensor.id === sensorId) {\r\n                        sensor.changed = true;\r\n                        selectedSensor = sensor;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        for (let s of selectedSensors) {\r\n            if (s.id === selectedSensor.id) {\r\n                Toast.show('传感器重复!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        selectedSensors[index] = selectedSensor;\r\n        this.setState({sensors: selectedSensors,})\r\n    }\r\n\r\n    render() {\r\n        const {slot, sensors, sensorRemoveMode} = this.state;\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => '货道信息'}>\r\n                    <List.Item extra={slot.slotNo}>货道号</List.Item>\r\n                    <List.Item extra={slot.skuName}>SKU名称</List.Item>\r\n                    <List.Item extra={slot.skuNo}>SKU号</List.Item>\r\n                </List>\r\n                <List renderHeader={() => 'Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => this.renderSensorItem(sensor))\r\n                    }\r\n                    <List.Item>\r\n                        <WingBlank>\r\n                            <Flex justify={\"between\"}>\r\n                                <Flex.Item>\r\n                                    <Button type=\"warning\"\r\n                                            onClick={() => this.setState({sensorRemoveMode: !this.state.sensorRemoveMode})}>\r\n                                        {sensorRemoveMode ? '退出删除' : '删除'}\r\n                                    </Button>\r\n                                </Flex.Item>\r\n                                <Flex.Item>\r\n                                    <Button type=\"ghost\" onClick={() => this.addSensor()}\r\n                                            disabled={sensorRemoveMode}>添加</Button>\r\n                                </Flex.Item>\r\n                                <Flex.Item>\r\n                                    <Button type=\"primary\" disabled={sensorRemoveMode}\r\n                                            onClick={() => this.applySensors()}>保存</Button>\r\n                                </Flex.Item>\r\n                            </Flex>\r\n                        </WingBlank>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    addSensor() {\r\n        for (let sensor of this.state.sensors) {\r\n            if (sensor.id < 0) {\r\n                Toast.show('请选择一个传感器!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        const {sensors} = this.state;\r\n        sensors.push({\r\n            id: -1,\r\n            deviceSn: '未选择',\r\n            changed: true,\r\n        });\r\n        this.setState({sensors});\r\n    }\r\n\r\n    openSensorOperations(sensor) {\r\n        const {sensorRemoveMode} = this.state;\r\n        if (!sensorRemoveMode) {\r\n            return;\r\n        }\r\n        ActionSheet.showActionSheetWithOptions(\r\n            {\r\n                options: SENSOR_OPERATIONS,\r\n                title: `传感器 ${sensor.deviceSn}`,\r\n                cancelButtonIndex: 2,\r\n                destructiveButtonIndex: 0,\r\n            },\r\n            index => {\r\n                if (index === 0) {\r\n                    Modal.alert('移除传感器',\r\n                        `移除传感器 ${sensor.deviceSn}?`,\r\n                        [\r\n                            {text: '取消'},\r\n                            {\r\n                                text: '移除',\r\n                                onPress: () => this.removeSensor(sensor),\r\n                            }\r\n                        ]);\r\n                }\r\n            })\r\n    }\r\n\r\n    removeSensor(sensor) {\r\n        const {sensors} = this.state;\r\n        const newSensors = [];\r\n        for (let i in sensors) {\r\n            if (!sensors.hasOwnProperty(i)) {\r\n                continue;\r\n            }\r\n            const s = sensors[i];\r\n            if (s.id === sensor.id) {\r\n                continue;\r\n            }\r\n            newSensors.push(s);\r\n        }\r\n        this.setState({sensors: newSensors});\r\n    }\r\n\r\n    applySensors() {\r\n        const sensorIds = this.state.sensors.map(v => v.id);\r\n        for (let id of sensorIds) {\r\n            if (id <= 0) {\r\n                Toast.show('Any sensor not selected!', 1, false);\r\n                return;\r\n            }\r\n        }\r\n        const slot = this.state.slot;\r\n        Modal.alert('Apply Sensor Setting', 'Do you want to apply this changes?', [{text: 'Cancel'}, {\r\n            text: 'Apply',\r\n            onPress: () => {\r\n                setSlotByIds(sensorIds, slot.id).then(res => {\r\n                    Toast.show('Apply Success!');\r\n                    const {sensors} = this.state;\r\n                    for (let s of sensors) {\r\n                        s.changed = false;\r\n                    }\r\n                    this.setState({sensors});\r\n                })\r\n            }\r\n        }])\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SlotSensorsSetting);\r\n","import React, {Component} from 'react';\r\nimport {dumpAll} from '../../../api/sensor';\r\nimport {Button, List, Modal, TextareaItem, WingBlank} from 'antd-mobile';\r\n\r\nclass Overview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        dumpAll().then(res => {\r\n            const sensors = res.sort((a, b) => a.address - b.address);\r\n            this.setState({sensors})\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.state;\r\n        return (\r\n            <div className=\"overview\">\r\n                <List renderHeader={() => 'All Sensors'}>\r\n                    {\r\n                        sensors.map(sensor => (\r\n                            <List.Item key={sensor.id}>\r\n                                {this.renderSensorItem(sensor)}\r\n                            </List.Item>\r\n                        ))\r\n                    }\r\n                </List>\r\n                <WingBlank>\r\n                    <Button onClick={() => this.refresh()} type=\"primary\">刷新</Button>\r\n                </WingBlank>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSensorItem(sensor) {\r\n        const {slot, connection} = sensor;\r\n        return (<div onClick={() => this.onSensorClick(sensor)}>\r\n            传感器:[id:{sensor.id}/address:{sensor.address}]\r\n            货道:[id:{slot && slot.id}/No:{slot && slot.slotNo}]\r\n            连接:[id:{connection && connection.id}/{connection && connection.target}]\r\n        </div>);\r\n    }\r\n\r\n    onSensorClick(sensor) {\r\n        const {connection, slot} = sensor;\r\n        sensor.slot = null;\r\n        sensor.connection = null;\r\n        const list = (<List renderHeader={() => '传感器'}>\r\n            <TextareaItem value={JSON.stringify(sensor)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(connection)} autoHeight/>\r\n            <TextareaItem value={JSON.stringify(slot)} autoHeight/>\r\n        </List>);\r\n        Modal.alert('Sensor', list);\r\n    }\r\n}\r\n\r\nexport default Overview;\r\n","import React, {Component} from 'react';\r\nimport {disconnectTcp, fetchDatabaseTables, fetchStatusTable, resetDatabase} from '../../../api/systemStatus';\r\nimport {Button, Flex, InputItem, List, Modal, Picker, Toast} from 'antd-mobile';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {fetchSoftFilterLevel, updateSoftFilterLevel} from '../../../api/config';\r\nimport {setCompensationState} from '../../../api/slot';\r\nimport {cleanAllBackupSn, reloadSensors} from '../../../api/sensor';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\nconst renderConnectionStatus = status => {\r\n    if (status) {\r\n        return (<span style={{color: '#1F90E6'}}>Connected</span>)\r\n    } else {\r\n        return (<span style={{color: '#E94F4F'}}>Disconnected</span>)\r\n    }\r\n};\r\n\r\nconst SoftFilterLevelTable = {\r\n    0: '关闭[0]',\r\n    1: '低[1]',\r\n    2: '中[2]',\r\n    3: '高[3]',\r\n};\r\n\r\nconst SoftFilterLevels = [\r\n    {\r\n        label: SoftFilterLevelTable[3],\r\n        value: 3,\r\n        key: 3,\r\n    },\r\n    {\r\n        label: SoftFilterLevelTable[2],\r\n        value: 2,\r\n        key: 2,\r\n    },\r\n    {\r\n        label: SoftFilterLevelTable[1],\r\n        value: 1,\r\n        key: 1,\r\n    },\r\n    {\r\n        label: SoftFilterLevelTable[0],\r\n        value: 0,\r\n        key: 0,\r\n    },\r\n];\r\n\r\nconst doSetCompensationState = state => {\r\n    setCompensationState(state).then(() => {\r\n        Toast.show(`补偿${state ? '开启' : '关闭'}成功！`, 3, false);\r\n    });\r\n};\r\n\r\nclass SystemCheck extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            statusTable: {\r\n                tcpApi: {},\r\n            },\r\n            databaseTables: [],\r\n            softFilterLevel: -1,\r\n            softFilterLevelLabel: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('系统检查');\r\n        this.refreshStatusTable();\r\n        this.refreshSoftFilterLevel();\r\n    }\r\n\r\n    refreshSoftFilterLevel() {\r\n        fetchSoftFilterLevel().then(res => {\r\n            const {value} = res;\r\n            const level = parseInt(value);\r\n            this.setState({\r\n                softFilterLevelLabel: SoftFilterLevelTable[level],\r\n                softFilterLevel: level,\r\n            });\r\n        });\r\n    }\r\n\r\n    refreshStatusTable() {\r\n        fetchStatusTable().then(res => {\r\n            this.setState({\r\n                statusTable: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    refreshDatabaseTables() {\r\n        fetchDatabaseTables().then(res => {\r\n            this.setState({databaseTables: res,})\r\n        });\r\n    }\r\n\r\n    showCompensationOperations() {\r\n        Modal.operation([\r\n            {\r\n                text: '关闭补偿', onPress: () => {\r\n                    doSetCompensationState(false);\r\n                }\r\n            },\r\n            {\r\n                text: '开启补偿', onPress: () => {\r\n                    doSetCompensationState(true);\r\n                }\r\n            },\r\n        ]);\r\n    }\r\n\r\n    render() {\r\n        const {statusTable, databaseTables, softFilterLevel, softFilterLevelLabel} = this.state;\r\n        const {tcpApi} = statusTable;\r\n        return (\r\n            <div className=\"system-check\">\r\n                <List renderHeader={() => 'SCADA_API状态'}>\r\n                    <List.Item extra={renderConnectionStatus(tcpApi.connection)}>\r\n                        连接状态\r\n                    </List.Item>\r\n                    <List.Item extra={tcpApi.ip}>\r\n                        IP地址\r\n                    </List.Item>\r\n                    <List.Item extra={tcpApi.port}>\r\n                        端口\r\n                    </List.Item>\r\n                    <List.Item arrow=\"horizontal\"\r\n                               onClick={() => this.props.history.push({pathname: '/setting/message-log'})}>\r\n                        交互日志\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        <Flex justify=\"between\">\r\n                            <Flex.Item>\r\n                                <Button type=\"warning\" onClick={() => this.reconnectTcp()}>重新连接</Button>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <Button type=\"primary\" onClick={() => this.refreshStatusTable()}>刷新</Button>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </List.Item>\r\n                </List>\r\n                <List renderHeader={() => '传感器信息'}>\r\n                    <List.Item arrow=\"horizontal\"\r\n                               onClick={() => this.props.history.push({pathname: '/setting/sensor-healthy'})}>\r\n                        传感器健康\r\n                    </List.Item>\r\n                    <Picker data={SoftFilterLevels}\r\n                            cols={1}\r\n                            title=\"软件滤波等级\"\r\n                            value={softFilterLevel}\r\n                            onChange={value => {\r\n                                this.setSoftFilterLevel(value)\r\n                            }}>\r\n                        <InputItem value={softFilterLevelLabel}>软滤波等级</InputItem>\r\n                    </Picker>\r\n                    <List.Item extra=\"Disable/Enable\"\r\n                               onClick={() => this.showCompensationOperations()}>\r\n                        补偿管理\r\n                    </List.Item>\r\n                    <List.Item extra=\"强制刷新货道数据\"\r\n                               onClick={() => this.showReloadConfirm()}>\r\n                        重新加载\r\n                    </List.Item>\r\n                    <List.Item extra=\"清除备份SN并重新收集\"\r\n                               onClick={() => this.showCleanBackupSnConfirm()}>\r\n                        重新收集SN\r\n                    </List.Item>\r\n                </List>\r\n                <List renderHeader={() => '数据库信息'}>\r\n                    {databaseTables.map(tableName => (<List.Item key={tableName}>{tableName}</List.Item>))}\r\n                    <List.Item>\r\n                        <Flex>\r\n                            <Flex.Item>\r\n                                <Button type=\"warning\" onClick={() => this.showDbResetConfirm()}>重置数据库</Button>\r\n                            </Flex.Item>\r\n                            <Flex.Item>\r\n                                <Button type=\"primary\"\r\n                                        onClick={() => this.refreshDatabaseTables()}>数据表</Button>\r\n                            </Flex.Item>\r\n                        </Flex>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showCleanBackupSnConfirm() {\r\n        Modal.alert('重新收集SN', '确认清空备份SN并重新收集？', [\r\n            {text: '取消'},\r\n            {\r\n                text: '确认', onPress: () => {\r\n                    cleanAllBackupSn().then(res => {\r\n                        Toast.show('备份SN清空成功，操作记录数为：' + res, 3, false);\r\n                    });\r\n                }\r\n            },\r\n        ]);\r\n    }\r\n\r\n    showReloadConfirm() {\r\n        Modal.alert('重新加载', '确认重新加载货道数据?', [\r\n            {text: '取消'},\r\n            {\r\n                text: '确认', onPress: () => {\r\n                    reloadSensors().then(() => {\r\n                        Toast.show('重新加载成功', 3, false);\r\n                    });\r\n                }\r\n            },\r\n        ]);\r\n    }\r\n\r\n    setSoftFilterLevel(value) {\r\n        updateSoftFilterLevel(value[0]).then(() => {\r\n            Toast.show('滤波等级设置成功，重新加载后生效！', 3, false);\r\n            this.refreshSoftFilterLevel();\r\n        });\r\n    }\r\n\r\n    reconnectTcp() {\r\n        Modal.alert('确定重连', '确定段考连接并重新建立连接？?', [{text: '取消'}, {\r\n            text: '确定', onPress() {\r\n                disconnectTcp().then(() => {\r\n                    Toast.show('断开成功，系统将在3秒后重新连接!', 3, false);\r\n                });\r\n            }\r\n        }])\r\n    }\r\n\r\n    showDbResetConfirm() {\r\n        Modal.alert('清空数据库？',\r\n            '该操作将会清空数据库中全部内容，操作完成后需要对货道重新扫描并重新下发库位信息！（该操作无法恢复）',\r\n            [{text: '取消'}, {text: '确定', onPress: () => this.doDbReset()}])\r\n    }\r\n\r\n    doDbReset() {\r\n        resetDatabase().then(() => {\r\n            Modal.alert('Database Reset Success!', 'Reset success, please scan again!');\r\n        });\r\n    }\r\n}\r\n\r\nconst component = connect(null, mapAction2Props)(SystemCheck);\r\nexport default withRouter(component);\r\n","import {request} from './request';\r\n\r\nexport const fetchStatusTable = () => {\r\n    return request({\r\n        url: '/api/status/',\r\n        method: 'get',\r\n    })\r\n};\r\n\r\nexport const disconnectTcp = () => {\r\n    return request({\r\n        url: '/api/status/tcp-disconnect',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const fetchDatabaseTables = () => {\r\n    return request({\r\n        url: '/api/status/tables',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchMessageLog = () => {\r\n    return request({\r\n        url: '/api/status/message-log',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const resetDatabase = () => {\r\n    return request({\r\n        url: '/api/status/_db-reset',\r\n        method: 'post',\r\n    });\r\n};\r\n\r\nexport const sensorParams = address => {\r\n    return request({\r\n        url: `/api/status/${address}/_details`,\r\n        method: 'get'\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {fetchMessageLog} from '../../../api/systemStatus';\r\nimport {Card, List, TextareaItem} from \"antd-mobile\";\r\nimport './MessageLog.sass'\r\n\r\nconst renderMessageItem = (message, index) => {\r\n    return (<List.Item key={index}>\r\n        <Card className=\"message-item\">\r\n            <Card.Header title={message.action} extra={message.type}/>\r\n            <Card.Body>\r\n                <TextareaItem value={JSON.stringify(message.data)} rows={3}/>\r\n            </Card.Body>\r\n            <Card.Footer content={message.seqNo}/>\r\n        </Card>\r\n    </List.Item>);\r\n};\r\n\r\nclass MessageLog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            logs: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshLogs();\r\n        this.refreshTimmer = setInterval(() => {\r\n            this.refreshLogs();\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.refreshTimmer);\r\n    }\r\n\r\n    refreshLogs() {\r\n        fetchMessageLog().then(res => {\r\n            this.setState({\r\n                logs: res,\r\n            })\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {logs} = this.state;\r\n        return (\r\n            <div className=\"message-log\">\r\n                <List renderHeader={() => 'Message Logs'}>\r\n                    {\r\n                        logs.map(renderMessageItem)\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageLog;\r\n","import React, {Component} from 'react';\r\nimport FloatButton from '../../commons/FloatButton';\r\nimport {ActionSheet, Card, Flex, List, Modal, Progress, Toast} from 'antd-mobile';\r\nimport {cleanCounter, sensorHealthy} from '../../../api/healthy';\r\nimport {\r\n    tryRecoveryElabelAddress,\r\n    tryRecoverySensorAddress,\r\n    tryRecoverySensorAddressWithOriginSn\r\n} from '../../../api/sensor';\r\nimport {\r\n    abortFirmwareUpgrade,\r\n    eLabelFirmwareUpgrade,\r\n    fetchUpgradeProgress,\r\n    sensorFirmwareUpgrade\r\n} from '../../../api/firmware';\r\nimport './SensorHealthy.sass';\r\n\r\nconst operations = ['重置计数器', '刷新', '取消'];\r\nconst ClickOperations = ['传感器固件升级', '电子标签固件升级', '恢复传感器地址', '恢复电子标签地址', '取消'];\r\nconst WARN_RATE = 0.1;\r\nconst UPGRADE_PROGRESS_STATE_TABLE = {\r\n    0: '等待升级',\r\n    1: '升级成功',\r\n    2: '升级失败',\r\n    3: '升级中',\r\n};\r\n\r\nclass SensorHealthy extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: [],\r\n            upgradePercent: 0,\r\n            upgradeProgress: {},\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshSensors();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n    }\r\n\r\n    tryReleaseUpgradeProgressTimmer() {\r\n        if (this.upgradeFirmwareTimmer) {\r\n            clearTimeout(this.upgradeFirmwareTimmer);\r\n        }\r\n    }\r\n\r\n    refreshSensors() {\r\n        sensorHealthy().then(res => {\r\n            const healthyList = res.sort((a, b) => a.sensor.address - b.sensor.address);\r\n            this.setState({\r\n                sensors: healthyList,\r\n                showUpgradeProgress: false,\r\n            });\r\n        });\r\n    }\r\n\r\n    refreshUpgradeProgress(cb) {\r\n        fetchUpgradeProgress().then(res => {\r\n            this.setState({upgradeProgress: res});\r\n            cb(res);\r\n        });\r\n    }\r\n\r\n    doAbortFirmwareUpgrade() {\r\n        abortFirmwareUpgrade().then(() => {\r\n            Toast.show('升级已取消', 3, false);\r\n        });\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n    }\r\n\r\n    render() {\r\n        const {sensors, showUpgradeProgress, upgradeProgress} = this.state;\r\n        let upgradeProgressPercent = 0;\r\n        if (upgradeProgress.total !== undefined && upgradeProgress.current !== undefined && upgradeProgress.total !== 0) {\r\n            upgradeProgressPercent = upgradeProgress.current / upgradeProgress.total * 100;\r\n        }\r\n        return (\r\n            <div>\r\n                <List renderHeader={() => 'Sensor Healthy'}>\r\n                    {\r\n                        sensors.map(helthy => (<List.Item key={helthy.sensor.id}>\r\n                            {this.renderSensorCard(helthy)}\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n                <Modal visible={showUpgradeProgress}\r\n                       title=\"升级进度\"\r\n                       transparent\r\n                       maskClosable={false}\r\n                       onClose={() => this.onUpgradeProgressModalClose()}\r\n                       footer={[{\r\n                           text: 'Abort Upgrade',\r\n                           disabled: true,\r\n                           onPress: () => {\r\n                               this.onUpgradeProgressModalClose();\r\n                               this.doAbortFirmwareUpgrade();\r\n                           }\r\n                       }]}>\r\n                    <p>{UPGRADE_PROGRESS_STATE_TABLE[upgradeProgress.state]}</p>\r\n                    <p>{upgradeProgressPercent.toFixed(2)}%</p>\r\n                    <Progress percent={upgradeProgressPercent} position=\"normal\"/>\r\n                </Modal>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperations()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    recoveryElabelAddress(healthy) {\r\n        const {sensor} = healthy;\r\n        const {id, elabelSn} = sensor;\r\n        const content = (<p>确认使用序列号[{elabelSn}]恢复地址?</p>);\r\n        Modal.alert(`电子标签[${sensor.address}]地址恢复`, content, [\r\n            {\r\n                text: '确认', onPress: () => {\r\n                    tryRecoveryElabelAddress(id).then(res => {\r\n                        Toast.show(`${res.address}:恢复成功`, 3, false);\r\n                    });\r\n                }\r\n            },\r\n            {text: '取消'},\r\n        ]);\r\n    }\r\n\r\n    recoverySensorAddress(healthy) {\r\n        const {sensor} = healthy;\r\n        const {id, deviceSn, sensorSn} = sensor;\r\n        const content = (<p>初始SN:[{deviceSn}]<br/>备份SN:[{sensorSn}]<br/>确认使用该SN恢复地址?</p>);\r\n        Modal.alert(`传感器[${sensor.address}]地址恢复`, content, [\r\n            {\r\n                text: '使用新SN恢复', onPress: () => {\r\n                    tryRecoverySensorAddress(id).then(res => {\r\n                        Toast.show(`${res.address}:恢复成功`, 3, false);\r\n                    });\r\n                }\r\n            },\r\n            {\r\n                text: '使用原SN恢复', onPress: () => {\r\n                    tryRecoverySensorAddressWithOriginSn(id).then(res => {\r\n                        Toast.show(`${res.address}:恢复成功`, 3, false);\r\n                    });\r\n                }\r\n            },\r\n            {text: '取消'},\r\n        ]);\r\n    }\r\n\r\n    onCardClick(healthy) {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: ClickOperations,\r\n            title: '操作菜单',\r\n            cancelButtonIndex: ClickOperations.length - 1,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.upgradeFirmware(healthy);\r\n                    break;\r\n                case 1:\r\n                    this.upgradeElabelFirmware(healthy);\r\n                    break;\r\n                case 2:\r\n                    this.recoverySensorAddress(healthy);\r\n                    break;\r\n                case 3:\r\n                    this.recoveryElabelAddress(healthy);\r\n                    break;\r\n                default:\r\n                // Do Nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    upgradeFirmware(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const total = packageCounter.totalSuccess + packageCounter.totalErrors;\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.totalErrors / total));\r\n        let title = '';\r\n        let content = '';\r\n        let warn = false;\r\n        const errorRateInPer = (errorsRate * 100).toFixed(2);\r\n        if (errorsRate > WARN_RATE) {\r\n            const minRate = (WARN_RATE * 100).toFixed(2);\r\n            title = '谨慎升级！！！';\r\n            content = `传感器${sensor.address}的网络丢包率为${errorRateInPer}%，在极限值${minRate}%下，建议通过串口升级！`;\r\n            warn = true;\r\n        } else {\r\n            title = '升级确认';\r\n            content = `传感${sensor.address}器的网络丢包率为${errorRateInPer}%,升级后请手动reload启动重力服务！`;\r\n            warn = false;\r\n        }\r\n        Modal.alert(title, content, [\r\n            {\r\n                text: warn ? '仍要升级' : '升级',\r\n                onPress: () => {\r\n                    this.doFirmwareUpgrade(sensor);\r\n                }\r\n            },\r\n            {\r\n                text: '取消升级',\r\n            }\r\n        ]);\r\n    }\r\n\r\n    upgradeElabelFirmware(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const total = packageCounter.elabelSuccess + packageCounter.elabelErrors;\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.elabelErrors / total));\r\n        let title = '';\r\n        let content = '';\r\n        let warn = false;\r\n        const errorRateInPer = (errorsRate * 100).toFixed(2);\r\n        if (errorsRate > WARN_RATE) {\r\n            const minRate = (WARN_RATE * 100).toFixed(2);\r\n            title = '谨慎升级！！！';\r\n            content = `电子标签器${sensor.address}的网络丢包率为${errorRateInPer}%，在极限值${minRate}%下，建议通过串口升级！`;\r\n            warn = true;\r\n        } else {\r\n            title = '升级确认';\r\n            content = `电子标签${sensor.address}器的网络丢包率为${errorRateInPer}%,升级后请手动reload启动重力服务！`;\r\n            warn = false;\r\n        }\r\n        Modal.alert(title, content, [\r\n            {\r\n                text: warn ? '仍要升级' : '升级',\r\n                onPress: () => {\r\n                    this.doElabelFirmwareUpgrade(sensor);\r\n                }\r\n            },\r\n            {\r\n                text: '取消升级',\r\n            }\r\n        ])\r\n    }\r\n\r\n    doFirmwareUpgrade(sensor) {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n        sensorFirmwareUpgrade(sensor.id).then(() => {\r\n            Toast.show('升级已完成', 2, false);\r\n            this.tryReleaseUpgradeProgressTimmer();\r\n        });\r\n        this.showUpgradeProgress();\r\n        this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n    }\r\n\r\n    doElabelFirmwareUpgrade(sensor) {\r\n        this.tryReleaseUpgradeProgressTimmer();\r\n        eLabelFirmwareUpgrade(sensor.id).then(() => {\r\n            Toast.show('升级已完成', 2, false);\r\n            this.tryReleaseUpgradeProgressTimmer();\r\n        });\r\n        this.showUpgradeProgress();\r\n        this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n    }\r\n\r\n    refreshUpgradeProgressCb() {\r\n        return () => {\r\n            this.upgradeFirmwareTimmer = setTimeout(() => {\r\n                this.refreshUpgradeProgress(this.refreshUpgradeProgressCb());\r\n            }, 500);\r\n        };\r\n    }\r\n\r\n    showUpgradeProgress() {\r\n        this.setState({showUpgradeProgress: true});\r\n    }\r\n\r\n    onUpgradeProgressModalClose() {\r\n        this.setState({showUpgradeProgress: false});\r\n    }\r\n\r\n    renderSensorCard(healthy) {\r\n        const {sensor, packageCounter} = healthy;\r\n        const zeroOffset = `ZeroOffset:${sensor.zeroReference}`;\r\n        const total = packageCounter.totalSuccess + packageCounter.totalErrors;\r\n        const successRate = total === 0 ? 0 : ((packageCounter.totalSuccess / total) * 100).toFixed(0);\r\n        const errorsRate = total === 0 ? 0 : ((packageCounter.totalErrors / total) * 100).toFixed(0);\r\n\r\n        const elabelSuccess = packageCounter.elabelSuccess;\r\n        const elabelErrors = packageCounter.elabelErrors;\r\n        const eLabelTotal = elabelErrors + elabelSuccess;\r\n        const elabelSuccessRate = eLabelTotal === 0 ? 0 : ((elabelSuccess / eLabelTotal) * 100).toFixed(0);\r\n        const elabelErrorosRate = eLabelTotal === 0 ? 0 : ((elabelErrors / eLabelTotal) * 100).toFixed(0);\r\n        const elabelContinueErrors = packageCounter.elabelContinueErrors;\r\n        return (<Card key={sensor.id} onClick={() => this.onCardClick(healthy)}>\r\n            <Card.Header title={sensor.address} extra={sensor.deviceSn}/>\r\n            <Card.Body className=\"healthy-package-counter\">\r\n                <Flex>\r\n                    <Flex.Item>\r\n                        <div className=\"total\">\r\n                            <p className=\"title\">SUCCESS</p>\r\n                            <p className=\"value\">{packageCounter.totalSuccess}/{successRate}%</p>\r\n                            <p className=\"title\">ELABEL SUCCESS</p>\r\n                            <p className=\"value\">{elabelSuccess}/{elabelSuccessRate}%</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <div className=\"error\">\r\n                            <p className=\"title\">ERRORS</p>\r\n                            <p className=\"value\">{packageCounter.totalErrors}/{errorsRate}%</p>\r\n                            <p className=\"title\">ELABEL ERRORS</p>\r\n                            <p className=\"value\">{elabelErrors}/{elabelErrorosRate}%</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                    <Flex.Item>\r\n                        <div className=\"continue\">\r\n                            <p className=\"title\">CONTINUE</p>\r\n                            <p className=\"value\">{packageCounter.continueErrors}</p>\r\n                            <p className=\"title\">ELABEL CONTINUE</p>\r\n                            <p className=\"value\">{elabelContinueErrors}</p>\r\n                        </div>\r\n                    </Flex.Item>\r\n                </Flex>\r\n            </Card.Body>\r\n            <Card.Footer content={zeroOffset}/>\r\n        </Card>);\r\n    }\r\n\r\n    showOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: operations,\r\n            title: 'Operations',\r\n            cancelButtonIndex: operations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    //Clean\r\n                    this.showCleanCounterConfirm();\r\n                    break;\r\n                case 1:\r\n                    this.refreshSensors();\r\n                    break;\r\n                case 2:\r\n                    //Cancel\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n\r\n    showCleanCounterConfirm() {\r\n        Modal.alert('Clean Counter?', 'Clean counter?', [\r\n            {text: 'Cancel'},\r\n            {text: 'Yes', onPress: () => this.doCleanCounter()}\r\n        ]);\r\n    }\r\n\r\n    doCleanCounter() {\r\n        cleanCounter().then(() => {\r\n            Toast.show('Clean success!', 1, false);\r\n        })\r\n    }\r\n}\r\n\r\nexport default SensorHealthy;\r\n","import {request} from './request';\r\n\r\nexport const sensorHealthy = () => {\r\n    return request({\r\n        url: '/api/sensor-healthy/_healthy',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\n\r\nexport const cleanCounter = () => {\r\n    return request({\r\n        url: '/api/sensor-healthy/_clean-counter',\r\n        method: 'post',\r\n    });\r\n};\r\n","import {request} from './request';\r\n\r\nexport const sensorFirmwareUpgrade = sensorId => {\r\n    return request({\r\n        url: `/api/firmware/${sensorId}/_upgrade`,\r\n        method: 'post',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const eLabelFirmwareUpgrade = sensorId => {\r\n    return request({\r\n        url: `/api/firmware/${sensorId}/_elabel-upgrade`,\r\n        method: 'post',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const fetchUpgradeProgress = () => {\r\n    return request({\r\n        url: '/api/firmware/_upgrade-progress',\r\n        method: 'get',\r\n        hideLoading: true,\r\n    });\r\n};\r\n\r\nexport const abortFirmwareUpgrade = () => {\r\n    return request({\r\n        url: '/api/firmware/_abort-upgrade',\r\n        method: 'post',\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {setTabBarState, setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {sensorParams} from '../../../api/systemStatus';\r\nimport {ActionSheet, List} from 'antd-mobile';\r\nimport FloatButton from \"../../commons/FloatButton\";\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n        setTabBarState: (...args) => dispatch(setTabBarState(...args)),\r\n    };\r\n};\r\nconst operations = ['刷新', '取消'];\r\n\r\nclass SensorDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensor: {},\r\n            slot: {},\r\n            sensorParams: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('传感器详细参数');\r\n        this.props.setTabBarState(false);\r\n        const address = this.props.match.params.address;\r\n        this.refreshParams(address);\r\n    }\r\n\r\n    refreshParams(address) {\r\n        sensorParams(address).then(res => {\r\n            const {slot, sensor} = res;\r\n            delete res.slot;\r\n            delete res.sensor;\r\n            const params = [];\r\n            for (let name in res) {\r\n                if (!res.hasOwnProperty(name)) {\r\n                    continue;\r\n                }\r\n                params.push({\r\n                    name: name,\r\n                    value: res[name],\r\n                });\r\n            }\r\n            this.setState({\r\n                sensor: sensor,\r\n                slot: slot,\r\n                sensorParams: params,\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {sensor, slot, sensorParams} = this.state;\r\n        return (\r\n            <div className=\"sensor-details\">\r\n                <List renderHeader={() => '传感器基本信息'}>\r\n                    <List.Item extra={sensor.deviceSn}>序列号</List.Item>\r\n                    <List.Item extra={sensor.hasElabel ? 'yes' : 'no'}>电子标签</List.Item>\r\n                    <List.Item extra={sensor.address}>地址</List.Item>\r\n                    <List.Item extra={sensor.zeroReference}>零点偏移</List.Item>\r\n                    <List.Item extra={slot.slotNo}>绑定货道号</List.Item>\r\n                    <List.Item extra={slot.skuApw}>SKU单重</List.Item>\r\n                    <List.Item extra={slot.skuName}>SKU名称</List.Item>\r\n                    <List.Item extra={slot.skuTolerance}>SKU允差</List.Item>\r\n                    <List.Item extra={slot.skuNo}>SKU号</List.Item>\r\n                </List>\r\n                <List renderHeader={() => '传感器硬件信息'}>\r\n                    {\r\n                        sensorParams.map(param => (\r\n                            <List.Item key={param.name} extra={JSON.stringify(param.value)}>\r\n                                {param.name}\r\n                            </List.Item>))\r\n                    }\r\n                </List>\r\n                <FloatButton iconType=\"ellipsis\" onClick={() => this.showOperations()}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showOperations() {\r\n        ActionSheet.showActionSheetWithOptions({\r\n            options: operations,\r\n            title: '操作选择',\r\n            cancelButtonIndex: operations.length - 1,\r\n            destructiveButtonIndex: 0,\r\n        }, index => {\r\n            switch (index) {\r\n                case 0:\r\n                    this.refreshParams(this.props.match.params.address);\r\n                    break;\r\n                case 1:\r\n                    //Cancel\r\n                    break;\r\n                default:\r\n                //Do nothing\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(SensorDetails);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {List} from 'antd-mobile';\r\nimport {fetchThSensors} from '../../../api/thSensor';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    }\r\n};\r\n\r\nclass ThSensorSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensors: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('温湿度传感器');\r\n        this.refreshSensors();\r\n    }\r\n\r\n    refreshSensors() {\r\n        fetchThSensors().then(res => {\r\n            this.setState({\r\n                sensors: res\r\n            });\r\n        });\r\n    }\r\n\r\n    toDetail(sensor) {\r\n        this.props.history.push({\r\n            pathname: `/setting/${sensor.id}/th-detail`,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensors} = this.state;\r\n        return (\r\n            <div className=\"th-sensors\">\r\n                <List renderHeader={() => '温湿度传感器'}>\r\n                    {\r\n                        sensors.map(sensor => (\r\n                            <List.Item key={sensor.id} arrow=\"horizontal\" onClick={() => this.toDetail(sensor)}>\r\n                                {sensor.no} [{sensor.address}]\r\n                            </List.Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(ThSensorSetting);\r\n","import {request} from './request';\r\n\r\nexport const fetchThSensors = () => {\r\n    return request({\r\n        url: '/api/th-sensor/',\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const fetchOneSensor = id => {\r\n    return request({\r\n        url: `/api/th-sensor/${id}`,\r\n        method: 'get',\r\n    });\r\n};\r\n\r\nexport const setRange = data => {\r\n    return request({\r\n        url: `/api/th-sensor/${data.id}/_range`,\r\n        method: 'post',\r\n        data\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport './LineCharts.sass';\r\nimport PropTypes from 'prop-types';\r\nimport echarts from 'echarts';\r\n\r\nclass LineCharts extends Component {\r\n    static propTypes = {\r\n        width: PropTypes.number.isRequired,\r\n        height: PropTypes.number.isRequired,\r\n        xData: PropTypes.array.isRequired,\r\n        yData: PropTypes.array.isRequired,\r\n    };\r\n    static defaultProps = {\r\n        width: 1000,\r\n        height: 300,\r\n        xData: [],\r\n        yData: [],\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    onCanvasLoad(canvas) {\r\n        if (!canvas || canvas === this.canvas) {\r\n            return;\r\n        }\r\n        this.canvas = canvas;\r\n        this.charts = echarts.init(this.canvas);\r\n        this.refreshCharts();\r\n    }\r\n\r\n    refreshCharts() {\r\n        const {xData, yData} = this.props;\r\n        const series = [];\r\n        const names = [];\r\n        for (let y of yData) {\r\n            names.push(y.name);\r\n            series.push({\r\n                ...y,\r\n                type: 'line',\r\n            });\r\n        }\r\n        const option = {\r\n            tooltip: {\r\n                trigger: 'axis'\r\n            },\r\n            legend: {\r\n                data: names,\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                data: xData\r\n            },\r\n            yAxis: {\r\n                type: 'value'\r\n            },\r\n            series: series,\r\n        };\r\n        this.charts.setOption(option);\r\n    }\r\n\r\n    render() {\r\n        const {width, height} = this.props;\r\n        return (\r\n            <canvas ref={canvas => this.onCanvasLoad(canvas)}\r\n                    className=\"charts\"\r\n                    height={height}\r\n                    width={width}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LineCharts;\r\n","import React, {Component} from 'react';\r\nimport {fetchOneSensor, setRange} from '../../../api/thSensor';\r\nimport {reloadSensors} from '../../../api/sensor';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {Button, Card, Flex, InputItem, List, Modal, Toast} from 'antd-mobile';\r\nimport {fetchSensorDataLog} from '../../../api/tempHumidityLog';\r\nimport LineCharts from '../../commons/LineCharts';\r\nimport {thSensorStateText} from '../../../util/DataConvertor';\r\n\r\nconst maxAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass ThSensorDetailsSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sensor: {},\r\n            dataLogs: [],\r\n            chartsXData: [],\r\n            chartsYData: [],\r\n        };\r\n    }\r\n\r\n    refreshDataLog() {\r\n        fetchSensorDataLog(this.sensorId).then(res => {\r\n            const xData = [];\r\n            const tempData = [];\r\n            // const humiData = [];\r\n            // const maxHumiData = [];\r\n            // const minHumiData = [];\r\n            const maxTempData = [];\r\n            const minTempData = [];\r\n            for (let log of res) {\r\n                const {\r\n                    createTime,\r\n                    temperature,\r\n                    // humidity,\r\n                    // maxHumidity, minHumidity,\r\n                    maxTemperature, minTemperature\r\n                } = log;\r\n                const date = new Date(createTime);\r\n                const timeStr = `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\r\n                xData.push(timeStr);\r\n                tempData.push(temperature);\r\n                // humiData.push(humidity);\r\n                // maxHumiData.push(maxHumidity);\r\n                // minHumiData.push(minHumidity);\r\n                maxTempData.push(maxTemperature);\r\n                minTempData.push(minTemperature);\r\n            }\r\n            const yData = [\r\n                {name: '温度', data: tempData},\r\n                // {name: '湿度', data: humiData},\r\n                // maxHumiData, minHumiData,\r\n                {name: '温度上限', data: maxTempData}, {name: '温度下限', data: minTempData},\r\n            ];\r\n            this.setState({\r\n                dataLogs: res,\r\n                chartsXData: xData,\r\n                chartsYData: yData,\r\n            });\r\n            this.charts.refreshCharts();\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {id} = this.props.match.params;\r\n        this.sensorId = id;\r\n        this.props.setTitle('温湿度传感器报警范围');\r\n        this.refreshDataLog();\r\n        fetchOneSensor(id).then(res => {\r\n            this.setState({\r\n                sensor: res,\r\n            });\r\n        })\r\n    }\r\n\r\n    setSensorData(data) {\r\n        const {sensor} = this.state;\r\n        this.setState({\r\n            sensor: {\r\n                ...sensor,\r\n                ...data,\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {sensor, dataLogs, chartsXData, chartsYData} = this.state;\r\n        return (\r\n            <div className=\"th-sensor-detail\">\r\n                <List renderHeader={() => '报警范围'}>\r\n                    <InputItem value={sensor.maxTemperature} labelNumber={10}\r\n                               onChange={text => this.setSensorData({maxTemperature: text})}>温度上限(°C)：</InputItem>\r\n                    <InputItem value={sensor.minTemperature} labelNumber={10}\r\n                               onChange={text => this.setSensorData({minTemperature: text})}>温度下限(°C)：</InputItem>\r\n                    <InputItem value={sensor.maxHumidity} labelNumber={10}\r\n                               onChange={text => this.setSensorData({maxHumidity: text})}>湿度上限( %)：</InputItem>\r\n                    <InputItem value={sensor.minHumidity} labelNumber={10}\r\n                               onChange={text => this.setSensorData({minHumidity: text})}>湿度下限( %)：</InputItem>\r\n                    <List.Item>\r\n                        <Button type=\"primary\" onClick={() => this.updateRange()}>保存</Button>\r\n                    </List.Item>\r\n                </List>\r\n                <Card>\r\n                    <Card.Header title=\"历史数据\"/>\r\n                    <Card.Body>\r\n                        <LineCharts width={500} height={300} xData={chartsXData} yData={chartsYData}\r\n                                    ref={charts => this.charts = charts}/>\r\n                    </Card.Body>\r\n                    <Card.Footer content={dataLogs.length}/>\r\n                </Card>\r\n                <List renderHeader={() => '温湿度日志'}>\r\n                    {\r\n                        dataLogs.map(log => (<List.Item key={log.id}>\r\n                            <Flex>\r\n                                <Flex.Item>{log.createTime}</Flex.Item>\r\n                                <Flex.Item>温度:{log.temperature}°C({thSensorStateText(log.temperatureState)})</Flex.Item>\r\n                                {/*<Flex.Item>湿度:{log.humidity}%({thSensorStateText(log.humidityState)})</Flex.Item>*/}\r\n                            </Flex>\r\n                        </List.Item>))\r\n                    }\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateRange() {\r\n        setRange(this.state.sensor).then(res => {\r\n            this.setState({sensor: res});\r\n            this.showReloadConfirm();\r\n        });\r\n    }\r\n\r\n    showReloadConfirm() {\r\n        Modal.alert('重新加载', '数据已更新，是否重新加载生效？', [\r\n            {\r\n                text: 'No'\r\n            },\r\n            {\r\n                text: 'Yes',\r\n                onPress: () => {\r\n                    reloadSensors().then(() => {\r\n                        Toast.show('重新加载成功', 1, false);\r\n                    });\r\n                }\r\n            }\r\n        ]);\r\n    }\r\n}\r\n\r\nexport default connect(null, maxAction2Props)(ThSensorDetailsSetting);\r\n","import {request} from './request';\r\n\r\nexport const fetchSensorDataLog = sensorId => {\r\n    return request({\r\n        url: '/api/temp-humidity-log/_sensor-logs',\r\n        method: 'get',\r\n        params: {\r\n            sensorId: sensorId,\r\n        }\r\n    });\r\n};\r\n","import React, {Component} from 'react';\r\nimport {Button, Card, List, Modal, TextareaItem, Toast} from 'antd-mobile';\r\nimport {setTitle} from '../../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport {fetchExtraPageUri, setExtraPageUri} from '../../../api/config';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass ExtraPageSetting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pageUri: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('扩展页面配置');\r\n        fetchExtraPageUri().then(res => {\r\n            this.setState({\r\n                pageUri: res.value,\r\n            });\r\n        }).catch(err => {\r\n            const data = err.data;\r\n            const {code} = data;\r\n            if (code === 404) {\r\n                this.setState({\r\n                    pageUri: '页面路径未设置',\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    setPageUri() {\r\n        const {pageUri} = this.state;\r\n        const pattern = /^[a-zA-z]+:\\/\\/[^\\\\s]*$/;\r\n        if (!pageUri.match(pattern)) {\r\n            Modal.alert('输入提示', '请输入正确的URI!', [{text: '知道了'}]);\r\n            return;\r\n        }\r\n        setExtraPageUri(pageUri).then(res => {\r\n            Toast.show('配置成功', 3, false);\r\n        });\r\n    }\r\n\r\n    gotoExtraPage() {\r\n        this.props.history.push({\r\n            pathname: '/extra',\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {pageUri} = this.state;\r\n        return (\r\n            <div className=\"extra-page-setting\">\r\n                <Card>\r\n                    <Card.Header\r\n                        title=\"页面配置\"\r\n                        extra=\"页面路径配置\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <TextareaItem title=\"页面路径\"\r\n                                          autoHeight\r\n                                          value={pageUri}\r\n                                          onChange={text => this.setState({pageUri: text})}/>\r\n                            <List.Item>\r\n                                <Button type=\"primary\" onClick={() => this.setPageUri()}>保存</Button>\r\n                            </List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n                <Card>\r\n                    <Card.Header\r\n                        title=\"页面入口\"/>\r\n                    <Card.Body>\r\n                        <List>\r\n                            <List.Item arrow=\"horizontal\" onClick={() => this.gotoExtraPage()}>\r\n                                进入扩展页面\r\n                            </List.Item>\r\n                        </List>\r\n                    </Card.Body>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(ExtraPageSetting);\r\n","import React, {Component} from 'react';\r\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport SensorSetting from './setting/SensorSetting'\r\nimport SettingMenu from './setting/SettingMenu'\r\nimport SlotSetting from './setting/SlotSetting'\r\nimport ConnectionSetting from './setting/ConnectionSetting'\r\nimport SlotDetailSetting from './setting/SlotDetailSetting'\r\nimport SystemSetting from './setting/SystemSetting'\r\nimport SystemPropsSetting from './setting/SystemPropsSetting'\r\nimport SlotSensorsSetting from './setting/SlotSensorsSetting'\r\nimport Overview from './setting/Overview'\r\nimport SystemCheck from './setting/SystemCheck'\r\nimport MessageLog from './setting/MessageLog'\r\nimport SensorHealthy from './setting/SensorHealthy'\r\nimport SensorDetails from './setting/SensorDetails'\r\nimport ThSensorSetting from './setting/ThSensorSetting'\r\nimport ThSensorDetailsSetting from './setting/ThSensorDetailsSetting'\r\nimport ExtraPageSetting from './setting/ExtraPageSetting'\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n    };\r\n};\r\n\r\nclass Setting extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/setting/\" component={SettingMenu} exact/>\r\n                    <Route path=\"/setting/sensor\" component={SensorSetting} exact/>\r\n                    <Route path=\"/setting/slot\" component={SlotSetting} exact/>\r\n                    <Route path=\"/setting/connection\" component={ConnectionSetting} exact/>\r\n                    <Route path=\"/setting/slot-detail/:id\" component={SlotDetailSetting} exact/>\r\n                    <Route path=\"/setting/system\" component={SystemSetting} exact/>\r\n                    <Route path=\"/setting/system-props\" component={SystemPropsSetting} exact/>\r\n                    <Route path=\"/setting/slot-sensors/:id\" component={SlotSensorsSetting} exact/>\r\n                    <Route path=\"/setting/overview\" component={Overview} exact/>\r\n                    <Route path=\"/setting/system-check\" component={SystemCheck} exact/>\r\n                    <Route path=\"/setting/message-log\" component={MessageLog} exact/>\r\n                    <Route path=\"/setting/sensor-healthy\" component={SensorHealthy} exact/>\r\n                    <Route path=\"/setting/th-sensor\" component={ThSensorSetting} exact/>\r\n                    <Route path=\"/setting/:address/sensor-details\" component={SensorDetails} exact/>\r\n                    <Route path=\"/setting/:id/th-detail\" component={ThSensorDetailsSetting} exact/>\r\n                    <Route path=\"/setting/extra-setting\" component={ExtraPageSetting} exact/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Setting);\r\n","import React, {Component} from 'react';\r\nimport {Button, InputItem, List, Toast} from \"antd-mobile\";\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {connect} from 'react-redux';\r\nimport './Address.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Address extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('设备编址');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"address\">\r\n                <List renderHeader={() => '编址'}>\r\n                    <InputItem>设备SN</InputItem>\r\n                    <InputItem>地址</InputItem>\r\n                    <List.Item>\r\n                        <Button type=\"primary\">编址</Button>\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        Toast.info('开发中', 1, null, false);\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Address);\r\n","import React, {Component} from 'react';\r\nimport {setTitle} from \"../../store/actionCreators\";\r\nimport {connect} from 'react-redux';\r\nimport MessageLog from './setting/MessageLog';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args))\r\n    }\r\n};\r\n\r\nclass Logs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.props.setTitle('Logs');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MessageLog/>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(Logs);\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {setTitle} from '../../store/actionCreators';\r\nimport {Carousel, List, WhiteSpace, WingBlank} from 'antd-mobile';\r\nimport './About.sass';\r\n\r\nconst mapAction2Props = (dispatch, props) => {\r\n    return {\r\n        ...props,\r\n        setTitle: (...args) => dispatch(setTitle(...args)),\r\n    };\r\n};\r\n\r\nclass About extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            drawerOpen: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.setTitle('About');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"about\">\r\n                <WhiteSpace/>\r\n                <WingBlank>\r\n                    <Carousel\r\n                        autoplay={true}\r\n                        infinite\r\n                        className=\"headerCarousel\"\r\n                    >\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#FF9808'}}>\r\n                            <div className=\"title\">\r\n                                磐石电气（常州）有限公司\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"carouselItem\" style={{backgroundColor: '#3171FA'}}>\r\n                            <div className=\"title\">\r\n                                MonolithIoT\r\n                            </div>\r\n                        </div>\r\n                    </Carousel>\r\n                </WingBlank>\r\n                <WingBlank className=\"article\">\r\n                    <h1 className=\"title\">关于我们</h1>\r\n                    <div className=\"text\">\r\n                        <p>\r\n                            磐石电气(常州)有限公司,是一家高科技智能测量装备研发及生产企业，把传统体积，重量的测量数字化物联网化，可以与WMS,ERP，SAP等企业管理软件相结合，便于企业更直观的管理自己的仓储，物流等。磐石电气下设研发部，工程部，业务部，有较强的设计，研发和生产能力，可为客户提供嵌入式计算机系统产品设计，开发，系统集成，工程实施等服务。\r\n                        </p>\r\n                        <p>\r\n                            随着公司的发展，主要产品有自主研发的智能数字卷尺，智能手动叉车秤，安卓智能称重终端，静态/动态DWS等各种物联网类智能称重量方设备及软件定制系统,可为客户最大程度地提供智能化系统化的测量系统解决方案。产品广泛应用于快递物流、生鲜供应、港口订舱、仓储、工业离散制造及各种以长度(含面\r\n                            积、体积)测量为手段的民用、商用用途中。凭着可靠的产品质量和良好的售后服务，我公司已与顺丰、中国邮政、京东、国际快递DHL、华为等多家知名企业合作。\r\n                        </p>\r\n                        <p>\r\n                            目前公司已申请中国专利24项,美国专利1项，并拥有一支以博士、硕士为主的优秀研发团队，具有较高的研发能力和管理水平，现有多名员工曾在外企作为技术骨干，承传欧美设计制造理念，并采用先进的产品生命周期管理（PLM），重视产品质量，为公司产品的技术引领、技术创新和公司的可持续发展奠定了坚实基础。\r\n                        </p>\r\n                    </div>\r\n                </WingBlank>\r\n                <List renderHeader=\"TestEntries\">\r\n                    <List.Item arrow=\"horizontal\" onClick={() => {\r\n                        this.props.history.push({pathname: '/pid'})\r\n                    }}>\r\n                        PID Animation\r\n                    </List.Item>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, mapAction2Props)(About);\r\n","import React, {Component} from 'react';\r\nimport {List} from 'antd-mobile';\r\nimport './PidAnimation.sass';\r\n\r\nconst currentColor = '#3171FA';\r\nconst targetColor = '#666666';\r\n// 比例参数\r\nconst P = 0.6;\r\n// 积分参数\r\nconst I = 0.02;\r\n// 微分参数\r\nconst D = 0.1;\r\n\r\nconst CanvasWidth = 300, CanvasHeight = 300;\r\nconst PointSize = 4;\r\n\r\nclass PidAnimation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            target: {\r\n                x: 150,\r\n                y: 150,\r\n            },\r\n            current: {\r\n                x: 150,\r\n                y: 150,\r\n            },\r\n        };\r\n        this.xSum = 0;\r\n        this.lastErrorX = 0;\r\n        this.ySum = 0;\r\n        this.lastErrorY = 0;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timmer = setInterval(() => {\r\n            this.onTimer();\r\n        }, 10);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timmer);\r\n    }\r\n\r\n    render() {\r\n        const {target, current} = this.state;\r\n        return (\r\n            <div className=\"pid\">\r\n                <div className=\"wrapper\">\r\n                    <List renderHeader={() => 'Params'}>\r\n                        <List.Item extra={P}>P</List.Item>\r\n                        <List.Item extra={I}>I</List.Item>\r\n                        <List.Item extra={D}>D</List.Item>\r\n                        <List.Item extra={`${current.x},${current.y}`}>Current</List.Item>\r\n                        <List.Item extra={`${target.x},${target.y}`}>Target</List.Item>\r\n                    </List>\r\n                    <canvas ref={canvas => this.onCanvasLoad(canvas)} width={CanvasWidth} height={CanvasHeight}>\r\n                        Unsupported Canvas\r\n                    </canvas>\r\n                </div>\r\n                <div className=\"stake\">None</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onCanvasLoad(canvas) {\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n        if (this.canvas === canvas) {\r\n            return;\r\n        }\r\n        this.canvas = canvas;\r\n        canvas.onclick = e => {\r\n            const {offsetX, offsetY} = e;\r\n            this.onCanvasClick(offsetX, offsetY);\r\n        };\r\n        this.canvasContext = canvas.getContext('2d');\r\n        this.reDrawPoint();\r\n    }\r\n\r\n    onCanvasClick(x, y) {\r\n        this.xSum = 0;\r\n        this.ySum = 0;\r\n        this.setState({\r\n            target: {\r\n                x: x,\r\n                y: y,\r\n            }\r\n        });\r\n        this.reDrawPoint();\r\n    }\r\n\r\n    reDrawPoint() {\r\n        const {target, current} = this.state;\r\n        this.canvasContext.clearRect(0, 0, CanvasWidth, CanvasHeight);\r\n        this.canvasContext.fillStyle = targetColor;\r\n        this.canvasContext.fillRect(target.x, target.y, PointSize, PointSize);\r\n        this.canvasContext.fillStyle = currentColor;\r\n        this.canvasContext.fillRect(current.x, current.y, PointSize, PointSize);\r\n    }\r\n\r\n    onTimer() {\r\n        const {target, current} = this.state;\r\n\r\n        const errorX = (target.x - current.x) / 10;\r\n        this.xSum += errorX;\r\n        const derivativeX = (errorX - this.lastErrorX) / 10;\r\n        this.lastErrorX = errorX;\r\n\r\n        let outX = current.x + (P * errorX + I * this.xSum + D * derivativeX);\r\n        outX = Math.min(outX, CanvasWidth - PointSize);\r\n        outX = Math.max(outX, 0);\r\n        outX = parseInt(outX);\r\n\r\n        const errorY = (target.y - current.y) / 10;\r\n        this.ySum += errorY;\r\n        const derivativeY = (errorY - this.lastErrorY) / 10;\r\n        this.lastErrorY = errorY;\r\n\r\n        let outY = current.y + (P * errorY + I * this.ySum + D * derivativeY);\r\n        outY = Math.min(outY, CanvasHeight - PointSize);\r\n        outY = Math.max(outY, 0);\r\n        outY = parseInt(outY);\r\n        if (current.x === outX && current.y === outY) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            current: {\r\n                x: outX,\r\n                y: outY,\r\n            }\r\n        });\r\n        this.reDrawPoint();\r\n    }\r\n}\r\n\r\nexport default PidAnimation;\r\n","import React, {Component} from 'react';\r\nimport './ExtraPage.sass';\r\nimport {fetchExtraPageUri} from '../../api/config';\r\nimport {NoticeBar} from 'antd-mobile';\r\nimport {WarningOutlined} from '@ant-design/icons';\r\n\r\nclass ExtraPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pageUri: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetchExtraPageUri().then(res => {\r\n            this.setState({\r\n                pageUri: res.value,\r\n            })\r\n        });\r\n    }\r\n\r\n    renderFrame() {\r\n        const {pageUri} = this.state;\r\n        if (pageUri) {\r\n            return (<iframe title=\"inner\" src={pageUri}>IFrame</iframe>);\r\n        } else {\r\n            return (<NoticeBar icon={<WarningOutlined/>}>页面地址未设置</NoticeBar>);\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"extra\">\r\n                {\r\n                    this.renderFrame()\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExtraPage;\r\n","import React, {Component} from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Dashboard from './content/Dashboard'\r\nimport Setting from './content/Setting';\r\nimport Address from './content/Address';\r\nimport Logs from './content/Logs';\r\nimport About from './content/About';\r\nimport PidAnimation from './content/PidAnimation';\r\nimport ExtraPage from './content/ExtraPage';\r\nimport './AppContent.sass';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppContent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"appContent\">\r\n                {\r\n                    this.props.showHeader ? <div className=\"headerMask\"/> : null\r\n                }\r\n                <Switch>\r\n                    <Route path=\"/\" component={Dashboard} exact/>\r\n                    <Route path=\"/setting**\" component={Setting} exact/>\r\n                    <Route path=\"/address\" component={Address} exact/>\r\n                    <Route path=\"/logs\" component={Logs} exact/>\r\n                    <Route path=\"/about\" component={About} exact/>\r\n                    <Route path=\"/pid\" component={PidAnimation} exact/>\r\n                    <Route path=\"/extra\" component={ExtraPage} exact/>\r\n                </Switch>\r\n                <div className=\"tabBarMask\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapState2Props, null)(AppContent);\r\n","import React, {Component} from 'react';\r\nimport {Icon, Modal, NavBar, Popover, Toast} from \"antd-mobile\";\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from 'react-router-dom'\r\nimport './AppHeader.sass';\r\nimport {reloadSensors} from \"../api/sensor\";\r\n\r\nconst mapState2Props = (state, props) => {\r\n    return {\r\n        ...props,\r\n        title: state.globalTitle,\r\n        showHeader: state.showHeader,\r\n    };\r\n};\r\n\r\nclass AppHeader extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            popoverVisible: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.showHeader) {\r\n            return null;\r\n        }\r\n        const {title} = this.props;\r\n        return (\r\n            <div className=\"appHeader\">\r\n                <NavBar\r\n                    leftContent={<Icon type=\"left\" onClick={() => this.onBackClick()}/>}\r\n                    rightContent={this.rightContent()}\r\n                    mode=\"light\"\r\n                >{title}</NavBar>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    rightContent() {\r\n        const {popoverVisible} = this.state;\r\n        const Item = Popover.Item;\r\n        return (<Popover mask\r\n                         visible={popoverVisible}\r\n                         overlay={[\r\n                             (<Item key=\"about\" value=\"about\"\r\n                                    data-seed=\"logId\">关于我们</Item>),\r\n                             (<Item key=\"settings\" value=\"settings\"\r\n                                    style={{whiteSpace: 'nowrap'}}>货道设置</Item>),\r\n                             (<Item key=\"reload\" value=\"reload\"\r\n                                    style={{whiteSpace: 'nowrap'}}>重新加载</Item>),\r\n                         ]}\r\n                         onSelect={e => this.onPopoverSelect(e)}\r\n        >\r\n            <Icon type=\"ellipsis\"/>\r\n        </Popover>);\r\n    }\r\n\r\n    onBackClick() {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    onPopoverSelect(e) {\r\n        switch (e.key) {\r\n            case 'about':\r\n                this.props.history.push({\r\n                    pathname: '/about',\r\n                });\r\n                break;\r\n            case 'settings':\r\n                this.props.history.push({\r\n                    pathname: '/setting/',\r\n                });\r\n                break;\r\n            case 'reload':\r\n                this.doReloadSensors();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({\r\n            popoverVisible: false\r\n        });\r\n    }\r\n\r\n    doReloadSensors() {\r\n        Modal.alert('Reload Sensors', 'Reload sensors from database into weightService',\r\n            [\r\n                {\r\n                    text: 'Cancel',\r\n                },\r\n                {\r\n                    text: 'Yes',\r\n                    onPress: () => {\r\n                        reloadSensors().then(() => {\r\n                            Toast.show('Reload Success!');\r\n                        });\r\n                    },\r\n                },\r\n            ]);\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapState2Props)(AppHeader));\r\n","import {createBrowserHistory} from 'history';\r\nimport {setRouterPath} from '../store/actionCreators'\r\nimport store from '../store';\r\n\r\nconst history = createBrowserHistory();\r\n\r\nconst notifyPathChanged = location => {\r\n    const info = {\r\n        pathname: location.pathname,\r\n        search: location.search,\r\n        hash: location.hash\r\n    };\r\n    const action = setRouterPath(info);\r\n    store.dispatch(action);\r\n};\r\nhistory.listen((action) => {\r\n    notifyPathChanged(action.location);\r\n});\r\n\r\n\r\nnotifyPathChanged(history.location);\r\nexport default history;\r\n","const printBanner = () => {\r\n    console.log(\r\n        '%cMonolithIoT%cPoweredBy%cLevent8421',\r\n        'color:#108EE9;font-size:50px;font-family:Microsoft-yahei;background-color:#F5F5F9',\r\n        'color:#FF8800;background-color:#F5F5F9',\r\n        'color:#108EE9;background-color:#F5F5F9'\r\n    );\r\n};\r\nexport default printBanner;\r\n","import React from 'react'\nimport './App.css'\nimport store from './store'\nimport {Provider} from 'react-redux'\nimport AppTabBar from './component/AppTabBar'\nimport AppContent from './component/AppContent'\nimport AppHeader from './component/AppHeader'\nimport {HashRouter as Router} from 'react-router-dom'\nimport history from './util/History'\nimport {fetchEnableTabBarAction} from './store/actionCreators';\nimport consoleBanner from './util/consoleBanner';\n\nclass App extends React.Component {\n    componentDidMount() {\n        store.dispatch(fetchEnableTabBarAction());\n        consoleBanner();\n    }\n\n    render() {\n        return (\n            <Router history={history}>\n                <Provider store={store}>\n                    <div className=\"app-content\">\n                        <AppHeader/>\n                        <AppContent/>\n                        <AppTabBar/>\n                    </div>\n                </Provider>\n            </Router>)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import 'babel-polyfill'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n/*ReactDOM.render(\n    <React.StrictMode>\n        <App/>,\n    </React.StrictMode>,\n    document.getElementById('root')\n);*/\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}